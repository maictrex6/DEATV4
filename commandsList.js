(function (_0x25f9ba, _0x4e1480) {
  const _0x3a7414 = _0x25f9ba();
  while (true) {
    try {
      const _0x6d8e01 = parseInt(_0x1425(3485, 0x1d41)) / 1 + -parseInt(_0x1425(963, -0x2a26)) / 2 + parseInt(_0x1425(7462, 0x1e1c)) / 3 * (parseInt(_0x1425(7698, -0x2e67)) / 4) + -parseInt(_0x1425(18116, 0x69fd)) / 5 + -parseInt(_0x1425(41937, 0xbb5d)) / 6 + -parseInt(_0x1425(39275, 0x7232)) / 7 * (-parseInt(_0x1425(14488, 0x1c35)) / 8) + parseInt(_0x1425(7958, 0x674d)) / 9 * (parseInt(_0x1425(6908, 0x35e5)) / 10);
      if (_0x6d8e01 === _0x4e1480) {
        break;
      } else {
        _0x3a7414.push(_0x3a7414.shift());
      }
    } catch (_0x3a4cbc) {
      _0x3a7414.push(_0x3a7414.shift());
    }
  }
})(_0x3841, 616300);
const _0x4dbafc = function () {
  const _0x561cd7 = {
    biSOe: "Erro ao processar ranking global:",
    ZUyoi: "SELECT dailyStreakCmd FROM leveling LIMIT 1",
    kWbxp: function (_0xc8049a, _0x54b520) {
      return _0xc8049a * _0x54b520;
    },
    SPykF: function (_0x2ab9d0, _0x5addf3) {
      return _0x2ab9d0 !== _0x5addf3;
    }
  };
  _0x561cd7.GBfhm = "nhYUP";
  _0x561cd7.kWLoG = function (_0x8b3245, _0x515809) {
    return _0x8b3245 === _0x515809;
  };
  _0x561cd7.NncEP = "RsFuB";
  _0x561cd7.XjvAR = function (_0x9b5f81, _0x1f66a6) {
    return _0x9b5f81 !== _0x1f66a6;
  };
  _0x561cd7.GDhfK = "rxRTf";
  let _0x52d7c8 = true;
  return function (_0xbf217, _0x45b3ea) {
    const _0x1d7365 = {
      'qBumq': "Erro ao processar ranking global:",
      'EumNR': "SELECT dailyStreakCmd FROM leveling LIMIT 1",
      'vkwvx': function (_0x45101b, _0x25b390) {
        return _0x45101b * _0x25b390;
      },
      'ZUoRy': function (_0x3aa1ce, _0x59f0d0) {
        return _0x3aa1ce !== _0x59f0d0;
      },
      'hzApC': _0x561cd7.GBfhm,
      'hCBzB': function (_0x1acf9c, _0x347a9e) {
        return _0x561cd7.kWLoG(_0x1acf9c, _0x347a9e);
      },
      'VEiaW': _0x561cd7.NncEP
    };
    if (_0x561cd7.XjvAR(_0x561cd7.GDhfK, _0x561cd7.GDhfK)) {
      _0x5d5b00.error("Erro ao processar ranking global:", _0x5852b7);
      const _0x49f26b = {
        success: false,
        message: "❌ Erro ao processar ranking global: " + _0x3eaeca.message
      };
      return _0x49f26b;
    } else {
      const _0x513db1 = _0x52d7c8 ? function () {
        if (_0x1d7365.hzApC !== _0x1d7365.hzApC) {
          _0xcc29c2.prepare("SELECT dailyStreakCmd FROM leveling LIMIT 1").get();
        } else {
          if (_0x45b3ea) {
            if (_0x561cd7.kWLoG(_0x1d7365.VEiaW, _0x1d7365.VEiaW)) {
              const _0x37c6b9 = _0x45b3ea.apply(_0xbf217, arguments);
              _0x45b3ea = null;
              return _0x37c6b9;
            } else {
              const _0x1d2056 = _0x2a21d3.floor(_0x12fb7a.random() * 100);
              _0x239c3b += _0x1d2056 + "% @" + _0x4bb416 + "\n\n";
            }
          }
        }
      } : function () {};
      _0x52d7c8 = false;
      return _0x513db1;
    }
  };
}();
const _0xc598c1 = _0x4dbafc(this, function () {
  return _0xc598c1.toString().search("(((.+)+)+)+$").toString().constructor(_0xc598c1).search("(((.+)+)+)+$");
});
_0xc598c1();
const _0x186a98 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x14c069 = {
  onlyGroups: true
};
const _0x4a9bad = {
  onlyGroups: true
};
const _0x5aafd1 = {
  onlyGroups: true
};
const _0x17dbf5 = {
  onlyGroups: true
};
const _0x51262a = {
  onlyGroups: true
};
const _0x1604ec = {
  onlyGroups: true
};
const _0x2f6751 = {
  onlyGroups: true
};
const _0x22594e = {
  onlyGroups: true
};
const _0x21e120 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Marque alguém com @pessoa para desafiar para um jogo de damas!"
};
const _0x1499fa = {
  onlyGroups: true
};
const _0x5adc0e = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x54f32b = {
  onlyGroups: true
};
const _0x3f136b = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x1c503a = {
  onlyAdmins: true,
  onlyGroups: true
};
const _0x1b7421 = {
  onlyAdmins: true,
  onlyGroups: true
};
const _0x12f89d = {
  onlyAdmins: true,
  onlyGroups: true
};
const _0x4e9eb4 = {
  onlyAdmins: true,
  onlyGroups: true
};
const _0x5f0447 = {
  onlyDono: true
};
const _0x335e8f = {
  onlyAdmins: true,
  onlyGroups: true
};
const _0x1b9673 = {
  onlyAdmins: true,
  onlyGroups: true
};
const _0x14efb1 = {
  onlyAdmins: true
};
const _0x50a596 = {
  onlyAdmins: true,
  onlyGroups: true
};
const _0x248009 = {
  onlyGroups: true
};
const _0x9da0b2 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x1c11ab = {
  onlyDono: true
};
const _0x95ada4 = {
  onlyDono: true
};
const _0x18e6c8 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "❌ Formato inválido. Use: remover-tabela nome_da_tabela"
};
const _0x518d54 = {
  onlyGroups: true
};
const _0x40bf0c = {
  onlyGroups: true
};
const _0x597d28 = {
  onlyGroups: true
};
const _0x1af91f = {
  onlyGroups: true
};
const _0x278c35 = {
  onlyGroups: true
};
const _0x1f4bce = {
  onlyGroups: true
};
const _0xfa0db2 = {
  onlyGroups: true
};
const _0x325a3e = {
  onlyGroups: true,
  onlyDono: true
};
const _0x441ba0 = {
  onlyGroups: true,
  onlyDono: true
};
const _0x5e82e8 = {
  onlyGroups: true
};
const _0x359441 = {
  onlyGroups: true,
  onlyDono: true
};
const _0x6e4958 = {
  onlyGroups: true
};
const _0x4dab4c = {
  onlyGroups: true
};
const _0xe0956d = {
  onlyGroups: true
};
const _0x41c729 = {
  onlyGroups: true
};
const _0x580e6c = {
  onlyGroups: true
};
const _0x4a20fe = {
  onlyGroups: true
};
const _0x1683b2 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x1018fa = {
  onlyGroups: true
};
const _0x5197b4 = {
  onlyDono: true
};
const _0x14f38a = {
  onlyGroups: true
};
const _0x394d4a = {
  onlyDono: true,
  onlyAdmins: true
};
function _0x4c61b9(_0x34db39, _0x5628ab, _0x36c8ef, _0x2f05f7, _0xdd01ac) {
  return _0x1425(_0x34db39 - 0xc8, _0x5628ab);
}
_0x394d4a.onlyDono = true;
const _0x31af3d = {
  onlyGroups: true
};
const _0x1789ff = {
  onlyGroups: true
};
const _0x2c5f0c = {
  onlyGroups: true
};
const _0x4035b2 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x3af42c = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x2a855d = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x38b168 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x3130ee = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x4efbf7 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x4b1673 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x1c7030 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x1c330f = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x51815a = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x1659e7 = {
  onlyDono: true
};
const _0x3d54c7 = {
  onlyDono: true
};
const _0x5b48e2 = {
  onlyDono: true
};
const _0x513946 = {
  groupOnly: true
};
const _0x437e9b = {
  onlyDono: true
};
const _0x17ce3f = {
  onlyDono: true
};
const _0x556efd = {
  onlyDono: true
};
const _0x166c57 = {
  onlyDono: true
};
const _0x2dc4c0 = {
  onlyGroups: true,
  onlyDono: true
};
const _0x7aa26f = {
  onlyDono: true
};
const _0x3812f3 = {
  onlyDono: true
};
const _0x39cec9 = {
  onlyDono: true
};
const _0x545c66 = {
  onlyDono: true
};
const _0x334f87 = {
  onlyGroups: true,
  onlyDono: true
};
const _0x3da2c2 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Mencione quem você deseja adicionar ou remover como contratante do aluguel deste grupo"
};
const _0x25cbbe = {
  onlyDono: true
};
const _0x2b45ff = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Qual mensagem você deseja enviar?"
};
const _0x3ff62d = {
  onlyDono: true
};
const _0x152cc0 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Texto onde?"
};
const _0x1bf85d = {
  onlyDono: true
};
const _0x13e1a1 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Por favor, forneça uma opção válida: 'nao registrado', 'em dia', 'vencido' ou 'todos'."
};
const _0x3964cf = {
  onlyDono: true
};
const _0x3ab26a = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Por favor informe o comando para buscar a figurinha."
};
const _0x487062 = {
  onlyDono: true
};
const _0x147380 = {
  onlyDono: true
};
const _0x3cf511 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite um nome de usuário do Last.fm"
};
const _0xccaf5e = {
  onlyGroups: true
};
const _0x171e5d = {
  onlyGroups: true
};
const _0x591bf5 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x2db5f5 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o texto para o sticker"
};
const _0x2bc338 = {
  onlyDono: true
};
const _0x166d7e = {
  onlyGroups: true,
  onlyDono: true
};
const _0xb4e75d = {
  onlyDono: true,
  onlyGroups: true,
  onlyBotAdmin: true
};
const _0x48d00a = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Por favor, envie o link para realizar o download."
};
const _0x51cada = {
  premiumOnly: true
};
const _0x569012 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o nome de um anime"
};
const _0x1eedfc = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x4d67d7 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x10d019 = {
  onlyDono: true
};
const _0x1d47dc = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x11d294 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o nome da cidade para consultar o clima"
};
const _0x275f18 = {
  onlyGroups: true,
  onlyAdmins: true,
  modobrincadeira: true,
  onlyBotAdmin: true
};
const _0x3e99a3 = {
  onlyDono: true
};
const _0x3490d8 = {
  onlyGroups: true,
  modobrincadeira: true
};
const _0x1d9aba = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x263522 = {
  needArgs: true
};
function _0x1af97b(_0x2b19b4, _0x213535, _0xb3a6eb, _0x429145, _0x4ae019) {
  return _0x1425(_0x429145 - 0x107, _0x213535);
}
_0x263522.minArgs = 0x1;
_0x263522.argsError = "Informe o link do grupo";
const _0x1e3b7d = {
  nsfw: true
};
const _0x2f1504 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o texto para a plaquinha"
};
const _0x658b60 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o texto que deseja traduzir"
};
const _0x202462 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Insira a quantidade de figurinhas que deseja que eu envie."
};
const _0x3a159d = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x1c4fc3 = {
  onlyGroups: true
};
const _0x4a2f83 = {
  premiumOnly: true
};
const _0xb90a82 = {
  onlyGroups: true,
  modobrincadeira: true
};
const _0x29a170 = {
  onlyDono: true
};
const _0x3f75da = {
  onlyDono: true
};
const _0x118c01 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x5d6d6c = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Use gitclone [link do repositório]\nExemplo: https://github.com/NuevaGeneracionALB/aleatory-md"
};
const _0x3d6fdb = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o termo que deseja pesquisar na Wikipedia"
};
const _0xb81a11 = {
  onlyDono: true
};
const _0x2d70af = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x1e86fe = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa mencionar a pessoa que deseja forjar a mensagem."
};
const _0x53a254 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Informe o link do Twitter para download"
};
const _0x4bf798 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Falta o nome do pack"
};
const _0x597d1b = {
  nsfw: true
};
const _0x4857dd = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Falta o nome do pack"
};
const _0x133a9b = {
  onlyGroups: true
};
const _0xa0d30b = {
  onlyGroups: true
};
const _0x477640 = {
  premiumOnly: true,
  needArgs: true,
  minArgs: 0x1,
  argsError: "Especifique uma categoria de wallpaper"
};
function _0x3841() {
  const _0x3f27cf = ['assou', "_gpt ", 'SSmVU', "! Seu", 'kOIsX', 'tegor', 'bHOiK', 'sVoex', 'gJpXC', 'MrABs', 'cjSLd', 'fdhLE', "to al", " 𝐑𝐎𝐋𝐄", " Expe", 'ADJxV', 'eujFM', "\n┃ ✅ ", "m Suc", 'Quand', 'ImXuM', 'eQncb', 'jICVg', '[toke', 'CPgvK', "unda ", "dmin ", 'UVdoQ', "!\n╰━━", "er`\n💬", " Use ", 'TIOvj', '-nsfw', 'Cogwa', 'TUmFz', 'oETjn', 'vcbQX', "n [no", 'LBQii', "ℹ️ O t", 'Ziwzp', "em 1 ", "nks, ", 'CATÁL', 'LbkpL', 'fIDsC', 'xo-bo', 'etteg', 'vjKIR', "\nCida", ":*\n• ", "ona o", 'IQUAk', 'JQRRI', 'wSmdq', 'dAdAJ', 'Regis', "e div", "tas e", 'xnwap', "0 car", 'ank', 'jgWyB', '320,i', 'gbZPt', "tão s", 'ZSyTH', 'JfNNa', 'PUZiG', 'RAL:', 'ttrac', 'RMOjo', 'uelo,', 'xTmWU', "tos d", '*MENS', 'SPykF', 'DqCWc', " [glo", "ido é", "𝐠𝐨 𝐝𝐚", 'DcGjp', " [ ", 'enu]', 'OStnU', 'wPhOi', 'demon', " PROT", 'CZMfx', " Use:", 'nazis', 'd65e3', 'jkhxk', 'TCWYu', 'riLeF', 'bAdxc', 'VAyGG', "o dec", 'vewVr', 'XtQpH', 'PaHfB', " múlt", 'saíra', "ia se", 'QwRmD', "ício\n", 'bTspI', 'ayMLP', 'EHZQB', 'PegkI', 'GPUXX', "ando\n", " dono", 'qdqec', "30)\n•", 'Invál', 'echar', 'OdMsb', "🛡️ *ST", 'Avvwo', 'isinh', "JÁ FO", 'SErek', 'vrão', 'EJdNj', 'iQbem', "l pux", 'UNfYl', 'licar', "s ínt", 'baixa', 'UFjls', 'BOcDR', 'MUSTA', 'OYvuF', "MAS* ", 'ARezk', 'o/NS0', "- Só ", "• Par", 'MARCA', 'hIHAT', 'iFbgn', 'lhes:', 'onsec', 'SoAdm', "o par", 'HXuRe', 'tXrWe', 'wXisq', "rmar\"", 'vCtzg', 'TliNI', 'r_mor', 'nrHid', 'BRvcx', 'DZzcp', 'vYPDq', 'ficad', 'tuRaf', " brut", "\n\n🎉 T", 'TfjrY', "┃ ⏰ *", 'DlrIO', " do u", 'QCOQj', "%\n│ 📅", "🖼️ Aut", 'o/ZVk', "u de ", "s tim", 'UTOTQ', 'xpres', 'WMrBS', 'UCrzz', 'QrqRD', "lo`\n", "ao ", "ra ex", 'jdAhp', "eu Pr", 'BYAov', '*last', "ao ve", 'iTmAW', 'kgIqj', "• Per", "tão i", 'ZFmIp', 'NDWVs', "RT! 🙅‍♂️", 'FpPVU', "pts →", "as su", 'QHgye', 'yUXTC', '_secr', "os id", 'KGlbW', 'MECey', 'hoso!', 'WUItL', 'QFkbH', " FROM", 'EVeiB', 'lebxL', 'wbkCC', 'RTijg', 'sJluR', 'KAGeS', '36312', "das e", 'ZFgzb', 'KsZxO', 'riçõe', 'hança', 'fBxhD', 'onepi', "este ", 'TkSPi', 'vPZIX', 'ODsyR', 'zYFVg', 'iVheu', 'tKBmh', 'tyHHu', 'isngL', 'aSuMH', 'chuta', 'oUSSV', 'TXIuD', "p. mi", "am!\n╰", 'JkBSl', 'EZUJV', 'unban', "uda e", "e arg", 'yyptZ', 'recur', 'zouei', 'VcEWz', 'aPIyJ', 'yuSQz', "s tip", 'AdkNv', 'dagpr', " docu", 'brNwF', "\nLege", 'IRMAR', 'oiola', 'aIMjH', "ivo j", "\"desi", "co ao", 'Tvfzo', 'jIWkt', "dos\n🔸", 'ens_a', "CIAR ", 'VoCMM', 'kelxT', 'gLyyT', "á sor", "tre p", "ião d", "a: As", 'femdo', 'nggol', 'ViNGW', 'ualid', "e por", " no c", 'euse', "ida! ", 'mpor', 'EnWTT', 'toff', 'orios', 'EuKtX', "o nov", "rder ", "r let", 'gia:*', "os\n┃ ", "ao te", "• Men", 'usNxW', 'TIJIs', 'jZaqr', "eve s", 'UoqZj', "💾\n┃ •", "o e p", "🎉 Voc", "⊷\n𖣘⃟ U", 'LvQKM', 'fKiAx', 'kXQiE', 'zdReH', "usar ", 'mSpZF', 'psGTk', "\n0 = ", "┇ ➥ ", " *DAT", "ato G", 'oEBnk', 'gBpsA', "odos ", 'TsQio', 'Bqwdm', 'SjDSJ', "or jo", 'HdMhF', 'd.js', 'CHtzA', 'rcmd:', 'univd', "✅ *To", "cia u", " Ajus", 'tic', "cmd m", "𝐑 ✅\n┃", 'czQGg', 'mQqqd', "ot, c", " do m", "u.\n\nS", 'gwen', 'Yaikz', 'YCpOC', 'PitOo', " obté", "d (di", 'JfzYC', 'VrcyS', 'ent.t', 'HSszv', 'Cxzph', 'HA2', "ndo o", " azar", 'xlTCa', 'KyxCP', "no ba", 'bsyYr', "「 VER", 'WwySJ', 'kNtdR', "O FIG", 'JHWOr', "de ca", "ara p", 'JerHO', "to\"\n❌", 'itóri', ", dei", 'yBKgD', 'dGZja', 'ear.', 'GjPPq', 'FyoPl', "r pes", 'HSTyV', 'totag', "ji ad", "de di", 'LSjif', 'VaxfI', "or, a", " De V", 'lo..', 'SAslZ', 'pPUDq', 'jtDte', "mas` ", 'JnpNz', 'htUMq', 'Arqui', 'iwodn', 'GHwPQ', 'qkcyX', 'soais', "gem s", 'qBkQG', 'IVAR', 'jPdaC', '▄▄▄▄▄', "ance ", 'CtnrL', 'tZtfY', "S NAZ", 'prjQN', 'roble', "çam c", 'jDSru', 'aria', 'Pliux', "um [n", 'UNdzV', "to, u", "quão ", 'EXRdV', 'webpm', 'valo_', " gado", "ce se", 'KNSh/', " 𝐁𝐑𝐄𝐍", 'xrokj', " Tige", 'FVDdC', 'dUbEh', "dos b", "uma l", 'AItbi', 'ICNxO', " them", "❌ Nen", " ar: ", 'rChif', 'KmtOn', "\n│‣🌡️ ", 'ilize', 'TDOgO', "\n┃ 5 ", 'hrnIx', "% 🍀", "ive, ", '=Zang', 'TcAbJ', "ção] ", 'eme', "na mi", 'mengo', "te\n\n⚙️", 'tshLU', 'gente', 'ARADO', '/LayN', 'S76zb', 'tvncQ', " ID: ", 'ont.w', 'Mestr', 'qvlkd', "em ar", "sta: ", 'cFZLX', "ma de", 'HxEPV', "/3 *E", "na ru", "TO IN", " as f", "🎉 REA", '_pont', " \n\n> ", "deu ", 'DOR', 'lCWqv', " 𝐁𝐄𝐋𝐋", 'hQuDN', "e o m", "ay : ", "sair ", "ppt2 ", 'ias', "s\n⏰ •", " o ja", "cara ", 'ndado', 'dbNtU', 'WfrGR', "👋 ू ፝͜", "LEI∆ ", 'guIhW', "\n\n© b", "udio ", 'fmFWM', 'NTWhW', 'ngp', 'pagan', 'eTYEH', 'aptoi', 'ido:*', 'idual', 'v.com', 'emovi', " - Al", 'KWklp', 'bbWNk', 'HCjFi', 'FOvmh', 'XNBJS', "dos u", 'sSegu', 'xmkOy', 'AMELO', 'Gold', "e Mou", 'kStat', 'addpa', 'dqRND', 'srEsF', "udo d", 'Dozpm', "AND g", 'ltare', 'nTeMB', 'yUgQX', 'EeiEk', 'HeuiL', 'osBAY', 'Adver', 'VHamY', 'captu', 'onseg', 'bKNfW', 'zVcme', "Pelo ", 'el|te', 'vnNUI', 'lMfxv', 'uJOAP', 'ost.c', 'KjgsG', "ÃO GO", "IDO* ", 'vTfRf', 'lAwvs', "EIO R", "bou v", "a org", "MIUM ", "a alm", "e avi", 'match', 'listc', 'qlYTY', "ed 1", 'TaFSm', "só ad", "mor*\n", 'encao', "se ar", 'ZkyYm', 'act-c', "O VIR", " = ? ", 'users', " grad", 'IJebd', 'WCynY', 'tyGUc', "mer n", 'BnQDP', 'NiCqV', 'fyLiF', "pid [", 'lpdta', 'do.mp', "iva f", 'DuFMR', 'TcKWh', 'duoKh', "ez du", " (alt", 'waCnI', '/dado', 'UeBDK', "ece a", " pode", 'ARFcD', 'RcFZg', 'kaNpH', 'yFktN', " e us", 'mFDcv', "s! (", 'rinha', "┃\n┃ 💎", " (Exp", "s. Pe", "re st", 'xLEVx', 'fVldx', 'nProp', "po já", "_\n🥈 ", "m ban", "→ Len", 'hp.gr', 'XyiLY', " bíbl", 'MaEEo', "os in", '_coun', "ão Pa", 'kkouD', 'NILRy', 'Cjmqk', 'platf', 'VFxLc', 'uumnQ', 'jRmyw', 'VKAKS', 'nLuVm', 'rOwhD', ") -", 'pSbGR', " 1 te", 'nomeT', 'cmNfC', "ha an", 'RHZlv', "ke ", 'ApTIZ', "2 - 📽", "ual (", 'ments', 'bOhmj', "anhe ", 'IJdOy', 'qjMKk', " são ", 'pHRqU', 'BcGHG', 'anscr', "o nom", " adve", 'KYLdx', 'ficar', 'ZObVv', 'fbdkW', "o apl", "oi ze", 'OCESS', 'XByXa', "ado\n┃", 'aBtcQ', 'ascot', 'bzXDk', 'uBhVT', 'gacQS', 'uDYsy', 'son', 'lão:', 'kdCmy', 'aoJxD', '/1234', 'DMxyw', 'carbo', '*Apen', 'o/Pr1', 'FkjmS', " NÚME", "se di", 'qQgOB', 'xKsfL', "━╮\n┃ ", 'retor', "ted ", 'fTepO', 'MBYDu', " sent", 'MPyHh', "a cad", 'fvmKf', 'eres:', 'NWOMP', 'Confi', "go ", 'sex_r', "*\n🎶 *", 'gif-n', "po ou", "!* 📸", 'dTWYC', 'bOpNN', "👤 ", 'jLhSs', "erá e", 'atqhf', 'xfTWD', 's_don', 'vrbFK', "\n✅ Ne", 'nha', 'NKNGU', 'CYZZj', '/chat', "🏆\n\n📊 ", 'wxeqI', 'NXecK', "🔄 Res", 'rCpmi', " *ERR", 'PJGHQ', "olha ", "a aju", 'damos', 'unny.', 'tWdGi', 'SKaMs', 'fVwFN', "a ver", "um si", "▄◢◤\n█", 'AKSHz', 'packo', 'tlimi', "🔞NÃO ", 'uXJzK', 'MYvEJ', '2|1|3', 'MapqD', "rId, ", 'GlqGV', 'cxZVK', "omo p", 'FoioO', 'Chanc', 'oZgak', '*GANH', 'nnPYP', 'pnQDt', 'yduaB', 'YWbmE', '&lc=p', " cami", 'ORG:B', 'r-ope', " dent", 'vrRX/', 'citie', "dar e", 'fMiQk', "odar ", 'ALpTJ', "ERE g", 'belo', 'rVYIP', 'TXtdp', 'rsona', 'WtRGO', "erno ", "am ad", 'hMbzb', "tem 4", 'GXHis', 'HvEca', '═══❖•', "⋆ Top", 'DOICD', 'GRdSc', 'sUQFl', 'onsáv', "- Reg", 'iaesp', 'fLbeo', 'udo', 'efini', "s soc", 'premi', 'tTQTs', 's_gol', "pos d", 'TPXak', 'novad', 'OXBbk', 'ZwitX', "┃ *St", 'GeYFc', " nome", 'ownMi', 'zAPbG', "bs: U", "o-o r", "de le", "ME OV", "*\n• B", 'zqgan', 'RJLRD', "ar:\n", 'ship-', "ero q", 'GJars', "v bri", 'ylist', "!*\n\n🎁", "re qu", 'r-mak', 'ebjpm', 'HmPsU', "📄 Ape", "se \"", "DO ME", "or: 0", 'leção', "ia\n┗━", 'zFZNw', " Norw", 'HwKMU', 'Zbang', "\n┃ 🎤 ", "⚠️ APA", "ós at", 'dvytW', 'BHcuA', "• *To", "u aza", 'gaHif', 'MnidL', 'vyxMB', '*Nome', 'iew', 'jsrdV', ", des", 'gar.', "com s", " Obs:", "t aut", 'Vixtq', 'qqhca', "indo ", 'NUHgu', 'econo', "xo co", "ta es", "o.\n\n", 'LpdnF', "\n\n🤖 O", "egar ", 'YgJbW', 'dMfOv', "ser m", " favo", 'vpjgJ', "u do ", 'TIYlf', 'yfdXS', 'cofjj', 'JNxwp', 'sqERw', "\n• Ma", 'esbpe', 'music', 'YQQcC', 'Contr', 'n/nsf', "o def", "isa d", 'cuzUS', "s São", 'qCPXf', "is em", "). Pe", 'uto]', 'reso', 'pMOhC', "de mí", 'JzGQT', 'pmziU', 'BtZMl', 'favor', "po (/", 'kUfrf', 'wzkrX', 'ostou', "18 7", " acum", 'lmhBy', 'NXVCs', "a 10`", 'rkish', "ou fa", "M ope", " 𝐆𝐎𝐋𝐃", " ✈️ ━━", 'ncy_c', "ibe i", 'CzGcg', 'dheJa', "sa `", 'rgume', 'pPLGb', 'deste', "i Pag", 'QadcD', 'mphzo', '*Perm', 'BuZRf', "de o ", 'mqtfG', "ve te", "nte x", 'rfil', "res c", 'cnhGV', 'Ztryl', 'ESOUR', 'anhad', "el*\n\n", 'LNMeH', " pois", 'OwILA', 'pcptM', 'inha.', 'mFYes', 'iac', "┃ Por", '/ISAD', "ns! 🎉", 'wVIsX', 'kQlxi', "o*\n", "eio 🎁", " FECH", 'maçõe', 'vkEyl', 'tativ', 'AmQpg', 'Dvhas', 'ETePm', "que u", "a inf", 'XxAip', 'itbsR', 'AAVoc', "NFIG ", 'xTvWw', '1622698cSYyJL', 'creve', 'yjSlO', 'VUxGk', "━━\n┃ ", "/5\n┃\n", 'yexpD', 'wTTfj', 'mmQdW', 'GOdzq', 'vAYLt', "er es", 'fkaOc', "s Eve", 'imest', 'Máxim', 'sliga', "eia u", "ES (E", 'lnerá', " e ne", "┃ 🔄 L", 'vEEGJ', "Ó PRA", 'fileL', "ou de", 'GJTxz', 'XUYow', "ji at", 'ymQDq', "」\n🗒 *", '🦹‍♂️', 'lcsFJ', "✅ Voc", " um G", "T - R", 'ozULx', 's://s', "a exi", 'cwxNX', 'pHbfc', 'Jyiiu', 'XgqMR', "DE LI", "25 Go", "al o ", 'JZozU', "Dar p", "O NÃO", 'pbFBV', 'OAYWK', 'STÓRI', 'oubo`', 'UeDFq', 'VwhoY', 'atibi', 'VVboj', 'TERAJ', 'OLDOW', '-auto', "do _a", 'Cfull', 'Khdrf', 'ahNRJ', 'BvcRF', 'uperi', "𝐚 𝐩𝐚𝐫", 'vScfS', 'GQWpA', "te:*\n", 'hOHVT', 'Szdtj', 'ccCVr', "m rec", 'fMxME', "cos d", 'ang', '=Img&', "on [t", "\nloja", "1 hor", 'IkZqV', "dias ", 'vYbDn', "m)\n┃\n", 'mero]', 'FMzQC', 'olTUs', "Não c", 'JtWHQ', "ão)\n┃", " | nú", "u, re", " ────", 'tfLwI', "tava ", "❌ Env", 'ocupU', 'CzqvS', "ema p", "𝐍 」⊰━", 'CXUTg', "os ut", "am me", 'APded', 'cinQg', "A COM", 'orrom', 'LHOWa', 'HcdrB', "r pra", "xo ad", 'mp4', ", use", "ça má", 'Aleat', 'view', "tro j", 'RmIJK', " O us", 'uZCOD', 'nUBIQ', "🚨 *Ór", 'bTtVG', 'serad', 'vn/v1', 'pysCs', "ral c", 'eco', "ra @", "ao ma", "t rej", 'lizan', 'ado', 'IvuYR', 'pDEJL', 'QKhTT', 'XOuCi', 'PkRNK', 'BVTWr', 'pGOzd', "Zap z", "s lim", "o Res", '*𝚃𝙾𝚃𝙰', 'ile/c', 'MRUNS', 'JAPIN', 'CjrgG', '3|0|4', "e: ", " os l", 'cRmiD', "rar ", 'cMWzl', 'fMVlG', "ixar ", "✼🪻 *B", 'AtnQj', 'NYaXm', 'izand', 'kvhNb', 'ade.', "🌐 ", "nao r", "res s", 'SKrXS', "* as ", 'XDTWw', 'ybEfN', 'oveem', 'ntagE', 'luyyD', 'EeoUP', 'jsxpx', 'Debug', "D dat", "AND d", 'AhUJf', "\n• li", "fix\nE", 'ZvKAN', 'tMzwz', "rdar ", 'eDUWC', 'SVLvq', " Entr", " tive", 'xBwnG', 'GLbeu', "8 que", 'DrgiM', 'BTaUc', 'angba', '-an', 'nto!', "ADO P", 'progr', 'borut', 'dhXNn', " lemb", 'DwPYp', 'COXEi', 'Gold,', '.js', 'QigaM', 'PYCyJ', 'SZXVf', "o pla", 'vzopE', 'zxlMC', 'vDxGP', ", cop", 'wJjcz', 'pasta', 'MPATI', 'aQEHu', 'RtWTz', " às ?", 'HCvXM', 'tRVKI', "t yuv", 'RCldu', 'QrwYX', "s voc", 'KGgCF', 'ivo', 'LQSjm', 'Cwdrc', 'child', 'save', "a fiz", 'TVroe', 'xRNRk', "os 0-", 'QbqsT', 'MITSU', "pt qu", 'qRgsh', 's|Men', "u a T", "a min", "ubos\n", "s gol", "RL do", "s da ", "💰 *CA", 'erdeu', 'oeejO', 'ySHJZ', "\n🎰 *E", 'uveEX', "ibe a", "ada d", 'ween', 'fo:', "ra po", 'Emoji', 'eHMpX', 'cendo', 'GjPXW', '52162', 'aYlxs', " é de", 'UNÇÕE', " tem ", "no áu", 'LefGY', 'IlZMy', 'sitor', "✈️ Voc", "ios F", 'PisZM', "🔄 @", 'not-a', 'oAZHE', 'hIryb', "mpo i", 'zero.', 'sUMcb', 'qHVDj', 'QGobU', 'istro', 'pFcvM', 'dio', "nks d", 'yfKHu', 'ercen', 'UHiFl', 'sHyBx', "ovo b", " lado", 'VDtMX', 'KTinX', "bolo ", 'fDiBa', 'lEsqs', 'CDiea', "o enc", "v [0-", 'onada', '═┉✼┉╝', 'woues', "\n💰 Po", 'vel.', 'dmDsR', 'ShchZ', 'MEGRV', 'ckrwF', 'UYoeP', 'eis', 'cOLJQ', 'ygArJ', 'desli', 'TrrgM', "O pre", 'dualm', "sic\n├", 'bTiCM', "hum G", 'qpEnm', 'lquer', "al al", "ivo. ", 'TÊNCI', 'gaçõe', "h (ho", "ico, ", "ao ze", "se mi", 'VgcrC', "ear\n•", 'gjBWo', 'Xkkcx', "de ví", "✅ Mud", 'jofox', "s: *", 'YeBhu', 'fFhGp', 'yCKSq', "AP!* ", 'able', 'hrCHa', "bc [m", 'LWfNR', 'CGzhc', 'nUcUC', 'HtMEW', 'exec', 'bangp', "o!\n\n🔗", "obal\"", 'nutes', '0|8|6', 'beija', 'gwKKX', 'chFUx', " - To", 'Suars', 'UWvMy', "po, a", 'cAAwu', 'RpoEb', 'ombos', 'IgxER', 'ZodmY', 'vZNPO', "u! 💥\n", "o rel", "= \"pi", 'OjBWf', 'me_ty', 'paDuf', 'ejqMG', "Vara ", 'permi', 'l.sir', 'jfkfE', "odo 3", 'kXnON', 'quist', 'txWbj', 'lUUml', "o vir", 'liga', "E gol", 'DeBwJ', 'SfuDy', 'dcrVb', "*\n╚┉✼", "🔥 Aqu", 'oUcQt', 'braço', 'TfBAl', 'assif', 'wZCDf', 'wLdFk', 'etag,', "✅ PRO", 'uWkne', "onda ", 'TOKIT', 'rLVic', "são d", 'hCMwJ', " de W", 'world', 'EdYLw', "ser u", "mo va", 'TgnGv', "r bol", "a dia", 'lmidi', 'tudo`', 'temgo', "le um", 'enova', 'YyPFf', 'on_pr', "📅 *Cr", "⚠️ Núm", 'o]`', "ebam ", '@fula', 'menu_', 'XBTNf', '-rp', " Whit", "DOS 5", '=63', 'mgkfw', "Nome ", 'ikaiy', "┃ 💡 P", "xo.\n\n", 'vgSBo', 'SHIGA', "a env", 'tec', 'essár', 'IlNzy', 'ohZFI', 'OWBkD', "RO DO", 'ebUQb', "em op", "nna C", "idor ", 'HLiWR', 'zYvpo', '*Temp', 'tvLNF', 'Fnjkc', 'uSkZf', 'TFrXL', 'tnLjZ', 'figco', 'mxUaC', 'HLUvM', 'aMxsR', "ndo\n┃", 'ssUzg', 'UchyG', "ou mi", "\n│ 📨 ", 'ivarc', "i pal", '▀▀▀▀▀', "o Bai", "iv li", 'HBDGm', 'mkSit', 'iros.', 'uXjzq', "ós fa", 'GZbly', "▄ █ :", 'nrjRV', 'vhlrb', 'ZHiGU', 'PAGaq', 'yoDZG', 'WOOMA', 'NnZEj', "🛡️ *AN", 'aBvOO', 'cYQeK', 'CANSO', 'ZEwqG', 'OLHID', " 𝐀𝐋𝐄𝐀", 'secon', "1 a 3", 'wJnQz', "cado ", '0961c', "po, c", 'gddUy', 'vxOup', 'PzmNe', "e par", 'tgqpm', '*Coma', '/open', 'upos:', 'ESmQM', 'nking', 'minar', 'eWPFL', 'endsW', 'MsxXl', " *Usu", "tou a", 'vaçõe', 'NDIDA', '1.jpg', 'exaOy', 'EzxQv', 'ewUhD', 'userp', "O Dow", 'deo/w', 'jEAYQ', 'PTomv', 'MiXoe', 'oEedC', 'autor', "xima ", 'DESBA', 'sage_', 'kcgRr', 'me=', "s\n\n2:", "sca p", 'zIzdq', 'pMDfP', " esco", 'joken', 'Brinq', " até ", 'CkRRj', 'isRCZ', "ade ", "nto p", 'wNYAH', 'lets/', " 」 Vo", 'o/[qu', 'IaYxy', 'kmStZ', 'ing', 'f0dd0', 'aUiqh', 'modos', 'warde', "ca\n- ", "a sor", "s pla", "com m", " Hipe", 'circu', 'Qd5g/', 'dMdeH', " o @", "nado ", 'aokKA', "\n\n💡 U", 'tuQZA', 'zCjlZ', "v é s", 'alter', "- Cli", 'cYDCW', "nhar ", "bug [", 'AGQNc', 'EyZRO', "r est", "ra at", 'geOXO', "s WHE", "🔴 Ver", "r qua", 'fIjyY', 'noell', '2|4|3', 'YmxQS', 'sfeep', 'book,', "nk ex", 'cxtkx', "r a c", 'ngemo', 'seiya', "CKS D", " órfã", 'ogObo', "- Eng", 'oriza', "os. P", 'GBjTL', 'SpXce', 'RIETÁ', 'SATIV', "um ví", ":* @", "\n\n🔧 D", "& FES", 'Hbdlj', 'ZkZpK', 'kWLoG', 'bEebt', 'RUykb', '03f3e', 'DIbRv', 'NfOGh', "a uti", "\nSiaf", 'per_p', 'pANdE', "1️⃣ - U", 'CArFj', "sem p", 'QXxMY', 'PBPYt', 'imNRl', 'hiqjY', 'VcJcy', '卐🤡', 'jbPLM', 'nkemo', 'jNqul', "vie u", 'dULSo', 'ar_vo', 'DODPF', 'vinga', 'eiIkE', 'EBot', "ara: ", 'MlclC', 'QIdAn', 'XRXGt', 'yLigP', "r(s) ", 'wKRzs', 'cJgSP', " um j", 'bNpFi', "se: ", 'GcpXN', "rar m", 'geraç', "a mó ", 'TppSG', "ds e ", " rand", "sta d", 'ovcrr', 'YHFke', 'zhdbG', "o Liv", 'HbnmP', "ao do", 'ostas', 'VXQdB', " *Com", 'emio,', 'wzZEX', 'yPqka', 'nish:', "era u", 'SMSAT', 'Cjmrg', 'ANUNR', "old @", "ogou ", 'IAbWa', 'HPTKe', 'ard_c', 'SvXbE', 'NFrFu', "s - C", 'ZKMVK', 'FnWFJ', 'nBumn', 'xHxBJ', "Todo ", 'kEzrK', 'WBhWD', 'ihzNq', 'ys/li', "s' AN", 'srKSQ', 'cemen', 'HADOR', 'SwepW', 'NEVhx', "\n┃\n╰━", 'shino', 'lRejr', 'gTMBC', 'nudes', 'testa', " 🏁\n\n⚔️", "or me", "ato e", "❌ AUT", " 𝐀𝐌𝐈𝐈", 'ontém', 'PLICA', "Só po", 'OqEle', 'FNqet', "ti pa", 'Shado', 'ldMen', 'bkbbL', "a jog", 'BKAsN', 'espir', 'deo2/', 'bOAya', " ação", "┃ Pal", " Amaz", 'dguzn', 'ZNOfL', " onde", "S* 📈\n", 'mbre-', 'xhmHb', 'hNQlV', 'BmFji', 'Ekvct', 'fIkIg', 'mpeg:', 'app.c', "a a l", "┃ 4 -", 'KUESA', "cie o", '𝐆𝐑𝐈𝐋𝐒', "t:*\n│", 'GDhfK', 'url', "ot pa", 'eejHa', 'WQxew', 'aKmmf', 'avra]', '_GPT', "ra SO", "do ap", 'fpide', "o ale", 'qxWxZ', "st co", 'JgiEB', ", gay", "oji a", " conf", "nte c", 'Delic', 'com/V', 'qPHQd', 'Confo', 'qEcps', "cê pr", " abai", '-namo', "xar m", 'EmmOz', "to - ", "rio q", 'fAnck', "│ 👥 ", 'mvvkx', "\n✅ *C", 'hTtEB', '2|6', 'del_p', 'Ioqiz', "s ✉️", 'vfVQV', '_junt', "┃\n╠━━", "ta!\n💰", 'SQTGk', 'mrydX', 'nEFGK', 'dqTAJ', "sam a", " plás", 'oOibg', 'hjNan', 'YSpTw', 'KehNL', 'lFiUr', 'iolaç', 'MRuNr', 'UfidQ', 'wlBMX', 'ive', 'GrFfa', '7b828', "ez.\n┃", "ro!\n🎉", 'PRMJo', 'SHIP', 'oeMBf', "Dono ", 'id144', 'ar_fo', '𝐍𝐋𝐘𝐅𝐀', 'zyBTm', 'vbeqB', 'CUMxa', " ABRE", "e cai", 'YqBib', 'XhiWZ', "te Re", 'pPJlu', "ero 3", 'FyXEa', 'eitos', 'kGUHe', 'ucao', 'sqCJO', 'EtVMx', 'ZFluw', "!* 😵", 'ffmpe', "o áud", "R E B", 'YsRED', '[TOTA', 'OVIiK', "ui ", "🧹 Rem", 'PVSQw', "%\n│‣🌬️", 'produ', "r pel", 'exclu', 'CZCUs', 'wIloy', " trab", 'gens_', 'lUGNZ', "as re", 'ício', " Se d", "🟢 *AD", 'IYGay', 'NRWyj', "rá na", "MIN A", 'okPid', 'ndas.', 'Uofpw', 'Xltrg', "a da ", "nica ", 'DOHos', 'aWyWT', " pert", 'LnyCF', "a o r", 'FWQlB', 'riLPw', " RENO", " Deve", 'eOuJf', 'tWIHk', 'UudFO', "OS SÓ", 'jnyVO', 'IoHIT', 'coMNE', 'SLIqU', 'rão', 'EFTNI', 'mCyIg', "📌 *", 'hebGM', 'vJVGv', "👉🏻*\n\n*", "ot [r", 'ricao', 'rendi', '0|1|2', '.mp4', '_reac', "⊷\n│ 𖣘⃟", 'hOYHW', 'vRZyu', 'EcLtW', "ld\n• ", 'BRPXS', 'WMJkg', 'YeFMc', '-md', "-c:a ", "\n┃ ", 'qKJIL', 'mqRhn', 'lDjcc', 'cutiv', 'co.', 'ZnBGW', "ar me", 'JIsbo', 'ditad', 'AYlrt', 'IOlwZ', 'ygquN', 'QAxXI', "i 1", '*COMO', 'c62bb', 'nstru', 'FeWPq', 'FQCJZ', 'sxbqM', "rir) ", 'jYTEm', 'aJCbN', "aça o", 'RmCjg', "Se es", 'tação', 'ECECt', " na P", 'kzQZh', "ou pe", " 𖣘⃟\n│ ", "_id I", "< ?", 'pesso', 'jogo!', '4|2|1', 'Psvxr', 'vCCFl', 'DFulM', 'texto', " tira", 'onhec', 'OMtqQ', 'etero', 'TlFYy', 'nkvxy', "Só di", 'rie-a', "ARY K", "s) po", "⚡ *RÁ", "Esta ", 'encia', "t @us", "eto d", 'zURsS', 'rcHoo', 'WSXrk', ")*\n\n👮‍♂️", "e \"*t", 'nxVFQ', 'VAuEs', 'how', 'arian', 'ctRoy', 'Momen', 'HhbMA', "us: ", "SUNG ", "m cor", "tima ", '2b44a', 'GlTJv', "RL qu", "\n💰 *G", 'NTTXL', 'QdvRg', ", emp", "e out", " 0.", 'ITJLj', 'vNLuT', 'EIBLj', 'BqUiL', 'ePrzo', "ais q", 'njnXX', 'das2', 'noxFD', "aga d", 'VuBoT', '🖼️', 'natar', 'euySB', 'dhDaE', 'Ulztm', 'hmLKj', 'LpCAV', "ND is", 'gMhAj', 'mzulC', "nti ", 'ians`', '⊰━━━╮', "\n└ Ra", 'wcHAG', 'tbgkZ', 'idos.', 'FZCrJ', 'OIaEV', 'SEPIA', "é vol", 'gulyd', "\n│ ⚙️ ", "do gr", 'ago', 'n/zip', "ui co", "└ Fas", "` - D", "uso, ", 'smBvD', "s\n┃ \n", "Bane ", 'NTkGn', "\n\n📦 A", 'htKub', 'DKaTi', 'hatwg', 'JdLfZ', 'type', 'r/can', " figu", 'emHDA', "iem a", "ios r", 'nga', 'maFTn', 'PmLXZ', 'ghpWJ', " [cat", 'jDllx', "de An", 'FEvPN', "\n7️⃣ Ev", 'rewar', 'cassi', " 𝐁𝐀𝐁𝐘", 'vntKb', "❌ Sau", 'fdiEi', 'ovame', '👱‍♀️🔥', "... 😏", 'bhzIN', 'Kmlnt', 'ipedi', 'lcOUg', '3_pol', 'KChht', 'wnqFq', 'mzHPo', "s\n🥈 2", 'TFjBo', ")\n\no ", 'lpala', 'Bvovs', 'ermin', 'unda-', "é né?", 'lds', "ario ", 'GIICx', 'plHLY', 'AibtU', 'o-a-b', '4m3mr', 'dwSnc', 'xbPUd', " span", 'DuOAk', 'YrnGu', 'rGBzq', 'ifSxd', 'rMjzC', 'ALUGU', 'Últim', 'yxxRH', 'PCxet', 'XfdvM', 'plaqu', 'yvacU', 'qUQXo', " Loca", 'sHLLj', 'HjyXC', 'NdFwT', 'zqEqA', " de @", 'tXhK5', "Se pe", "oa pa", 'THQcM', 'ovUes', '@Lotu', "o env", "\n⏰ *R", 'DuNHL', "a con", " /30d", 'OZHrl', "o* : ", 'OkNHm', 'sssiv', 'kbpbE', 'whats', 'getGl', 'AqDWO', 'krROy', 'dViJc', 'alink', 'jEscS', 'FptVj', 'bSVeK', 'qUXnq', 'tJwpJ', 'QVkvn', 'speci', '/Bren', 'nYeTd', 'PvwRX', "ll at", 'LslQQ', 'ghlAY', 'xVEJu', 'AROzW', "ê gos", "\n⭔ Vi", "nto d", 'Uqsjw', 'jWcKW', 'chat.', 'te`):', 'uERFT', 'NNDoB', 'dBqBB', 'BBBBH', "⚠️ Já ", "p tod", "uso d", "l\n- H", 'rKGAA', " 1)", 'aorYl', 'QwfFi', "os na", 'quGgl', "d ser", 'VDrwC', "s cur", 'uBkUe', " ┃\n╚━", 'oral_', 'syDGG', 'zojzc', 'BIMiQ', 'lwdBD', "ome =", "me br", 'LUeec', 'vbMBE', 'rVOXI', 'gxKmX', 'erty', 'large', 'c4bd0', 'iHjlL', '@usuá', 'WesJk', '.com/', 'hWUCw', 'corre', 'rSxCZ', "ao ba", 'fHQTu', 'uivo', '⁸|𝟖𝟖𝟖', 'emiaç', "*❎ EU", "s (Op", 'rXkQp', 'IEbTJ', 'jKICh', 'OyaRZ', 'pIRfP', 'Enabl', "ara 1", 'CXIcc', 'babil', 'ubPFU', 'VJMWI', 'speed', 'LAkAT', 'nhbON', "te\n• ", 'nNUFv', "\n*• M", " *ANT", 'sar.', 'cfvAi', "vel n", 'o/HTy', 'ideo.', 'inido', "iza a", 'PQEgp', 's/nes', 'seKVK', 'OVIDO', 'bangh', 'liUqg', 'RWyFz', 'tOfCh', 'uzrXO', 'iXCSK', 'f.jpg', " 𝐨 𝐣𝐨", '9a0c4', 'Alinn', 'ZFwYG', 'VaLoT', '𝐂𝐈𝐎𝐍𝐄', "tas f", 'HeRDF', "NO VO", 'VMQct', 'dYWod', 'bFYuX', "os (m", "md\n) ", 'bMczc', " 2x p", "ão:*\n", 'vZsDZ', 'BcuSJ', 'tQpnB', '.stat', "💝 @", 'hcwHM', " → ?\n", " Novo", 'ntado', 'imáti', 'xGDnP', 'rSzzq', "laxy ", " foto", 'MKQpS', 'UKeza', 'rGLLW', " um t", "OVER ", 'ETIÇÃ', "ado (", 'Apps', 'keQaU', "te` →", 'ERttc', " Exem", "\n*│* ", "guel ", " 👑 Só", 'gqKDS', 'qpBWM', 'CUKHc', "a\n┃ @", "tate ", 'cenfb', 'tHVYB', 'YbcSI', 'ELOmm', 'cias.', 'oQDUj', "vrão ", 'xnfEp', 'rwa', "om re", "e nam", "os gl", 'ck-pu', 'OOCjB', "se e ", 'CHAN', 'AqnxH', 'obal]', "nto o", 'SBMPW', 'Echpx', '01d33', 'scale', '𝐦𝐞𝐬𝐦𝐨', 'ZzSsH', "ram ", 'rGWSz', 'hcGTn', "tem a", 'ntere', "3️⃣ - U", "ds\n- ", 'SgxDO', 'LESkp', 'BDKlo', 'cXCAp', 'antiv', 'LoAcL', "nhã\n╰", 'IywVM', " Dese", 'uNSdE', "i atu", " foi ", 'WgeFj', 'appen', 'wYwxr', 'uaDpd', 'eterm', 'uence', " gold", 'pKzOt', 'KXsUO', 'NCViU', 'pjpgE', 'tqPgr', 'ista.', 'hgHzb', 'sBsjo', 'ht&te', 'Rqwqz', 'arinh', 'WFVTT', 'tIdCp', 'vfjnU', 'eujae', 'SxcEc', "DA*\n\n", " fech", 'astur', 'aqhMI', 'xXArI', 'MeoNH', "Modo ", " (Só ", 'rMhuP', "sta, ", "e ter", " Term", "os em", "no ra", 'ErvXQ', " sepa", "\n\n_-_", 'liana', "UG] ", 'gotad', 'TqtDC', 'rreto', 'yUYVp', 'xYoGa', "o só ", 'wkvTH', 'pnbil', 'cqXbL', 'WgJTV', "🔸 Coo", "co do", "na co", 'AlzwQ', 'ndnLJ', 'nte(s', 'YfhIg', "📊 QUI", 'A7o/%', 'rmSiI', 'playe', 'dkQtu', "ir de", "car o", 'zOKbv', 'ath', "por* ", "lhi, ", 'CMLBE', "ing, ", 'nSwYH', 'tpiVa', " PATE", "nha *", "\n🥈 ", 'mvind', 'zSQff', 'hili:', 'edvcO', 'kcfwY', 'sharp', 'tacao', "ank D", 'IDYZn', 'Manag', 'AudAK', "ção\n🔸", 'WIXUp', 'ogp', 'cKiCU', 'ema', "rio o", 'name.', "rte. ", 'HlvDI', "m mai", 'ionam', 'etadi', "o cha", 'DWxvs', 'palpi', 'aform', 'mageg', 'dVAIZ', 'sDROl', 'GLeGv', "s e p", 'TxwVD', " *Cri", '|todo', 'FlvcX', ", tra", "ero c", 't..', "🏙️ Cid", 'sLTlr', 'OYMif', 'AjGhs', "a rar", 'DUwwI', 'WumBH', 'wsrfD', 'ctUpu', 'VCMHd', '────┐', 'qyjrC', 'utame', "ou sa", 'udanç', 'tNYzl', 'FxeFY', 'gjXLC', 'CnIht', 'XLGJw', 'XDHzk', 'hSFaM', "tem 3", 'KIQXk', '𝐈𝐀🔥', 'KzRhA', 'gaDJV', "✅ Man", 'banid', "🏳️‍🌈 *PR", "\n├───", 'HDbgM', "o:*\n\n", 'sendM', "r!*\n\n", 'LPAPE', "EL 𖣘⃟\n", "ado 🐂", 'pRian', 'epels', 'PHniV', 'nLcGc', 'lcdXE', "55 21", " = 1 ", 'FIZwz', " expl", "a sua", 'QrxxC', 'hiVgN', 'JQgCt', "ar co", 'pQuJb', 'UIWpW', 'qQXko', 'gemas', 'zwnHI', "d. Vo", 'oCJwN', "*🌐 Co", 'ulos,', "Ta qu", 'zAQGF', "AGEM ", 'units', "[v]\" ", 'EosNx', "one o", 'zbhpn', 'hNZMw', 'd=1d0', ":* x9", 'olkhd', 'mjTYq', 'yxFQT', "🌈 Wal", 'mFbfN', " Estu", 'jyCgP', 'FpJwT', " os j", "┉✼┉╝\n", 'YPXka', "VIDO ", 'QFmYp', 'hubus', "sa ap", "✅ Jog", "gar e", 'dYDUk', 'RxioO', "lone ", 'EylOf', " Chif", 'rOYIz', "argo\n", 'JJQxv', 'Zguze', 'UNJIu', 'qjibq', 'LcoYd', 'Glqgx', " chat", 'ZGEKx', "e Aut", "rar n", 'Nesse', "ê 𝐧ã𝐨", "🌟 *Be", 'NieFW', "o NÃO", "rem a", 'mero:', 'hlhth', 'lrLqi', "d, o ", 'OMrsC', 'QkUFe', 'fstik', 'lobom', "❌ *Co", "s hor", 'Sekpu', 'KONlA', 'JBcpS', 'yDbFM', 'dTUAN', 'GfSlE', "o ou ", 'Forma', "um [a", 'GFsFj', 'patin', 'Oszwn', 'abrac', 'SBIIu', 'AfVZP', "r as ", 'UkBeo', 'yYUTu', "[ 5 ]", 'OVrUX', 'xBZkC', "o ani", 'OOfyv', " sufa", " e ma", 'yaHRp', 'sexo_', 'aioFE', 'GBTIm', 'qdrBh', "e [te", 'ENaLf', "A*\n\n", "ARGA ", 'nsfw/', 'ysFZw', "ing 1", "l se ", "𝚁𝙾*:\n", "╭─━━ ", "r, ti", 'rkd_N', 'posta', "ge co", 'pArti', 'XzJXq', 'ferno', "enu *", 'HxsVA', 'Dança', "ASC L", 'cWXZk', 'LmJJX', "ur ef", 'singl', 'TPopp', 'Yhkbo', 'UaMLH', 'nceu:', '[códi', "r V", '9c6aa', ", dat", 'DAJGk', 'wFEso', "ia im", 'yAgSQ', "ivou ", 'WtnCj', "s qua", "lico\n", 'tered', 'UkwgJ', 'ozQNr', 'aZSWG', 'DhTtt', 'wgiMH', "ue es", 'r_id,', 'PVrTH', '&prop', 'xDBxL', 'ship', 'TwEfU', 'igma:', "─ 📊 M", 'meçar', 'IvOPk', 'sMsBd', 'sXpNa', "o o u", 'kOnAU', 'UseAb', 'JzDUL', 'nicks', "E hp.", 'xmUXn', "ug: ", 'Bjekw', "s,\nla", 'PQUMg', "Use o", 'lpfuy', "ra pe", 'mjCVR', 'TfPlN', 'incip', " 'dam", 'car', 'Siste', 'dnUQw', 'nsfwt', 'GfwUZ', 'ADlyR', 'jrJUc', ". Mar", "ara j", 'lwlqP', "DAS*\n", 'lkgrz', 'pmjcB', 'kdlsQ', 'gFyJn', 'PvwjS', 'Okkpt', "nido ", 'NXjSR', 'OGCAk', "s. Ad", 'atusa', 'sLLdA', 'HQFml', 'EmDWl', 'kJyyA', 'old', 'mos.', ". No ", 'qthbY', 'QPQjY', "em ta", 'ifVMh', 'vJuNb', "ta a ", "NE TO", 'RijBm', 'XvPMs', 'chqf5', "744\n┆", "res o", "á um ", 'user.', "no so", 'd720d', 'Nmymy', "\n\n✅ A", 'DAWjY', "sas a", 'YjVTV', '1|0|4', ", Rom", 'EztrI', "meu d", "pe @u", 'IuMka', 'Conve', 'uto-r', "e a p", 'BxupS', 'ile:v', 'eu...', 'YkhhK', "as us", 'osjog', 'etyiX', 'toFor', "os à ", "eu re", 'nrkwQ', "OSOS ", '┃✼❄', "em, s", ", tem", 'CbrbG', 'movê-', "PA DA", 'HWnaS', "OS*\n", 'rRtLB', 'PWxyL', 'Entra', 'mpora', 'JvjDW', 'DO_PR', "\n│ 🥈 ", "Olá, ", 'EiHGv', 'etlim', "E ope", "a as ", "ório ", 'ganiz', "ão\n\n_", 'KBsbX', '9b0c6', "%*\n😋 ", 'qgKit', "as ve", 'WTely', '5d1b5', 'kmWlh', "o\n👥 ", 'Gbpto', 'umera', "a ava", " o li", "ID: ", 'ZCyer', 'bf488', 'ABgRm', " Swed", "ara o", 'MKAbA', 'UwjCp', "✅ Res", "'S WI", "o avi", "e qui", 'xto', 'KRdrv', '7️⃣', 'rhfkj', 'dAKOE', "TES*\n", "┃└ *P", 'ESCRI', "e] ou", 'ShvZv', 'yppXJ', 'nt/ap', "xo já", "eza d", 'Pyoza', " 📋 Mo", 'logo', 'livro', 'LpQKQ', 'act-l', "sta r", "orte ", 'Inver', 'rejec', 'QSXzk', "i \"AP", 'baBJw', 'minis', "❌ *Es", 'VBhVu', "o em ", "es ho", "🚨 [DA", 'zIamr', 'SULTA', "ram c", "a. Te", 'fnXMQ', 'HbnKA', 'riYri', 'FSlnm', " ]\nDe", 'ZHuOa', 'qRIip', 'yQIcs', 'xBrFt', 'ninin', 'FscaA', "m ( C", '[resp', 'en=re', "al: ", 'bQElE', " já e", "a Gol", 'Inowj', 'ulSXc', 'rmnot', 'ario', 'GDTny', 'kpmfd', 'omoçã', 'OQXrN', 'xiste', "d lis", 'GiHEK', 'ícil:', "o` pa", " ou !", "ho pe", 'EDIPC', "ano: ", 'iGChL', "\" (ín", "nte g", "o:*\n`", 'odelo', 'endad', 'Xzrmg', 'kAShZ', "ção\n•", 'fXaEx', 'MjgjK', 'YAsvt', 'mute', 'recis', 'goldr', 'tBetE', 'OzQUE', 'Yuspb', 'rie_s', 'xlhlI', '#text', 'PlvQT', 'AeCUy', "em pr", 'srfyk', "• Últ", 'ulado', 'wdETm', "ste c", "fio!\n", 'XyrG/', ", sej", "gora ", 'DSDYu', 'o/Y0G', "│  └─", 'has.', 'NYhfa', 'CSTfz', "⚠️ Nen", 'arv', 'aduzi', 'TERES', "or ho", "rio (", 'madas', "la pa", 'alic&', "hute ", "m apo", 'ThgJn', "ara r", "to ou", "ão\n", 'índic', "ndo\n💬", 'ThCaU', '1|5|4', "│ ⋆ R", "o 📝 (", "1 [te", 'UqDka', 'WZHZt', "\n└ Ca", "imas\n", "🎁 *Pr", "ado o", "r múl", 'os!', 'izado', 'preli', 'SENPA', 'rindo', 'SbHby', 'udOex', "m sua", 'nQKNc', 'frase', 'lic', "000 c", "🎮 Jog", 'ld:', 'FRleZ', 'HAgue', 'NBRwN', 'oKaWp', " de u", 'wypXh', 'em]', "LT '0", 'Serbi', 'eevwJ', 'HBUIe', 'PuCCe', 'DXkHb', 'vLLjj', '/tote', 'acKnm', "pos I", 'cvRvd', 'rINpK', "eo: ", 'dprem', 'DYimA', 'lgfTN', "oji [", "t com", " as t", 'Jjggw', 'MDJrJ', 'Qfghl', '✔】ᴇ-ɢ', 'ZuIDm', "r nov", 'VSVaE', 'undos', ".\n\n- ", "sair\"", 'MjlXr', 'tfFzS', "ndo) ", 'VERME', "er (m", 'avzNY', 'boton', 'JNCHu', 'RQLsH', 'mvbeJ', 'SGXTH', 'MhBAS', 'chpHB', 'VuFEW', 'zUuhW', 'bUKWL', 'RnIYT', '/emoj', " Abri", "• *Ho", 'EiEcu', 'chave', "a\"\n• ", "a!\n💰 ", 'Estou', 'r_apo', 'parel', 'qXggQ', "a o u", " Fren", "u cit", 'gOyeF', 'Heter', 'TQKHp', "hor! ", 'nicas', 'OZWQk', 'otalX', "deo V", 'pvleE', 'path', 'auXvA', 'UoHCB', 'pAlbu', "e min", 'YHpsm', '▰▰▰▰▰', 'uMCJN', "O PRE", 'TtrRl', 'PRFVZ', '/Amad', 'Desfi', "ti do", 'so_ad', 'OkPtK', "▄▄▂\n◢", '╭━━━━', 'vBTKf', " Real", "r @us", "lo [r", 'nload', 'RYbbS', 'Profi', "é 1.", 'hHueD', 'rgXga', '_rank', 'yQehb', 'mpSkR', 'LWGTc', 'PTION', 'origi', 'demot', 'EPZJv', 'fjBAY', "KE 'R", 'OLHoY', 'uKxYg', "as da", 'NnDMZ', "te su", '-prof', "┃ 🔄 *", 'amMtP', 'jPjDv', " DE A", "a ult", 'gcnsi', "ue us", ": *ve", 'xycnH', "u a v", 'fouui', 'hqoaG', ", aud", 'EpHiW', 'RqvqZ', 'tDlfQ', 'nomeE', "┃ 14 ", "\n🏷️ Ta", 'LOGOS', "as\n", 's_age', 't.0.b', 'Bfvqt', 'zGwRm', "s as ", 'os_re', 'loc', " cite", 'MxlNK', 'qwctv', 'hwNQq', 'JYNGf', 'kTLtI', 'qokwG', "E ATI", 'Pgksf', 'o2/tw', 'iSXEQ', 'nciar', 'RQNEH', "oa so", 'GLiWz', " sobr", "└ Nam", 'Signa', "rsar ", 'Gadin', 'rVvYn', 'ByeBO', 'eraçã', 'AvPlA', 'UFWMf', 'rEBoe', 'iKpIC', " envi", "m est", 'NBXTK', 'cJzPj', "cido ", 'QRlkI', 'qlYtF', 'rg_al', "me:* ", 'PrZgg', 'entMe', 'ocHWK', 'IzThq', "es nã", 'UQZqT', 'thrhq', "a ini", 'SziTT', " (ver", 'KHbCK', 'ZCByC', "o for", "rio t", 'uyTEB', "oubo ", '700&t', 'aguar', 'rUTYx', 'rtist', 'fHuLY', "º: +1", 'bjvOW', "/10\n│", '/Usuá', 'MwMSK', 'FKbdV', 'kzNth', "\n📏 *T", "!!* ✍🏻", " Seg", 'UVQzj', "o pró", "elo e", 'comma', "o é v", 'wOaLF', 'lyjTY', 'bGoTr', 'lGyKy', "iv fa", 'mes', 'KkIci', 'XQuYs', '_inc', 'oqHla', 'moNiq', 'xTdIF', 'ZnXGD', " inte", 'sagor', 'EyMTB', 'WsziG', " ] ", 'nto.', 'uJmVz', 'bJuAT', 'combo', 'infEd', 'YzZdf', 'hGIZn', "\nUse ", "m emo", 'NDmcU', "ses d", 'oerhd', "\n┃ 📅 ", 'iTXmF', "ido* ", 'TCZHa', "ed 0", 'haça:', "ÇÃO ", 'fNiAf', "use:\n", "jar a", 'XXqvF', "*!\n\n✊", 'FNIxf', "!* O ", 'HQOgZ', 'YDpaw', "pid 1", 'Visua', 'wBdva', 'PhNCz', " ⚠️\n\nV", 'DESAT', '_-_-_', "ff`\n", 'álise', 'UnsAA', "「 🔞 Í", 'bGmRI', 'WVESt', " pare", 'tQqkQ', 'viso', 'wcljj', 'xsOZn', "l esp", "✅ Sol", 'ovaco', 'nbeQA', 'leBnI', 'ngWfY', "upo` ", 'ItCRw', 'femSo', "「 📝 𝐀", "io FR", " deta", 'HIAfl', 'BANID', 'WwRmS', "p do ", 'sOKgi', 'SLWXI', "são &", 'mp3', "er ad", 'adore', " [gru", 'DIJVU', "ia da", 'repre', "do Yo", "ve nã", "A pes", "ath, ", 'jAHni', 'voto_', "ite a", 'MwaLD', 'fico.', 'xmfIO', 'qumrv', 'hIWwa', 'NoVnu', 'JMzyX', "ns qu", "𝑅𝑂𝑆 𝐶", 'NJqDe', 'orufe', "ar ra", 'bVviA', 'KzIkn', 'IxVcw', 'PUIDV', 'msvRx', "por o", 'Files', 'ppTdN', "ual, ", 'pterN', "c\ninf", '8.jpg', 'ZURtl', " pp_u", 'BmzpK', "╯\n*Di", 'JWrsY', "I do ", "nir q", 'zZBXM', 'CmprZ', 'uoyya', 'max', "a (ab", "ra M", "║ ℹ️ C", "o adv", 'mplet', 'yYPiE', 'FRJTX', "🔍 *IN", "v\nant", 'rupo✔️', 'sGnSx', 'UUpuJ', "ro ar", "ÃO 」⊰", 'nai1', "✅ *SI", 'dCKGr', "BOB R", 'nwOVM', "odo N", "o GOL", "a` 💌\n", "s\n- I", "om im", "d 2. ", "pos a", 'desat', "] ou ", 'YIZtI', 'QrZkw', "não r", 'UwFKS', "ao si", 'aGYlQ', '.x=6%', 'XJlZp', "iv so", 'COMUN', 'magem', 'iuxcm', 'oPfkX', 'srTCr', "  🏁 E", ". Voc", 'tindo', " tapa", 'CMKPZ', 'QTzji', 'Lrzlj', "r nec", 'mlNtV', 'newGo', 'YPYII', '(asyn', 'nKkji', 'ytVkG', "com v", '5000', 'tenta', 'ILIZE', 'MfYQD', "nto a", 'pPuGN', "e que", "s. Vo", "var a", 'AjdXU', "ta po", "*: ", 'HAvvS', "`\n\n📋 ", 'hCTEx', 'mo.', 'WSwek', "er em", '://er', 'erif%', " MODO", 'WlMxb', 'VdEep', 'HVSnl', "\n🎯 *Q", 'Detec', " sald", 'CsYvD', "r, in", 'fico:', 'tvzYA', " Paul", 'aUUGH', 'KbPmw', "• Def", "es us", 'ZDamT', 'sUqiJ', 'jDiCu', 'ne_em', "m cel", " trig", '_canc', "\n\n🔧 T", 'uqnvg', 'NATIV', 'eRead', "O 🎲 」", " O NÚ", "i ini", 'SEkaE', 'RPzyH', "de bo", "ata: ", 'HxdQq', 'xqZFv', ") com", 'ção:', ": Use", "o, ca", " a fo", "ta re", "\n\n*Co", 'yTUJX', 'pjUHJ', 'JSYWC', 'IWwlP', 'fauhC', 'nnwaY', 'OqlKL', 'Tipos', "ra: @", "`\n┃ 📂", 'DhVLW', "ça! S", "tus: ", "se o ", 'Consu', 'eaVta', "já pa", 'HefHA', 'KLRXY', "⏸️ 🛑\n\n", "4 ou ", "𝐚 𝐟𝐨𝐢", 'wpzEv', 'ncher', 'RJTBf', 'UFyhH', "e, ti", 'dUsHv', 'NISTR', 'ec_gl', 'etgNB', 'ABELA', " 123 ", "ão há", "\n\n🐼🍧↯", 'pNnes', 'UtaBZ', 'eJzJp', 'jóias', 'DRwyY', "ocê g", 'xLGaC', 'PDLaW', "al\n• ", 'hFFdm', "\n_-_-", "o um ", 'bania', 'fKJRY', 'l/fig', 'timas', 'rruma', 'NdKJt', 'CRIsM', " par ", 'dadeI', 'aggev', " gera", 'sim', "so.\n", 'vEaok', 'hQReh', 'ecept', 'AzBMd', 'eWglY', 'gcnDN', 'dBIoJ', "❌ Uso", '_requ', 'SciEJ', "em 10", ", doc", 'aacLu', 'bcgc', 'hCmKK', 'oaloJ', "scar ", 'kqbBI', "│ 💰 G", "2 - G", 'QnAIk', 'dognH', ". Req", "po in", "` - V", 'lLobv', "「 🔄 A", 'ter:a', '_reco', "30d, ", "a fei", "O*\n\nA", " *Eve", 'OaHMw', 'NKgiu', "om da", "o ina", 'ubsti', " a 11", 'oswvp', "r aus", '313792mCwpBj', 'sdxGg', 'gQaRP', "\nlink", 'OsAAQ', ", ant", "\n┃ 0 ", 'hEPYC', "e Far", 'NwbXQ', 'ESCUD', 'gWlKw', "📊 *US", " aman", 'bNawW', 'xfwwW', 'uEdQy', 'yCUMc', 'esMTv', 'AwOxp', 'temp_', " ]\n", 'alhad', "os vo", 'Mkdzb', 'SwcKj', 'KEzri', 'ScoJO', "join ", 'VWEIN', 'set', 'TfydD', 'UfPXY', 'OMsSh', "Não f", "? WHE", 'ela..', 'RBKgr', 'guéis', 'quise', 'dzyVB', 'azzjj', 'arte', "DO!* ", 'vfgmk', "👑 *DO", 'gpv', 'VnFrZ', 'cwAaT', 'cYUEs', 'saiu', 'JPSAg', 'noteM', 'IVQzO', "❌ Hor", 'avrão', 'aeeBw', 'Fxzwi', "a gua", 'jLpuR', 'das:*', 'jzWFw', 'jQaZo', " ante", 'NCQyk', 'hzgDT', 'phdIX', 'ANTIF', 'jogo', 'KzCbr', "a*\n\n🔧", "• Use", " XP.\n", 'wvisx', 'vjxyO', "al:* ", 'gay', 'orte', 'IPMpb', 'CNJBV', "MITE ", 't.0.s', '://dl', 'gUCjQ', 'FzjKE', 'OoqJD', 'KraeT', ": ⟮ ", 'HwoXu', 'BjzJS', "tica ", 'RCnKN', 'yXtB/', 'QYvgu', "i Pal", 'osIzf', 'eOGqh', 'ieFvM', 'JAISO', "GAR E", 'údo.', 'X7wUi', 'xnDkF', "m gol", " baix", 'cezUK', 'wOWoE', 'bém..', "ES (G", 'LcLrt', 'vRsJj', 'YhoKB', "% ❱ B", 'bug', 'eiffD', 'y=JOS', 'UaSYG', 'tende', "uso a", '/inic', 'iosa,', 'jbKti', 'Wsdqr', 'uKjhK', 'hSxgP', 'cote.', 'fxeZb', 'JgWWf', 'jHpNH', 'kyrhk', 'GOKZj', "só di", 'WTWUk', "ou ca", 'YYYY-', "\n└ Cu", 'nistr', "lha e", 'ente:', 'o/2WD', "0 - V", 'a7f2e', 'RspTx', "dono ", 'Xujph', 'dleve', "o het", 'com/', 'addXp', 'esvEK', 'HTflt', 'XOXmh', "` 🍫\n└", 'kIzii', " de 3", '=0.9,', 'oupTh', " 🥃 CA", 'UjBKU', 'KTVrg', 'AdbZi', 'haça.', 'NnhfQ', "\n┃ ⚠️ ", 'RuAxP', 'tyle=', "upo: ", "\n▄▄▄▄", 'aycnw', "ario\n", 'NWuaA', 'atego', "dos: ", 'ticip', 'pmWIw', 'egras', 'BYzWz', 'BxxVv', '.7,as', 'kmxsH', "es Re", '/Torc', "\n🎯 Ac", "ngo (", "[🐃] @", "ue jo", 'com/a', 'lTENs', 'ttp16', 'dHWPd', 'bpBhV', "s\n┃ G", 'acao:', 'wcGLN', 'PuGeP', 'Ymebx', 'PBSbC', " boa ", 'UXPeU', "ade* ", 'man/a', "┃ 📌 *", 'dev', " 3 ca", 'BnJYU', 'MfRdM', "a NOT", 'KizMX', 'uyIfd', 'IKZkE', 'uGHFp', 'oSHtr', "ara c", 'yxBmZ', 'cia:*', 'ttmLs', "com *", 'HJAgC', 'BYCyI', " está", 'snrdB', 'unblo', 'DNlhF', "RE gr", "─ ❌ R", " Batm", "as tê", "d [@u", 'qsYQn', 'slice', "~* :\n", 'nica,', 'XyQpC', 'BQSLM', 'gmsg', "uais ", "│ *Pa", 'zTGrU', 'YrbeL', 'RWCIv', 'DzXUX', "ite. ", 'WdZAC', 'MFLmr', 'DPLpN', 'daooE', "s ond", "n: ko", 'lePic', "O jog", 'pzNEZ', 'AHtxc', 'NHOU!', 'YwccK', '4|0|2', "s mod", 'AqkNC', 'qRHKo', 'TCreN', 'KcAlv', 'DBZty', 'bFGSf', "r gan", "i ati", 'malme', 'yxoJG', 'UTROS', "e bac", 'bvmpF', 'oFmhD', 'conse', '!envi', '*REMO', 'aniza', "lho 5", 'zbOeB', " libe", "s per", 'sequê', "safk ", 'RyyHY', 'Volte', 'ccgol', 'Tmgvo', 'iTuuH', 'ogegn', 'TgPwd', 'PksCk', 'KAjhS', 'ortun', 'UHJsB', "odo: ", 'hzRRl', "r XP ", "de pe", "ixa j", "%\n┃\n┃", 'tAaRP', 'NatxV', 'sxfts', 'rLDBC', "rafa ", "de re", "S* 🔍\n", 'GYelx', 'OzBZD', 'kNtkl', "céu :", "oto d", "m em ", 'jkKYR', " Você", 'jJzBa', 'f...*', 'bro.', 'mas:', 'BFlBp', 'xwsKM', 'UacPI', 'BFYnM', 'WZuBw', 'LGBT', 'raLpU', 'tar.', "o nor", " AFK:", 'qVEuR', 'vfveZ', 'horas', 'GgLyZ', 'cPEBF', 'getst', "enu d", 'lataf', 'e%20S', "VOS N", 'AqGeh', 'aBdzf', '5cff7', 'wrWAy', 'UqzEa', "┃ 🏆 V", 'PvPYW', 'jaOAc', 'oKucO', 'WNdbq', 'olume', 'etado', "so? V", 'rNPxe', "nte a", "por m", 'GahsY', "u par", 'NNFto', "e vis", 'tbrgr', 'aQYqE', 'ela]', " BOLÃ", "* 🖌️", "no, A", 'oYZjd', 'sWXdL', "do\n• ", " 🇸🇩 🇪🇫 ", 'o-rp', "elo t", 'OsYPr', 'SQSGb', "ora: ", 'Wklyj', 'zTxLy', 'UoTHJ', " | bo", "je:* ", 'all', 'qRKwP', 'BtKUe', 'PQObs', "o:\n• ", 'no2.', "😍 *MU", 'tdIZc', 'NICIA', "o ✅\n┃", "0p)\n┃", 'BBSyu', 'LNK.j', 'ix_fm', 'TICAS', " hy\n-", 'BIZ-N', 'GuRbv', 'nROzz', 'HCOrs', "d mus", 'nQNxK', 'ouble', "ay | ", " Imag", 'hRBXA', "té +5", "OGO 🔄", 'GWRdD', 'ykxaF', 'ntima', " prim", 'QjlfY', 'ecara', 'VBoSp', 'iadas', 'zKbpS', ".. Es", "s Edi", "] [co", 'saird', 'nKdyE', 'VAVfM', 'strat', "eça a", 'Udbpm', "no : ", 'ent', 'AFmWW', "ria u", 'ZkrZw', "2 tod", 'GbqrU', "SEU N", "arta ", 'eUSIQ', 'wuslX', 'ToTcY', 'gwZdJ', 'com/S', " Exis", 'bwiFb', "OS 𖣘⃟\n", 'anco!', 'WTRob', 'dusuK', " REGI", 'ACpuq', 'htODw', "\n• ", 'lQLUR', '|7|5', 'int', "🤡 *Qu", 'lXevu', 'lEtZt', 'iguri', 'ZMFPI', 'haca', 'tTqAW', "UG] S", 'geTim', "as se", '://su', 'papel', 'uAplp', 'var', 'nino', 'timo', 'eEfrH', 'iADAj', 'vXTIB', 'YSrEP', " BY t", 'cBzkq', 'es%20', "cas e", 'rowId', '0b/lo', 'wMDuP', 'iVRph', " GIFs", 'ASAL', 'PsWjN', " a Si", "🗑️ Rem", 'wlcEN', 'bFxui', 'yyLUu', "\n\n╭━━", " ADVE", 'gkzGW', "* 🔞\n\n", 'execu', 'k_atu', 'oEjJT', 'jEWPq', "rte s", "\n┃\n┃💰", "ins p", 'ttp13', 'Vspia', 'iário', 'AOPCc', "ios\n•", 'WpwbL', "\nComp", 'etaçã', 'JCrdW', '𝐀𝐋𝐄𝐀𝐓', "ld, e", 'dsrOT', "ÇÃO*\n", "🧩 *CO", 'tsGms', 'waQSZ', 'oZzao', 'tagal', " ou l", 'wnGqW', 'aykdQ', 'faceb', "𝐔𝐄 𝐕𝐎", "e alg", 'nvite', 'WWNky', 'arqsz', 'PksRO', "M Dis", "🔍 Ver", " @adm", 'aSkGD', "- _ A", "os ou", "9 ATI", '~_*PE', " ✅ DO", 'OfFDc', '[gold', '00|19', 'Fnhul', 'hZizF', 'PCdAm', '.team', 'eraoV', "o núm", 'WpPeu', 'YHKVp', "• Qua", 'lão.', ": ▰▱▱", 'cXyxX', "a ven", "p4 sh", 'iHpxX', 'OJcCj', 'utar,', " é mi", 'wUTaL', 'Logos', 'zbHFE', 'b.jpg', "ira v", 'nyGZh', 'BegmW', "(s)!\n", 'ÇÕES*', 'ickna', "ta Ma", "te o ", 'mUTDE', "1 - V", "das, ", "l cat", "!*⚠️\n\n", 'iabyp', "m ou ", 'pwfsp', '20Pro', 'TchvA', 'DfXeo', 'cVaPE', 'nção.', 'eXgJV', 'isRea', 'izAUE', 'ZzGqR', 'tFZSH', 'fvovY', "ona t", "D:* ", 'xTtZP', 'xTuKJ', 'zGSGV', 'ositó', "mo pe", 'fqVEw', 'rTHAG', 'LETAD', 'ctado', "O DO ", 'hoBHg', "gra ", 'f=90:', 'JIDgy', 'EkEhX', "ime, ", 'zdObf', 'wfllh', '75dde', 'LMTPh', 'BiudD', " a 4", 'DYylo', 'ument', " filt", "M MES", "na im", 'gYIGp', "𝑶𝑼 𝑺𝑬", "r Don", 'Frz6/', "o sou", "𝐓𝐀 」⊰", 'BBIT', 'wvQZv', "━╯\n\nD", 'dlatB', "no:*\n", 'QjJUM', 'GLhfq', 'detal', "I 2 A", 'tado`', " 𝐌𝐀𝐑𝐈", 'ZeGki', 'DdjCU', 'OJLTP', 'TLLgo', 'play.', "ões q", 'ningu', 'iado.', 'IdJZH', 'role_', 'ciRqv', 'nkHNA', "r seu", "ite p", 'COÓLA', 'TSDnd', "t ger", 'lenco', 'sLFZW', 'Vário', 'aro', 'xt&te', "ao ar", 'UAhVW', "\n*Exe", 'qPnLx', 'cXiKo', 'UDRCP', 'AvaPA', 'nlyvi', 'rrLdu', 'rsTqR', "os jo", 'jXjkD', 'ciame', 'GTGvn', "🚫 Ape", 'NTICA', " Inat", 'nQauv', 'SkZsb', "mor p", " vez ", "r fav", 'Qgqne', 'dVNco', "✅ O r", 'kTWUo', 'CJFMP', 'mosse', "e abr", "oji q", 'aplic', "• Hor", 'cup', 'vas', "mo um", 'bixin', 'admin', "𝐎𝐕𝐄𝐑 ", '3|4|6', "ro a ", "⋆\n└──", "ra au", 'jKqEk', 'pegar', 'ItZRa', 'KVICr', 'DbwBC', 'lxvvb', 'erder', 'WluBw', 'anyKP', "ou !e", 'Iagcl', 'possu', 'MvHHO', " vazi", "s emo", 'apGDY', '𝐢𝐧𝐢𝐜𝐢', "tas m", 'cKhQd', 'JbAIv', "dar u", ", vai", 'rhGkf', "old R", '🙂.', 'rdots', '499ab', "/Xd (", "bot, ", 'zXgfv', 'ciand', 'NMlXM', 'saMUe', 'AAowV', "T, AG", 'ZoLfE', 'sYKTv', 'coKKT', "g 1\ns", 'bmUML', 'oUYep', 'zyxFF', 'xTlXL', "𝐄 𝐅𝐀𝐅", "ao no", 'Gado', 'xjlnq', 'LJhEh', 'uVhNZ', 'cfmJY', '--oem', "ção: ", 'ectio', "de fe", "s pri", "o Fac", 'zlBNo', 'tluAB', 'IGnRO', '5|0', "old 5", 'tAFdP', "s lin", 'glwUB', 'MHbAy', 'CONQU', 'neong', "io` p", "um mo", 'RjmyJ', 'rcand', "o tít", 'OgOHz', 'Vxyej', 'mhMKL', "iar u", 'Terce', 'enXee', 'NNGUl', 'yaiDL', 'fEftc', 'pCkMh', 'VfuRy', "❌ O l", 'jZQyK', 'xgzuJ', 'f.sir', 'cSYQU', 'MwNng', 'isWrD', 'yeFZQ', "ras d", 'CWWwf', 'VvJKw', 'UnKMJ', "rar u", 'PujjM', 'vWwGp', ") est", "ca re", " Prát", " - ", 'a01b4', 'XgHdB', "to au", 'CwTcU', "📞 𝐂𝐎𝐍", 'xfVLl', 'mBqdz', 'atus1', 'kzPwo', " arte", "mium ", 'UgssO', " sabe", "do us", 'zPMbt', 'xHtUz', 'srXbj', 'h&srs', 'novam', 'Inter', "tive ", 'bxXTx', " Reso", 'JVeyG', 'gQJeY', " fico", " 👿+😇", 'Sjium', 'Gerad', 'assal', 'PgkTA', "uta d", 'debug', "ter d", 'mat', 'euro', 'palma', 'whyDo', 'EoNUt', 'dHkuA', "o ped", '└────', " há o", 'lwRtm', 'ticas', 'TOJxC', 'HhqPj', 'JfSxE', 'vDsJY', "⚙️ Con", 'rmaçõ', 't.0.c', 'lLHDQ', " dá p", 'ontad', 'EtZjP', 'criad', 'timeo', "os (s", 'ntuaç', 'hLLiV', 'stava', 'QTFJh', 'bpOHn', 'jabGj', 'fTmbZ', 'bFTVL', ", que", "por r", 'LSrGB', 'EMPbb', "r uma", " (mar", 'wDOkM', "❌ Ain", "🟡 *AD", "m cit", "o ant", 'GRLTm', 'forca', " ℹ️\n\n", 'hqBBY', 'uwwyA', "seu n", 'PIXor', 'qwcBH', "em to", 's_dev', 'YDamo', " *Par", 'strar', 'eo/hp', " usad", "\n┃ ⏰ ", 'OBNLS', "REA! ", 'QMPHf', 'RvyRk', 'ULtOT', 'gQhhI', 'pelúc', 'g-on/', "a do ", 'padEn', 'mLnFy', 'qiNPy', 'ebFnb', 'DHYUo', 'day', 'Xjrul', 'ndodi', 'VxZrb', 'GGjSF', 'WZFiN', 'NITOR', "eio d", 'MElFE', "PPT a", "\n💿 Ál", 'SU2', "-\"\n│ ", 'xOUkR', 'ARUso', 'eços', 'DNbBK', 'CUuRU', 'ZBWjM', 'QkOSB', "ó Adm", "G INF", "\n🛠️ *H", "a 🔥", "star ", "m esp", "ta co", "📚 TRA", 'dLaMb', 'Awtev', " Reun", "e víd", "t est", 'TVoGT', " Ajud", 'YOsOt', "de no", '.m4a', 'ecuta', 'LSddj', 'rmalm', 'IuspX', 'vByBu', "os os", 'dpLFC', 'SPsCH', '*Qual', 'áver,', "ra li", "cta a", "O ope", 'AbJoR', 'pkGyU', " Stic", 'hLyqI', 'han', 'vmJzn', 'QixSS', 'ges', 'XYsHw', " 100%", 'Bônus', 'COaxA', 'rio]', 'BYnrE', "com n", '2025)', 'noUBZ', 'JYZjm', 'DO_RE', 'aLxJg', "e a l", "1 AND", 'críve', "ser] ", 'eberá', 'kUMRt', 'sDwTf', 'cEKjp', 't.1.f', 'xJWxu', "os, C", 'aPTQI', 'oqvXc', 'ACESS', 'GLiVB', 'SexsP', "🤝 EMP", "por u", 'YgQNj', 'KZvrA', "ido:\n", '|3|5|', 'cPJAa', "omas ", 'Progr', 'aída', 'eDLiz', 'usivo', '1h/2h', "Ls e ", 'recus', "🔔 *AL", "rde a", 'dqHpA', 'fromE', 'AJftL', " queb", "tes: ", 'respo', 'lMomv', "ra al", "❌ Sor", 'x9_so', '|5|1|', 'figs', 'bjKZL', "eiem ", "act P", 'esetC', "i voc", " na l", 'DTFHI', 'tuaca', 'hlVvS', 'KKpCP', " pão,", "all` ", 'vDTvT', 'antil', "r da ", '64%25', 'FSPlq', 'vJoPZ', 'wdwvI', "e e d", "❌ A a", 'qxKVR', 'NQPsj', "em*: ", "\nGia:", 'UXfsi', 'bass3', 'qSUCa', 'fyeOZ', 'menu`', 'JNLEw', 'dGSoN', 'buCJj', "ᴏ🍌\n【✔", "MS 2", 'rBNWA', 'extra', 'ULDOS', "io @", 'lar-p', 'qfjUo', 'zcVEL', 'rende', '【✔】ʟᴇ', 'SpvFn', 'tPpMl', 'ered', 'MkSGi', 'eKOqi', 'mEkny', 'rJFqZ', 'fakem', 'tipli', "TO so", "ndo> ", 'XBNbz', "los P", 'isQDr', 'FJFjh', "ute l", "ec 50", "e adm", 'IKLaE', 'mDIMH', 'AACIy', "ela, ", 'iLFUa', " escu", "da ro", "c\n└─ ", " e cr", 'TUiyI', "* ✅\n", 'lHIMn', 'jPJht', 'bmyps', "ntam ", 'WOaPK', 'locid', "sic\nb", 'uniz/', 'itens', "os, o", 'query', "d, pr", 'erros', 'GOAXK', "ara f", 'ViwDE', " tudo", 'TTNvC', '-Call', 'LnXoh', 'play', "▱▱ 10", 'wNKBC', 'omece', "┃ 🎯 C", "*\n\n🔥 ", 'FaHLo', 'limpa', "ICAS ", "tes t", "el2 v", " se a", 'ZzkCp', 'NzCSt', ", adv", "➣ Núm", " Venc", 'xtjXu', "á BAN", 'paKse', 'tobai', "k ou ", "o a i", "e\n\n• ", 'foyaE', 'mDFzb', 'na...', "use o", "a [ex", 'fil.', "3):* ", "\n\n✅ *", 'nvasõ', 'AGPwQ', 'UmyhJ', 'XKUyq', 'eHdZE', "\n│└─ ", " seta", 'uYwIY', 'GHBKa', " avis", 'ZLzaT', 'JQTdM', 'YCNdx', " 𝐟𝐨𝐢 ", 'Ltlcx', 'bgYpK', 'UYCYt', "ões\n🔸", 'rtênc', 'Ofnuv', 'GMolr', "m víd", 'DEVCz', 'NssyV', 'mLwKM', "r aqu", 'utivo', 'ortes', 'XdqPd', 'JBYbO', 'telig', "ys Co", 'bCQhm', 'VRgjK', "- 💝 P", "e não", 'nal_a', 'oníve', 'BWQcz', "as) o", 'vRAmU', 'wdwka', " (pad", " tenh", 'oVdps', "do, v", 'OZxCF', 'RQUug', "s jog", ":*\n\n`", 'ownlo', 'RKRng', 'dnZUh', 'DMjjY', 'VMipx', "sfw a", 'sao-p', "se:* ", " 🔒 ", 'CQwCD', 'NEexQ', "cias ", 'ançad', 'giIVA', "gos n", 'terpr', " ?, ?", 'cnEes', 'RuPPV', 'ZyAbZ', 'YKOzP', 'xcuIW', "💝 」⊰━", 'IDADE', 'dgyXd', 'D/M/Y', 'TRIST', 'UHsGk', 'a-mos', 'tor', '2.jpg', 'IEqwr', 'LOvFa', "a pre", 'ﮩ٨ـ♡ﮩ', 'uLDgJ', "é um ", "g glo", " (216", "\nleve", "il @", 'mitir', " @usu", 'kQXfH', " ×==>", "\n\n- E", "s Dis", 'jvtNP', "x e P", "so co", 'spTMn', 'daziY', "o tip", 'os/te', "vo sa", 'cMzAw', "ara v", ":*\n🔸 ", 'VxDmM', 'lKzPL', 'tTAIB', 'OAImy', "a ⋆\n├", 'imo]¥', 'ITNpp', 'stas', 'INTEG', 'pxRxy', ':ss', "𝐎 𝐀𝐓𝐔", 'floop', 'bKHPT', 'eKuSO', 'AHYNO', 'otpDw', 'wHpUi', 'dguxZ', '*Menu', 'DhJdE', 'bvQMr', 'rzbYa', 'KnQDe', 'iPdUq', "i ina", 'Azssb', " COM ", "gp IN", 'nmhux', 'aybac', 'sso..', 'DPKLS', 'WMvPe', 'call`', 'smavX', '[text', "ou `", 'travé', 'LMNIg', " ║ ", "COM M", 'YwQex', 'FIimA', 'jFIpF', " (1-9", 'topar', 'aSCoG', 'kqUBt', 'gYNsC', 'stant', 'orio', "do pr", "ciar ", '??/??', "ི⋮ ྀ🌴", 'omwxd', "ser a", 'KLTko', 'add', '7%25&', 'KQkpV', 'VsUns', 'ANDOS', "us Ge", 'udio.', "ntre ", 'thlxR', 'CloGz', 'eTYyz', 'ZkHQO', 'IQRVK', 'GeTCC', 'isAdm', 'HIRvp', " é na", 'dOfCv', ", e u", 'béns!', 'hLVLf', 'ítulo', 'vwqdD', 'gativ', 'xuali', 'ADDKE', "u lin", 'HBGcm', 'Wpxnk', "GEM +", " | at", 'qlAHd', "no [n", 'fMLkR', "ote e", "u bas", 'ittle', "]\n\n*C", '𝐋𝐈𝐙𝐀𝐑', "✅ OK", 'depac', 'eKekQ', 'jaIJL', 'lcrNF', 'rELCY', 'ʀᴇᴛᴀ👩🏾‍🦱', 'bromV', "┃ 💬 A", 'OhRFe', 'toLoc', "𝐓𝐑𝐎 」", "acao ", "o cli", 'BvldO', 'ity=2', " _\n\nS", " \nUse", 'YuGsp', 'ybORu', "ddd 1", ", inc", 'VtLKN', "ot sa", "bal 🌐", 'wvKTq', '/peit', 'zYHgk', "á apl", "𝐭𝐢𝐝𝐚 ", "air\n┃", 'uWLMp', 'xBnjU', 'pqVgf', " priv", 'comba', 'yKKeW', "bal`\n", "ela 1", 'FveMb', "u sta", " deco", 'GOnAY', 'dias', 'zTwrL', 'LqvuS', 'so!*', 'UcuaW', 'GhEGQ', "│ ⋆ I", "👫 @", 'nhYUP', 'xXQkv', 'KiZQM', "Vota ", 'TjJeD', "┃ • L", 'WcnQr', 'NROkj', "va su", 'cudvq', 'Tnyid', 'muel_', 'sKzcB', 'VYvqX', 'gelo', "gp\" p", 'nKQTY', 'oIbhp', 'KSMiB', 'Obter', " 🎭", 'xJIOw', 'BcsRz', 'kZPfo', "ar á ", "Seu s", "cido\n", 'BU2', 'MKCKk', 'gCCWT', 'fbc4a', "POS V", "📅 ", "ca @u", "]` - ", "fk Vo", 'JBgWK', "🎯 ", "á exi", 'suges', "odem ", "l 😳", "Ver p", "└ Sis", "a [qu", 'YOVdz', "e tes", "PV 」⊰", 'xpkFD', 'JGKjy', "vra \"", 'cygbg', "i em ", 'oHNHP', 'bxLkL', 'OLTOU', 'rNAkI', 'trás', "A INV", 'wEMxL', 'kJWmu', 'ENCON', 'oqwzZ', "o vot", 'TFsUH', "is no", 'aIriF', 'Eqlwg', 'ança.', 'Horar', '0|1|4', 'l2:', 'IBdUj', "𝐞𝐦 𝐚𝐧", "ode m", " na W", "lock ", 'OLCAf', "op 10", 'ZFnPG', " grav", 'RTNfq', 'Ruter', "'RP%'", 'hLvWG', "ue nã", 'ezFIJ', "𝐃𝐀 ", 'qQgHE', "ens l", 'XBlBl', "seu B", " e me", 'TrcMk', 'iplos', 'ELING', 'MmByl', 'revis', 'LkcRt', 'nENYw', 'GTYVn', 'ikipe', 'NPAro', '/qvia', "• aus", 'oyQmy', 'WASTE', 'nsfw,', 'elar,', "ens a", 'TjkiW', 'oGIxG', 'lmYLG', "da li", "e rev", "x\n┃\n┃", 'RcNAZ', 'JiOlh', 'fMWft', 'ᴍᴀɢʀᴀ', "O:\n\n", 'ar-pe', "p Gru", 'gSfaE', 'kQvvk', 'sBPla', "- HD ", 'ypUTO', 'IRIat', 'QEdjl', " visu", 'jeita', "de wa", 'VzHxe', "dia s", "s. Po", "\nseta", 'rmato', 'Amare', 'jqXIg', 'OGYRz', 'AwPca', 'thySg', 'puraç', 'HRrws', "char ", 'iga!', '@memb', "me ba", 'MBseF', "r des", 'velha', 'rdTav', 'fGlrR', 'e6c71', 'remoç', 'PqooR', 'hWDHT', 'gZHBz', 'alavr', "so ao", '*TRAN', "ia! V", 'OcIyO', 'SINDT', " fone", 'PHwvr', 'ão|Le', 'QZhyn', 'kenga', 'Barbi', 'VvkDa', 'bCJLM', " Cach", 'MITAÇ', 'OJknG', 'ApYlr', 'oria', 'stosu', 'o.sir', 'SAIbq', 'PIEvQ', 'ZEQFC', 'VVXWO', 'ERMIN', "┃ 👥 *", 'DxzVj', '1.tex', 'ssive', '6.jpg', 'qIGiA', "os on", "* ❌\n\n", 'trati', "lXp, ", 'ple_o', 'RZGlF', "um du", "\n👤 *C", 'xyrWO', 'Dkwig', 'briag', "gem v", "veva ", 'O```', "A DEB", "s 0 &", 'ário]', 'YcHHo', "ntar ", '1d206', 'mazon', 'PQnGf', 'ipo:*', 'ngIVw', 'MhIEf', 'uJTEq', "s:*\n", 'MbGxq', "ro] o", 'Brend', 'lSgTZ', 'Volta', 'eros.', './rec', "─ ⏰ U", "LHA N", 'ÉRICO', "ria p", 'kiss-', 'vZbTs', 'rXXKE', 'Weekl', '🕯️', 'BqYhF', 'ping', 'lWEiL', 'ype=V', "𝑆𝑒 𝑎𝑝", 'Reini', 'ySukt', " 🔧\n\n", 'DxCds', "zada ", 'wkAuY', 'XREyQ', 'BPmzl', 'input', 'escol', "!\n\n💝 ", "s e a", 'GpWJr', "1\n┃\n┃", "er2 h", '*RENO', 'yymUy', "A IND", 'ADNfm', 'axlqR', "m com", 'rpsTE', 'nmrdn', "+ avi", "└─ 📋 ", "ao co", 'eAtwx', "\n└─ `", 'agem-', "ׂ࠭ ⁸₈", 'basea', 'imo:*', 'dRsxz', 'MdUTB', 'brand', "s pro", 'VffEj', 'AyjgV', "e 1 a", 'LxjdF', " └ Ex", "stá l", "as! 🎉", 'ISTER', 'CotFV', 'OTbIw', 'jlaTd', 'da_pa', 'IJlZD', 'YXXpI', "XAR D", 'RRfYS', 'xXtql', 'kzjZE', 'OESDq', "tas r", 'njBxr', " SEM ", 'aDmis', "to!\n┃", 'ydQnh', "te [m", 'nbdmt', 'oKkqe', "al te", 'fEnFM', 'EAÇÃO', '_gera', 'lAKLL', "\\$&", "fk [@", 'Aviat', 'kzHRk', 'rgold', 'OIMLh', " 𝐀𝐍𝐓𝐈", "u já ", 'UPaPO', 'WzuFm', 'mCNXx', 'GORIA', 'Kvlao', 'repro', 'uploa', 'ljzLG', "✅ Sai", 'WtHtX', 'getPa', 'rRHlK', "s mai", 'DewDm', "Se ga", "e o s", "por: ", 'PiJgz', "ara 2", 'orm.o', 'aUumR', 'ecebi', "undo ", 'EJfLg', " agua", "ᴀ ᴅᴇ ", 'zcjDE', "` vol", 'JDtqc', 'aVPJW', "\n🎉 O ", 'o|Men', 'WODQv', "lar r", 'ixo', 'tanji', 'isten', "T rew", 'VAGLs', 'AoLtf', 'pDHVO', 'xtZRR', 'ro!', 'TLPXz', 'NETEJ', 'qdywn', 'GqawZ', 'insta', 'YtfpP', "*Bot ", 'ers', "er us", ".. ❱", "🚫 *AD", 'yrdTU', 'aibMg', "m gar", " 🎰 CA", 'miPjr', "ar @", 'rycon', "m fig", "ta no", 'r..', "\n╏❆ *", "edir ", 'ODE!*', 'ulTZv', 'ero', "✅ (", 'fsjYJ', 'c.jpg', 'VTMep', 'ENlEw', "ê ent", 'o_id,', 'TERNO', 'cRqHS', 'hdTMZ', "ais!\n", 'atoso', 'tygEA', 'UgeXP', " <men", "🦇 *Qu", "A 」⊰━", 'tinos', 'vBUDW', 'XIeNA', 'bRKnu', 'DFgtY', 'XzFel', 'der', 'BANDI', 'zVnGs', 'ptt', "sua p", 'NMqCQ', 'Marin', 'in/wa', 'fMVXs', 'aHDvX', 'IgzZh', 'kvqYd', 'f5861', 'phLMB', 'dicio', " de i", 'AARNA', 'odada', 'Vcbjo', 'lrTJw', "tir F", 'gpypK', 'END:V', "┃\n┃ 0", 'oPFeY', 'qEsSh', 'cribe', 'slink', "* não", 'LLbNT', '*━━━━', '3|0|1', "*Seu ", 'nJcDP', 'xzfch', "e gad", '2685f', 'ata_r', 'cita2', 'LGjiC', 'quiOq', 'App', 'vwAhv', "ra ga", 'yQkui', "kup c", 'JOgdE', 'dabv/', 'WoShr', " SORT", "iva N", "tipo ", 'rsHUk', "saiu ", 'OnDgP', '𝚂𝙼𝙸𝚂𝚂', 'Fpekg', " rece", "imi 2", "┃ 2 -", 'exto:', 'RYlQA', '24012', " IN (", 'eunun', 'oname', "O!*\n\n", 'ogle.', 'BtaGm', 'jFByT', 'xmndn', "vio: ", 'yNSPI', 'XutYK', "ia e ", 'potiy', " Resp", 'vWzvv', "iar c", 'Gvnsg', '|menu', " ou n", "a e e", "\n⏰ *T", 'NgcTI', " o ge", 'JsaCe', 'azSDU', 'HYcsE', "deo p", "❌ Com", 'KRgEL', 'StULg', 'compo', 'NDcsT', 'dQMsi', 'votar', 'eOhJf', 'bqXog', 'yNQsm', 'ast.f', 'vNJHq', 'wRyrp', 'ptoid', 'os...', 'HwAPn', "tos c", "🎲 *SI", 'ined', 'nfjpx', 'HVnht', 'tokit', 'xtXJO', 'XHBeN', " de o", 'Badmi', "ê con", "A dat", "na tr", "i nes", 'DWbEt', "DO GO", 'oldDa', 'Gmfeh', 'vo_es', 'ccf55', 'MyUck', 'wwMIw', "gas d", 'Korea', 'NIBjM', " Ms", 'QvPqp', " DEFA", "eo MP", '20Lig', '*Filt', 'WjMtX', "📋 @", 'rankn', 'FxRUE', 'QyWeL', 'IBqZY', "co pa", 'aeZvg', 'DLGzC', 'wOXxR', 'lhosb', '|all|', 'Karv/', '|2|6|', 'XQpbv', "nto n", "reu a", " quis", 'QDZvb', 'lho_e', 'vQJtX', "an: l", " 𝐬𝐨́ 𝐜", "🔥\n*🏟️ ", "ma me", 'xjyPB', 'orito', "🔢 *Li", 'yIsWV', "end: ", " wa.m", 'lOMtp', " • Vi", 'oRAFI', '3|1|0', 'CIONA', 'legra', "ia ca", 'tuDeQ', 'i<3<3', "cima\n", "t WHE", 'FHsdY', "┃ *No", 'PALAV', 'YYwqN', 'GEDaz', 'dntPe', 'WIgHs', "r fun", 'Qualq', 'rm_pr', "ros\n\n", "ve is", 'antim', 'Placa', 'YjaTN', "* 🔒", 'xRyLI', 'jVBsF', 'hxCUb', "b:v 2", 'LQsAt', 'neemo', 'Edita', 'ADULT', 'nspir', "💎 *Us", 'vAWud', ": no\n", 'Descu', 'ycZOK', 'bvGFY', 'MrEdd', 'ck:', 'DAS!', "Um jo", 'ifake', 'TCNEQ', 'loque', 'YvflP', 'clona', 'AmscW', 'OYpvx', " OU T", "S 」⊰━", 'Repor', 'oVpGx', 'NsLTp', "h, /1", "amp F", 'PxRqD', 'uote/', '(minu', 'GgMVU', 'mpar*', 'Estat', 'deo', 'terem', " 𝐏𝐎𝐋𝐎", 'MqrbC', 'fakhG', 'ZkdUw', 'ZaQAB', "ora.\n", " emba", 'BUelc', "r usu", "🎉\n┃\n┃", "Faz u", 'icand', "to us", 'one', 'JQTXh', 'NIhQc', 'NzKej', "ciso ", "s ain", 'rlrYS', "es so", " (Gru", 'conte', 'LiWwU', 'Vijzj', 'tZsfo', "os of", "soa a", 'mRrOd', 'bBsdf', "o bat", 'AKAgZ', 'CADAS', " da c", "ºc\n│‣", 'LfnmC', 'zkvwy', 'FiLCV', "tá se", 'á-lo!', "POS D", 'yDbtR', 'nclus', 'sBXQx', 'gqqYl', 'lobai', 'orias', 'AOFbl', 'EMÓRI', 'tJxSi', 'jngYV', "ntes ", 'kIqwP', 'o/6Yh', " COMA", 'PAYax', "aixo ", " A Li", 'LQZur', 'uscar', 'IiLSG', 'eDesc', 'acili', 'util', "𝐫𝐨 𝐚𝐨", 'QMFym', 'xvMiT', 'fIbVz', 'pia', 'MEfPP', 'XfZmi', "e IA\n", "ido.\n", "stou ", 'ScrMQ', "io do", 'GaTtW', " pt\n-", 'IsgII', "*\n🪀 *", 'dUOYw', "🔒 Fec", 'lo.co', 'ktmIS', "gue c", "á dad", " é \n┃", 'Vhlzh', "IA DE", 'ncia_', "ivo n", 'Extra', "r\n┃\n╰", 'saia.', "as\n\n💝", 'burla', '❆╍╯', 'Combi', 'bzBve', 'imos-', 'vVzuE', 'BLfHs', 'Saind', 'NJFiZ', 'FhEIe', 'MGBna', 'sOgah', 'yXODN', 'tual:', '57946', 'QVoLL', 'ul-Am', " \n│ 👉", 'whxQI', 'ile/2', 'KKEMj', 'kzYBD', 'lQIbx', 'LQoId', 'Efeit', 'agora', 'MpDom', 'rafk', "ff` -", 'APYNa', 'JJLKR', '3a756', 'JAiAH', 'hDXYi', "┃ ═══", "ual: ", 'rrymp', ": ven", " polí", 'rando', 'etdXs', "rio d", 'EcYMN', 'lPOCn', 'HUYZr', 'SJQHW', 'tato*', "ra mo", "cas r", 'UKfkO', " \"Eu ", 'LGSFS', 'RWiwa', "eja e", "es ao", 'fHonV', "nada ", " 𝐋𝐈𝐒𝐓", 'kpmQe', "air d", 'ajuda', '8a258', 'umIKq', 'yYTRI', 'BLxzo', 's://c', 'ecion', 'le..,', 'MBuuO', 'nJFuF', "6 - E", 'edit', 'WuaDK', 'ERCvJ', "xto, ", " como", "s. Us", 'itkEZ', " Stat", "ver a", 'mPuYd', 'fHJDS', ',fps=', 'tNeWc', 'reste', 'PPcRd', 'rific', 'bYJdi', 'abeça', 'kiss', 'tus.', 'YhUND', '𝐞𝐩𝐨𝐫𝐭', "⚠️ Ape", 'CXbXL', 'RDnsa', 'ome', 'nDRBS', 'gVoTa', "édio ", 'rVWJp', 'YrEnA', 'akYwK', "o *fe", 'DuCJw', " redo", 'dIFuy', 'aGnmy', 'jOXQN', 'ETamh', "one u", 'IEXNy', 'jCipc', 'wkktD', 'bfePb', "🔹 *Ca", "gure ", "co 🥴", 'aYFtn', "aily ", "to áu", 'unixt', 'FzcvB', 'lMJLK', "ucas ", "\n   📝", 'IFUL', 'Fqxfc', 'QCgau', 'UlLgD', 'vzvHr', 'DFeGf', 'bemvi', 'rRldE', 'os-do', 'oCIFo', 'eo/', "rso p", 'ptibe', "te cr", 'toxic', 'GVaFZ', "ela a", "R HOR", 'dono5', 'plica', 'fXZPX', "que e", 'lNZfS', 'WtNVd', '2|0|1', 'kOcfG', "Bot n", 'yLYTc', "M uti", 'XIoeX', 'ranco', " Noiv", 'ZsNMk', 'LPwGj', 'ormad', "y at", 'gnbzB', " (bri", 'Etufn', "de es", 'intel', "l, ti", "em no", "hes d", 'ZmTMA', " Love", "⚠️ Tem", 'Aizim', "\n💬 Di", "ter, ", 'jgjWE', "ado e", 'HtOzI', 'obalR', 'iOrvQ', "erão ", " ÍNTI", 'puXoR', 'bHgTU', "plo c", "o me ", 'DtPWI', 'rivad', 'nian:', "or ve", 'arvel', 'uhZts', 'ImSVE', 'nFzBO', "ld ca", 'aleat', 'vkYUd', 'ntos:', 'BACKU', 'scriç', "+/- b", 'odos)', 'fKbCj', 'BOIDr', 'mata', 'exist', ":\n┃\n┃", "a per", 'tdbIQ', "rro t", "EMAS ", 'PIZeo', "a), s", "VA!* ", 'uHwiK', 'rWUJv', ") não", "O bol", 'dENFz', 'uTmUb', 'WTQGe', " 📹 Yo", 'lkKFP', 'ADA', 'pVSWS', 'mbWGl', 'fYPdt', "\n🔥 *A", 'DlETU', 'ZEptn', 'FHaIF', "🍀 *PO", 'fTwTk', 'vkrcY', 'eeBwR', 'lixo', "o\n┃ 🎮", 'ext', "do, j", 'ar*', "çar c", '𝐏𝐄𝐒🔥', 'allpa', 'EnyEZ', "O* ℹ️\n", " redm", 'kfTHL', 'GuIYQ', 'vrões', 'nvers', "c.\n└ ", "rch m", 'gif', "ivar ", 'JNIPp', "s aci", " circ", 'weXmm', 'ENTES', 'arcar', 'jEwmx', 'wnfIT', 'jnecs', 'AQeHv', " @pes", "Não V", 's_ext', 'VHwWu', "soas ", 'XUfyw', 'qyLHX', 'UiKTE', 'juste', 'PHOSO', 'ZUoRy', "za a ", 'ilePi', 'azio.', "s: Fi", 'CGeoZ', "oca c", 'ebrá-', 'gvtnT', "r @me", 'ULL', "s\n• `", 'umeri', 'EnbIJ', "(s) d", 'roule', "?*\nRe", 'lHHJv', "ato 👤", "elou ", 'TEmww', "* Pri", "om ", 'TEMPO', "ÍDA!\n", " o up", 'ENS:*', 'GgxIv', 'iOvts', 'UcDbj', "sem a", 'ático', 'XYvKL', 'vnKqE', "gif o", 'bazbq', 'ZkxHm', "a use", 'ILsTO', 'biSOe', 'yPyGw', 'este', 'DLINs', 'sqSkB', "lar\n┃", "l no ", "lo [m", 'YTqGY', "), \"p", 'yyIEn', 'kbpFC', 'PSRTI', 'lqSSe', "r, al", 'hores', 'is_gr', 'rPxNm', "OS*\n\n", " anda", " pôde", 'lastf', 'rnand', "ar pr", 'ZWnni', "┃\n╰━⊱", 'flxRO', 'hecim', 'dDDJO', 'EiLym', 'dd985', " mídi", 'ess', 'XbKDt', 'lEzaR', '▀████', 'bSTog', 'dLfXb', 'lidad', ": +", 'uUqfV', 'ojiGo', 'faijY', 'MMrEt', 'WDnuJ', 'jvBri', " funç", "e pal", 'iafir', 'dIAuW', 'Cᴏɴᴄʟ', 'csShg', "cê?. ", 'Tdldx', "a) fo", 'menuI', " \nSET", "ao ex", "tal d", 'bhJya', 'ias/f', 'obrec', 'zDeTt', "cos: ", "o app", 'hinHG', 'wANCt', 'cação', 'ideo/', 'cIKUl', 'REaQv', 'wETyO', 'DeNPf', 'queio', "🎊\n┃\n┃", " Do G", "💡 *Di", 'mTfdA', 'ping2', "on br", "𝐦𝐚: ", "E DE ", 'NZTAH', 'VzPhC', 'o..', 'YaOhc', 'puber', 'VEhrn', 'k/4m3', 'rbot', 'fRfQY', "em st", 'bangr', 'dgYHW', "s\n🔸 `", 'wcxhP', "o: Nã", 'ANIME', 'gbBkH', 'tPmXp', 'jDXEE', "\" não", "o]`\n\n", 'UwohC', 'iamen', 'zTbOk', 'lJbrW', "ERE i", 'gkBmN', 'kRRzz', '-ROUB', "e o a", '*...', 'zZQNp', "ENTE ", '.koye', 'Babym', "/ num", "e='ta", "á, so", 'kfRXf', "ão ún", '8bd43', "a [no", "r\n• `", "s 3 c", "es:*\n", 'estra', "┃\n┃ ✏️", "0 ou ", 'DRyZh', 'rankp', 'egra', " do s", 'kuPiA', 'WNFJg', 'EMhQO', 'XMhRs', " e o ", "T 0)", "ID já", 'qYEwN', 'zSMxF', "cê ir", 'VFGRk', 'iFIxm', "ar `", 'hRvEI', 'xhHis', 'kSSvx', "enu l", "ios p", "pós f", 'RMJXs', "\n\n0️⃣ •", 'eyoif', 'PbFtN', 'NUuMD', 'MWLFZ', 'stino', "⊱「 𝐇𝐎", "OJIS ", "ifa p", 'bots_', " 1 ve", 'Bomba', "ick] ", '❀۫◍ི࣭', 'nmxRh', 'apena', 'nwTLU', 'xMcCq', 'LastF', 'OuKwe', "ick d", 'cqaUR', "\n\n⚠️ U", 'SUCED', 'quero', '://ir', 'BAL!*', 'lpape', 'NeMnc', 'nDCxp', 'jJTYj', 'uUTpM', "ivos\n", "┃ ele", 'kGlXa', 'rupo`', 'ANapU', "ere r", 'sg2', 'deira', 'leIUZ', 'eAp', "..* M", 'Usuár', '*Imag', 'WSYbK', "dor: ", "*✅ Fi", " - Ur", "j all", 'ssion', 'coman', " asso", "💡 *Su", 'ALL-E', "- O c", 'wySEQ', 'ySfzl', "╮\n┃\n┃", " DONO", 'nByBT', " ness", "tar, ", 'tGCZk', '/tota', 'zUhmI', 'geyLp', "lar*\n", 'aCZxt', "\n┃ 🚨 ", "i Cat", 'gLHjQ', 'VwMBM', "OR] ", " 𝐔𝐒𝐀𝐃", 'pLHyt', 'ropri', 'kQAqs', 'pERLZ', "❌ Não", 'MmIDs', "qc [t", 'xys', " base", 's.sir', "a me ", 'das', 'qZkNC', "do Me", '/inde', 'ZfIfn', 'ory', 'rhAwK', 'Limpa', 'naWsb', 'neira', 'oPxgA', 'ZUrEN', '𝐨𝐭𝐮𝐬᭄', 'bWmKH', " ESTÁ", "Foto ", 'sPNHY', 'VgpqG', "ira u", 'OgkoK', 'iUIxE', 'gtkbm', " *Voc", "por h", 'yaKea', "os)\n\n", 'po=1.', 'coHsx', 'Ntxxr', 'tao', 'YsyZm', "] (a ", 'AxlKh', 'RLuje', "do en", "do: 2", 'hcTmJ', "ga os", 'QXtlb', 'tddSg', " -vf ", 'Self', 'Selva', 'vDxZY', 'nguém', "\n├─ `", 'GEREN', "ADO*\n", " te d", 'earch', 'glass', 'vvBcA', 'javPt', "R UTI", 'prese', 'P9mR/', "g diá", 'ntrie', "eu me", 'WecHI', 'ile/4', "🏆 *JA", 'Fxiyf', 'eFVov', 'gratu', 'zwuLd', 'ZnsqE', 'SHES(', "er co", " Alia", 'TlaMz', 'RKYBj', "Se de", "p pra", "s = p", 'rario', "❌ *Pa", 'gPwMx', 'voxFT', 'ytJHg', 'qUhOG', '/Alyc', 'pert:', 'D/MM/', '🍀💰', 'qVkAC', 'JDyzd', 'dinha', 'kTok,', 'ee7a1', 'Ezopx', "𝐒𝐅𝐖 𝐐", 'tfYGV', "do Go", "xos a", 'JWKsa', '【᯽𒋨📷:', 'UIKnT', "ir te", "(s) e", 'tkWet', 'oxbHJ', 'ycmdl', 'OBQSg', " ✅ At", "00\n\n💡", 'iWadp', "ão se", 'tZxTr', 'reHwQ', 'maxAp', '(marc', "arga ", 'ilita', "o\n• *", 'setdi', 'sHese', 'umMTm', "ld on", 'FcDEM', 'uvuzL', "os\n\n🔧", '/tabe', "um eu", 'propr', "\n╰━━━", 'wKAIU', "s, du", "ero (", 'KLsbi', 'oteQL', " do d", "SAL P", 'róxim', "ute*\n", 'los', 'cxsGr', "er de", 'goPwm', '1132@', "🏅 5º ", 'WDGfb', "ona a", 'sVLcD', 'QBIwm', 'Pkewi', "*N* p", 'QPTqC', 'pvmod', "ha: ", "t @me", " + 1 ", 'reaçõ', " mds ", 'atory', "m o t", "📊 Tot", 'IDO*', "a a t", 'GbUFk', 'NwxMP', 'pgbtu', 'NfPyj', 'bJIcF', "SÓ IG", 'bakug', 'gus2/', 'CeQDv', " exec", 'kCLjK', 'BehBL', 'ADES!', 'icant', 'YeDOc', 'esati', '0SwS/', 'ctivi', 'aumen', 'épico', ", hid", 'crede', 'REALI', 'ink]', 'NjeVR', 'teção', 'ha_co', "o-o d", 'podem', 'YoAWD', 'rcach', "go)\n└", "ade\n┃", 'BAnCt', 'dQKzj', "✅ Núm", 'muzmm', "ão. C", 'oVPfz', 'tihQI', ") adi", "(a) e", 'dkMJT', 'amQyB', 'RUPO', " resu", 'sMLJz', 'ldUzb', "OU NO", 'nds', 'EalhI', 'qYPTA', "uiu f", 'cxFhu', "máx 1", 'tOGJQ', " impo", 'FLJOH', "ul!* ", 'sitór', 'ohupE', 'Unprc', 'itaçã', " URLs", 'gXAuT', " Gpt,", 'Abaix', "dia à", " \nAND", 'VmESh', 'wZjEN', '|1|4', 'eAUbG', 'ZmWIZ', 'rack/', 'CHQRy', "pra v", "o Cha", "Maru ", '𝐚𝐫!', ")_\n\n🍼", "(s)\n", 'nvian', " pequ", 'ntato', 'ZBDpe', 'asxVZ', 'yewnw', 'HibWT', "🔄 O J", 'annaC', 'GDFTx', 'OVAÇÃ', 'ntual', "nto t", "S REC", "s lib", 'czZhK', "DE\n🗓️ ", 'XrlMX', 'ister', 'zHXWH', "or, i", 'urso', 'OBFyR', 'SINOh', "ink [", " áudi", "┃ Tot", "ou \"", 'DJVyU', 'soadm', 'boas-', 'YcJWO', ": @", 'lAdfL', 'utf-8', " DE W", " most", " ao r", 'UoPGx', 'sQjog', "an!* ", 'l_msg', 'ile/7', 'gXKYM', "━━━\n┃", '`indi', "f] ou", "18 0", " NOVO", 'dKwqG', "es WH", " IS N", 'jWFQC', 'VrwhF', 'JhcWO', 'nBcQl', 'YFCxN', 'gIisC', 'ORA%2', '𝐍𝐔𝐍𝐈𝐙', 'QcBXx', 'CFjlL', 'RXGqF', 'Yrrss', "ke 🌐", 'yyqzn', "ma co", 'zacao', 'ORDER', "a Mis", 'stime', "do. S", 'nlIZV', 'ado!', 'PfrBc', "o: +5", 'fexZB', "a Reg", ", cor", 'HnTxx', 'ZtalD', 'lNcDu', "ria e", 'tiIEO', "oa ac", 'CuQug', 'CAtjw', 'OfuOP', 'uJdOB', 'kFoat', "sa es", 'MsuGV', 'como_', 'nZevF', " moti", "te vi", "mo jo", 'RcagM', "as e ", 'Jiiln', 'oHTsi', 'in/do', " e 30", "9 1", 'czngS', 'antie', 'uZXmk', 'beijo', 'visua', "━\n\n💡 ", "ADO À", 'GMdxf', 'III', 'cante', "s tod", 'ZabUT', "❌ *Te", 'aYiYz', "C, pr", 'opTqN', 'wMdBm', "ube a", "𝐍𝐀 𝐌𝐔", 'mtCOf', "! 🤖", 'BFFdS', "s (12", 'do_po', 'eGOMC', "OS 🔞 ", '0MART', "ndo *", "lar d", 'mESWR', "🤖 Sim", 'envia', 'tbQtv', 'DbFvT', 'WOJFE', 'RtEll', "_- 2 ", 'Uksna', 'HwjEt', " de S", "nks f", "O qua", 'yxGag', "fw, g", 'Ytqma', 'Mhafs', 'slist', 'QuQTh', 'pPTro', 'simi.', "um de", '*Esco', 'gLieg', 'DsANz', 'es.', 'hvXuk', 'payme', "lo de", " calc", 'NPVsn', 'audaç', 'find', 'eJKvc', 'minut', 'COOLD', 'IMuqF', 'mpact', "💰 Sal", "nda t", 'ogJTz', 'emGhE', 'dwJcW', 'QQXoJ', 'qyyrP', "io da", "nel c", "🖥\n4 -", "re a ", 'xKEfc', "' par", "🎉 RES", 'nime', 'fBFnz', 'ykrlZ', 'rvWwP', 'NsyFA', 'sgcGG', "\n- Al", "Do Bo", ", der", 'oMHgf', '/Only', 'Yvtmt', 'OdYDc', 'YjNTK', "de: ", "ds co", 'desab', "🆚 ", " boas", 'hItDe', 'r123', 'EFIoH', 'JeITn', 'AgALS', " da a", 'jqOfj', 'cláss', "a. Us", 't.fm,', 'kTILj', 'UPDAT', "rl, p", 'aflNu', "* alb", 'iThiB', 'xYbXm', 'qyQPP', 'brOyp', 'DIÁRI', 'rd.st', 'DSQVR', "ite g", "so de", 'rfePb', '/Mari', 'zSnLG', 'nalCa', 'ranke', "old p", "será ", 'onali', 'QtFJH', 'acao', 'jDJvi', 'zEazz', 'jVcua', "r tud", 'HLUik', 'QCNYS', 'hmHFU', 'FxSWz', 'el_gl', 'ESxgD', 'arqui', 'Inici', 'pWNGp', "or ut", 'IMRIM', "m sep", 'lnYYW', 'heads', 'Jmiaj', "va pr", "da fa", 'ddVXW', 'QHfOX', "a mat", "💕 Sta", 'adas:', "vado\n", 'Ofixm', 'UfSQx', '1bf8/', 'HmRfV', 'utTJU', 'xcecW', "trat ", "rgo ", 'GqtzL', ", nes", " @mar", "lo e ", "O máx", 'kajPa', 'lThNF', 'celar', 'libop', "✅ *LI", 'geJZk', "ndos ", 'ystem', 'ifiqu', '0988c', "0\ndoa", "ema: ", '𝐆𝐀𝐋𝐄𝐑', "\n┃ 📊 ", "te ol", 'WIijl', 'yxCHU', 'zweFD', "iv ch", 'KNkvl', 'mufJC', 'moVEE', 'EtwIP', "ta`\n ", 'tHTlN', " RICO", 'mForm', 'GWEN', "uem v", 'Perde', "\n┆╔┉✼", '3.jpg', 'qedUr', " Médi", 'ORBFW', 'HUdae', 'jiEkb', "bro\nd", 'tdail', 'minCa', "tra m", 'hCvjI', 'WLGEY', 'MgWTW', "da op", 'afOoS', "ÃO:\n\n", 'mLCRj', 'asCac', "id, d", 'RP)', 'MqiOp', "u / c", 'subje', "as ho", 'GegcE', 'ly=So', "erie ", "e sim", 'DgLqc', 'aviso', 'obais', "um se", 'lOEWu', 'WEtbn', 'dmFqw', "INEL ", "de 1h", "t, qu", "A qua", 'wCfMo', "io: *", 'kSLay', 'ocure', 'e782c', 'IvRpi', 'cXbpI', 'orati', 'rel-t', 'alido', "isa i", 'Mxdqd', 'BgIiO', 'saveS', '://ch', 'RKHPM', 'gQtNa', "e a n", " mand", "e reg", "lo do", 'gKATL', "nto)\n", 'thuzH', 'migo(', " O de", 'oWaSU', 'n&tex', "pos p", 'XAHyw', '5a070', 'jwThJ', 'GLAlG', 'ticia', "dos)\n", "\nVALU", "os nú", "r jun", 'wBOej', "o!* 🎪", 'oNGCB', "sta f", 'LXLSE', 'hDChc', "ção p", 'ejzXT', "a e s", "\nIrei", 'iSGKH', 'WGmaT', 'QFGXX', 'pgqLN', " -pen", "📲 Wal", 'liaçã', 'ZDQRV', " Reca", 'SFhUF', " *GRU", 'fpMax', 'trist', "sa te", 'eBafX', 'qRqGD', 'ChNqh', 'gxuvN', 'WdKoq', "rece ", "MR TU", 'OHSEU', "e até", 'GsBaL', ": !av", 'dTxFC', "o arq", 'LVLSS', 'htazW', 'HiYRa', "o e d", 'NFwwD', 'JZorV', "mas e", 'mFBSa', 'PLGkh', "aço g", "ão 📍", "u man", "\n• on", 'vezes', 'hQUdV', 'get-t', 'obal:', "ns nã", 'RNSes', "e pos", "s de\n", 'CNgvM', "iar [", "ɪɢᴀ📵\n", 'tdOGK', "✅ Hor", "empo\n", "a lon", '[parâ', 'nos.', "*\n┃ •", 'eZnxx', '/inst', "OS IN", 'VADAS', 'form-', "eça u", '4|5|6', 'FtDzZ', "💾🌟 Pr", 'otdWN', "mg, g", "\n\n>> ", 'igs/F', "ra fu", 'io2/f', 'erro,', 'ZPxrp', 'adrin', "\n💡 Es", "do.\nU", 'nk_im', "re um", 'b6bce', "\n- Ar", '023', 'uzui', 'xtnKn', "S* ⚽\n", 'ernat', 'hMJfe', 'uSNOF', 'BpPDj', '8980cUdhYO', 'menu', 'zWfPC', 'ídeos', 'QpDTV', 'irgp', 'NUuQx', 'kVluU', "rou n", 'Dific', 'snoiy', 'RqJth', 'armaz', 'guel,', "\n\n*CO", 'Prglg', 'ipant', "as fi", "kwai ", 'lEHkj', "es`\n\n", 'ngOUy', "m alg", 'JAQgD', "i\n-\xA0W", 'fnhEb', "ós al", " um e", 'tador', 'anga,', '100', "da. N", "_ com", "e uma", 'WvAoz', 'Agftn', 'WrqyG', '𝐓𝐎𝐃𝐎𝐒', 'bCJYk', "━⊱「 𝐂", 'rrZMC', 'ofake', 'HShol', "\n\n- C", 'st?no', 'jiGNa', 'HrFjY', 'UrcCt', "M sor", 'MQjwL', 'xNSBZ', 'Kghoa', 'hK58f', "os: 0", 'jfePS', " Jogo", "ir me", 'eComm', 'HSCgK', 'ppjxW', 'rQcyc', "𝐓𝐎𝐒 」", 'act_p', 'VwQsb', "gem d", 'TH1', 'iNNND', 'neste', "al\nde", '.jpeg', 'bvPlN', 'ODPKj', 'vdkJn', 'ivarb', 'iOmTk', '3:00|', 'gfVhd', "fk\n• ", "!*\n\nN", 'rátis', 'FhoBn', 'e/ran', " 𝐀𝐉𝐔𝐃", 'xBeoE', 'pvLpa', 's-M4f', 'ErEkq', 'yOuLN', 'kQUhh', 'QGzxC', 'hHWAU', 'WuTJF', 'ScMRu', 'enaZe', '𝐬𝐬𝐨!', 'dEUZf', " simu", 'ot.', 'pWBfd', 'yUQIX', 'Defin', "var o", 'sGiXM', 'RGÊNC', "(o) @", '*2:tr', 'PEmGZ', "es po", 'yvBLQ', 'imi2,', "❌ ERR", 'hlcPS', 'QVZQH', 'NCXAR', 'arcOM', "= ? \n", 'resen', "u a \n", "ha pa", 'SRNxC', "reu u", "𝑡𝑒𝑚 𝑙", 'Nvvgn', 'XBtkK', "IS*\n•", 'zDvhU', 'nsage', 'AtJEG', "ram r", "a ima", "o\n\n🔄 ", 'xqgns', 'wnvSB', " 🥈 2º", 'qtQFT', 'ntifi', 'cific', 'DZtPu', "r acu", "+/- f", 'raram', 'ZXqKO', "cada ", 'dio:', 'racao', 'ssBAF', 'GUanV', '=info', 'KtoFY', "┃ *Es", 'cjgKP', 'GROMm', 'gr.am', "o, ti", 'YwvNN', '|1|2', " Mous", "o, ", " 💑", ". max", 'BOT🪻*', 'omeça', " 𝐃𝐄 𝐄", 'oDvFj', 'hBssm', "👉 Voc", 'a222f', 'kSmeS', 'uEEeO', 'zuUUM', "l\n• a", 'wardG', 'atsap', 'I_652', " feio", "*\nPor", "ntos ", 'vhBHT', 'mhncW', "lo: /", 'JNfzN', 'casin', 'RjODz', "oje)\n", "po. P", 'eBglK', "ing: ", 'vida.', 'NDsyT', 'jmnEm', 'eleme', 'RFIBJ', "sar (", "ME DO", "𝙾𝙼 𝙴𝚁", 'eBgzY', 'a%203', 'YeNEN', "rter ", 'ojNAa', 'deXOT', "co) e", 'press', " REAÇ", 'WcXWC', 'ISTEM', 'ZNOPr', 'DIyYo', 'krjRm', 'CiKCc', 'eByCo', 'KxnTO', 'dRfNa', "o. Ag", 'RfNlB', 'HEOtX', '(18+)', "je! V", "⁸\n ──", "e o D", 'YDEgR', "r TOD", 'GENIO', 'QTlGp', "\n VAL", " 𝐅𝐄𝐇 ", "o sal", "ivo q", 'al.', "pts, ", 'recom', 'zxvXU', 'veIBM', "✅ *Ra", 'QLJGJ', " Soci", ". O p", "kpot ", 'BYLMb', "e ent", 'PbXrF', 'EegrS', 'plo', 'XzUHn', 'fari/', 'tais.', 'gUFya', "ro\n• ", 'olhyA', 'HwTBw', 'vmohw', 'TdFAz', "M DES", " 𝐌𝐀𝐑𝐔", "e ace", 'áxima', 'DxafF', "Use: ", 'dvEXB', 'EeOGM', 'luuhH', 'iQWgE', 'nâmic', 'bwyHb', 'Quali', 'omkXG', 'NiKSF', 'ubsvv', "!\nDig", 'KdEBD', 'ioKjf', 'PbuQA', ", loc", "a Apt", 'zGWCW', 'outra', "ó exe", 'LeXxd', 'PKdwZ', 'erCas', "eact ", "sa Sh", "do*: ", 'ygGsW', 'pGfHa', "cmd b", 'UozlE', 'pediu', 'EHWsR', "rro: ", 'fyZDR', 'o/0QV', " MOON", 'pTrac', 'BwPEW', 'are', " Rest", "%*\n🍼 ", "s lem", 'ǫᴜɪsᴇ', 'vsZxd', "- GRU", 'símbo', 'DdvRE', " ⟯ - ", 'aceit', 'ZivRu', 't-tim', 'XvUJE', "└─ `", 'iando', 'ByBna', 'ravis', 'uciaH', 'SFeXm', 'Yaljw', 'BEtCE', 'YYpgy', 'Brito', "a a A", 'Dmlgl', "Isto ", 'eitar', 'ze=62', 'LkNdL', 'qUDDD', 'URINH', "f [p]", " play", 'padSt', 'egund', 'aTniU', 'JSVRD', " 75%\n", 'dnPEv', "┃\n┃ 🔧", "X9 FU", "nas t", 'AYNLI', 'addXP', "o emo", '9d4e4', 'DbaRs', 'GrZPu', "TO us", 'qQQgR', 'cMgzU', 'lSFlg', 'SWCsw', 'CRhlg', "❌ Mud", 'andan', 'SYmsl', "ak: ", 'etas', "+100 ", 'p-sto', 'fVpzD', 'D8kOk', 'to!', 'qlAum', "┉✼┉╗\n", 'RuRqp', 'oBVDn', '1/01/', 'TzPgf', 'HBYgD', 'DeNxr', 'bnvwu', 'RCxpn', "d ent", "ros m", 'tNadn', ", fin", "deo: ", 'KdyKF', 'lFPFB', 'cWaty', "ibe r", 'jUBgJ', 'vxaxx', 'mDnuW', 'bXUwB', 'VKFVh', 'iwofZ', 'VyIuB', 'eNDqz', 'QPNUw', 'ruind', 'iWdpi', 'JlKqf', "ar to", 'lkNVo', 'RSprJ', '/abcd', "is de", '𝐈𝐍𝐓𝐄𝐑', "a ano", 'ories', 'autif', "do in", 'EnctW', 'antig', " É ", 'afBVr', "ão li", "LPE* ", '|0|4', 'desco', "o alt", 'EVONw', 'CTNkF', 'Usuar', "em qu", 'ynlCf', "ado: ", 'JoOCV', 'LjWcT', 'INDIC', 'mxHBW', " 𝐬𝐮𝐜𝐞", 'lBAbc', 'cYGcu', 'sSyst', 'uroRN', "E INF", "``\n\"", "e ou ", 'DKYNC', 'GeIzv', 'e/%20', " reto", 'QFWAA', " bônu", "o : @", 'wvEHx', 'human', 'BPsLb', 'TqPNz', 'Polon', 'desaf', 'rlimi', 'docum', "o.\nPe", "min\nr", 'hRnrA', 'amand', " \n\nCo", 'vzIoi', 'Latvi', 'hSAYY', 'ClEWR', "ta se", 'ovaçã', " a ", "EIO!\n", "S🔞\n\nL", "lo a ", "seu r", "ha su", "ojis ", 'nte:', "o mom", 'osxxN', 'LSPln', " Míni", 'oleci', 'HewkR', 'HYrvT', 'cozin', 'grêmi', "⚙️\n┃ •", "🎨 Emo", "ver c", 'wdlfh', " Ence", ". Apó", 'GVhZI', ": 1.5", 'BAKUG', 'nstag', 'orno', "RE is", 'Mensa', "ela s", 'BMUku', 'CJNwq', "044` ", "na úl", "o: !d", "🧹 ", "r alg", 'tkmBL', 'PZpez', "ulo: ", "Z NUM", "\n📋 *L", 'citad', 'QyXHU', 'sive', "»°】\n𒋨", 'fotom', 'tUsIl', 'nLyRF', ", XP ", "s 25\n", 'TEkra', 'OifxS', 'rtune', 'QcTsy', 'SuOuh', "❌ *Er", "s]`\n├", " há d", "I 1 D", "O BAI", 'mojiG', 'dGsHn', 'rHUGy', 'kuMGT', "👋 Sau", 'hzdAA', 'MsRKu', "ES (A", 'izXMg', 'vamen', 'vuBxk', "ção r", "no se", 'infod', "s mem", 'RorAh', 'xLzOo', 'ee28c', 'JBzph', "MA PO", 'RVvCq', 'sbYZY', 'OuQVW', 'xjrOm', 'sZxGK', 'MquIT', "OWN M", "uma n", "- Gre", "\n*Com", 'UEIA', 'Esper', 'back', 'tsApp', 't.lyo', 'nQyfv', 'rTRJp', 'StFxy', '3fIbmlH', 'eQPHP', "]\n\n*E", 'GDecp', 'NREWb', 'TOQrY', 'e=Zan', 'mas/', 'ZYIqB', 'ide.', 'Dark', "ios s", 'MWIaC', 'PURqX', 'WpkUQ', "s age", 'charl', 'TKPZd', "m tim", 'zkRSp', "\n┃ Ve", "ra 2m", 'SwNTG', 'VIDO*', "lize ", 'agram', "m, nã", 'NgmSq', 'SVGFB', "• Dif", 'EmUHf', "r_id ", 'SwJWJ', 'uto:', 'qwtBA', "𝐎𝐓𝐀𝐋 ", 'attp4', 'HiHeE', "com d", 'magin', ". É p", 'fffff', 'UIVpV', 'lUJNj', 'resum', 'fHmNE', 'StQWz', " sair", "⚔️ ", 'SIAPC', 'jdLrQ', "a rea", " em b", 'FGKof', 'gJJUJ', 'seq', "- COM", "is e ", 'NrbNZ', "ig na", 'fFJVD', 'IlGAM', "nhas ", 'WaZsY', 'NcthE', "📝 TEX", 'Mwzf/', 'XvSGj', 'EFksz', '_musi', 'posso', "!\nAti", 'wflqy', 'ULjcO', 'WlhwM', 'TSfiK', "「 REC", 'rarEs', 'yjBVP', " prot", 'bRloT', 'mvdWV', 'WprTK', 'lHxEk', "na bo", 'niynx', 'aBdEK', "a T", 'zerar', 'pjIZc', "nvia ", 'AZGwz', 'nco)', "┃\n┃ ✅", 'urFQz', 'SHYbN', 'luído', "⭔ Tít", "━━━*\n", 'cTNdw', "iv sa", 'IQZfi', "d @vi", 'naçõe', 'XIZUE', "ke es", 'fecha', 'DUDHo', 'bQyHy', " 🔓 O ", 'tzuWM', "6: ", '00:00', 'APAGA', "figu ", "lo\n│ ", 'c63b7', 'QdHOU', "🎰 Jac", "Eu nã", 'ORNGk', 'HFCnU', 'Ativa', 'HMy3/', 'REGfO', 'jOFtA', 'da_do', 'VEITE', 'CyLIi', 'vbEKC', "Mini ", 'setda', "rna i", 'hBkaK', "l):*\n", 'SReVf', "TO!\n┃", "vai r", 'minWa', 'DFokf', "re ad", "E is_", 'NQYZS', 'Googl', "e pat", 'value', 'altan', 'SUnQC', 'anota', "re os", "ao áu", 'USENT', "te, n", 'vcKdV', 'AmhuU', " uso ", 'FiTbg', 'CwwJp', " \n\n 「", 'sgnwk', 'nkDHR', "ou te", "e bem", 'VyZaG', 'Recom', 'IMPA!', 'uJfyY', "m:* ", 'rEGrw', 'Yontq', 'fde6a', "com \"", 'LEwmT', 'inYzI', "or\n┃\n", 'gqyPQ', 'rxhkI', 'zcFfW', 'rteio', 'sgcmF', 'pos.', 'GEM_G', 'ÊNCIA', 'bBuJH', "sta v", " ESDE", 'izvps', 'Milit', 'wvxOL', 'vozme', 'ADOR', 'OQzvd', 'AzwsH', 'uVMwK', "ma mí", 'dio]', "\n┃ 🔍 ", 'lUwoz', 'tBNqq', 'DuIdp', "E hor", 'VtAzV', "unta ", 'NORAR', 'i.sim', " recu", 'QWAWV', 'iWJql', " 3º: ", "= Só ", "do ne", "um us", 'gbOZN', '789@g', 'YbtfB', " 456 ", 'atus:', "ar - ", 'a_afk', "ays: ", "ʀ.*\n𝙏", 'HvvfF', 'GcOUt', "pt de", 'ALTER', 'LZZmS', 'FWUfZ', "🔒 Só ", 'tou', 'ZWNCG', 'o/vdF', 'capou', '.list', "exec ", '࣭࣭ٜ໑⃕ꔷ⃘', "e no ", '3539476CfFNkc', " e ba", "a a u", 'UsBhi', 'boole', 'OEDib', "o dis", "ld in", 'escri', 'SZDTt', 'DOUBL', 'InFet', 'volta', " bloq", 'RiZxg', 'myuXr', 'NtYfu', " 🎲 AP", 'cRgLN', 'MtYsZ', '0|3|4', '`!pro', "💖 Pon", 'ge-of', 'estou', "s que", "uto f", "Cʜᴀᴛ ", "d = ?", "itou ", 'araçã', "CT pa", '*Como', 'ity', 'YGNiU', 'GCEGK', "go. T", 'vAqfH', 'KsToB', " giro", 'XwdBe', 'Nwfob', 'rumar', 'ttp15', "📺 @", "/ can", 'LOWEE', "\n\n🔧 E", 'cfcWS', 'HQgqu', '-YYYY', 'EThdv', 'kdEGE', "ass m", 'KXAhd', 'GnDMO', "❌ Nom", 'RmPGf', 'wGlsy', '[filt', " um a", 'mwnNQ', "iar s", '𝐂𝐀𝐌𝐏𝐎', 'ncia:', "🎵 *", "「 COM", "da: ", 'SCQgw', 'WhhXA', "s e l", 'YmBUZ', "nvio ", 'PRIET', 'eHeif', 'IIUDk', 'dViaT', " @dj ", 'mbrar', 'LVFwj', "49 pr", "𝐚𝐫 𝐨 ", '[STIC', 'MEtlv', 'NQATK', 'cdJiX', "r o c", "res\n👤", "io ht", " 🖥", 'SWhym', ", sai", "e red", "o hor", 'YziaW', 'MPEZA', 'XVmKS', 'mJsJL', 'Onmvt', 'cNVjq', "upo c", 'push', 'AZoCV', 'SDoca', 'ilvFz', '9.jpg', 'utotB', 'FORTU', "os ju", 'XHaDh', "RIO O", 'ários', '0.pos', "ot, a", 'cHOhS', 'McOZg', 'gif-e', 'kHndq', " com ", 'itura', 'IYChK', 'NtNLI', 'onlyA', " *SIS", 'SLvzg', 'nMpGg', '0|2', "e*\n\nV", 'zqPWi', 'EfAQO', "⛓️ @", "┃\n┃ 📝", "po)\n•", 'r/X.', 'sKQas', 'rtant', 'AiRmf', 'sponí', 'QOdsP', 'kdhWd', "r, id", 'RcAGE', 'qjxpT', 'DzjpT', 'mdQdn', 'prefi', " pont", 'kuKek', "uem s", 'JPBFe', 'ers/', 'utoma', "um Gr", 'SAITA', 'tBYKr', 'ealiz', 'dwRaV', 'oINQG', "s\n\n💰 ", "o NSF", 'desfo', 'czBvp', 'AdYBN', 'etect', 'GYIjA', 'super', "um jo", 'FwIup', "💡 *Se", 'ecxhZ', 'Tok', 'CnsXe', "tar 5", 'dUaTk', " d pa", "18 2", 'Gqrvk', "cê ap", 'TzjDp', 'BILID', '10|5|', 'GRCFP', 'c0924', 'qniiO', 'ciExt', 'WJUAg', 'wellc', "ar qu", "s:*\n`", 'ozerz', "2 pes", 'tCkUH', "do as", 'omove', "💔 @", 'earcm', "uso n", 'hKcnd', 'oxkYn', 'gsGol', 'gKOuK', 'rIfWG', "\n\n*☝🏻😌", " seja", 'fHLAe', ":* Re", 'wxRyy', "uto.\n", 'aeunu', 'ACION', 'HWEDP', 'ifLjf', 'gram.', 'tSxUh', 'probl', 'zeqph', "O rec", 'QACjD', 'isAni', " A* 🏆", 'GIHVm', "elo b", "ele f", '𝑟𝑒𝑠𝑒𝑛', 'bxHQc', "🎮 *Us", "; [b]", "use n", "ai no", 'dPdds', 'BNdiK', 'ursos', "Cami ", "po : ", 'szrZf', 'LrUVL', "∆S RE", '𝐖𝐀𝐋𝐋𝐏', 'bidos', "┃ Qua", 'otter', 'izaçã', 'OwbiW', 'linef', '𝐀𝐓𝐈𝐕𝐎', 'nte_i', "ay 🏳️‍🌈\n", "ue co", 'BbSxL', 'LGTwN', 'Slvzk', 'rFAaq', " a de", "or co", 'ainer', 'vzvFj', 'RRsuH', "elar\n", 'GsuDh', '10010', '15606pdaccB', "es at", "ão es", "o rem", " brev", "o, Ap", 'QYOSC', "s\n│ e", 'TgHxj', "a` pa", 'Vwuif', 'UFpxd', "YYYY\n", "lida ", "n Cre", "𝐮𝐦𝐚 𝐩", 'neFZT', 'olici', 'RNuPY', 'qUnyI', 'bqCHY', 'CzmgX', 'incad', 'rwarn', 'indiv', " shap", 'odos|', 'NHOlp', 'OPozE', 'rjuwd', 'ZwHlo', 'gifPl', 'rtuae', '•𝑬𝑵𝑻𝑹', "o há ", 'SeOfq', "ão pa", 'PvKXl', "os\n\n⏱️", 'ahSMP', 'WIxfV', "s, e ", 'AbYiE', 'ith', 'AWZOd', 'LKnqB', 'RJwRH', "ma ve", "mo vo", 'ooXCx', '|Resp', "el pu", "🎲 ━━━", "ig [t", 'evdwK', "𝑬𝑵𝑻𝑶 ", "ovo n", 'IXKzR', " Chat", "\n📁 Ti", 'JZiYL', 'PPT:', 'KuVfU', 'IpRbm', 'uVLpD', 'YFgKk', '3|6|1', 'LECoB', 'ZPYFB', 'hFWfW', "el e ", "ai re", "ng gl", 'ttENQ', " VEIO", 'sendo', 'sulta', "📊 *ST", "rie A", 'tilha', 'njvCi', "erto ", "or re", "s: of", 'PVdOU', 'invál', 'brasi', 'sMBdh', "nco d", "NE* 🤖", 'parse', 'iTING', "i cor", 'ai...', "no Pi", 'iro', '/Cclo', '1=1', 'dRTBo', 'manei', "• Cap", "HOU!\n", 'hBSvk', "á ser", 'api/r', 'HlKyp', 'XoJzu', 'KkzNi', 'oção', '12/20', 'rjBkC', 'AllPa', 'GIwXs', "- Fin", 'cio', " 45 s", 'setGr', 'ores!', 'nfnqC', 'ame=?', 'i.git', 'negol', 'TgzMi', 'argDU', 'PFlUR', 'SAKUR', "🌦️ Cli", 'QwPWY', 'ilEVv', 'oiVxW', 'NBOmK', "\n\n[ C", "🎲 O d", 'raxHC', 'LlGTj', 'ejeit', 'uPJBr', "e fei", 'idiom', 'roleC', 'nhado', 'ccIEZ', 'hdBdK', "o!* 📢", "é het", 'mpo=0', 'oLHpB', 'marsv', "vo AT", "* \n", 'nada!', ". Por", 'cnRFq', 'mxBEz', 'PMUta', 'rMmwE', "el ex", 'EaHwF', 'NKJIf', 'JGkwL', 'text=', "ue dá", "\n┃ 👑 ", "5x po", "e voz", "uma r", 'funct', 'HWZVC', "┃ alg", "ando ", 'dtbrJ', 'AnaiC', " 𝐝𝐚 𝐬", 'ARABÉ', 'NpQeW', 'zdoAg', ". Sem", 'EKNQy', "a Qua", 'xfQsv', '41845', "⏰ O q", '@vita', "┃ Esc", "╭〔 *C", 'runc(', 'uarda', "NHAS ", "ias f", 'iVHij', 'uEnce', 'xUKeJ', 'AhAHl', 'iBbOe', 'rcnxK', "or:* ", 'TRIiZ', 'iikDW', "OS:*\n", 'fined', " Pate", 'QEUYX', 'ggvnR', 'zyDub', "┃ 🔗 L", 'heWcC', 'Notíc', 'I-CAL', 'tInvi', "o gru", "iv ca", "pico ", "as ca", "⚠️ *PR", 'oEXPK', 'SCqSw', 'CALE', 'stMes', 'nOXIC', 'sHVoJ', " o Av", 'noKEh', 'sHmaZ', 'mador', "\n\n🧮 *", 'huEuy', "s min", "15 go", 'membe', "a) ao", 'IPXkN', 'nNoeZ', 'mZNnJ', 'Qxwax', "sos d", 'yUGyp', 'ORARI', 'simi', 'GADA!', 'rcIkV', "om\" p", "le é ", 'jcpYf', "🔥 𝐏𝐀𝐂", 'fETXu', 'OHBLG', "a o j", 'overá', 'OeWKr', 'ABÉNS', 'BlEuT', 'LAKmp', 'ggtCw', 'pyBrI', "e\n┃ •", 'sevid', 'RLvNX', 'wRNOa', 'gZTdA', "ora L", 'epPQE', "e RAM", 'ecWPI', "0 - F", 'RscFU', 'Jogad', "ogue ", "ue 0 ", "ter r", 'UiCKI', 'eUQtJ', 'xt=', 'enção', 'bBjAi', 'ono:*', 'ERTÊN', 'byDpm', 'aaZMI', 'OkfDf', 'epres', 'qHQhs', 'OSpqk', 'vlzel', 'igWTG', "k: ", "╦╤─ ҉", 'Enorm', 'xALvA', 'orca,', "om nú", 'ocs/', 'SuZyV', '|3|6|', "om o ", 'ENNXm', "as dú", 'fromF', " ou d", 'uSwfN', " Soli", 'Perma', 'nQflE', '237a0', 'IfzLY', 'actio', "owns ", ". A c", 'cUdQb', 'jvmBJ', 'init', " ou o", 'X-WA-', 'opena', "é Fei", 'EeQGo', 'aily_', " conv", 'CDNGU', 'beção', '|1|2|', "a dif", 'Jpvcd', "old n", 'rever', 'ebncE', 'vwHdu', 'Noojr', "o, se", 'nezuk', 'hGANp', 'vjPpL', "a *", "🌟 Par", 'hqRAP', 'IrUjV', 'faxal', 'rado', 'gram', "der d", 'date', 'eNhWh', 'cozdh', 'dshXD', 'gpinf', 'ncont', 'hamad', 'QdqUF', "ar st", 'etich', ", Pap", 'onclu', 'iBVyd', 'wcjuf', 'JztbB', "ira e", 'd_cou', "rrar ", 'WurCw', 'OQTxh', 'inare', 'mPCit', 'uwMlO', "uma e", 'iXdfJ', 'wUVeq', "o fal", "os fi", 'cida.', 'JtCZK', "os. 🤤", "em, v", 'AaVnL', 'VmlWm', "a ban", "old c", "📊 Ten", 'assem', 'TqwCw', "a bai", "E 1=1", " 𝐂𝐀𝐈𝐔", "eto o", 'AÇÃO:', '91999', "OSAS ", "o = 0", 'mJbVy', ';base', 'vido(', 'PUMHz', 'YODAb', "ato d", 'lento', 'dvert', 'DO*', "com a", "00 ", '61ea5', 'mânti', "- Exe", 'ncewi', "do\nno", 'tmIHX', '.us', " orga", 'begpa', 'ttp3', 'a0543', "cker\"", "s ao ", 'XgEuO', 'utSec', 'QJmkj', 'PhRnz', 'ento)', "g de ", 'jadas', 'alida', 'momen', "ove u", 'NDvbY', 'OCOXM', 'ste.', "ink é", 'uJhmE', "ém do", 'rror', 'yThUc', 'fzhBd', "ve to", " o ch", 'qAUQr', 'NUwFy', 'ce%20', 'sZCzX', 'hzuqr', 'XZrXC', 'ory.l', "o QR ", 'novos', "ão ac", 'duran', 'tItCj', 'MBPsh', "lar\n\n", 'REMOV', 'yfXfw', "que f", 'yoFtY', 'ACbfc', 'VqYpC', '━━━━◉', 'triçõ', 'riu.', " as c", "a ati", 'oNGxU', "┃\n┃ A", "de co", 'êbado', 'YSeFJ', "at Wh", "DE GR", "de fu", 'Conte', "❌ Pro", 'XnkBN', 'IOS😂😂', 'KVVCb', " de 1", "NA! V", 'mRHaO', 'KHuOu', 'zohxU', "no bo", 'TTonh', 'pbot', 'ibind', "e pod", 'vlfMG', 'VBtqd', 'pi.co', "9 con", 'JFokp', 'nmXcx', "ine a", 'qFyZU', "a a s", 'CwmVb', 'ks_re', 'DEFAU', 'LyQkQ', '|2|3|', " (don", 'Rwgun', 'ncMPj', 'cdef1', 'doaçã', '6|5|3', 'IMITE', 'BALHO', 'hRpzR', 'Exist', 'AaDOa', 'cial', '1|4|2', 'Ediçã', "s*\n🚪 ", "ha!\n\n", 'DSMbi', "do de", 'YcJNK', 'BTPpv', 'asmLr', 'vwlDi', "to: *", 'file-', '▰▰▰▰▱', "cia: ", 'UZJhr', "com _", 'da_ta', "🍻 BEB", 'vzCEl', "Key i", 'sZSAp', "nir u", 'oTOgy', 'ition', "mes d", 'kgmyZ', 'iAIaK', 'uNbpX', 'UHjpT', 'criaç', 'hGuLW', '/w9Ea', 'porta', "ona l", 'queia', "K DE ", 'GcsFJ', 'JyQgI', 'Receb', 'reto.', 'dRKUa', 'renov', " Full", "_•́ ˶)", "tas l", "a épi", 'UPXit', 'wPbTc', 'SUCCE', "ns co", 'mqELD', 'CGJoE', 'quali', 'tipo_', "m\n┃\n┃", " 𝐑𝐔𝐓𝐄", 'oaYTW', ". Res", "ará a", 'jjWzT', 'UOhWN', "└─ 🔞 ", 'cdTBl', 'Fqwav', 'HHbMU', ":_*\n*", " 𝐪𝐮𝐞𝐢", 'sdpVC', 'KTkju', 'vthKn', 'GQAbd', 'UbxdE', 'xIcxT', 'SPECI', 'evil', 'RMuis', " ESPE", 'XafGJ', 'ePKSj', 'sa.', 'Estra', 'VSHJA', " simi", 'nAwVl', 'pbydQ', '8bdf0', 'AJVmw', "em su", 'nick', 'iwaOX', 'GAMO-', 'wrqQA', 'CIPAN', 'sZNAZ', 'xTurH', 'eCode', 'PlHBq', 'IHFHd', "25)\n•", 'DQbQp', 'time]', 'zNKUC', "oura\n", 'uvoEx', "10 ou", 'PyXRy', 'multi', "𝑰𝑶 📀\n", 'pensa', "ios a", "e: li", " um á", " amor", "ao ad", 'bZZLI', 'LxyZm', 'ionad', 'MujDM', "s 1 &", "res g", 'IjIkq', " x9_l", 'EyntO', 'const', 'bstit', "e já ", 'MtWbn', 'ecqxF', 'orYEi', "1 - A", 'vzPPN', "logo ", 'oted', 'oldow', 'zrZwo', ", é a", "[ 1 ]", 'hHErX', 'ikVoS', ") for", 'Andro', "STE D", 'Brinc', 'jrFkT', "💬 Men", 'ArMsq', 'uhDEr', 'PFSjS', 'hrbPM', 'TUDOS', 'jGECu', 'ave=', "r. Us", 'ZbNms', "bo po", 'HMZOK', 'ACwJu', '.poin', "7) Ap", 'eByYK', ":* Co", 'tGhGE', "Nada ", 'beAVl', '(máxi', "x por", " = 1", 'needA', 'upwAF', "s mel", 'rmZcn', "ica i", 'fDobG', 'milit', "_gp =", 'isBef', 'pe=ka', 'iCbPc', 'RgMTO', 'ound.', 'uVqZz', "ros c", 'inks:', "IT 1", "u uma", 'vfjsN', 'EJOsx', ", /Xh", 'eONBz', "SFW d", 'hDpJr', 'petiç', 'ad=32', 'REFIX', 'dNxxY', "「 𝐑𝐄𝐆", 'SntxO', 'IGHT', 'IJXTx', 'KYFCl', 'wZIBS', "s (qu", 'MZpiL', 'UCAN', 'FuofY', 'Sorte', 'fhjHH', "(se o", 'ytvFa', 'DQEKc', 'wmVlq', "┉╝\n", 'dPSUx', "m vaz", "m jog", 'tWfoU', 'BDdgv', 'PprRY', "es:* ", "ande ", "ID e ", "*, aq", ", str", " ☁︎. .", 'DUoyo', "ara q", 'yoEqj', "Só is", 'oaldp', 'ile/a', 'fTnup', 'ybMqN', 'MCLOV', 'hGTej', 'PPSNx', 'órias', "ma. N", "one 2", 'TICIP', 'CItgL', 'rEtZo', "e bri", 'hkAJm', 'jbcVH', " & PA", '/apli', 'McVCV', 'ZdihP', 'tinua', "[ Gan", "\n┃ ma", "ocmd ", 'ECUÇÕ', "l det", "0 a 1", "à sua", 'OuzKl', 'rTILJ', 'aixar', "S*\n", "do\n\n🔧", 'PkFye', 'aDXna', 'ijOrC', 'Xelll', "ios e", 'lePGw', 'wiDUJ', 'bAOTD', 'yjdxT', 'znUCd', 'WMybq', "ocê )", "t mui", 'ANTES', "iv x9", 'ugsgo', 'sAEnj', 'tPOVa', 'ivida', "afk, ", '&page', "DA FI", 'OUpkY', "os Bí", " tal,", "la o ", 'rança', 'vido:', 'NAMYj', 'Motiv', 'SzUzv', 'paran', "% ❱ g", "MB\n┃\n", 'qpMZS', "] Mas", 'lOALn', "┃ 🏵️ *", " da p", "ao su", 'uMNTx', 'TsHse', 'test', 'nSuhi', '@g.us', 'lBoyz', " ano", 'fps=3', 'uivo:', 'jxIhB', " ocor", ":*\n`", ", com", "AS mu", 'ivivw', 'OMÂNT', 'spect', 'DUtiu', "AND v", 'fazer', 'xztvS', 'amas!', "u ana", 'zMjHC', "! 💰\n┃", 'runrp', 'HnwzW', 'jAxtV', 'IAYCL', "p com", '_ganh', 'brá-l', 'XoGho', "o ape", "oa va", "d 100", "nu\n┃\n", 'OhIQu', 'maSmo', "to\n", 'radas', "ar po", 'gNzor', 'hpjvt', "ram i", 'tuir.', 'OpdBj', "m 3 a", 'NOAEa', "o bol", ", etc", " 7 = ", 'Ignor', "ndo O", 'aSdrS', 'CXfls', 'Reach', 'vUHfa', 'ario2', " 📊\n\nE", 'UhyVh', 'xlWLh', 'utUgI', 'RQSJI', 'vPJxr', 'bros:', 'VSCwQ', 'êmea,', "o usa", 'tWrbV', 'pVpPT', "99 da", "e! Vo", '╚═══❖', "🔄 SOM", 'irFbm', 'eveli', "ivo |", "os do", "\n🧩 *E", 'otopU', 'Wmkpe', 'domin', 'FMlRq', 'help', 'obrig', "um: ", "a col", 'toura', 'catál', 'CYUzm', 'Vence', 'CxiuH', 'fGSIz', "var\no", '.matc', "e. Se", " caix", "👥 ", "- 🎧 𝑨", 'USecu', 'jNIwN', 'ZHMGY', 'igar', "ao = ", 'GspHK', 'lCRva', "S 🌟\n", 'mltRj', 'denov', " em t", 'FFimE', 'yLMDz', "𝐄𝐑 𝐏𝐀", 'PlRgb', 'CbQim', 'jGLnv', 'Iwapy', "na te", "xo @m", 'cDcOl', 'VQgba', "á nen", 'FpdGS', 'cPEOL', 'ejQUg', 'dJWMw', 'LTrBg', 'mpJgr', "á adm", 'FSqEv', 'qhbLv', 'Carni', 'fRSWe', 'RDTNw', "m que", 'a/rem', 'IgDcs', 'aqui,', "os Fe", 'tonwq', 'SpzDh', "s nes", "API d", "ão ín", 'a_reg', 'NznZq', 'iFJcv', "\n🏅 4º", 'xlVIK', 'dono4', 'ransc', "um áu", 'ocoSB', 'ISqwl', 'kCNzu', "ar um", 'calin', 'odUeX', 'áudio', 'BmoQX', 'sform', 'xdnHb', 'qCvic', 'zando', 'wDRhr', 'ZdeGA', 'AdMeA', '/Nega', "_- ", 'plos:', 'olaçõ', 'strit', 'os_pa', '𝐟𝐢𝐜𝐚𝐫', "rda, ", 'LADO', 'aQBqQ', '4217', "á env", 'Ghmua', 'e6fe1', 'wuCOO', "🚫 *SI", 'NqWWr', "o: *", 'icar_', 'nhVah', 'BVnRC', '🔥𝐏𝐀𝐂𝐊', 'nerac', 'sZOau', "ome, ", 'evaGe', 'KyHCS', 'whIWj', " -_-", 'gLUYG', 'TsIht', 'WnZkE', 'YsBBm', 'LYavk', "o\n• v", "o!\n\n🔄", "old s", '𝐓𝐑𝐀𝐍𝐒', ")\n┃ •", 'hJCJU', 'estin', "NÇÃO ", 'xongN', 'Sedut', "❌ Núm", "✅ *Up", 'ouzQP', 'FKDvo', 'nhoso', 'sk-ab', 'gvSqS', 'FmApn', 'IgDkm', " prog", 'tbNGN', 'hamen', 'mAqcq', 'ETKcR', "nto v", 'cHRAR', 'aqQhc', 'angea', 'yFSAs', "l = ?", 'GxqZt', 'LRPGt', 'lVcsp', 'Esklv', 'lEhMB', " Vári", 'fIdDb', 'SUÁRI', " 𝐄𝐌𝐎𝐉", "ats W", 'EzylY', 'playd', "📷 *Fo", 'rCXYM', 'RIPGA', "er` -", "lvo q", "vel p", "o per", '../..', 'bsOsH', 'OmiUb', 'TFnTr', 'bkFKF', 'qxjSY', 'WHINJ', 'XfkUc', "o Kwa", 'mPTHA', "\n│ 📩 ", "en de", 'yEsiY', 'SDEAT', "Tipo ", 'kwZtN', 'DQiuE', 'mqmfp', 'lusiv', 'GlLbH', "*\n\n*F", 'untos', 'kvjZC', 'VReyY', '50%25', 'MHPSs', " ou f", "1.72'", " Link", "\n┃ 📱 ", 'MDzDA', 'QOUYD', 'UoTrM', "la\n- ", "ista\n", 'lembr', 'sLeDI', 'agens', 'onar,', "UPO*\n", 'hwDUI', " Conc", "\nMens", 'ceitá', 'setli', 'KZMzO', '🐂🐃', 'jnTvu', 'yWJnY', "ou fe", "v\nSta", 'vVcsr', 'aguem', "║ *Da", 'xIfqL', "er:\n┃", '1|4|3', "co = ", "gp = ", 'czvbO', 'mês', 'GBYWe', 'TDeJD', " e os", "「 𝐕𝐎𝐋", 'nfLqc', 'DAS', 'GRbLv', "25\ndo", 'êmio:', 'gXlYA', "isa s", 'tOwwe', 'QXHeq', 'CNpRZ', '*Uso:', "0000 ", 'YZbZT', "S ATI", 'USkHQ', 'iwGpo', 'FVmHM', 'vrão.', 'doFJs', 'Pense', 'EvXaA', 'Jdbzw', 'NvLCC', "= 1 A", 'huPTT', 'ozAmz', "e mac", 'ersar', '🪻✼◈༻═', 'guard', 'KICK', 'nupSS', 'svHJy', 'eEldW', "os Sã", 'chatg', "━━╮\n┃", 'mWyhn', 'rtWAl', 'fzWGN', "\n📝 *A", 'Utili', 'DO_GR', "a é s", 'alogo', 'nutos', "%*\n📱 ", 'VrDFO', "os Re", 'ria.', 'MYzpG', 'ideo', "e bom", "🔥 *SU", 'hYWYQ', 'fleQQ', 'LNduE', 'rsg/%', 'citac', "\n⏰ *", 'oPRim', 'UHCgz', 'ealuQ', 'kvwmb', 'ZebdT', "or ac", 'bMwXk', "/Xd, ", 'ZHoLf', 'GUNTH', 'iuRau', 'now', 'packa', 'KhLci', 'thaOi', 'TdYVu', " Pape", 'Vezes', 'TZAKM', 'lavrõ', "ente ", "ima v", "/Xm (", 'Lua', "e env", "u vid", 'FkGZs', "a nov", 'areia', "em ge", "sta é", "na li", '440c3', "⚠️ Env", " Quan", " vs ", 'zXwPJ', 'otag', 'mNdfT', " nos ", 'sub-f', 'SvTvl', " sw\n-", " voto", 'getin', 'ANnqv', 'MFcgE', "ui a ", 'YTxta', " soli", "ixos\n", '3TIOF', 'Gzjlb', 'jbwAC', 'epuQy', 'quQAF', 'rio/1', 'jfLHS', 'rtsHO', 'trcmd', ")\n┃\n", 'AykNQ', "ar, d", "s cos", 'XcbIV', "l, Sw", '252ef', 'XZCms', 'Biste', 'HQBnz', "ntra ", "s nív", 'l/%20', 'Sljjt', 'yumdg', 'vcScJ', 'sende', 'vJget', 'rado,', 'etame', 'OEDzf', 'lum', 'Escop', 'BVPws', 'AczKR', "its (", 'qXRjj', 'ial:', 'odas', "e seu", 'WCttJ', 'pQwWR', 'el_Es', 'nhar,', "o..\"", 'ASILE', 'izmen', 'uguês', "on cr", 'ZKmvh', 'gNfxN', 'pid', 'naliz', 'IONAL', 'NANAT', 'vxKZS', "A:* ", 'VcjQZ', " 2018", "tra p", "🎊 Par", "🌟 Seu", 'QaAAR', 'YDdUP', "do. O", "o mun", 'pal.', 'VvnHE', 'ZtKbu', " XP: ", "ist)\n", '-gtts', 'ispon', 'ixar]', 'sxtvH', 'bPsJS', 'i-doc', 'nVtCj', "o voc", 'en?ty', "do: o", 'junto', 'xaeZG', 'mIelL', 'FnUea', 'pBNdh', 'rição', 'QNCIv', 'ynrNK', 'adBhC', 'XuuqD', "XP ho", 'tagme', "ta à ", 'nOSAW', 'igGFy', 'xIapp', ", las", 'obiml', 'adogp', " 🔢 ━━", "ado, ", 'fBWRj', 'tEoTh', "\n📍 *S", 'in/js', "ME\n📌 ", " do E", "a / r", "┃ emo", " prec", 'sEwZL', "RREU ", "💰 Seu", '98f9f', 'eQueb', 'mJOJk', "𝐞𝐦 𝐫𝐞", "ts [n", 'YFZIh', '6a042', "UG] G", 'jigol', 'GfxYK', "🔧 *Út", "ja at", "po (b", "pe @m", 'Dhqpy', 'AR:*', 'EYDgn', "24h, ", "𝐑𝐓𝐄 𝐃", 'VkIvZ', 'JPyWF', 'da.', 'HeRwp', 'qKjAa', 'hBjSG', 'BgtVW', 'RfBYf', 'kRzwf', 'do-os', 'uSFAF', "o gol", 'OFGCL', 'MlYSj', " 5 se", 'LhQae', "E:*\n•", 'eYbgl', 'quizn', 'mily=', "l obt", 'nnhNZ', 'YRYBI', 'xykpm', 'tcqpo', "ar\n• ", " aute", 'DweHH', '(fech', '11052', 'TqKOd', "?, 0)", 'SKQaO', '━━━━┓', 'IUGBL', ". O u", "e MyP", 'mjuiM', 'LnSWR', 'NETay', "rte h", "▰▱▱▱ ", 'axHlJ', " *Uso", 'fAKqX', " Hete", "👑 ═══", 'bIUNT', 'repla', "to e ", 'wejNb', 'abrir', 'cEzAM', 'lGZot', "e aut", "e rec", 'JdzeT', "⚽ *PL", "ver @", 'Ztuxs', 'a5e3a', 'FHhwQ', 'IrTjV', 'mover', "🎭 PAR", 'tNtuw', "nta a", 'evolv', 'pCTIq', " bem-", 'mVjjL', 'QdFei', 'uanta', "% de ", "dos G", 'sEBrn', "a art", 'qAOfe', 'vGffn', 'RÓXIM', "gp FR", " VALU", 'Jackp', " acel", '1|6|0', 'nMLJu', "POS*\n", "𝐔𝐂𝐀𝐎 ", '𝐍ÇÃ𝐎*', '6d718', 'BqmBe', "🎲 DOU", 'tCUqG', "\n┃ 📚 ", 'wCnAg', 'UqAgy', " insi", 'ãos/p', "LD RE", "a (mo", 'acter', '𝐄𝐙🔥', 'infer', 'CBGOW', 'FYOla', 'qJInJ', "(a) ", "24 ho", 'PAINE', 'YAfZh', "upo i", 'BYyLe', 'GuFDU', 'iKbxk', 'SXEJw', 'RTANT', "TO si", 'IGbmx', 'WcByj', 'RSpUu', 'lakBF', '9dd03', "ID] p", '3|0|2', "\nNenh", "/...\n", 'ftBIC', 'istir', "IDO*\n", 'lXnQn', "obre ", " REWA", "mo 1)", "r usa", '5163d', 'REePj', 'ande,', 'esOqx', 'eYimg', "* ⛓️", "EU BO", 'hCica', 'tzKir', "🎮 O j", 'VCwVb', 'Manso', "\n🔸 `o", "a. Ex", 'R...', "r gif", 'rMens', "9 DES", "\n ° A", "e lin", 'nCZwB', 'porte', 'roupI', 'VRDlR', 'needm', 'lTFVf', 'YTSzq', 'KYOOB', '?text', 'DtoCa', 'NOTAS', ": 31/", 'MKdoO', 'Ohmlj', 'RmcyW', 'YwnMj', 'DOyVZ', 'cxKlr', 'ates,', 'eNJbq', 'PDmCm', 'getCh', 'krnWt', "🌈 *Lo", 'hlQvP', 'tkPjY', 'suBUB', '/manu', "ode l", 'OsXkg', 'uTpyH', 'tical', 'aymCQ', 'sjRWJ', "• `!u", "no ( ", 'KDXhS', 'MAÇÕE', 'tTllK', 'DbhNh', 'lize', "ado →", '22e4.', "𝚈*: ", 'Detal', "erá m", '--sco', ')...', 'VVYKh', "mais ", 'timeF', "lhor ", "\"\n```", 'hGrVp', 'COMAN', 'ario]', 'ztXAr', 'ias/a', 'nacio', 'FVlsh', 'JKRsl', "por I", 'ge-on', 'gLoVY', 'miich', "\n• `", "┃ 19 ", "dia [", '[temp', 'JbWZO', 'tAqKS', "bia p", 'infog', 'esblo', "rfil ", 'BNHlL', 'dEDdb', "O DET", "!* 🌃", ".0x\n┃", 'qMOLG', 'hAihp', 'JENfZ', 'iados', "ada h", "do ⚡\n", 'Pbryz', "✅ Loj", 'YUyTv', 'uyMxN', "na cr", 'tUkkx', "O CAN", "e \"re", 'Banir', "..* T", 'kXrGZ', 'IoyEf', 'TAG', 'cynZg', '7.jpg', 'OICE;', 'VpODq', 'AFwCQ', "y 60\n", "eia +", " 15", 'xRgky', 'sPNKR', " Ex: ", "EP qu", 'yDkWb', 'rmane', "\n┃ ✈️ ", 'uVjnH', "S NUL", "• Tot", " Mist", " de ", "E ALU", 'echcZ', " disp", "n par", 'UxUqX', 'PdUIx', 'CUCWk', 'cVyWf', 'BOZvl', 'lPvLV', 'Iezbl', 'SHqKq', 'UqiBu', 'eGMse', 'fqnxT', "\n⚠️ Al", "o pac", 'uJYAP', 'PUOCq', 'zeMEN', "lo:* ", "⚠️ Rem", 'BpdoT', 'n/vid', " 𝐀𝐋𝐈𝐍", "nte b", "elo u", 'SCwnR', "es da", 'selho', " ID d", 'viara', ".\nExe", "EY, v", 'jejbo', '[LIMP', 'mdFTe', 'WLYqk', 'IIeHX', " - Ti", " 5511", "ime e", 'ytKWl', "ks re", 'ciDWi', 'rzKDQ', 'isMul', "es re", "je\n⭐ ", "val, ", "os [n", "U e o", 'quest', 'TAIZE', "s: Us", 'FnNMG', "gem q", 'colha', 'OhkdE', "Use:\n", ": Nam", 'ohMoD', 'null', 'nca', 'MJATr', "do po", ':00,1', 'OBjSA', 'gBuoV', '02043', "d em ", 'titul', 'tRvTb', "sui a", 'ZPXBD', 'OdhoV', "it 0", "a (En", "o rec", "so!\n\n", "tes R", 'pjAQm', "RD 𖣘⃟\n", "] @", "🎨 *Ha", 'dksey', '*Reco', 'monit', 'osgol', 'ZvtBN', "gem:\n", 'zumpQ', 'vtjQa', 'sso!', "te ad", 'OnSSW', 'ovida', 'yxHKA', 'ZQPEk', 'dmini', "\n⏱️ Du", 'm).', "do so", "📆 Val", 'ohblf', "ℹ️ Aná", 'clhAE', 'sorte', 'dBCpi', "\n┃ 👥 ", 'ecusa', "s vál", 'SvMVs', 'eposi', "as do", 'qYDnq', 'thtYZ', 'CFtmA', 'GOPuW', ", usa", "o víd", 'LrjGm', 'kpotg', "ove t", "go de", 'ErUkC', 'efghi', 'tbxaH', 'itora', 'e]d[f', 'GcAlN', 'DvQBJ', ": 14:", "é 🙁, ", 'GUspK', 'blood', 'PjBuw', "y: ", 'JteqB', "🔞 𝐏𝐀𝐂", 'iNRvG', "ito e", 'pWLbx', "ROS 」", "\"toda", 'ito:*', "25)\n-", 'SIOqh', "t vai", "cao` ", "do:*\n", 'gitar', "━⊱「 ", ":*\n", 'XfSQQ', 'VlrlF', ":* R$", "old a", "\n\n- 🗓️", "no ho", '𝐏𝐄🔥', "ido d", 'pKLuw', 'aCWHd', 'HXyxG', 'eCjdP', 'dyeWs', 'BUjXs', ", IRE", "a com", 'htGNP', 'VlkYW', 'fRiyE', 'ras|N', " novo", 'uvYhp', 'GOGhK', 'essão', "━━┓\n", 'ONTEÚ', "sa di", 'safk', 'ㅤ◍۫❀⃘࣭', 'gle)', 'KyjEh', 'CcyTv', 'QmgrT', 'lPYRB', 'qAWqM', " 2 ve", 'JszVv', 'sivlY', 'dwbon', 'ShPzx', 'listp', 'eita!', 'cqEZL', ". Só ", " baca", 'FpBre', '05912', 'Jrpfu', 'nções', 'fTvpT', 'RgyEO', '-mix', 'pdZBn', 'XjvAR', 'HADES', "om um", 'sSlPS', "dois ", 'BQpGa', ", ofe", 'list=', "io au", 'TpUFX', " anti", "um re", "o!* 📷", 'oyxtO', 'VRDgK', 'JHzNf', "rmo d", "𝐁𝐎𝐓:\n", 'encgo', 'onfXg', 'ele%C', 'EAYOm', 'FICIA', 'ZUyoi', "gos i", 'écnic', 'unZFD', "ado s", 'ar_CM', "EL FO", 'MgYOO', 'dos:', 'eGnng', "🍀💰 *H", 'dos/r', '45305', 'iTVwg', 'ratYu', 'qSwyA', "┃ • M", 'PsDkK', 'thGLH', 'agem', 'lMlkQ', 'zsCYm', "🌫️ @", 'f38d3', 'CGhLe', " venc", 'LvXdB', "ma an", 'WOfIT', "\n┃ @", '09Nw/', "\n• To", 'attp5', 'wVkDx', "e um ", 'mRzow', "erra ", 'cvyfq', 'PCmhu', 'fDwwV', 'romov', 'rding', 'toBuf', 'DSTal', "┃ nen", 'KkXcG', 'agfoE', 'ltera', 'ymHmc', " ANOS", "do ao", "ic of", "stam ", "car n", 'XjpZc', 'qtpFR', 'uwxXe', "e, pa", 'QZrBa', "m usu", 'metal', 'e..', "\n\nUsu", " requ", "dia. ", 'gKtjw', 'eRfoY', "rsa c", "odo o", 'WflTc', 'AyrNd', 'mzKWl', 'zrLeX', "┃ 🎯 S", "a bom", 'Aguar', "era l", " outr", "o e g", 'iador', 'rRCjM', "X9 MO", " Fact", "gem c", 'a]|[m', "API S", 'fanta', 'IVADA', "🛡️ O u", "tes p", 'iGvIB', 'sDXKL', "Bots ", 'ocola', 'NUwVb', 'gem?*', 'juda', 'rQqBy', 'uVJLw', 'autos', " serã", "sar o", 'ha256', "ma op", "iar b", 'ante:', 'igaçõ', 'eQlTE', '7b5c9', "⚔️ *Ba", 'CIPAR', "údo +", 'ekVmJ', 'LFMMS', 'INGS', 'Lpuvb', 'mxFCP', 'bDFOd', 'RTÊNC', '🚨🚨🚨🚨🚨', "EL*\n\n", "P Pre", 'YEQks', "\n┃ 📏 ", "do em", "\n\n💡 O", "is` 🌻", 'TFGcA', 'uiBgi', "vou d", " spam", 'kEvKo', "tec [", 'rkSyj', 'esso,', "\n┃ 🎡 ", 'UPO', " mesm", 'tOwRB', 'dar-p', " id_g", 'jHELf', 'eEuyt', 'KjCtx', "gar t", "e o @", 'verif', 'tir', 'nWREK', "ão ót", 'Tcuki', 'OCCPR', "%\n┃ 🎮", 'Hdair', 'Vídeo', " 👤 Us", 'LRSOT', " as r", "t irá", 'MKgAp', ".\n💡 U", "a: À ", "ht\n- ", 'UuivK', "Quem ", "• *Tr", " 0 a ", "IO!\n💡", 'Kxqtp', 'webse', "nte o", 'KCeyI', 'JienL', '54004', 'SzKWL', 'SmwtJ', 'AlAwR', 'ADICI', "po de", 'NSMIS', 'Gmzuv', "a blo", ", fal", 'FmeKs', "all [", 'char)', " excl", 'AwGxx', 's-bas', 'DISPO', "RE us", 'ZKCyU', 'user_', 'HBYBE', "ir, c", 'dGCKE', 'mbros', 'Qypxx', 'KBpUp', 'andro', 'II|10', 'seIgO', 'tXPoA', 'mos-j', "ão po", 'MuPfE', 'sDiar', 'ass', "tear ", 'vBwEo', 'xVaJv', "r men", "🎫 BOL", 'iGULy', '」⊰━╯', 'ChCzW', 'VOS*:', 'izada', ":* re", 'fVEkI', 'neon1', 'dorMi', "ove v", 'qnwjd', "ser r", 'xmyRQ', 'nterr', "s:* ", 'CESSO', "SFW n", 'eters', 'VQYmp', 'UuuCh', "🤡 Que", 'tapa,', 'desba', 'ALIDA', 'FDyPU', 'PiKIW', 'ites_', " NO S", 'myroX', '(glob', 'game_', 'auto-', 'agold', "_gp N", 'GPoZT', 'McErD', "t foi", 'QwrGB', "r, nã", 'wADsp', 'BLnsH', 'zTUgd', 'dCgFh', "car a", "er na", "\n┃ Va", 'qxowy', 'gC06V', 'tenim', 'OILzH', 'baDep', 'VvsvP', 'PPoKt', "D hor", 'HTdQJ', 'UJgsS', "ne [l", 'dex.j', "iser ", 'JCXhu', 'kqbnI', 'mp_cr', '1|3|4', 'kKTww', 'lpKwM', "so = ", 'uZtUN', 'yILUt', 'dkesl', 'bebed', 'czfsz', 'está', "I COM", "🗑️ Som", 'bXMga', 'nicie', 'FlcHB', 'otKdU', 'vMubR', 'isar?', 'yboFY', 'BGhFe', "sta n", 'Tjifd', "MINS ", 'GKEOP', 'hVqLZ', ") a p", 'ticos', 'qCRDu', 'AWA', "o bas", 'XioGU', "│ Gru", 'rAWKJ', 'to?', 'TkoCV', " )❌🚫 ", 'IsAcp', 'gistr', 'otame', 'ideo2', 'zVCel', 'jjqZI', 'OcoRH', "ra O ", 'própr', 'VevVa', " Memb", "❌ O m", "uído ", 'write', 'rimas', 'UixTh', 'nwrXJ', 'mcCFQ', "ne)\n🔸", 'balan', 'Tente', "bal` ", 'boxus', "C, id", 'ZSDLV', 'dVhYL', 'NFbXK', 'bokeQ', "em vo", 'qPJsQ', 'sSync', 'çado!', 'TOAdv', " *Exe", " 💕", 'rrcMB', 'EsTpl', 'xZESP', "𝖵𝖮𝖢𝖤̂ ", 'IBQFX', "ubo d", 'kmlCz', 'yrTtu', 'eECEJ', "o já ", 'LoDDB', "5\n┃\n┃", 'to!*', 'uoUlb', 'upo]', 'apps/', "ivo e", "k INT", 'OOouT', 'vDMZa', 'nRKWR', 'rria,', '8921f', 'KXnfN', "ra\n┃ ", "m chu", 'LPPIS', "ção n", "us ", 'XUpzp', 'a.web', "ot As", "┃ 6 -", 'FoKlW', '*VÍDE', " XP, ", 'PyRiM', 'https', 'WBhhM', 'EIhIZ', 'deRtR', "rte á", "🚨🚨🚨\n\n", "o meu", 'yOMsm', " PAPE", 'Yorsb', 'VAxua', "║ 🧩 F", 'DjLog', 'lwGJC', "┃ 0 -", "s\n┃ 2", 'Estru', 'eis:*', "ja sa", "is: i", 'UQnjC', 'docke', "hega ", 'orte!', 'o&exp', 'vasõe', "ngs a", "or De", "ddd [", 'fGCtA', 'gado*', 'ɪᴅᴀᴅᴇ', "do qu", 'MtohK', " @joa", "🌙😴🥱\n*", "e tap", 'io|Ma', 'radv', 'COVbs', 'HeLrb', 'LUtwZ', "és do", 'LZyqx', 'XPdwt', "1️⃣ - T", "aldo ", "ra eu", 'Cvkmd', "AS DE", 'icara', 'hSZjr', 'aWLUv', 'ite', "iv [t", 'mXLBb', "━┓\n┃\n", 'mium.', 'wnEGc', 'ção.', "STRO ", 'JifGz', 'qxclM', 'zGEft', 'ugsOD', 'BtskM', 'UqTRz', 'MtSxa', 'Qrzql', "es: V", "ece o", "es co", 'MimDJ', 'Tyfsu', 'lowjo', 'MYZAE', 'vIKhr', 'tngeZ', '18a9d', 'aMkSf', 'SJdcH', "⚠️ *At", 'UzYSW', "eva o", 'yNktT', 'delpa', 'uival', 'nstra', "㊙ RAN", 'qBumq', "\n┃ 🎊 ", 'AygEt', '(s).', '.1.po', "llgp ", 'Exibe', 'gqmvM', 'nvCga', "\n\n• U", 'cPPQP', 'gado', '[carg', 'ideo,', 'JFOmo', 'ZwUxY', "r a l", 'resga', 'ATwKz', ", e v", 'XddNl', "igar\n", 'vitan', "𝚂*: ", "\nEsco", 'ethro', " ━━━━", '598', ". 🌼", 'BwBPj', 'obbav', 'kWmkt', 'JXegO', 'ament', 'ether', 'PebRH', 'UHcdo', " Grup", " = 0", "Só re", "em at", "MAS 🔞", 'Fkbkh', 'akggc', 'ssado', 'ZQHzR', 'liAOk', 'Axfvd', 'uisar', "❌ *Ne", 'jpXEd', 'ga%20', 'nhece', "┃ 🎊 B", "s moe", " Most", 'IWmnz', "ca a ", 'ZYJBW', 'blQhP', 'iomas', 'smvQZ', "h e 1", 'músic', 'a59ee', 'lRyMU', 'WZtwo', "io es", 'TCFnG', 'PtSHt', 'LtTkg', " (min", "A VIS", 'utQzY', 'ulsoD', "eber ", "erna ", "1 && ", 'tmHCN', "like ", 'tivid', '47e75', "ulos ", "rsas ", 'KMpxG', "Play ", "nto\n└", 'pLxVB', 'uMMfY', 'nmjAC', 'ebxBL', 'ttlog', 'Repet', "?\n\n1 ", 'mRrPp', 'uTube', 'TAXAu', 'RoOEv', " AUTO", " com:", 'MhYGa', "tade ", "m ADM", 'gjKFJ', "Ram: ", "is tr", 'serpr', "─\n│", "ogo p", ", ini", "o rep", "e esc", "𝐱𝐨: ", 'reto)', '1|6|4', "EL - ", 'empo]', "ros\n•", '@usua', 'dxuMx', "une O", 'YIHMb', 'TQSyM', "car s", " gira", 'zzPhG', 'eKTdt', "nta [", 'Qdaqe', "I 1 A", "um CP", "2 - 5", " inve", "ir TO", "uma f", 'pXXZk', 'Bngpu', 'raki', '╭────', 'Etchi', 'Tiaxk', 'ões..', 'OJhSP', "𝐬 𝐣𝐨𝐠", 'x/dia', "va qu", 'eGgBA', 'ntRWH', 'ZCkhX', "ça pa", " - Ca", 'wxhYW', 'XcLbj', "ro ou", '6cb23', 'aKCXI', '425c7', 'CbXwz', 'arr.j', 'unc(i', "s off", 'xDkrF', 'pgyrk', 'TyXzK', 'GgKVb', "ros r", 'UzlIC', 'IOYai', "└ Ver", 'tipv1', 'AKtSO', "E use", 'OpEjj', 'ZEcef', 'gCUAz', 'wlEwS', 'ros]', 'RbxSQ', "OLE L", "Ação ", '────⊷', 'jibot', 'uNNnf', "er in", 'banfa', "\n\n💡 *", 'XPCHF', "M hor", "el 2", 'xrIDD', 'rnAVL', 'iosRe', 'OgnFR', 'uMXxB', "ha ac", 'UPZeq', 'ta/du', 'tCEEE', 'Gado-', 'CuhVC', "es es", 'hirwe', 'hqCVS', "ogp [", 'delcm', "XP: ", 'bPSTO', "m ite", 'vhkjn', " cida", 'olds', 'rVJdU', "n: sq", "🔸 NÃO", 'XrDlJ', 'uddzS', ", adi", 'lemUF', "ir qu", 'co/vi', "os ne", 'pGiWB', 'wlMqA', " Cham", 'ThACF', "ção.\n", "o por", 'veemo', 'do]', 'DCXxO', " .tex", 'pmslZ', 'cpXUY', 'fExDK', "itos ", " -* ║", 'alett', 'rning', " wall", "ado 1", "\n*• L", ": lim", 'ANCE*', 'cmpvy', "foi D", "ção c", "íso, ", 'MHkWU', "\n🔸 ✅ ", 'wWvCd', 'UFtzS', 'GRTDF', 'pJXbM', 'IZGIv', 'SPHLN', 'ASzdj', 'vmhQf', 'zjswK', "\n\n╭━ ", 'yptDF', 'uYrRP', 'yhnpx', 'BTvaA', 'alque', 'hackn', "r` ou", "• 1-5", 'jStiG', "rá us", 'notíc', 'ghNLi', 'L38C/', 'dMjHl', 'ERSON', " *Fic", "lo no", 'IPFIU', 'adole', 'VnAcK', "os e ", 'OjKHS', 'QchwD', " Agua", 'pOINT', "e o u", "ros p", " etc.", 'LLlsy', 'IRJQc', "Se se", 'nVbPV', "xo ", 'nmMQX', 'B/ale', 'etXHe', 'hjAMP', "te se", '-fim', "!\n\n📝 ", 'erman', "\n┃ ⛏️ ", 'imes/', 'edora', 'lpist', 'rsQqU', "a\ntab", " de M", 'fbYvy', 'KArWD', " ADMS", 'pgMsz', "a fig", 'y.com', 'MIctr', 'mJXjc', "e dig", "⚠️ Fun", 'annou', 'rua', "*\n*PR", 'KHUzz', "amp D", 'GYOME', 'rsa', "\n│ 🔹 ", "ar [r", 'IyfsL', 'co:', 'ad.', 'uUzOt', '12fb9', 'rlink', 'xt-', "o dos", "tra i", "de fa", 'CNXfi', "em up", 'DAHYc', 'ando]', 'cativ', 'virar', '21045', 'oria]', 'tcomU', " DOS ", 'FkuLI', 'Ogzzj', "! Vol", "Alta ", 'aMcGW', 'Saldo', 'zagFv', 'XVhrc', 'ultim', "go co", "\nID: ", 'GJxFP', 'nXJus', 'eDhXx', 'KaNXX', 'IZEMy', "um li", 'ture', "*\n└ D", 'IhSPF', 'YnXJP', " off\n", 'EFcwI', 'AJrKy', 'blLZo', 'COWtB', 'MOJIS', 'uxar.', 's://o', "e cas", 'es/16', 'BsayK', 'eFari', 'itclo', 'kjdgc', "┃ 24 ", "💸 Per", 'IIFaL', "s rem", "◤😎 █▀", "a!*\n\n", "res* ", 'MlRho', "\n\n🛠️ *", 'ANIMA', " TABL", 'LHkTj', "guiu ", "\"\nman", 'iagBe', "m [no", "m \"gl", 'lar', 'kjqpU', 'IrwdZ', 'CLJYn', 'FEtCZ', 'UiLgg', 'pengp', 'IDO):', 's/set', 'zXckv', "👑 *AC", 'LxZQc', 'TeVhF', 'abéns', "oc sh", 'OCGur', 'orVid', " HRP ", "de há", 'fELbl', 'esban', "nime ", 'vOKGr', 'iRNoN', 'SmGsw', "tá co", 'pecíf', 'ponde', 'RNawR', "m do ", "\n🗑️ Re", 'osiçã', "ão al", "\n┃ 4️⃣5️⃣", 'BHgZx', "𝐀\n 𝐅𝐀", "100%\n", 'teúdo', "res p", 'tent.', 'OLgBI', 'QytmQ', 'cias', "𝐂𝐄̂ 𝐏𝐄", 'QghAx', 'oBYcq', "em ou", 'yRYyX', " de A", "_id F", '9999', 'xto]', 'SSINO', 'o/Mcg', 'RLiUm', "us pe", 'recol', 'GHwBT', 'migo!', 'geiro', 'comun', "se te", 'ISTRO', 'tvdgP', 'LCGkF', "o 55X", 'svSrJ', 'psqyd', " vito", " • Áu", 'rYTZH', 'BfxKf', "dos r", "\nesse", 'HUXGy', "o no ", 'NphiX', 'QHHhO', 'wCpWv', 'moeda', 'EUSZI', 'lgbeG', 'mimet', 'gif-o', 'Aadjo', 'CcUOE', 'iEFhu', 'qQjEd', 'cETbm', 'VBPAL', "om gr", 't1000', 'Econo', "po✔️ (", 'VbpUv', 'IqjYu', "s. Te", 'pNdJj', 'DwRVo', 'AvpXr', 'YuaPk', 'cdd83', 'ente!', "2 peç", "r a\nm", 'VVjvs', 'TyLqp', 'HwNeu', 'ayaka', "* 」━━", 'wXtsk', " \n• T", "nha! ", 'bPVGX', 'diffi', 'SOzqT', "Gold ", " 100 ", "ja fo", "ão é ", "┃\n┃ 👤", "\n SET", 'anima', 'GQIoj', "eo\n┃\n", 'SdmXY', 'PRINC', 'FRAN', "ê ace", " O GR", "elga ", "o arg", 'dFeFv', "o é r", "h e ", 'ntens', 'wQOzw', "eu qu", 'YIKfY', 'JpXwH', 'QsLjP', 'e3PmO', 'noayl', 'MOlgS', 'setem', '9d93f', "a abr", 'fnlWF', "nte\n└", 'LWmAY', "de to", 'biCBN', "𝐐𝐔𝐄 𝐕", 'citaç', 'ays', '2/2', "o pin", "s reg", 'qOyeY', 'ogzQV', 'PIrZi', 'com/u', 'teUBc', 'JkZyL', "s e m", "Dia\n┃", 'wTJBS', " repe", 'lugar', 'boBQr', 'ptSaV', "L - F", 'elaçã', "bass ", " peça", "Full ", 'rTfLj', "lood ", 'ZWlEZ', 'YDAoC', "te qu", 'AOcgC', 'OTckh', "oc [n", 'lizaç', 'Eivpw', 'QXcfK', " *Gan", 'api/i', 'HiMbl', "ara 4", " de q", 'vKGiI', ":* Ba", "upo q", 'WeufX', 'APOST', 'SGhNr', "hes c", 'RJyZF', 'VIlcz', 'caLqu', 'time/', 'AMoMG', 'nKUYA', "ó pra", "m dif", 'IPQEG', "t [ma", 'Ciksy', "s e e", 'gYwZD', " - NO", "k, tw", 'FhQSZ', 'FIXAS', "na vi", ". 🕹️ ", 'AFEtM', 'EsWKv', 'ras:*', ")\n• P", 'APPNh', "o 🧠", "uem t", 'aLDob', 'eknnC', 'ello', " apos", 'anGCq', 'KkmCJ', 'lizeI', 'LiHvb', "i Mar", "┃ ❌ N", "ara i", 'IecOT', 'zBTdH', 'AjNyt', ", env", 'meu-r', " *Arq", "da, f", 'NRkEZ', 'zDazh', 'AvyDE', 'iafpX', "* ✅ *", 'JhZOY', 'oiiWA', 'xQRxn', 'ções', 'Gysho', 'sepia', 'edra,', 'JwIkp', "ar hi", "「 🔞 A", 'wmtep', "= 'at", 'ENMPu', 'nance', " rese", 'vDCSN', " avia", 'UNE', 'CQbvs', 'JJOQF', "𝐊𝐒 🔞 ", 'hKOCZ', 'JjUKW', 'exibi', 'hXgZH', 'auEUE', 'yLbXb', 'indo2', "m sol", "cmd p", 'LPgoX', 'zdIsO', ". 🥵", 'mpate', "💕 *Aç", 'gliwH', 'ário.', "am fi", "os us", "nas p", 'sqkfX', " Esde", 'dono6', "ar áu", "e log", 'mated', 'ame_', 'pi%26', 'VcHmT', 'LBAbR', "a\n2️⃣ •", "o reg", 'getBo', 'oqymJ', 'Bucet', " do l", 'VCKZi', "leta ", 'zHXFi', 'sSvvy', 'AVgJP', "e 1 c", 'ption', "a no ", 'Wclep', "vo pa", 'skdKE', 'GFGur', 'lGMIN', 'vzPqU', "ta ma", 'FDpGk', " roub", 'AHOgY', " saír", 'th_12', 'f7f45', 'alize', " ou u", 'vbOTB', 'ljOze', 'gram_', 'TynQB', "gar n", 'uiwJO', 'zdnPt', 'JTiDR', 'EJymz', "pot.\n", 'ídeo]', '_casa', "s = m", "║ ├ 🖥️", "me tr", 'Autom', 'JdVvE', 'axyOx', 'iCzMX', "ão me", "old [", 'udaçã', 'tes', 'togp', "Z:*\n", 'aRJUF', 'oRTKF', 'EITOS', 'ncedo', 'hLuHZ', 'mEJMf', 'nnbvG', 'cGkpo', "⚠️ O g", 'TTjdP', 'ctive', 'TYRJj', 'BEN', '.mp3', "u Rep", 'uCtGX', 'e45f9', "pos c", 'MQyDm', 'JNYkJ', 'ppt', 'jJCKu', 'FtLSb', 'FzmmB', "ar ca", "o mem", "da em", 'mGIpc', 'vonEU', 'FAPbM', 'gfVDX', 'lHJuu', "2 - C", 'HKvRf', 'IAUpd', '-loop', "mica ", "do:\n┃", 'CXWgm', " DO G", " on, ", 'HTroc', 'RfeMg', 'dQHHO', 'PZiyq', "ar ap", 'uSMat', "lvar ", 'dhPSU', 'iGold', 'lFDLQ', 'ents/', "sta g", 'UTHZY', 'nceMe', ", sim", 'hanmj', 's/usu', ':-1:-', "ink d", '|1|0|', "ança ", 'IQhjP', 'MADAR', 'Dyzck', 'BRINC', 'TfHwF', "ivo a", 'CRDhq', "us di", "\nNome", 'RhDPr', " a pa", 'adrão', 'atybO', '/McPr', 'Ahlri', 'ade>', 'ZFWEP', 'FcOjW', 'sIMVB', 'impar', "em: ", "tivo ", "]; [a", 'Exemp', 'KeVni', "de de", 'poYcp', "s (us", "% ❱ f", 'DvfLo', 'tVAoC', 'zSnMj', "esgo ", 'Uduuo', 'LuAYs', 'FonfR', 'LYMrV', 'cafun', 'KHFXU', 'rgp', 'lsqRy', 'jIibA', 'WbuhU', 'KlIgF', "w [te", 'reali', "ono =", 'BhwXZ', 'dJYJW', 'NRSxi', " \n┃ 🌍", 'XZEMH', " *Lis", 'oeyxd', 'nda', "gle: ", 'zjLHm', 'hqXMf', 'ias*:', '*tran', 'yMHeX', 'RsFuB', 'DZALI', 'botId', '`anti', 'uXBmH', "dia (", "D*: ", " eu j", '/usuá', "eiro ", "nk: ", 'ettin', 'hhZrB', " CEP ", 'FgArp', "book ", " banc", 'STYLE', 'E7-mQ', 'itori', "e TOD", 'mIzSl', 'oOTtm', 'eqyhA', 'eTJTw', 'oWSnP', 'MnmVQ', 'YIxEE', 'kLniL', "dos e", 'oSsLh', 'SUZnv', 'ebd59', " LIMI", 'IlxGF', 'hjIXm', "e API", 'YPkGe', 'mastu', 'erLVZ', 'aiu', 'OmlAa', 'RMISS', 'qqwcB', 'kDCig', 'PVAqx', 'IiGEB', 'GpBSD', '11cfb', 'itZai', 'Nvhqt', '_gold', "?\n\nEx", "ba, p", 'tprov', 'qSiiG', 'eOQSR', 'ens', 'lEPaw', "-rp\n", 'aIrwL', "a Ita", "ra en", 'a/dur', 'lDACS', 'kxzHo', 'RGkOy', 'vlBbR', 'ovsAj', 'xoEyx', 'FLFAO', 'nti-p', 'OsSuO', 'atenç', 'ktWJx', 'nome-', "king ", 'FFjJr', '✼┉═༺◈', 'ZCoau', 'WZSmG', 'hidde', 'sider', 'pvAPr', "\n• Re", "a ant", 'JurQB', "aria ", "E TAB", "D gru", 'ubegd', "*\n• `", "êm 5 ", "go at", 'lOzSr', 'sBCiY', 'GArHy', 'oDABW', 'frnRe', "] glo", "DAS F", 'etDig', 'nDxby', 'YEdsA', 'onge,', " agor", "os: ", '3|7|0', 'upos', 'TsJtj', 'CHAUN', 'qyFjK', 'GWcTD', "\n\n「 @", 'JJK', 'narut', 'COeom', 'HVWaV', 'BdYsW', 'JPMeq', 'zeZJM', 'xnNBK', "es à ", 'oUeks', 'enga', 'COMzO', 'iKpAe', 'tySuI', 'jkJcg', "s cat", 'LhbEV', " estr", 'aoviv', 'Jjmyh', "do un", 'IXfMG', 'RKamH', 'zWbTG', 'ntes,', '99-16', 'BbxBR', "🥃 ━━━", 'VOWKq', " e ta", "var S", 'uVrOO', 'UdRQm', 'hine/', 'Objna', "T hp.", 'otaçõ', "no es", 'jWnaO', '┌────', "remo ", 'alizo', "eter ", "Até q", 'MWZgj', "ar:*\n", " o ", 'uRlCn', " *Em ", " DO K", 'asLIp', 'GnVHG', "u: -", 'PcCtP', 'OtGZA', 'evPwY', "ator ", "ME* ─", 'ficia', "o pos", 'cado:', 'oYWLM', 'PSMVr', 'inho/', 'KBbxd', 'evGjP', 'wEdNb', 'HTLfK', 'KqfMf', 'JkYkR', 'ktODk', "o ele", 'eShFa', 'pi/in', "a mel", 'TLwlS', 'TTaLZ', 'JkQJM', "s 50", "*O QU", 'NmocP', " REMO", "s e A", " sort", "e \"Bo", " time", 'hLuPr', 'Tvstg', "o res", 'hYkxq', "ET ho", 'YvSBJ', 'QQBVd', 'uanto', "ADO* ", 'dorep', 'HFrhk', 'KlNBZ', 'Jusht', 'x9_ca', "as (l", 'YjJRV', "m 400", 'scudo', "nto\n┃", 'rjCJm', 'kmGuX', 'trar.', 'oTpie', 'inal.', "l. Re", 'kmyxA', 'fCuxV', "ir e ", "*\n┃ 📁", "rao o", " Joga", 'plug_', 'DhaLx', 'DrfJG', 'lSqdm', 'oVXFY', '🗑️', 'mSShq', 'QnBNa', " list", 'TDzgG', 'feftT', "as li", 'Divir', 'tagen', 'eDRgR', 'HgvZa', 'EQBdY', "vo. O", 'QoKBM', "3 - 5", 'ok_vi', "mios ", " O co", 'gWPWj', " Canc", 'XzoYg', 'SAIOz', 'mvOId', 'XiBgj', 'WRzdC', "┃ 🤖 S", 'BniiE', 'ÁTICA', 'ESETL', " VIND", "\n❌ Ne", "T OR ", 'UDaTk', 'ebot', "der n", "🚮 @", 'mEiXz', 'divms', 'ROIBI', 'VjlhS', 'vlIPY', "𝐍𝐈𝐌𝐄 ", 'kMLMF', 'iqKqi', 'idpLi', 'RUfgI', " - Bl", " - Sa", 'peg?p', 'TttmI', 'ckpot', '▰▰▱▱▱', " ou T", "e o f", 'HPWvV', 'vopJF', 'TXQcp', 'FeRdc', "ogo t", "ado c", "es Ad", 'bRjdw', "W ATI", 'azena', 'PlTlY', 'hIwJT', "T dai", "de gi", "N CON", 'pUooE', 'ertid', " Todo", "r, co", "band ", "iva d", 'rQutc', "cês c", 'tIXzI', 'lYxqv', 'mTuAJ', 'eUEJT', 'dRJwe', "r mai", 'woTQi', 'twoUb', 'jILIK', 'RCcmY', " 4️⃣ - ", '*Pont', 'JkPLb', "r Reu", 'rgLrk', 'IDJOz', 'hKiOy', 'zoBUd', "🦹‍♂️ RAN", "\n Núm", "Bem v", 'a)..', "\nﮩ٨ـﮩ", 'ibxXv', "is (c", 'POsWG', 'ouUIv', 'nk:', 'xJtds', 'BdlzX', "Mede ", "oro: ", "\n│ 💡 ", 'maukm', "📝 Pal", 'tFDDV', 'pkbFR', 'VeDTP', "x* go", 'OzSek', "nto <", 'OzZVz', "🤖 IA ", 'bkmey', '/YYYY', 'YTtAU', 'vQBNy', 'error', " de e", "!!* 🌌", 'nar:', 'do!', 'o2/in', 'bpWzk', 'nveai', 'kAKrm', "o! Ag", 'fslaT', "MERO ", "show\n", " norm", "os 10", 'IOWay', 'xXKtg', 'echo', '119fc', 'LhKCl', "u don", 'Signo', 'eBRls', " Limp", 'DyBww', 'nJLrf', "r dia", 'nstUn', "á com", 'reven', 'rKOaG', 'xmTKO', 'cade?', 'gtZlj', "CO:* ", 'AKZUY', 'erten', "que 1", 'vos:', 'Cidad', "ype =", 'UJAMJ', 'oje', 'KYIeA', 'ívida', 'nYJtH', 'relea', 'HtnLs', "🎮 Voc", 'BnLIc', 'sjogo', 'XhOaG', 'hqlgf', 'el2', 'asMin', 'zExpP', 'Play', 'RsgVy', "╭⊱「 ", 'FhWYa', "e. 😍", 'Csbaa', "os ba", 'faULZ', "s ou ", 'lacar', 'qWPUv', 'rWSKA', " logo", 'FNXID', 'QmKKb', ".0, s", 'aQVtL', 'acuaC', 'IVEsw', 'lado.', 'WazCN', 'GjUrr', 'VIFii', "r bot", 'luso,', "a dat", 'tkPvm', ", ins", 'ZMvpz', 'GvGaK', 'fyRfS', "o_id ", 'efl', 'YSmqz', "B por", 'DoJnO', "━╯\n*D", 'etgKV', "ão e ", 'SUCES', "ndo [", 'pinne', 'QCYqU', "ta UR", 'sia_s', 'rmiti', 'ZAqLH', "𝐚 𝐬𝐢 ", "a usa", "r sta", " do e", 'amanh', 'gurin', 'WASTU', 'JluNF', 'asjpX', 'iomkw', "m*\n\n", 'QZZYO', 'PWHwi', "rte o", '|7|5|', 'cMroM', 'taitx', 'chhNR', 'line:', "! Voc", 'OfkBZ', '*Mult', "• Pro", 'ZzXsw', "!*\n\n✨", 'mtvAi', 'twbbF', 'Compa', 'wjFkH', " menu", 'revin', 'vfFuh', "ID da", 'TGlMQ', 'szVEl', 'JoBJZ', 'RDBFT', 'd/Dem', "✅🕵️ Mo", 'uery&', 'lta!*', 'YKBjE', "mins ", 'fYYls', 'table', 'olMRz', 'YaQen', 'então', " e ar", 'nvTzX', 'n/jso', '/egri', 'bYWLH', 'bu2', 'igita', 'para:', " cara", 'artil', "/2\n┃ ", 'silen', 'luyBp', " (tog", 'dvWFB', 'yazCY', " e ef", 'IDA', 'ída*', 'ADNSQ', "Olá #", 'rZahn', 'WqHlM', 'aRRnb', " Oper", 'vence', 'VqEpU', 'gheYz', "ome e", 'funçõ', "..* O", "O! 💎\n", 'uHzYL', 'embar', 'CfIpQ', 'xkNYc', "ngp S", 'nviad', 'ta-se', " GRIN", 'wZehR', 'MFvco', 'Qaexd', 'Qgltn', 'jDxIW', "ção ", "ar te", 'answe', 'nt=on', 'sênci', 'iXuLL', 'nhtAx', 'tch', 'OwtVK', "ng al", 'DVehs', 'níque', "r htt", 'iQHtE', 'fbIkt', " no w", 'ite@0', "ogle ", 'gia', 'ttp14', 'lcbyE', "⚠️ Sor", "a.\n", "nte m", 'ZoGmj', "has q", 'OrOrV', 'mGhnq', "o das", "cria ", 'ngth', 'estar', "como ", 'ZaqmD', 'óxima', 'yVykU', "água ", 'zQnzu', 'vNCbX', 'WtiuB', "/2\n┃\n", 'o-rp*', "r, sa", 'uelo', 'sYcnE', 'HQxIq', 'UucVV', 'EqJFY', 'BLUR', '1f14/', 'wYCWI', 'UMVlD', "s te ", 'stk', 'xeRJr', " (EXP", 'pywuw', 'VgznE', 'mlZRx', 'ivado', 'fIACQ', 'uagem', 'VJDbl', 'wGHpy', 'jsmdr', 'AvZLc', "ns, v", 'ZvdrW', "d no ", 'sFFYm', 'up_id', 'ZRhqN', "👏 Par", "%\n\n🏆 ", "o, ut", 'DhiYl', 'lUSUG', 'm...*', 'QTPwZ', "co se", 'Dqfat', 'OJGqr', "+ Alt", 'qqnGM', 'ZqrUV', '-filt', 'diver', "ÕES X", "𝐜̧𝐚̃𝐨 𝐞́", 'lJsBi', 'LzGLH', 'YmffS', 'FVmRM', 'Sdkhw', 'uGmJG', 'inser', "✅ O m", "fins ", "ta go", 'XslhM', 'mxJoI', "「 REN", 'RENOV', "as*\n🥇", "o:* \"", "RA*\n\n", " Cert", 'eIrJA', 'eXHpS', "s + 1", 'GBppn', "ttp [", 'kCNmb', 'RISTÃ', "gra\n┃", ": Err", "e hor", " | 𝐓𝐞", 'Leitu', "s: Ve", "🎮 *GA", 'HDmvw', 'yLejs', 'kjKEo', 'elvag', "! 💥\n┃", 'criçã', "s var", 'anage', "ra um", " mine", "da. T", 'rHuCL', 'hrcVj', 'FyAqk', 'Oeahn', 'mulan', 'gnora', "ê pre", " • ", "ido*\n", 'FabQJ', '-prev', "⊱「 VO", 'isTVw', 'getCu', "- Tod", " 5)", 'vGspw', 'YiYYQ', 'TcFSO', 'tlSml', "el\n┃ ", "ras, ", "pl\n- ", "nto A", "ero: ", "be ho", 'ewuQD', 'agem!', 'vEcep', 'x.js', 'WmNVj', " ├ Pl", 'OhzYY', 'lgYYa', 'ztkko', 'vVtuL', 'ginal', "irou ", 'ivar,', "p 120", 'teYpV', 'vcard', 'fetua', 'igu', 'KhNeh', 'ODOS:', 'WgvmQ', 'verli', '────┘', 'opbtj', 'vizDd', " usuá", "I ins", 'SkGEw', 'efixo', 'CYigM', 'ReBLq', 'sJAbT', "ra 1 ", 'GANTE', '%25&t', "╮\n┃ ", 'uUQQp', 'dono)', " Segu", 'ição:', '_msgs', 'OlElM', 'dQiyb', 'MZfts', 'qsoft', 't-lef', 'vZb7/', 'npNAg', "ma* (", 'nte.', 'xsTWC', "*📢 Ca", 'sXoUl', 'oIfOy', 'YmKUe', 'ina', 'and', 'guiço', " 👑\nPl", 'AqHGQ', " Difi", "ará o", 'ZOvTA', "ar)\n┃", 'banim', "a vis", 'RfrHy', 'WFWLJ', 'uRiBY', 'OhGRG', 'bxieh', 'EwfKa', 'NKtad', "KPOT ", "el pa", 'es.jp', 'Bbouz', 'Pcldm', 'gkbxY', " máxi", 'bgWlO', 'qTHBc', 'xAhmm', "ns! V", 'ITAÇÕ', 'LoFTp', 'Agent', 'MENTE', 'fVAOh', "an ad", "✅ SÓ ", "ero]\"", " nem ", 'DBXRr', 'qegFp', 'XSyvm', 'RyxMK', "ng co", 'qfTgq', "! Par", "o o m", 'wWZbN', 'o]/[t', 'Pruxk', 'WIXvR', 'sfvhu', 'duelo', "L:* \n", 'XktzC', 'lxnLM', "da do", 'BKfFE', 'Link', "s, vo", 'PgEup', 'h-car', 'swECI', "do ti", 'uTUqA', 'ADMIN', " pass", "se de", 'OMOVE', "o sép", 'com/.', " → Lu", " dia!", 'VqHWi', 'GpfRU', 'pgPvg', 'hGxty', 'PBTwM', "em di", "💍\n\n🔥 ", '25&te', 'lBxQS', 'FGbfb', 'acebo', 'Vwtpd', 'SmyiS', 'ctiva', "e nov", 'brir', 'ʀᴀɴᴄᴀ', "u! Fo", 'NtQdv', 'TupdZ', 'xTpGh', 'ios_a', 'DkYNG', 'ie.', 'UeVme', 'bAKuL', "dos c", 'prFSN', 'DSWEr', 'udio2', 'ojibo', "d ASC", 'JYLhy', 'gxyDc', 'RgQQp', 'WEsaD', 'meros', 'CILue', 'rhNLa', 'iGlBW', 'respe', "* for", "┃ qua", "de\n🔸 ", 'ackup', "\n\n⚠️ *", "┃ • A", "de pr", 'LNfBW', 'PekXD', '*Digi', '🐉🐅', "Sem t", " nasc", 'sort', 'EBCAb', 'KcqCV', "las f", 'cJZwo', "\n\n🎭 *", " pura", 'sg3', 'XxgPQ', 'mpqsD', "🐳 Doc", 'rsorN', 'HZKrJ', 'PxYmy', 'RAuLb', 'EWojF', 'jBdPs', 'iRrCY', "lor m", 'CPrsu', 'ortea', 'qobwz', 'WIiWk', "md pl", 'MvLnl', 'wns', 'keRNG', "na pe", 'paOgJ', 'UotBX', 'pp_ur', 'vwjub', '𝐂𝐎𝐍𝐅𝐈', 'AlxlQ', 'qUTeH', 'RHJjw', "mite ", 'Escra', 'YHCGa', 'itHub', 'agend', 'iUCVH', '◌ٜ🛸◌⟆', "hora ", 'XYcew', 'fromM', 'ucbcE', "✅ O p", 'json&', 'ysNmL', 'USRdi', 'wniac', 'eiros', '671b8', "ão o ", "😍 *Qu", 'ZuByl', 'JuEJY', "pos e", 'uto|h', 'NaEQl', 'setar', 'lmJJs', "\n6️⃣ Us", 'PEDRA', '@attr', 'xoJVY', 'sLXTL', 'CACHA', 'JfVod', 'DOcSt', 'hRmVz', ") ██▀", "ia:\n┃", "er2 [", 'mHJWn', 'ymdWz', " *Ven", 'fHmAU', 'Jkqey', 'HaVGR', 'ZzXMN', 'WJzoo', 'ArcRK', 'QMPEO', "O EXE", 'YlBig', "omo u", 'dia:', '(1).j', "al\n\n🎯", "Bct l", "o, st", "SAO D", 'MklYs', "r.\nEx", 'ZyyHl', 'orte.', 'vcNTP', 'BMzsL', "ios b", "bre o", 'DhJXy', 'geZCS', 'orari', 'sJrXC', "lo: e", 'mbCdw', 'oleta', 'aces]', 'fXKFR', " adul", "smo n", "cê! E", 'packl', 'ZlokG', "r2 At", 'ro(a)', "le er", 'spXMp', 'ZejTM', 'lNZLV', 'aDcQJ', 'tSxXa', 'HxQNd', 'ZLcFD', 'Norma', 'PIldn', 'arpAl', "ta, s", 'tlmfd', "sg @u", 'links', ", e d", 'EafoD', "s 00:", 'qtWRn', 'hOduG', 'oVQAb', 'kfkhJ', "✅ SIM", 'cfHyv', 'vsppE', "🎉 ", "🔄 Mod", 'MiufN', 'vLsqY', "a o n", 'YQkNi', 'YyXYM', 'WyoQr', 'gban', 'aqahB', 'bot', 'sXDlJ', 'EhbKK', 'MP3', 'HYblW', 'vmlCh', " cole", 'ssage', 'fWDSI', 'ted', "s 🎮\n\n", 'SNxyN', 'kAEbM', 'BTfzi', 'down(', "bou. ", 'VEL]', 'ygLVy', 'HkgjA', 'oDfVf', 'atalo', 'FJhrh', "o dir", "tro d", 'dUsfh', 'BBHGI', "└ Últ", 'cGnmY', "e de ", "ivo, ", 'SHQwc', "olte ", 'ornos', "👋 *TA", 'tarão', 'UpKYD', 'orros', "━⊱「 𝐄", "lor i", "a_em ", "to: 5", 'akyyK', 'oSLaa', 'erenc', 'ElSNk', 'TaEOE', " \n┃ 0", 'GdJCn', 'ENTO', 'pqOVC', 'hd10/', 'mLsHP', "%*\n\n", 'Yxkas', 'desme', "e ven", 'sfw', "os el", 'cjtNY', 'MZVgU', "O* à ", 'BtPyQ', "deos ", 'ecoOm', "os Gr", 'BHXbT', 'nxLNA', 'ZVYsA', "ite: ", "ir co", " forj", 'eativ', 'rEdUC', 'aocmd', 'gle.', 'ÁRIOS', 'uVAWY', 'esqda', "tre a", "r sor", 'guras', 'asta', 'RsFGS', "ndo\n\n", 'tEuna', "\n\nLog", '𝐀🔥', 'lkYPg', "o mui", 'ghUgo', '1fc61', 'RPPNT', 'LdOtg', 'KdTlV', "t [re", 'kRwUD', 'troca', 'tro]', 'RIwLm', 'LZNCL', 'HkhqS', " Casa", '-msgs', " *REP", 'Dimin', '[acao', "enu p", 'aYeRX', '4c693', 'HKrHM', "┃ 💡 U", 'Jdlqc', " Ver ", "NE OX", "ed 0 ", 'p.org', 'umero', 'HRJaV', 'gues:', 'zá-lo', 'gNbOP', 'JMQQn', 'ailab', "「 𝐑𝐄𝐌", 'carac', 'ykZpO', "olhe ", " o\nco", 'COahs', 'uthor', "ADE M", "ero f", 'sKrJg', 'sciss', 'anhos', 'TCzcS', 'EjmHF', 'GuUaa', "..\nal", 'tline', ':g=30', 'pqdrl', 'tERPF', "joao\n", "ja re", "hado ", 'oDLgK', "ixo p", 'teio.', 'CHyiP', 'addem', 'IBViL', 'xpIXW', "• Tod", 'BRAD', 'OgTId', 'egura', 'tikto', "os: ▰", 'RXYLg', 'CsoZk', 'mpo:*', 'mgEUo', "ER LU", 'ABEPx', 'mxefR', 'berad', "IAS 💕", 'wrNZL', 'IWWVd', "┇ \n", 'LIMIT', "rio] ", 'CGKva', 'nar_v', " no A", 'eEBqZ', 'GiJXF', 'hRntu', "obal\n", 'GDQLf', 'Gigan', 'quiva', 'YFlQb', "ve ga", "ppt t", "A!* 🗑️", 'bass2', "ros u", " 【✔】ʙ", "ar ta", 'sfund', '|sim|', 'thjIL', 'yfwvg', 'gERTx', 'qsnZp', "\nUrl:", 'd4472', 'Vsrud', 'YIPqd', "gem) ", "m his", 'mPXae', 'ROsLb', 'CVbLs', " o re", "sta p", 'kGzbM', 'IRADA', "M, CP", "\n┃ 3 ", "ve ad", "ual T", "ADOS ", 'RhUyY', "ir AD", 'KGbTS', 'sos', 'gold:', "u que", 'GqKdN', 'OVVyO', " +10,", 'XaeTz', 'NidMc', 'pvrQr', " tema", "o1 ", 'ttp', 'b79a4', 'fLPbI', 'MgTqz', " 𝐨 𝐮𝐬", " à li", 'ile', 'STRAD', 'ias/', "e vai", 'HaNhY', 'mHDqe', 'RvdwG', 'UrQPZ', '3dgol', "a (12", 'JpROn', 'Maste', 'QkQPV', "d 50", 'MIsMS', "n\n\n", 'UYNoS', '99999', '07:00', 'nkYST', 'de_pe', "ios q", "ig an", 'otify', "✨ @", ":*\nRe", 'jCLJt', 'dNttu', 'Dkjvz', "💰 RAN", "e 0 a", 'DJUby', 'messa', 'Ezuwj', 'kickf', 'jLXCe', '9eeb0', "te de", "da re", "o ent", 'OZrBV', 'hXFYh', 'QQEoK', "com q", '0&tex', 'NESqM', 'Reali', 'fvvgr', "tao \"", 'aQaoe', "] [te", 'uqmUi', "ove *", 'plaq1', " dado", 'iarem', 'k.com', "k de ", 'bwCac', 'RwevW', 'VFwnr', 'uyUNn', "┃ Sta", "eta g", 'dezza', "o:* ", 'nfCSo', ": tr\n", 'mqfYl', 'ful', " 🎧 𝑨𝑼", "ir us", "┃\n╰━━", "└ Ano", 'cxWxg', "icas\n", 'PzUXa', "` (pa", 'ltEun', 'AaoYA', "𝐃𝐎 𝐇𝐘", 'lasse', "p [no", "gra V", "a vol", "IS NO", 'uteYF', "or to", 'ftnNU', 'xqtgT', 'sqwgw', 'WbAsS', 'KXzun', '*Aces', 'RUtar', "/1\n┃\n", "]\n📝 *", "da me", " alte", "já é", 'PQURS', "a 110", 'kzShA', 'GISTR', 'Envia', 'Rebai', "🗑️\n\n\n\n", " gran", 'kHvoh', 'OZKxd', 'RWwBH', "rtir ", 'am_li', 'qufup', 'aymen', "─┘\n\n", 'e=951', "\n• In", 'fGhAU', "de tr", 'BfrcR', 'Vpiyz', 'AILY]', 'LBPYu', "┃ 21 ", "omum ", 'KtMJL', 'xOJDm', "rio]\n", 'boXQB', "🔇 *Si", " a um", 'ABEtT', " 5/5\n", "A SOR", 'split', "ink t", 'LRwcx', "e o b", 'dSjZU', 'cBhxi', "a gol", "DE AV", "✅ Adv", 'QQkJQ', 'RHXTs', 'sPyTm', 'nkdMS', 'asRol', 'ACDiV', "ra nã", 'Ywlxa', 'TyXVx', "m exc", " [dat", 'zHseU', "*\n• D", 'sWweY', 'céu', "ter u", 'incor', 'dedTe', 'JXyGe', 'ages', "ar PP", " *Exp", "link ", 'VZEaE', 'mpo=1', 'cuper', "⊱「 QU", 'banho', 'media', 'blish', " ?, t", 'DrBMn', 'dação', 'NjfGF', 'bdMwN', 'Públi', 'ltern', 'FveYi', 'UViqO', 'yTDpg', 'RpiuL', "tus a", "dia! ", "os:* ", '*Data', "O lev", "g no ", "ar X9", 'da_st', 'jrLuk', 'kDays', 'COQVs', 'RAS', "foi A", "ode u", 'WLhqg', '080p)', 'nEynO', 'cZrej', '|2|5|', 'PDbjY', 'GafPJ', "ico d", 'KtYQI', "ior d", 'LNNOI', "ROM p", 'gEvZM', '873d1', "𝐃𝐎 𝐃𝐎", 'NWNtr', 'sText', 'iXRsu', "co ca", 'ento.', 'NRnot', 'ypFOj', "ito l", 'WAXUT', 'papof', " Corp", 'Restr', 'LzXkD', " what", 'ndos*', 'ultad', 'Fazer', "⚫ *Vi", 'JHaww', 'motiv', "[ID o", '9219f', "\n- En", 'ibqZY', 'istra', "o foi", 'AToei', 'aVeFB', 'zFBwU', "e alu", 'fPDkZ', 'xNYEF', '_comb', "es ad", 'eSYFB', 'rch', 'BmFWI', 'isPre', 'iQfkZ', 'Empat', 'lTuGN', 'hZCAo', '*NOME', 'eWEbh', '39%25', 'DNJDf', 'ker', 'TnqGQ', 'SQL', 'ha2', 'RMAPL', "sada\n", 'dvCdD', 'UWWBx', 'McYhj', " deve", 'iZdXW', 'esvyu', 'Suces', 'yzCZE', "do _-", "o lim", 'kSvzi', 'renda', "Y (ex", " perm", "novo ", 'Xkmfl', "na um", "┃ 32 ", 'kklhS', 'rforw', "i tex", "ão ro", "ig [n", "ou er", "Só AD", 'ojis:', 'nbang', 'QaoWB', 'JWPsY', "*\n⏰ ", "ver t", 'hddRg', 'YbZFY', '𝐃𝐔𝐑𝐀𝐂̧', 'oECko', 'XoQHi', 'me/', 'NKPqD', 'horár', "I PRO", 'Abraç', "m bei", 'EMKTb', "\n💖 Po", " e dá", 'Kbwmu', 'Opera', 'nzomv', 'GFJPh', 'tNlgD', "te [l", " ALUG", 'QgNad', 'contr', 'cGxUP', 'weOOn', '/prox', "⚙️ *Ca", 'HwnpT', 'hsOti', "gem: ", " 💝 」⊰", 'pthqG', "A ÚLT", 'sWvJp', 'wGHrm', 'GmTaz', 'Phone', 'Melho', 'UtwCb', 'nny', 'strad', 'rlamb', 'tos.', 'OBITO', '🌞🌛', 'Rolet', "Menu ", 'eeZZs', "rá o ", " bot ", 'koNGi', ": \n", "ar at", 'Wrvlt', 'tpKct', " entr", 'onfor', 'XTpND', 'xpend', 'ClVBe', "mute ", "inks ", 'KpZHM', 'lZkHk', 'DpKqX', '[tipo', 'TjzHs', " Gira", 'eBGmR', 'tmJAX', 'empor', "E\n│\n╰", 'zNTBS', 'mbina', 'WbzrR', 'yLUHD', 'GFhWQ', "ek: e", 'xthJM', 'lUZvW', "a cha", 'uedos', "e\n\nUs", 'rVFaB', 'YTAlL', "em os", 'priWb', "o cit", 'onia', 'kSync', 'MENTO', 'QYzoD', 'ação', 'app/s', 'uocJZ', "oma e", 'uGokW', "┃ *Ex", 'cmviG', 'escud', 'ogo', ", Bik", "isa p", '.goog', 'qwNoU', 'is.js', 'ermo]', "vo. E", 'lcEFz', 'rbjpI', "ji 3\n", 'Incub', 'oobSR', "✅ Reg", 'MARKE', 'faCYo', 'bYthc', 'pp-st', 'WkMBh', "📋 Mos", 'aGhTo', 'hKYCW', 'relim', 'MHULi', 'hwrKZ', 'www.t', 'dQBqL', "\n│ 🖼️ ", 'pmNIH', "🛒 Com", ":* mu", "oi po", " os h", 'LkzwM', "🎲\n┃\n┃", "❌ *OP", 'XOxhp', 'TNoib', 'HVIDJ', 'CnEvo', "po, t", 'QmSNP', "NO*\n\n", 'eugSl', 'dom]', 'MNQry', 'qCrPG', 'hjJiN', 'ltFdL', 'miZcG', " Eter", 'ogyEn', "!\n\n📋 ", 'AYBkX', 'VFCUj', 'Xsuah', "⚫ *Pr", 'CKqVI', 'on.x=', 'ítima', 'OMwlx', "s Gru", 'atiza', 'cZDoy', " e st", "❆ *RA", 'rDMAS', "ppy l", 'GrNAh', 'ApdgK', "itar\n", 'LTEPc', 'HXYKp', 'Ldech', 'veZSL', 'LYKIU', "não s", "zar n", "🔸 *Al", "o 0", 'FPyeo', "PG e ", 'ireto', 'char-', 'GfVVs', 'IPoAd', "𝐎𝐒 」⊰", 'uzFRx', "ltou ", " meni", 'sQnCK', "ar ou", 'mclov', 'reto:', 'MfTbg', "em pl", 'hErzk', 'esenv', "- GLO", 'hJNaq', 'iClYP', 'nbACO', 'á-lo.', '[núme', 'Basic', 'pufvA', 'tzgQs', "m arq", 'NgwdP', 'efloo', 'gif-[', " APEN", "⏰ *Pr", 'AdmrP', 'DFIRz', 'qxZVE', 'gs.js', " *Tip", "✅ Ope", 'daa3e', 'qoevr', 'ndo1', "il do", 'bjIcT', "bot* ", 'gJEHb', 'thCap', 'ORihy', "r 5, ", 'tema,', 'menos', 'WUGlz', '4|1|0', 'TDyLC', "DE 」⊰", "⊰╮\n\n", "de [l", 'GodGI', 'ZtoAR', '1|5|0', 'fRKiy', "adas\n", "ap we", "🔍 *EM", "ãos d", 'hat.w', 'Lrogu', 'YVLNl', "┃ aut", 'QYdnj', 'rjjUP', 'JjWpr', 'UnvMz', 'TI-PV', 'upvDc', 'foram', "SET h", 'EkhUh', 'metro', 'ZiazQ', 'GOuVp', 'SbxoT', 'FvokC', 'ing*', "or: ", 'vado.', 'VucMq', 'KlJHt', 'LEVI', "Xh, /", 'nKCFE', "imo d", "┃ 📊 P", 'xNvXG', 'yWgWx', 'isar', "📱 *Co", 'HAwsU', 'zGYVN', 'Div', "le ap", 'Admin', 'kZYmD', 'acao)', 'lásti', 'dxgBj', 'RTYIY', 'cvxtO', 'fcUuI', "r rem", 'xbPLL', 'eSKVL', 'FoAgs', 'op=ur', "o o r", 'lvVgX', 'eMFsH', 'gkuMp', '6|2', 'ogxaC', 'VJtqO', 'QlKwP', "an: s", 'gem-a', "ora e", " em u", 'ium', '𝐢𝐜𝐢𝐚𝐫', " LGBT", 'QkmaD', 'RnztW', 'WyTfD', "go:* ", 'TYTSc', 'ORTEI', 'XGcCj', "2 [ma", "uto R", "┃ ⚡ A", 'antid', 'dnlvj', "n fon", 'IMGMs', '64,', 'gxPES', 'XNMpE', 'tSqXr', 'tsUpd', 'CRvan', "🎭 SOR", "😏\n\n「 ", './gtt', "ras e", "ros R", 'fuqWS', 'mp_at', 'STTgh', 'xlWhu', 'NpPRO', 'szFes', 'uWiwQ', 'o/7SV', '፝🎡⃞꛰𝐋𝐨', 'pWjAy', 'mHFZX', 'UbNts', "\n\n🤖 𝐓", 'mime', 'nCbbz', "tos n", "bou, ", 'qgcKd', " cool", 'fsvWR', 'VvZJP', "e*\n\n@", 'tido!', '&inpr', "mos M", 'ALUES', 'BVHor', "u mús", " este", "\n┗━━━", 'vGLfA', 'KxJKr', "m mui", 'verte', 'WFHqS', 'off/n', 'ZsznC', 'DAIZw', "ℹ️ *AN", " libx", "OS os", "le re", 'oubo', 'skKQi', "ade 🎥", 'JtnvX', 'IrjlY', 'mcCiB', 'UfOiY', 'fonTK', 'kmoST', "o!\n\n📋", 'IrISK', " pra ", 'EHkrM', 'ZzNBn', 'OavBs', 'fJUMy', 'fkDLp', 'iven,', 'YYY', 'TANJI', 'BpolG', 'BbIlO', 'TGXby', 'esxVV', 'KfAlg', 'IQCuw', 'dQwvH', 'qVvBt', 'YWTwY', " LIKE", " Emoj", "ro\n2️⃣ ", "te no", 'penas', 'oitPY', "nk da", 'esWQm', 'QSHmW', 'oupRa', 'fVjos', 'stDeu', 'GANÇA', "* 💣\n✨", 'XgurQ', '/webp', 'hEiBj', " 🎮\n\n🎯", 'DcNWt', 'stili', 'iment', 'gpDSI', 'tLSpf', 'JnAOh', '𝐏𝐀𝐏𝐄𝐑', '/2025', 'HoKEE', "p [ID", 'wplnT', 'yle=i', "ça po", 'hinat', "oje. ", "E FRO", 'XFWLe', 'zBqOW', 'CLksG', "S ━╮\n", "tas c", "m dev", 'IVADO', "s\n\n🎮 ", "G SAU", "jis r", 'TrzXB', "❌ Par", 'ugest', "na os", "PF qu", 'vardi', "es e ", " mult", 'olds.', " *Ped", 'OTXWC', 'mkqPl', 'indo(', 'LHSHz', 'Frqmu', 'EVcCx', "\n┌─ `", "ado |", 'RubYZ', "s seu", 'ype', 'ogyyf', "⏰ *Vo", 'imeir', 'etada', "ume d", '#usua', 'cxvRv', " ro\n-", 'Chifr', "a a r", 'ls-ms', "10m o", "ome D", 'VvwGk', 'TUwAT', 'SDrgg', 'KqeUU', 'TdPPk', " Troc", 'GVfvy', '2c4fb', 'antas', "r? A ", 'deGol', 'ões.', 'wcZjV', 'qwIeL', 'VXKBB', 'kGIXt', 'BIrhW', 'lida.', "SÓ ME", 'bCotr', '*Será', " bot", "! 💢\n\n", 'nXTyn', 'CkHOF', 'RECUR', "- 📽 𝑽", "DO*\n\n", "r gol", 'VSijx', "eis\n\n", 'ncurt', '9b331', 'img', 'GwfSP', 'rmed', 'agem.', 'onds', 'rar.', 'QFxtG', 'eHXyo', 'sdama', "O FUN", 'or>', "ão im", 'rgasm', "• Ger", "nel d", " Adic", 'bIcBl', 'kkfZZ', 'epxqV', "el: s", 'yjMXv', "┃ 💎 D", 'LzISG', "ta é ", 'sição', 'Xzbjd', 'JDuGx', '(GENI', 'kyWsU', 'JqRXo', 'ptPZV', 'CGBHQ', 'GtTpW', 'IuLkm', "u sal", "🔸 *So", 'zOOBP', 'as(ns', "uto B", "nida ", "Uso d", "á uti", "Only ", 'rsaçã', 'jogad', 'SITOS', 'DMOZb', 'uindo', 'tific', 'oiSty', "hat d", 'qBCTv', 'GK0X/', 'ompra', "udo D", " admi", 'qbcnU', 'zmYKv', "\n(SEL", 'bomba', " - Vo", 'per:*', " o du", 'FZgJV', "de, p", 'fundo', 'XrPqK', 'sJivI', 'MvYGk', "ppt n", 'peIZA', 'resul', '?|Sim', 'KwdwI', 'qeqEq', 'BHcbd', "bro n", " negr", 'xando', 'Sonho', 'Swfgs', "*\n\nMá", 'qEaSO', 'link|', 'googl', "ERO D", 'ecial', 'suari', "e DES", 'ajTjx', "—\n• ", "u. Po", "hor d", '19999', " 🐱❤️ =", 'ONgxf', 'Ouvin', 'yPQhx', "- Ven", "ngiu ", 'SuYzg', 'XNTGR', "s - t", "\n┃ 📝 ", 'shFqe', "ff` (", 'weldH', 'help`', 'florw', "UBAR ", "\n\n📅 *", 'simil', ",\n┃ m", 'TEXTO', "S*\n*T", 'nayan', "❓ *Es", 'EaNZQ', 'CTdCi', "P: -l", 'xDZVs', 'UBhxj', 't-rig', 'b5427', 'fprqe', 'iCJoj', " 0, 0", 'Abrir', 'yment', "s!\n\n💡", "u o @", 'te_id', 'siafi', 'dabv', "SO - ", 'YysGE', "\n*HOR", 'ecebe', '|7|6|', "r\n┃ a", 'bMEGe', 'ões:', "tra a", "┃ • @", "r nsf", "há ra", '[term', 'iakyc', 'EOBQq', 'vel', 'zQXAR', "a...\n", "ec li", 'idos:', "so\ndi", "🎁 Prê", 'MJaOs', 'eOOUF', 'qaatN', 'oJTwR', 'IcFOx', " glob", 'cbDij', "ban @", 'tSKOf', "ra ca", "de Fa", '.cont', 'jWCNw', 'daily', 'skKQw', "º : @", "rar 1", "ser e", 'FRBqd', "T las", 'tory', 'kFFpA', "ga fe", 'XcGZD', " da v", 'IFQel', 'erDDd', 'aBDlK', '|4|3|', 'simul', "ogos ", "s, po", 'ler', '0PhZ/', 'ALuwD', " DO B", 'pcULm', 'phVRv', 'cFpyz', "ocê f", "a nat", "3 - M", 'UlFql', 'TWkcW', 'onlin', 'hAgrZ', "e lev", 'ENSAG', "g [ti", "✨ *Co", 'INMDI', "da ho", 'REMOÇ', 'NjCnm', "e aju", 'repet', 'piyum', 'Exibi', " doar", "ento\n", 'QdJbh', 'dSklc', 'bNcLl', 'laint', 'bMRSP', 'LBQtN', 'pBYql', 'oJFNH', 'dargo', " 𝐀𝐋𝐘𝐂", "ESC\n", 'dYBwB', "    🤖", 'nuJjn', 'bPTBQ', 'aNOty', "\n\n*Fo", "nal ", " 🇦🇩 🇪🇵 ", 'ÓRIO', 's_alu', 'AgXct', "ltar\n", 'MOUcP', 'elmen', 'Neter', 'api_k', "F ale", "u ape", "\n📝 *Ú", " da m", '0.bac', "zir [", 'OuTcu', "E ppt", 'tHDsN', 'IuDJN', "ao me", '4|1|2', 'nfHjM', 'no?', 'vbBBO', 'JhouI', 'YYvna', 'RmsJz', 'JoibN', 'gidmb', "do: D", "ing 2", 'WpYUq', 'range', 'nyxzM', "💀 *WA", 'ndo1,', 'vndmu', 'EKrcI', 'MYsfT', 'artif', 'rsão', 'late', 'zEOEP', " ÚTEI", 'tai', 'noxai', 'UiXxq', 'AXusM', 'TsAVL', 'HTnov', 'OOipH', 'TYUzF', 'CTQDq', 'ticke', 'jGXgS', 'wQGuC', "⚠️ Use", 'qgoQq', "6️⃣\n┃ 7️⃣", 'sJhzA', 'iblic', 'inclu', 'eWdQn', 'vwdGf', 'tps:/', 'tidad', 'IciJr', "r inv", "m, pa", 'tvkts', "os 📖\n", 'HbqMa', 'MOVID', 'hRgMv', 'VIhUx', 'XcekT', 'stive', 'ggswY', "m fra", "atos ", 'cada', 'pVVHF', 'PHOTO', 'eZBIJ', '/file', 'PhLjb', 'UgmYW', 'saita', " na A", 'UbHBG', "ao ob", 'RRezb', 'ipvSR', 'QMhTG', 'ZwgtV', "el [g", "a não", "❌ Reg", "um nu", " Sist", "ada\"`", 'bHSQB', 'hos', 'ore-l', 'otivo', 'WNPBS', 'kbsBb', 'fzKNE', 'ELoLu', "r esc", '|Data', "r exp", 'uDjcG', 'iqTOK', 'LMkrP', 'nUvIZ', "━╮\n┃", 'JQffH', 'MyLvE', 'bBcVE', 'xpGai', 'nDXYA', 'XBroJ', "nos m", "ic 30", 'HTEYY', 'mDDFI', "da ap", 'lwCvc', 'hclqR', 'CNFjS', 'JInpM', "r o r", 'rmJSN', "do óc", 'inger', 'djjCF', "│ 🎬 V", 'rerlY', 'YaAsA', "┃\n┃ 💰", "ID nã", 'wrlbO', 'wPVWT', " └─ 📋", 'TTota', "al em", 'VhcbU', 'sagem', 'fyOnE', 'kltkW', 'QjNdV', "TRA E", 'legen', 'ida!', "\n*│➥ ", "Boa s", '00000', 'gkOiV', 'temp', "sic`\n", " o pr", 'wYNbB', 's_gan', "┃ 🛡️ E", ": nl\n", "OT AT", 'talho', 's/víd', 'VNxUU', 'omânt', 'KtPkQ', 'EunFq', "AIS T", 'IGOLD', '𝑺𝑬𝑵𝑻𝑨', 'spank', 'FEyVT', 'wAFfq', "vo va", " um i", 'SAFIO', "ra co", "ssa m", "ve pr", 'NIcCj', 'serão', 'aaApR', 'tNDeu', 'TYhoP', "nny a", 'HzyKG', 'FQvCU', 'RFORM', 'uxXMi', "𝐈𝐃𝐎𝐒 ", "ia um", 'AbFxj', 'zhbgj', " tota", 'lMklW', " bron", 'OnMRt', "sada ", 'YxmoZ', 'keys', 'ais.', 'QqEFO', 'inter', 'WfZvK', 'disab', 'ahqpE', '_role', 'bAzdz', '/exem', "ORES ", 'RyQjw', 'punhe', 'qrdmE', "ato m", 'stick', "cao) ", " 'ati", 'oup_i', 'RPSJu', " Alta", 'izeMT', "⏰ Agu", 'jQuVz', 'hlPDi', "ra so", 'CdZHZ', "⚠️ Dam", "ar Sa", "o, us", "m sor", 'JoAwA', "ook e", "te. C", 'ABeMn', " o qu", "os te", 'YlGJd', 'YHNKl', 'ZUEIq', 'qLNLK', 'rMGuj', 'ojxkk', 'sYOkz', 'XwtwV', "as qu", 'YaYDX', "\n\n🔒 *", ") VAL", 'es.js', " esse", 'TYIvC', "e o(s", "DO 」⊰", 'HusVP', 'IUcDv', 'ClsQo', 'oscTo', 'rhhcW', 'drões', 'VqBbd', 'HIofM', "r: +2", "🚀 O a", 'banus', 'Csdyg', 'KirBa', " um w", "cê po", 'be29d', " *Açõ", 'bmhV9', 'vidro', "ase f", 'ljAPz', 'var_', 'gqvAx', 'YGDSP', 'vffVy', 'LbZIT', 'FTmVA', 'zvBqq', 'sgo', 'tlXRO', "┃ 🧾 P", 'UxfPT', 'mnljt', 'cFKUz', 'KygcC', "a hor", 'ipal.', 'ugTEz', 'kNZWb', 'ATiwn', 'RVJFr', 'GsGTe', "a Wha", " link", "s.\n┃\n", 'umula', "HD (1", "a peg", "om ho", 'MDUnk', "\n(use", 'JcCEV', 'JOONX', 'DSfMe', "\n│ ✨ ", 'hrWlC', "m é a", 'MELIO', 'cKRrk', "o 🎥", 'chTiS', 'RRSxt', "ca, a", 'lnpVP', 'reATU', 'FdTYv', '/nete', 'ObVLn', " - Ul", "do te", 'figem', 'saXsj', "ter p", 'bANlY', 'ante.', 'cjJkF', 'jgKKb', " 4K!", 'kFdoQ', 'IdimO', 'ezuel', 'tItrx', 'Sexti', "sde i", 'packb', 'HHzHn', " ao v", 'oleçã', 'jjnGy', 'XCFfx', 'suces', 'QkyOk', " dels", "࣭࣭࣭ ུ", 'WxycW', 'nar', 'edXP', 'HECbV', "s glo", 'ZORA', 'NCZkc', 'ClrPU', "ja, u", 'LHxoZ', 'eTAfJ', 'QObyQ', 'xYLzl', "hrp 1", 'uzAlB', 'vtYAK', 'bwlLQ', ", ape", 'toria', 'UbEQG', "a e E", 'RCozq', "S\n┃\n┃", "Link ", '0NfrO', "i fic", 'aJJkZ', "iv pa", 'solic', 'dgold', 'GkOZr', 'Ayklj', 'NiRDu', " 5m, ", " crio", 'nOWdp', 'bolo', "É fei", 'sgban', "s sem", "e A:*", " desf", 'HvJtd', '*𝙴𝙽𝚅𝙸', "LDO ━", '383de', 'modob', 'OUvDv', 'ezqRT', " some", "O 2 A", "m din", "uel. ", " e ex", 'ncgol', 'ZlWcu', "s nov", "ER!* ", 'ppt2', 'dFueK', 'vnqgL', 'QopzQ', 'aRjri', 'zzniv', 'HYYtT', 'rzIiV', 'LkLHK', 'sta.', 'hdwLL', 'JKSdR', 'eemoj', 'ifica', "\n🆔 ID", 'recon', "m 100", 'vrcpf', "- O Á", 'qkafY', ", agu", 'Dnugb', 'oFoto', "ROM h", "pos o", "l ano", 'knPuA', 'hLTNP', "com j", 'setst', 'wnEEV', "uas r", 'WOYDq', "io li", "de er", 'dyUlE', 'tdJpn', 'MVXnC', "l WHE", 'KIKcD', "ra vo", 'Joxri', "*\n┏━━", 'QgnTX', 'jogo_', "_afk ", "ing n", "da Di", 'hXSnz', 'IbpkN', 'hop', "id AS", 'yKlpo', 'eCdbh', 'kKHbu', 'MsURg', "que i", "da\n- ", "e em\n", "o mod", 'o-sta', 'TakTs', 'amib', 'orxgH', 'NULL,', '/Leti', 'QxBPf', " (até", "io me", "po. S", "❌ Ant", "ar ", 'jdxAc', "não c", "po. A", "ser o", 'Na6TH', 'sWTln', "ão:* ", " KB", 'OGNdr', 'ISTAS', 'SwONh', 'tar:*', 'levi', "os\n• ", 'msELP', 'iwoiD', "`\n💎 S", 'rv-fo', 'aJEYc', 'RuxDc', '*𝙴𝚁𝚁𝙾', "oje j", 'sBDEY', 'rGQji', "ÃO ⛏️ ", 'rinci', 'tts', 'TdCKM', 'lish:', 'união', 'uqlHa', "✅ Lim", 'CKyst', 'eXFLD', " cham", "A cad", 'ffect', 'yySuG', 'HdhKc', "Só Le", 'zBfZG', 'aZVBi', 'rquiv', "ão ge", 'RmbkG', 'botof', 'numqu', 'aoxkg', 'rrer,', "⊱「 ", "caso ", "isa A", 'kfyae', 'OxFLi', 'JPyEa', "ot, p", 'getPr', " a se", 'XOzdK', "*Não ", "?, ti", 'oLVCb', 'fCxVk', 'kFwGv', "o cla", "u lim", 'gkOMu', 'compl', ": hi\n", "k = ?", 'sole.', 'ghRvT', 'uVtiE', "z um ", 'Calma', "T SPR", 'eradv', '🔥𝐕𝐈𝐃𝐄', "on re", "A pal", "1: ", "┃ Eit", 'rel-p', "rte u", 'jfXYv', 'Desat', 'ɴᴛᴇ-s', "dm ou", 'SteDN', 'TewtW', "bugs ", 'ozsUg', 'nweat', 'DBjdP', 'ZQanW', 'blxEG', 'ASUNA', 'EDVuP', '6b7bd', 'XyciD', 'jlumj', 'pJWjw', 'KgfFm', 'zora', 'hIGxb', 'IJWDI', "as En", 'qbCsn', 'RXqrK', 'o/Str', 'xto1/', 'VGhoU', 'FUZXC', 'ZNYuF', 'sQFtk', "* bei", 'iFdkv', "utar ", 'tkwhO', "com i", 'tPFcC', 'silei', 'XNgzo', 'KoCZs', "Foi a", 'osta', "es br", "o tem", "t e t", 'XUwvM', 'DAR', 'tCNXz', 'Horár', "nhum ", 'GSRQx', " Domi", 'mIuTr', 'UsDBm', "a out", 'WKxcE', "ro\" e", "𝐑𝐀𝐌: ", "soa l", 'SVwKQ', 'dpGan', 'fVwoC', 'ances', "de RA", "har t", 'RNZkQ', 'dmin!', "um no", " Com ", '❖•ೋ°', 'NbmWH', 'jAwxi', "ssoa ", 'pizhN', "o fun", 'CsJEi', "a 🥃\n┃", 'OPSuI', " a ca", 'hIrJC', 'ZtHHu', 'qOeqv', "ig ca", 'mnbfO', 'zTqao', "lhi* ", "za cá", "o!\nDi", 'ykEfu', "s [fi", "l:* ", "l [me", "\n╚═══", "do ag", 'ZBnOY', "em ma", 'einqA', "ao li", "\n┃ *D", 'qDkYQ', "o sel", 'IGPNb', "` (só", 'sVILV', 'zcNGq', "ê foi", 'BvSZM', 'mples', "or ca", 'RtCbk', "o qui", "urso ", 'dEIPx', 'ZlxlN', 'qrFhp', '6150d', "am en", 'XBeJi', 'RvTEl', " GIF", 'vMBdM', '7a325', 'HrvzL', 'ElqDR', "md [c", 'JXzJt', 'MLmOq', "ende ", 'zVFbV', 'FixrI', 'jPJVk', "min e", 'cXGRP', "ti pr", 'tivo:', "\n┃ 🔇 ", "eja b", 'VSedC', '𝐄𝐌𝐁𝐑𝐎', "⛓️ *AT", 'UWcne', 'rSsJo', 'muyVp', 'tlswZ', "m o c", 'YkAcV', 'lTDYy', 'guage', 'efaze', 'zppTu', 'jXoda', "sem l", "e ape", '𝐍𝐔́𝐌𝐄𝐑', 'jLozN', 'FYxFB', 'ixJdi', 'iacao', 'DdCWd', 'BATSL', "a cor", 'pnFKU', "de av", 'ZOAKi', "* scr", 'qqQuR', "🔄 Ren", 'adeir', 'SBJow', 'wjMF/', 'oPlIl', "🔍 Tot", 'tivam', 'iDELD', 'SBOnN', 'imgpr', 'XvCZk', 'PeWiD', 'HFjbU', 'DnnyV', 'upo✔️', "❀⃯ ⃝⃔🇯🇵⁩\n", 'qCJNG', 't.0.t', 'IrUrq', 'KxeFc', 'eVQRF', 'QojqF', 'estõe', 'nFash', "o, pa", "k que", 'ERkJr', "ter m", 'matio', 'bizyg', 'pnorF', 'nNoAB', "1 - C", 'HYTTv', 'bobao', "✅ Ati", 'IsWtr', "stir\"", 'f5003', "⚠️ Adv", " copi", 'bXwiw', 'rneci', 'sCyIR', " EVIT", 'iIcWv', 'WZieb', "gar s", 'YOtFx', 'HoxIH', "\nPor ", "m ter", 'onfir', 'MutNI', 'vxKBG', 'ynHDB', 'LaVQq', "avor ", "+50% ", ":*\n┌─", 'pagei', 'lyRdE', 'rmanc', 'qnqdr', 'rOout', "𝐍𝐀 𝐓𝐑", 'IqJuZ', 'grzmb', 'fstic', 'YvwKi', 'ltipl', "to id", " : ", '.0.co', " da T", 'yAChh', 'eg?pr', "( Obs", 'nvolv', "ET at", 'piBnx', 'JNGyO', "se um", "eo, f", 'XAPYv', 'eassv', 'gtrap', 'QVCgr', 'gias.', 'jInzw', " (ban", 'er/fi', 'ggYqT', "o del", 'DuBLT', 'NyunY', 'ohMKG', 'usado', 'Aninh', "- Sor", "┃ ✉️ L", "rão)\n", 'ntCom', 'pedir', "o You", 'uEkur', "es ex", '·࣭࣪̇🔥ɴ', "r e \"", 'BwGxs', "OM so", "CE!* ", 'XLBIB', "t atu", 'roupN', "das d", 'lbayF', 'CCkBx', 'gasta', "RMAR\"", 'ZoZDX', " Marc", 'o/qua', 'SLuxH', 'XvKMO', 'cZYov', "opo: ", 'HJZDD', '】ɴɪɴɢ', 'yjkKT', "sica\n", "to do", " FORM", "om 9 ", 'IydFj', 'old.', 'm/Nue', 'IF!*', 'ista', 'zHToU', 'aVslj', "M coo", 'PyYTn', 'leato', 'KafNa', 'UGNRq', 'ctmTf', "u \"re", "✅ Vol", 'gyBPe', ". 🔒 F", "ção a", "a usu", "❌ Se ", '-ALCO', " pend", "uez e", "\n🥉 ", 'XmODt', 'uisa:', 'Doubl', 'OTsWO', "AS ", '1f541', 'EZhGY', "ança\n", "cmd, ", 'sVdCx', "o usu", 'SqImn', " de s", 'ediaf', 'bWWCk', '🛡️', 'gle.c', 'tNPTG', 'rDaXq', 'QkBwR', "ema d", "md li", "! 💕", '1e4f6', 'rmalu', 'epPyQ', 'RYnUW', 'EhvyK', 'RNJeM', 'vWGTI', "🕐 Cad", 'eXyRM', " Dura", 'SzsAq', 'YBZjM', " ATIV", 'HvKtM', 'antic', "com l", "ão em", 'Pgqxf', 'ndo:*', "lgum ", "ar\" o", 'zoIDZ', 'RybCW', 'RzYQZ', 'tabel', 'yxDPm', 'erm%3', 'AyXGU', 'RygRL', "o 553", 'NÇADA', 'lares', 'CffnN', 'madei', "I BAN", 'avras', 'VgGOB', 'llGtt', ", sel", "_-\n\n", " bot:", 'emdom', 'okorV', 'FLOOP', 'NIikM', 'cNEOn', 'houve', 'sCQzK', " 50 ", 'ose', 'ObAzV', 'sGcpn', 'ação]', "🔻 Tem", 'fUIFN', 'GANES', " palp", 'rBeFk', 'ebtyr', " : *", 'orcen', 'hpaga', "1-9) ", 'oban*', 'expor', 'rkCct', 'onlyG', 'cnXcY', 'OuWYe', "om @p", 'NuBkg', 'kWYBC', 'wind', '416xkTctm', 'ZvOib', "eva a", "ato, ", 'ATUil', 'eUYmS', 'ByObo', 'SXaSp', 'yjqdz', 'tlsyV', 'IMdNA', 'llo', 'UPPdt', "dar p", "vas\n└", "ias q", "a (80", "o)\n🔸 ", "u.\n┃ ", 'WZjgc', "---💥 ", " fps=", 'uQDfJ', "ara ", 'Lg0_x', "vos: ", 'zkskx', 'MOOQm', "_\n\n", " divm", 'qhHdn', "o, qu", 'uBMIP', 'TDLsL', "e, co", 'siADJ', "usos\n", 'pQhCZ', "\n╚┉┉┉", 'UhWEe', 'eIccP', "M -s ", '.json', 'ciare', "de Ga", "𝐈 🔥", "ó don", 'Efhep', 'tjZHm', 'YitYT', ".. Va", 'ciada', 'MOÇÃO', 'TRslY', 'ÁLIDO', 'pomRL', 'figme', 'erio', "o. Pe", 'XOfHv', 'DBtfq', 'iXwCM', "te.\n\n", "📦 Com", "- Efe", 'MODOS', 'bPOye', 'mYcQl', 'gnnMl', "ESTE ", "orme ", '▬▬▬.◙', "❌ Voc", "ões n", "O núm", 'fqYCR', 'SlBPk', 'vXJAF', 'RSzaZ', 'wMEVG', 'Tivej', 'ém.', 'MkYlZ', " inic", "\n2. ", 'PARTI', 'QUoXb', 'vbTcb', " Roma", "✅ @", 'svqJd', 'JtgTy', "┃ 22 ", "var: ", 'tros:', " na r", 'jQVmy', " *Reg", "o\n┃ •", 'upsca', 'AKmOO', 'fWBGB', 'pergu', 'iIwuN', 'FeoIn', 'ZNweF', 'JUSTI', '/cgro', "y 60`", "ões b", 'blox', "MUAY ", 'OaLZD', ") \nVA", 'KxMJe', "\n• Mu", 'RagPR', "Não h", "OCÊ A", 'rlJJK', 'CFxmo', 'arte!', 'xwdYi', 'ARDE!', 'onver', 'tJKIy', 'cCvIe', 'OGelH', "ão an", 'XnWtZ', "s dis", 'FDVCA', 'cbqlf', 'QqEFV', 'cyk2/', '𝐀𝐍𝐒𝐂𝐑', "rar [", "OS PR", 'llJYb', "ar* :", "a [ca", 'apply', 'vTbXA', 'Imped', 'tesse', "🎮 Tod", 'JztNR', 'fqIIy', 'steal', "os.\n\n", 'TdeSx', 'fJyMP', "io:* ", "nais ", "odas ", " SUCE", "ld at", ".. ( ", 'lfOmL', 'Envie', "ot re", 'DmjBE', " Dia", 'unbZt', "es in", "ha qu", 'cKgMk', 'ERArH', " técn", 'OYPvG', 'o-hrp', 'EXKkA', "f are", '&text', 'lpvoJ', "RES C", "ese: ", 'pTfdI', 'TSsIy', 'RkWty', "os po", 'UVcCw', 'lmada', 'FFwnv', 'btoZR', 'BydSN', 'OVBDd', "re co", "var\n1", 'zjPza', 'GjcrS', 'IdnYH', 'MgHRo', 'ring', 'kICVu', "s de ", 'ePKgT', 'wcHcs', 'rudo', 'FxFnw', 'FIPaC', 'hzdXJ', 'FCKUY', " sonh", 'AQQYm', 'otaru', 'ganho', "e o C", 'vDarP', 'WBwZB', 'ibot:', 'ceWWF', 'HXyYV', 'afYpz', 'YHZrI', '93g8n', 'lireG', '```SO', "min [", 'cIgma', " vez,", '2e307', "\n\n⏱️ *", 'inda!', 'nDeLi', "céu é", 'ios.', 'RmoaW', 'res.', 'ervaç', 'QycUj', 'jiAMc', "po ex", "ie ou", 'rrar', 'lpvcM', "o idi", 'nnbRb', "ine t", 'hasOw', 'gdxny', 'TtrVs', 'SuKJf', "ros n", "unto ", 'npfhl', 'EFvra', 'segui', 'HEEju', '𝐞𝐧𝐡𝐮𝐦', 'racks', 'pcoto', " 𝐌𝐂 𝐏", 'DrNjh', "r` - ", 'CLThI', 'uário', " OIII", 'sGr6/', 'PRpRK', 'LNmQr', 'potên', 'hdLpt', "STA D", " Camp", 'YbLtJ', "s esp", 'ESMkG', 'iona:', "ta su", "]\n\n💡 ", 'iciar', 'gFmDn', "*\nDef", 'TaxPW', "\n\n𝐕𝐨𝐜", 'jogar', 'NoGVN', 'TgBTU', 'Jwczd', 'MKCLd', 'ZSuJE', "RTE G", 'admgm', "l mut", 'WdIaz', 'UizMY', 'qLQCU', "va o ", 'aOZXo', 'YTEiO', 'OwjPn', "𝐨 𝐜𝐨𝐦", " *Pla", 'HbwHi', 'qXFIK', "eio\n┃", 'ppsvC', 'EuAwu', 'ofile', 'BsiXE', 'MRyNI', 'Kuuff', 'pwQCg', 'gênci', "ens: ", 'ZqCSJ', "a De ", "o Fig", "rdem ", 'luída', 'SBbYR', 'VHMAZ', 'studo', "eado\n", 'XLnbK', 'ZRNpg', 'akQZf', "a tod", 'sgtvJ', "O FAL", 'ext&r', 'MfmTs', "de!\n╰", " 📽 𝑽𝑰", 'AllAd', 'Banim', "s +18", 'ID_GR', " (men", 'dispo', 'pkVNm', "er al", 'vTMPQ', 'gMNcB', 'BWpkP', 'waJLd', 'LQTOy', "e voc", "A com", 'rLTDO', 'OME', 'ttHrE', 'herok', 'ukEIQ', 'UDuaX', " do I", 'EFIfR', 'dVnhF', 'prfUl', 'UjRCP', "cas W", 'RANTE', "s dev", "*\n┃ \n", "io, f", "a o g", 'NCNXP', 'AiNbn', 'maMen', 'whZpz', 'relig', " • Al", '_br', "er pa", " no f", "s fav", 'vtAXE', 'ItqRN', 'subme', "ove e", 'jdjme', 'JeDUU', "a\ndes", "ao ge", "rei e", 'defin', 'dmwdR', 'ptolr', 'sxnOB', 'FStpl', 'cluso', " ANTI", "⚠️ Res", 'WiFVo', 'RHQJy', " 🔄 Si", 'PKFpF', 'pnUiB', "XAR A", 'EXIST', 'Desli', 'puann', 'fjKEW', 'accep', 'AadGj', 'oDvph', 'DXsSU', 'tario', 'zwMZC', 'iaRib', 'rmar:', 'JmhtM', 'OGBsa', 'dono', 'RTwnK', 'obDdF', 'objet', 'gjBpf', 'QmORP', "% ❱na", 'otYkA', "🎭 Seu", 'nrNlH', 'usage', 'ietar', 'eaQKF', "vo!\nA", 'VxdBR', 'TYkyP', 'qujky', 'AlgBp', 'Ainda', "pel\n\n", "dia e", "reto ", 'brrWS', 'ppJsn', 'ygqSn', 'KFgEf', 'KXbdk', 'tir.', '【✔】ʟᴏ', '|5|3|', 'tJMtV', "só de", "m no ", "t dir", 'jSSXT', 'mfWXp', 'rgos', "so di", 'ile/e', " pren", 'Me1Ad', 'nUxUF', 'aixad', 'spoti', 'evzUA', 'GxFiE', '/Alin', 'dInfo', 'ogado', 'LueRP', 'PnYZr', 'Afjvd', "do. T", 'são', 'hwpuC', " ao o", "ÃO SA", "sso d", "\n\nBot", 'root@', "io de", 'UpKNN', 'iuGpX', "┃\n┃ @", " HORÁ", 'dBJhD', 'vqbKk', 'rosca', "• Ape", 'donon', 'PDuex', 'tRyVg', 'VkRwG', 'válid', 'getJa', 'WC8KX', 'CIFEe', 'TIeiS', 'bot.', 'SWvNM', 'giEZq', "s\n┃ •", 'wrddS', 'AlNYv', "OS:* ", 'Jilid', "🛡️ Voc", 'zCGmW', "m, fa", 'JcVRC', 'njdeC', 'rou', 'GbRkR', 'rarid', 'HEtKJ', 'GNypS', "\n⚠️ Vi", "rou c", '┉✼┉═༺', '261cc', 'OnPKK', "mos v", 'NTUyv', 'twjDX', 'milQy', 'zZYVZ', 'tpNWR', 'ITlUL', 'rel-c', 'k_aud', '✼┉╝', "ir. C", 'e-now', 'kpOLX', 'cDcFQ', 'zJrWI', 'WJLqN', "┃ O m", 'Xczli', 'vFnaq', 'mplos', 'CJYdP', 'ic&la', 'MBYNB', " horá", "rais ", 'mocDY', 'rel', 'golpi', 'fMMHb', '𝐩𝐨𝐬𝐬í', 'HvHrE', 'YzzsM', 'Roubo', 'tsUwy', 'equip', "so mo", 'eCLnF', 'riand', 'zatCE', 'dpKqz', 'lado:', "💰 e *", 'UTwRS', 'sGAVx', "* ☠️", 'rmina', 'ADQFt', '[cami', "o Emo", 'off', 'qYzpm', "y\n├─ ", ":\n└ 💝", "r lin", 'GceYv', 'JcTGx', 'FamIL', 'bfDAa', " saco", 'xzqsm', 'Membr', 'balxp', 'GLflx', 'KITAG', 'SU1', '🏳‍🌈', "📱 Wal", "car á", 'model', 'Versã', "18 9", 'yXlAt', 'lastD', 'VkfIb', "🔥↯𝐉𝐀 ", "O 2 D", 'qbULO', 'LIlje', 'Total', 'espon', "1 e 3", 'cCYsV', 'NWEHj', "12h, ", " 🎤 Re", 'Corin', 'HKCnD', 'IVOpJ', 'VgFBS', 'ytJex', 'eImox', 'nCgZo', "pam n", 'cDauP', '.0.ba', 'sUoXr', 'xWoEX', "a a f", 'URcUp', "rio` ", "am um", 'ttdEk', "ados\n", "lá te", "o sup", 'IcxsD', 'VOysq', " - 4K", " Bob ", "e e e", 'HpSvt', "u! Po", 'ZaQtH', 'irrev', 'MGGYH', 'figan', 'SclQE', 'lRHeL', 'stanz', 'ZAgGA', 'qCHzT', '7cb54', "es a ", 'NKING', 'YkFfA', "ra (m", 'cNWNx', 'ejDFR', 'AFuBg', 'hip', 'lWjJE', 'AEhdQ', "jis\n•", "* 0\n✨", 'FifIH', 'ywsuR', 'NOmBB', 'ha!*', "á a t", 'VKvqn', "sa me", 'hfoKd', " 🥺/ap", 'GURIN', "r e o", 'nMzUp', 'UgdzY', 'KaYTr', "POS A", "PT Oi", 'aJcya', 'izgYp', 'lVide', "\n⏰ • ", 'FmLKh', '9b008', 'upos.', 'tbAXK', 'Giova', 'SNqVm', 'eZjMW', 'qzooa', 'cvXZj', 'smNsd', " usua", "enha ", 'tion', 'figde', 'xpnLS', 'kGold', 'GXgmn', 'FhNUQ', 'gem]', "erá b", " bani", 'NPJsg', 'iLUJV', 'CkbYR', 'gif-b', 'ggiQR', "ou '.", 'xOdXQ', 'eJid', "ema *", 'signo', "er to", 'LBekR', 'mLBEM', 'tamp', "𝐀 𝐍𝐄𝐆", 'Ameri', "per p", 'HyoOO', "vos\n🔸", "o sig", 'vWSAM', "ROM l", "lise ", 'eEpDD', '_12/0', 'akkgp', 'VLLgX', 'QkMMS', "sar i", "os. R", 'nQByn', "r, cl", 'BkOad', 'bhzFf', 'nxgEV', 'dNeKB', 'tradu', 'yes', 'DEYYI', 'uVUWk', "rl = ", "dos\n\n", 'ZKrIn', "vos a", 'CWvnM', 'gOyMU', 'xesqb', 'gxqed', "ra We", 'AeSdW', 'kfUQk', "🥃 Voc", 'XTPkb', 'enerv', "\n⏱️ *A", 'XwqjU', 'graca', "ta do", "vo ne", "as tr", 'ZdYaH', 'xpzXi', 'edMes', "tem u", " tá f", '0.53', 'RfOzw', "che d", "NEL D", 'ImxMT', 'ncago', 'yjMyo', 'MzKYb', 'yKZlo', "ld en", "🔄 Lim", 'HxWui', 'tHwjl', 'fala', 'feren', "chat ", 'YoBZQ', 'HSzBX', " serv", 'ttp7', 'EMOVE', 'nagat', "a já ", 'imple', 'pmglC', 'lação', 'lsaGu', "f, ms", 'SELEC', 'OIZKs', 'KWLps', 'AGCYf', " Máxi", 'LAzCr', '0044', "\"\nPar", 'BavqV', 'ESUMO', 'VhwTP', 'jPjeq', 'y_lim', 'dBMNy', 'totex', '.y=-2', 'HRpec', 'ssino', 'zDHck', 'ING', "ro ", "🔊 Áud", 'CxWKt', 'OpenA', 'qOKHU', "r res", 'sSXBf', 'lizac', 'jmpkQ', 'Mistu', 'SJcVT', "cas g", 'speit', 'xtuai', 'algum', 'do...', 'ync', 'UZUlC', 'LoygE', 'LUM', 'qPXCd', 'BaqLh', 'InzoM', 'jpuLe', 'cker', 'DWsoP', "sos l", 'FbxOQ', 'Wchlv', 'fmnmc', 'nhar.', "ão en", 'MbyVj', 'UYeJF', 'pxPpA', "*\nBlo", 'masco', 'LCWAA', "📻 _la", 'JokYn', "% [🦬]", 'FwFuZ', 'ADO!', 'GGTyz', "_\n🥉 ", 'VRoHI', 'xaOnc', "𝐈𝐀 𝐑𝐈", 'tvicZ', '//twi', 'rwYYr', "   📅 ", 'eso|a', " golp", " manu", 'HngWD', '𝐔𝐏𝐎𝐒:', 'wZboL', 'sGMhO', 'ICGGB', "eb e ", "\n╭═══", 'bhWOO', "ou ro", " anex", 'GzscK', "fig 3", 'UWrcQ', 'pRHwg', 'VwVcP', 'NAzNc', 'wCvhj', "n Tig", '4aa88', 'VceHI', "nent ", 'SiTtd', 'hDhXE', 'SYTCO', 'lução', 'RMbsk', 'JLlhg', "5 Gol", 'stran', 'DuyWq', "DA OP", 'DbtzI', 'XgfXc', "is às", "po (i", 'zkhGv', 'AUTOM', "ara a", 'olKgD', 'ihXRw', 'DlUhh', 'eos', "ão ex", 'PNPqt', "as sã", 'hBPBu', 'roll', '2&tex', 'FmvJK', 'TtNqT', 'tagem', " anún", 'mMUmQ', 'hTeQL', 'vHYUj', 'pcOIC', "d IS ", 'iXSWG', 'myddU', " 10 g", 'o_em', 'USE', 'uter', 'uIMXT', 'GDizx', 'HwRJA', "tmp4 ", 'yKcLx', 'gold,', " hoje", 'GJtwD', 'WtGnx', 'succe', 'mbvev', 'wFtTX', 'IiuDK', "r pro", 'lyStr', "fis d", 'vesgo', 'cas', 'toStr', "i peg", '[pedr', 'krXHq', "\n┃(Qu", " 𝐃𝐄 𝐕", 'GqOMm', " on\ns", "!*\n\n👮‍♂️", 'yXnrK', 'iOUds', 'LunAB', 'WudLQ', 'ROMAN', "ih2 e", "uquê ", "ndo*\n", "𝐅𝐈𝐎 𝐄", 'TZzVj', 'Globa', 'kRHxt', "u err", " Gere", 'aSkhN', 'Auqyj', 'Rcbsc', "O* ", 'dZvFZ', 'itali', 'b.app', 'KlYTl', 'BvNNy', 'DXnTs', "• Adm", 'nicio', 'HWwQt', 'Entre', "xy a9", " DE D", 'ODDRb', 'HBuiz', 'IpeGY', 'FRzZD', "xp, l", "o, cr", 'Hvcvi', 'jgXFe', "o mai", 'Ovhht', 'qAfjZ', '[valo', '://it', 'WSXhG', "0 = D", "te fo", "to ci", 'zidYe', 'dDjpX', 'FuUYk', 'quLvV', "oso? ", 'xLonP', 'diasR', 'ToUse', 'NTEÚD', 'FsXsw', 'WWsXa', 'drIbC', "\n💖 Co", "o adi", 'JqiuM', 'amare', 'JcEzA', 'APmrF', "de ch", "um gr", 'ScOps', "á mai", 'wRAdj', 'isibi', 'ctgEd', "|\", e", 'SVXFP', 'NDDyv', "te: ", "i Núm", " scri", 't...', " DE M", "e ant", " leva", "DO!\n🔧", 'titia', 'inera', "a ao ", "m rou", 'eSync', 'QkkpH', 'bRbqi', " <= ?", 'tAuLq', 'WpEHY', "no ja", 'iquei', "ões p", 'llMtQ', 'JcCRP', 'Agend', 'QLQPs', 'Goggv', 'lOuUF', 'dos', 'h/2)*', 'Dopil', 'rcaçã', '_vide', 'DAbcB', 'IZrKc', 'ovgcf', 'skLvr', 'ps://', 'ebran', " se e", "É não", " p&b", "inir ", 'lXrir', 'LHDwV', 'myxFd', "┃ 🖼️ A", 'FZmkm', "data ", ", /24", "*\n*PO", 'sCPaR', 'OMUMR', 'ranto', " Sábi", 'o_sta', "O PAR", " Voto", 'dNonU', 'JbISp', 'MjDlN', 'proib', 'shpkc', "mos, ", 'VOOlJ', "⚠️ Com", 'YPblL', "o uma", 'OOPaw', "✈️\n┃ •", 'eFTPa', 'uguéi', 'stKKy', 'JWgAW', "❌ Ins", 'AWYUJ', "ite s", 'Filtr', " já s", 'e.com', "ove g", "nha 2", "ot no", "ro ma", 'raWPb', 'xkZEV', "U ELE", "has p", "fiar ", 'wfVrl', ')+)+)', 'aCzNS', 'Escol', "│ • N", 'VJtyk', 'enu', 'íblic', "os* -", 'pZUXI', 'ynwID', 'pFymx', "4* - ", 'eDrsc', 'ZwntG', 'Rocha', 'EwFyu', 'ATUAL', 'VmXWW', " + 2 ", '6Tena', "m fei", 'AGWgC', "tar n", 'aiKEl', 'exten', 'IGURA', " NA Á", "s\n┃🎮 ", 'puxar', 'Pydes', 'aEuml', 'gnJTK', 'teio:', '🍧【✔】ɢ', 'so..', 'jknWD', 'eum', 'ling.', "HA*\n\n", 'ível,', 'autob', 'tVJqT', 'tings', 'trang', 'CsMSe', 'UJLEe', '@pess', 'ática', "cê de", 'uel2', 'false', 'mbro:', 'UArER', '&appi', 'tekil', "ermo ", 'diafi', "👤 @", " \"gat", 'reana', 'vgKKI', 'Qcerx', "ona, ", 'vfQkS', 'Jogos', 'vhxJx', 'QrqxV', 'ogos', 'zcXcM', 'aça-n', "el!\n┃", 'ea873', 'kzlBv', 'age_c', 'vaxKz', 'rJzUq', 'etc.)', 'XFSjs', 'LQbOp', 'o/jkd', 'ZmpZx', "s e h", "s: -l", " Modo", 'AVgDE', "KS DE", 'a_jog', "┃ 3 -", '77d0a', 'zZUpH', '!sgol', " NO G", 'Seyrs', "*Que ", "ns de", '𝐓𝐀𝐍𝐃𝐎', 'mKzMK', 'tYfZu', 'Mwmkz', 'MEkVb', "aca @", "s est", "omo F", "va re", 'Diári', 'yUAmX', "its S", 'XrzOH', "er a ", " o si", 'JjfSQ', 'KOspA', 'dZOuX', ") rem", 'JJywY', 'tKBIR', 'FqBzy', 'inhas', 'OARMJ', " E BO", "] [aç", 'NS!', 'EEKoX', "ium [", 'Onlin', 'pRYWN', 'MflkM', 'tFbUb', 'NSLQr', "gura ", 'JheSu', 'ausen', 'OpsTK', 'elled', 'arem,', 'wWqLB', 'yxrdy', '𝐯𝐚𝐥𝐢𝐚', "✅ LIM", "berá ", 'ZwOOI', "e Gru", 'mqDqu', "z pod", " recr", 'puhdy', 'LIUyu', "\n- La", "ID do", "O tra", 'XchDX', 'oHype', 'taman', 'WAPwn', '//www', "ê des", 'bvtai', 'ostra', 'MFXXd', "ca (w", 'vzODN', "*✅ EU", 'EEGRm', " 2, e", "):*\n\n", 'bQFrQ', "0.\nEx", "]. Ex", 'tiaOQ', "[ Ava", 'qSRrW', 'yDinp', 'VFJmY', 'TDloz', 'odono', "do di", 'NRzJr', "✅ Sta", "𝐀, 𝐒𝐄", 'openg', 'ZiVzG', '_dele', 'SJtxn', "ido p", 'wdzlZ', 'CqWGQ', "u obr", "*\n⚠️ *", 'wVdnz', "s bom", 'AWdQn', " *𝙻𝙸𝚂", 'kRJfg', 'DRHjr', 'eUmxG', "\n┃ 🥷 ", 'dAWvV', 'upZmr', "tar f", '*LINK', "ros, ", 'sgota', "ca:* ", 'PctIK', "Top M", "P Rec", "r ⛏️\n┃", "│ 📱 D", 'sYhVD', 'GfUiZ', 'eVWvn', 'rrlhL', "r, e ", "ar mu", "or e ", 'qviQB', 'nçada', 'UBFcP', './dad', 'jsfrI', "DE MI", "ar ba", 'OpKhT', 'HBRtA', "┃ 28 ", 'getDa', '𝐂𝐇𝐀𝐍🔥', 'UbqYo', 'mIXrN', "m é e", 's/des', 'rqtTS', 'YeQlb', '𝐑𝐀́𝐑𝐈𝐎', 'HdEPT', "ado  ", "ERAO ", 'uncia', 'y_Do-', 'YkdVD', 'Croat', 'ABLpV', "⊱「 CO", 'mGdLi', 'ojago', 'nlEiz', 'mia', '.wiki', 'tvVyA', 'ONCLU', "Mac O", 'dnKOm', 'hscYV', 'qrwSM', 'OibFO', 'QjAPK', 'ecifi', 'SpntI', 'skhmZ', 'QniFf', "ro Fa", "a um ", 'RAÇÃO', '_olho', 'bado', 'nUrUe', 'QeObl', 'aamVr', 'TNByZ', "ɪʀʟ🦄\n", " ? WH", " POSI", "upo 😗", "👮\n┃\n┃", "ia:* ", "rá ma", 'café', "ro) V", 'upo._', " de: ", 'ZPYSA', 'OBREa', 'el-ca', "eios\n", 'jqKiq', 'BjPiM', "\n\nDig", 'iIhaA', 'RtBCy', " 30¥5", "i1, s", 'UxKce', "G MSG", 'joSqd', 'WKYyW', "😊 *BO", 'dIhTi', " JOGO", 'IWMJV', 'croOY', '𝐒𝐓𝐈𝐍𝐄', 'ade]', 'NEZUK', 'then', '-list', 'Vexbh', 'sivel', "m nom", 'hKEUx', 'vhxRa', " Arma", "vo!\nD", 'ingué', 'etra', 'nmhoQ', "o, a ", 'rno', 'ACTER', "stá n", 'YgAOw', 'CHAÇA', "0 && ", '.0.op', 'vXdSf', "lor: ", "ecer ", "ivas ", 'binat', 'SlntI', 'ry/ga', 'OibdK', 'cooki', 'enor.', 'TUTfW', 'LTPmz', "ULT 0", 'eEgID', 'hrp', 'ROHvo', 'OvYCQ', 'fAIbS', 'RarIw', 'JUWlT', 'emoji', 'EbuZk', '𝐀𝐏𝐄𝐑𝐒', 'iator', 'tóric', 'loHTK', 'joAfI', 'rOAmY', 'eFwLB', "ava c", 'YJmSM', 'clHHG', "stá d", "vos e", 'ySxOw', 'DtQMn', 'nXTAy', 'xdldX', "om di", "𝐜𝐢𝐚𝐫 ", "s bas", "\n║ ", 'twbBp', 'OucXE', 'saBkv', 'nando', 'KjCYi', "r a f", 'leThe', "oide ", "ê ach", 'cQBOF', 'Const', 'Clone', 'demus', 'nNDzE', 'QRDSD', "ois\n┃", 'bShPF', "\" -y ", 'egrad', '[modo', " Inic", 'ZAÇÃO', "IKE '", 'SjSjn', 'jruWI', 'wqfUO', 'kEgyz', 'ZWYwr', 'MxKAG', "📈 Mos", " 🅱🅴🅼 ", " veri", " Ativ", 'PwALY', "de ", "s des", 'south', 'BHeNG', "ter a", "nk, l", 'wzgww', 'wmNoB', 'ajthi', 'UbbFU', "𝐎 」⊰━", "3% + ", " viad", " vez.", "o fig", 'hILLY', 'ZRksZ', 'tidos', "❌ O u", 'XGyec', 'RVUeD', 'sskiZ', " sile", 'tl-pt', "a cot", "de? E", 'hmEQY', 'aUorJ', 'THrtf', 'fPsqr', 'omanM', " e ag", " *𝐄𝐑𝐑", 'ckera', "e dos", 'n.spo', "tar u", 'OwLQU', "ais i", 'xCyIU', "💫 Seu", 'AZCMS', "*\n\n⚠️ ", 'STED!', 'aitia', "o 🤧", "┉╗\n ║", 'ulti-', "✅ *Ca", 'everá', ", o Y", "\n\n📝 *", "mo li", " cada", 'yrVoS', "e esp", 'wlvpW', 'NickD', 'eyzjW', 'XTWrK', ':tran', "r a i", " 100", 'AjjAe', "o e a", 'DD/MM', "──⊷\n│", 'xAztN', "tapa ", 'e1766', 'jcUuo', 'vKpNe', 'aulo', 'DIbPI', "✅ Rem", 'pZdBG', 'praze', 'AFaGk', "o \"+\"", 'XEIRA', 'wgnLs', 'emioR', 'henta', 'HUaOy', 'WCKKX', "nar à", "ci, n", 'ubBOc', 'sXjhe', 'TIAos', "omo r", " 🧠 *M", 'wuycB', 'mBMch', 'entra', '*Exce', "📅 Tem", 'fquSC', "dos j", "M sql", "CE IN", 'TENTE', 'ywKRv', 'jrDBY', 'Qnpyl', 'JpnpW', 'titqY', 'CqPPZ', "ém pa", 'mDGws', 'evfLb', 'ltro:', 'cluin', 'esde:', 'bQliZ', "com ", 'SOtSa', "s prá", 'ed0b9', 'Whxev', 'moNwD', "ost [", '95e9c', 'EWaxk', 'UDCWx', "IDO D", 'lDewI', 'eHnMO', "ueia ", 'UoRLH', 'EJHar', 'RTQkO', 'CICJR', 'eFnBt', 'EYTfo', "STA L", 'ovUzh', 'FgxAx', 'dejog', "💾🌟\n┃ ", 'esyiu', "\n┃ 🎲 ", 'zUMnB', "u nom", 'vCWog', 'iJbno', 'efixs', 'EeYxF', "E gru", "ento ", 'irayu', "ino d", 'lwvdR', 'gem', 'nalid', "to co", 'OYyXQ', "a 🤷‍♂️\n┃", "🔥 𝐎 𝐍", 'PgWnI', 'ZPKaM', "- ( h", "te ho", 'Dthbw', 'qNMhO', "el:* ", 'IzPLK', 'ziyCp', " já j", 'KfVKk', "que m", 'ICKNA', 'pJdqq', 'BDBON', 'PZXhg', 'Store', "via f", "is ", "\n🏠 *E", "hrp [", 'sufic', "er id", 'DRlPR', 'hkFNP', "o _", "s, ch", 'efix', "URA ━", 'LDOsR', 'LijWq', 'IbQdR', "o tok", "✅ ATI", 'cial!', 'RiIcg', 'refs/', 'MKdoN', 'yeeuD', 'gMocv', "*「 TR", 'deo2', "ona u", 'czJGe', 'KKPfR', 'ferGo', 'leona', 'WVtje', '[()+-', 'veis.', "ubra ", 'bPNIf', 'ptura', ", ent", "ᴇ sᴇ ", 'aXypz', 'be117', "rcar ", 'JobuY', 'upWxT', "Role ", 'HxLAw', 'WlbVD', 'GMapb', " DE L", "e spa", "🗑️ *Jo", 'mCAkZ', 'aBZVJ', 'uZCuf', 'BmFzN', "\n┃ ➥ ", " 🤢🥵🥴", 'Letra', "te jo", 'znUPb', 'oHjuT', 'ZZquZ', 'UZDxy', 'dNsCv', "*2 - ", " *Bás", "o val", "es: C", "𝑫𝑬𝑶 2", 'CORYb', 'xtiFZ', 'MtYGG', "\n_Ger", 'OHpwY', "ey, o", 'TIVAD', 'tuTKS', '.zip', "ste s", 'IaSNv', 'loSUi', "id TE", 'TuLUb', "🔇 *Li", " (mos", 'PzvsG', "ou ap", 'MSdTu', "ém po", 'vuqcM', 'ZXXKR', 'boij', 'hLeGQ', "o dow", 'n&act', 'ovido', "a aum", "❌ Err", 'fmztc', 'bouwY', 'high', " \"tra", 'ysaou', " no Y", "│└─ 🎧", "ra di", "o: ht", 'zvsGf', 'ZK1w/', "ara g", 'ositi', "de Co", 'aSLrh', " Arme", 'WDjTe', 'kwai_', " víti", 'RhjVy', 'yMess', 'zOwTY', "exo G", 'moyRL', 'ndo2', 'Pzylq', 'ul!', "ó se ", " auto", 'oncTq', 'onand', 'ENCID', "dra v", 'elCWJ', 'ivzth', 'packg', "T id,", "ual c", " Requ", '𝐚𝐝𝐨𝐫𝐞', " as a", "rões ", 'awa', 'Acess', "o acu", "e à p", 'AapDG', "ediu ", "a jun", 'conve', 'r=utm', 'LsaFn', 'fboIh', "\n✅ Si", 'UAnHv', "nião ", 'oMaIV', 'cDktH', 'fqDUB', 'HxhjK', 'Group', 'vNLoH', 'feQSl', "ão. D", 'cyAyb', " ou \"", "❌ O v", 'wwhdp', "┃ ⚠️ *", 'NxDIb', 'AWOJy', "t e r", " - Fi", 'sVSPR', 'JTdCf', "*🚫 US", "do um", 'pgQaP', '𝐎🔥', 'on.y=', 'JGogH', 'AwZeC', 'zrlju', 'vGmAG', "to qu", 'QwLoD', "*\n📝 G", 'cTFgc', 'YDEqR', "de vi", 'rar', 'bitco', " 🍷", 'KMjlw', 'dAJzO', 'nZzTI', 'tjACW', 'ay.go', " a ap", 'dual', 'zWaxG', "📊 ", "upo, ", "*\n\n*C", "do ho", 'Vnogc', "tos\n\n", 'lIdnn', 'taçõe', 'XbDxs', 'elado', 'CENrs', "one r", 'ZOYoW', 'XDUlO', "ou in", "k, sp", 'UWFBG', 'giste', 'stQwE', "𝐮𝐦 𝐮𝐬", 'tal:*', 'tqUCM', 'x-alc', "ie.. ", 'MprMG', 'parce', 'VtUNI', "e mor", 'ite:*', 'LACIO', " (mod", 'qZmtq', 'fupgi', 'mSimi', 'atóri', "L NES", 'AjeSN', 'horro', '𝙰𝙳𝙾𝚂*', 'pkfKy', '-vind', "❌ Tem", "ver d", 'fvoMk', 'GWjui', "ido\n╰", 'pende', 'erson', "*❌ RE", 'File', 'kXeiw', 'duhNu', "😈 @", "p + ?", 'ULxwf', 'XOoVb', 'l-mui', "𝐈Ç𝐀̃𝐎\n", 'VYuOG', 'LYuxD', "┃\n┃ E", 'qZZuw', "\"acei", 'plaqX', 'lsfFC', 'iremo', 'bAYBV', "* fig", "TA DE", ": doa", 'gdaDp', '+😭', 'hLLKo', '/jogo', "l e T", 'LIWCz', 'ilhad', 'qBorM', "de at", 'htRCF', '2a5ea', 'nal', " e ad", 'tqAqV', 'Putz,', 'RFIL*', "i: th", "SEM A", "7 dia", 'ownia', 'qtphP', 'nte!', 'tus_s', "ra Wh", 'vSyKn', 'namen', 'Nome*', 'eprod', 'kyjLf', 'istli', 'atant', "ne Em", 'vXIGd', 'antir', 'MAeyS', 'gnóst', 'cmd', 'QldjY', '|4|2|', 'hkjlz', 'BtOlt', " user", "or vá", 'FATuH', "lá, ", 'mvfRP', 'XSbTl', 'ddpHT', 'JTFcL', 'aNBfN', "ole, ", "ios P", "a mão", 'ltere', 'gPxmw', "es te", 'jsUJG', 'ikfsV', "O*\n\n", 'BqivY', 'eu!', 'xrDdF', "👤 *Jo", "não p", "kCmd ", 'trTkH', 'searc', 'ro2', "p NOT", 'rGfbf', 'ErEhy', 'RHILj', "s PT ", 'GALXZ', "xo pl", 'ttp17', 'jiGol', 'EJkfd', "):*\n-", 'kPXol', 'qCusE', 'Njkla', "al co", 'PMqbc', 'WIqYa', 'vOUgV', 'n.gra', 'velgx', "\n\n💭 𝐂", 'GnuFg', 'NaYMd', '4ead3', 'Duraç', 'lvedo', 'dpHeq', 'tore', " 5256", 'lvoTA', " ouvi", 'busca', 'ZyvjY', "o) ", 'GXyug', 'yQGoS', 'mkpWA', 'e-api', 'mUOYd', 'imite', 'HmRsU', "copo ", " 」⊰━━", 'Ocvbi', 'hTdjH', 'jrSBs', " 🆂🅴🆄🆂", 'asRou', 'jCpIz', 'ifIaB', "ão)\n🔸", 'ZphAh', "UEL -", 'JPTIs', " a mí", "lor e", 'BBLVD', '/trac', " O nú", 'ahega', 'rsbxp', 'TeQSo', 'jAxZY', 'KiWrT', 'OPVDB', 'GTatM', "iar o", "ade p", 'vitór', 'auNBe', 'pcion', '𝐅𝐄𝐈𝐓𝐎', "tas d", 'WVhPk', "┃ gar", 'MBJFD', " fast", 'node-', 'meCJT', 'INIST', "na au", 'StJIl', 'ext.0', "ver, ", "s fei", 'WOSuT', 'WwJPG', " Potê", "rro a", 'nwrfC', 'Falha', "xe em", "nco\nE", 'spond', 'er-hr', 'KDmad', 'plgoE', 'uLSQD', 'lRBEk', 'c899e', 'asila', 'mutou', 'obito', 'YqXJm', "o, al", '/[qua', 'SVxgM', 'VdbyK', 'info', '(user', 'HocVL', 'ojaEe', "z par", 'uEwBo', 'ia...', 'iRqGE', 'ario|', "ot de", 'BToyb', 'e_glo', 'NwGNj', 'KVbrs', 'Npwbf', 'Desaf', 'HcjQE', 'qhazr', 'aUSiO', 'KhjFK', "off, ", " em 1", 'aBriA', 'PAEhK', "itec ", 'racte', "\n┃ 🇱 ", "1 pon", 'SrFdM', '*Grup', 'undQF', 'vBLoF', "𝐎 🔥", 'eligê', "os.\nU", 'ecurs', "E\n⚠️ •", 'AtxiO', 'SOS', 'XPAND', "e nes", 'sEXYE', 'eko', 'ZSxQV', 'XLpeo', 'initi', "po:* ", 'twRiA', 'FCUnU', 'dHIfx', 'alhes', 'teSuJ', 'goiyr', "de po", " corr", " real", " iníc", "a úni", "haca ", 'lizad', 'ntSeq', 'tMCjr', 'SkMbw', "po 👥)", 'dio2', "e apo", "soas\n", 'ZyWSP', 'cTXCK', 'WKaBr', 'Vnlrw', 'cxZnU', 'lmJuC', 'w.ter', "de 25", 'dAOlU', "┃ 🔄 A", 'QFOLy', "m o s", 'oEoFT', 'o/HrP', 'mKpBV', 'SSPuJ', 'BXCVV', 'guouS', '`!ult', 'oYrZi', 'AndIn', 'hHxZK', "de tu", "❌ *Us", "m nov", 'nDzTd', 'feFht', 'lJhuh', "che g", 'xDPKu', "elo p", 'ROSkp', "rou p", 'mcFBL', 'NncEP', 'LjWtv', 'xXogX', '.what', 'oozCy', 'HwTzA', 'zadas', "s mat", "aixa ", 'aXwmK', 'cAiGH', 'exata', 'colhe', "o se ", "no br", 'sian:', "!\n\n🎮 ", "`\n💡 *", 'RHwHT', 'KTfTi', 'eact_', 'YHENd', "*S* p", "S*\n\n", 'ZrCPh', 'afeta', "s a z", 'grils', "po se", 'gqTue', "gra d", 'VcaFD', 'toLow', "as pe", 'fZFMh', "do fa", 'UIvZO', 'YfYYP', 'hado', 'fetpN', 'MEIMm', "r núm", 'WKuRZ', "🎲 Seu", 'zSbdp', "A WHI", 'NWHhG', "\"\n\n🎯 ", 'KTpbH', 'VFUYa', 'cCbHa', "ao at", 'ícias', 'bjwxD', 'CsXKI', "do] \"", 'ntosP', "m e s", "ta : ", 'dBNVt', "\n\t\t\t\t", "ao de", "ra, i", 'NnDEt', "es au", '/carn', "o pod", 'XeMtK', 'FILTR', 'xfsIZ', 'zir', 'twitt', 'JdlDG', "exto ", 'JLnwj', 'knRUo', 'delst', "ber a", 'zWZvn', 'Tempo', 'VSHUJ', 'VXmuC', 'Nywlk', "eo mu", 'wUTab', 'lNrKz', 'msqaH', 'gCSQC', 'eOmJK', "📝 Reg", 'yqtpH', 'aPewO', '0bc8d', 'HUimW', "o\n└ L", 'BZAbr', 'CDpxe', 'NlZcW', "a víd", 'rWOmP', ", ina", 'api-c', 'ATebV', 'ewyEk', 'VLaAj', 'BwdPG', 'HZstf', 'lEFrM', 'zxscC', 'CARAC', "ra va", 'iKzoQ', " virt", 'gRlqO', 'ando,', 'CfUpK', "ados ", '8:00|', 'LWgxB', " (DD/", 'JbkYT', "* ───", "ios f", 'ganha', 'ejos!', " -pix", 'tCihR', "ÃO DE", 'gcxZf', "Seu w", 'HEacK', 'IYA', 'HTblg', 'xXfIG', "rra o", 'uOljl', 'WZubR', 'UuRXH', 'hCijd', 'inesp', 'WMNSf', '7efa2', 'aMaNj', "✅\n\n", " + Bl", 'goldG', 'VISTA', 'lsGYG', "% [⛩️]", 'VruvU', "ole: ", 'OUNT(', 'apala', "fig [", "vos 5", 'gejLP', "ff`\n ", 'AFpzA', "* ⚠️\nE", 'isCTp', "ntes\n", '2|3|1', "el. 🤖", " enga", " - ❌ ", "uns d", 'xAXdN', '1e39f', 'BSani', 'V2Ext', 'OBGSh', 'DLnku', "de vá", 'packt', 'KxiIX', 'catio', "xto d", 'ensur', 'IGrkw', "ovo t", 'TAZHd', 'ameri', 'AWUDa', '/cont', "o. Up", '/info', "•\n📸 •", 'RBrgQ', 'eQCsc', '𝐈𝐙𝐀𝐐𝐔', 'bzcCU', ", st,", 'VRkGt', "ed 1 ", 'bHIaz', 'ophTx', "m age", "] off", "O bot", "r:*\n`", 'mtgfj', 'AfVUS', 'SAZoR', 'memor', "s adv", "nas u", 'GETaL', "ver v", 'ohCjl', 'Cjvdz', 'CNruR', "eta d", 'sdDYE', 'stas*', 'uHhmN', 'RUPO_', "on e ", 'pBosu', "sta D", "de do", "za Re", 'io.', '𝐒𝐀🔥', 'essoa', "\n- *M", "es gr", '*Dest', 'xTTDt', 'data:', 'carde', 'chico', '|Cach', 'WuASj', "ca ne", 'BzrDl', 'i.ope', "❰ @", "\n\n*1 ", 'etati', "é tu ", "\n🎲 *D", "y htt", '.grup', "as), ", 'pzfWt', 'Qddyw', "o\n💡 *", "ndo t", "as em", 'gSYEN', 'Mudan', 'chofQ', "AIS D", "ra 25", 'qFbSe', 'TapKl', '_pref', "a glo", 'ZqtaZ', "e exi", 'lOJlh', '*/*', 'msUqw', 'rVUDn', 'vzoqn', '91886', "RO DU", 'CYJEL', "UPO\n╚", "o, or", 'Lyxvh', 'Anota', 'namor', 'ologo', 'dnmAv', 'SWDAn', 'jeans', 'ptJEU', 'BUSuY', 'FWTMi', 'appId', 'eById', " DE S", "s (mi", 'oUgTp', "u per", 'slap', 'IzYPP', '/data', 'rgwIA', 'CyDws', " (Con", 'kes', 'tvaVq', 'NhZhW', 'quart', 'abyma', 'qUmTb', 'tQRjh', "om os", "da pa", 'mnrbB', 'alvan', " 〉\n\n", "%\n├──", 'IWkYX', "imas ", 'oluam', 'uWcIr', 'axizw', 'Vzcrx', "base ", '0/10)', 'tDKan', "a na ", 'BjUfU', "up: ", "\n\n\n*D", 'ZRTji', 'HwuDu', 'rcent', "\n╔┉┉┉", 'te_no', 'vAkRW', "O: ", 'einic', 'FzsKx', 'dmgm', 'RROU!', "👑 (só", 'BLDFF', 'lFTOt', 'aSiEN', " temp", 'ilme', 'jeRNo', '(3).j', 'LStZw', 'znFes', '[VELH', 'oNMhC', 'hWOxr', 'UudZW', 'VozBp', 'ns.', 'YvfDT', 'getSe', "o. Qu", 'tzblf', "*!\n\n🏵️", 'ierEj', 'Subst', 'ponda', 'upido', "┃ Lis", 'GENIE', 'lovWX', 'lment', 'lYDqE', 'dEsbH', 'vo:', "nha p", 'lPbse', 'RESEN', 'lComm', "plos ", 'fdKtL', 'setat', 'xtMBY', 'Zxjlx', 'MmCIm', "gle a", 'Cvjrm', 'ipala', 'HuYmw', 'SPjgJ', "bots ", 'kBjqN', 'dicad', 'some', 'qmQWy', 'jxLdc', 'usar.', 'stos.', 'cmTWe', 'GAthG', ".\nEst", 'nac', 'Geren', "🔧 *Co", "log(\"", 'pBUcG', "mear ", 'qNiWg', 'rcVGA', "por e", "\n【✔】ᴘ", 'QOJCn', 'QLSRZ', 'NHO!*', 'LStdJ', ", par", "*🔄 RE", 'CrrTy', 'ekbqb', 'lCcrd', "so to", 'zqUxt', 'uGNri', 'nerar', "💕 REL", 'FaFve', 'wEKFr', 'zEtkc', 'NlLDd', 'Rei', 'udio]', "não m", 'LREvA', 'UnAwa', "❌ *Ca", "s Per", "te us", 'vlzXQ', 'getqu', 'bass', " prob", 'TWPxF', 'xhodt', 'AVCYL', 'vpMpq', "o Mes", 'qdvSE', 'REQkS', 'estad', 'NBBIi', 'SiHco', "set: ", 'agame', "io en", "ual. ", "❌ *Sa", "ra le", 'algNt', "✅ Tra", 'vRsUl', "de fi", "😢 Voc", 'EMOVI', 'e9b6.', 'emnEk', 'ruto', "ico =", 'fHNPN', 'iPuqb', " Usuá", ") 📊\n┃", 'BaEaQ', "*\n\n*", 'iSoJc', 'VJOyY', "vmsg ", "vel. ", "e \n┃ ", 'kCmd', 'endpo', "mio, ", "uivo ", 'HzVDB', 'bzVIy', 'teiro', 'afian', 'mlfdL', 'qIYSK', 'EzhJV', 'ALsIM', 'PItSw', 'aYoEW', "old\nl", 'fagMC', 'dWhQi', "\n\n-_-", 'ZKdES', "I REI", 'jail', 'kPiLV', 'JaUOC', " segu", " Admi", 'MeAlW', 'bTYjM', 'nsufi', "atus ", 'beNXn', 'FlAQI', "s ger", 'fSMcK', 'GgqzL', 'auijp', 'wYCaX', 'jmKPS', "nte à", "ão:\n•", 'achac', 'pQJoO', 'trgpd', 'ig18', " (Máx", 'engal', 'VVijf', 'hgjYE', "⚠️ IMP", "t, lo", "ar em", 'FUZWc', "SÃO D", 'Resum', "「 LOJ", ":*\n1️⃣ ", 'rnOMI', 'esso', 'AdJYP', "ade d", 'bqRNo', 'sbXnw', 'GviHi', 'knOQe', "• *Gr", 'indas', "tar a", " | ⏱️ ", 'vopme', " *Ava", 'UDwqf', 'ttp2', 'aqRwN', 'tte', "io] x", 'ular,', 'oJiCC', 'HLhnW', 'FuxLU', 'pIZlW', '𝐠𝐨.', 'gQCUz', 'nGamg', 'pCwMF', "or da", 'NQPxz', 'anhol', 'name', 'LaZmF', "so!\n┃", 'volte', 'wKFBt', 'qJfWD', 'matar', 'fOqHh', " stat", 'cfJww', 'pPlay', " níve", 'OXkLS', 'fMVBI', 'nvnIs', " )\n", 'OSDxp', "ar no", ". @", 'RZOeR', '|4|0', 'wnKCd', 'ileSy', 'hTuqD', " supo", "📀\n2 -", 'wpdqR', 'quead', "icia ", "tão a", 'VzTCE', 'wnNzj', "ogar ", 'qpEwD', 'aPCci', 'hBwqB', '/remo', " -mov", 'rAEdf', 'tBkAR', "el ou", 'AXACd', 'CjuJq', 'shipa', 'it;q=', "upos ", 'ados!', "ngp \n", "\n• *C", 'xATcE', 'bater', "até 2", "a (So", '-----', "BOT* ", 'dmNyi', 'om-ur', 'CAFMa', 'ande.', 'FKdEh', 'QFKOK', "mato ", " menc", "🛡️\n\n🎯 ", "os Co", 'Ohtzy', '2|4|1', 'lDIKZ', '_ence', "AKE 」", 'sHFQF', " aviã", 'Gdnyi', "d [va", 'toban', 'SWoeg', 'GGqlx', 'qbpMK', 'nus!', 'jYluq', 'ncido', "a míd", 'com.m', 'floor', "\n💸 Ap", 'dono[', 'por:*', " 1 WH", "kup e", 'Jputp', '60ede', 'dTBje', 'CvzXp', 'fkDBX', 'srRqK', "s*\n\n🔧", 'COYSW', 'CfvrN', 'ULLEN', '|0|1|', 'mfvQL', 'mRvXm', 'BANCO', 'r-hrp', "🎯 O v", 'FjbZl', " posi", 'CGvqN', "own @", 'dos.', 'flor', "* -pe", "cê es", 'XRfks', 'CewXi', '/06):', "❌ X9 ", 'kPknD', 'wAeLk', 'sativ', 'HYBri', 'KnFDY', 'FORMA', "mpo e", 'mesmo', 'kpnjr', '-dela', "\n┆╚┉✼", 'SwFxi', 'ioKvJ', "a sug", 'sépia', "50% a", '16047', " e da", 'JHoqo', "E e e", 'jIrQm', "do Wh", " come", "o o s", 'ldown', "aram ", " 𝐋𝐎𝐆𝐎", '◈༻═┉✼', " verg", " ➜ ", 'upo).', " verm", "do fo", 'ylZgK', 'SMPvd', 'TIME', "nca @", "S USA", "O ⚡", "🎨 Env", 'to-lo', "upo ", "os da", "uel d", 'ZCXub', "cmd [", "s por", "po nã", 'rmake', 'tais*', 'pow', 'ToIKI', "🎰 JAC", 'cioso', " atua", 'KzEqx', 'VIDAD', "um me", 'cJEyM', " mági", "e vol", 'FPSLD', "\n• *L", 'DELET', 'gue-n', "ar nú", "\" foi", 'Cfbyd', "a for", "% bôn", "SHIP ", 'BwLnN', "l com", 'xamen', "s sor", "ide a", "ema\n┃", 't=300', "ado a", 'GMqiX', "á tod", "kid b", 'uTlxa', 'tXxYp', 'JRncV', 'Revel', 'KA2', 'iMtEh', 'bzsRd', 'ded', "ta de", 'EPBxv', 'cEXlz', 'usent', 'gold', "sar\n", 'DsKDk', "min p", "🎁 Dan", 'zlXnl', "IA e ", 'times', "os\n🔸 ", 'ViNlY', "reta ", "ar` -", 'QSnWT', "*) FR", 'ornec', 'playa', 'TrlFS', "\n┃ 💬 ", 'VUyHk', 'rGgxg', "dos g", 'kwWbp', 'NqQZE', 'qCvLp', "os, c", "⬇️ Aut", 'aixon', 'DO!', "eo ht", " desm", 'HxMOE', 'LLBWg', "as an", 'te.*', '*GOLP', 'caOAY', "\n🕐 *D", 'TqwYc', 'heLUI', '9b700', 'yBPyF', 'EesmS', "set. ", "a inv", 'en-US', 'bTWZA', "O 💰\n", "ND id", 'dgGMi', "EM SE", 'TxCgi', ", não", 'fHgrT', "ta. S", "? exe", "DA:*\n", 'Renom', "┃ 33 ", 'QwjmP', 'DjWRB', "\n\n🧹 *", 'uGxOr', "⏝ ི⋮ ", 'pirad', 'keDtN', " avan", 'DNIsz', 'taHFr', 'jtUXY', 'sDmlc', 'hRGMl', 'IiUab', 'WLNVa', 'LKzFm', "\n\n⚡ S", "esso ", "in = ", "o _- ", 'FjRpg', 'lhobi', 'lLyhy', 'RwLOU', 'BNqwT', 'WVrvk', 'RIEVD', "lão, ", 'hour1', "dos*\n", 'SVzKI', 'LGyQD', 'FXfrB', "ê rec", "eram ", 'o/vYB', 'NDwyG', 'rgMVM', 'IGITE', " togi", "vo!\nE", 'IJpsP', " os t", 'nvvpW', 'IrsdF', "A*  \n", 'TATVA', 'UDdlv', 'PDDCV', 'dmsmu', "❌ A p", 'w.med', "a vin", 'NcPjD', "egra ", "e ten", 'tZtKc', 'ncipa', 'oroso', 'ssou', " _\nAe", 'hsNBa', 'DqqwY', " suce", 'rmado', "e Tod", "or pa", 'nLqYO', 'PjAgi', 'VpgeG', 'WJTDW', "o Don", " Inst", "ld um", 'riorm', 'luxur', '████◤', 'PkzJn', 'alien', 'instá', "r 2 p", '───TE', "tem n", 'nt-Ty', 'iahsu', 'YnFdf', 'veAMg', 'ahIYj', " *LIM", 'nform', "│ 📊 T", 'AOFYW', 'MYmHH', 'gite:', 'repos', "\n📊 *C", "e:\n- ", 'gador', "as:*\n", '.jpg', 'manuc', 'vRkPT', "* 📊\n\n", 'MMbbQ', "ne de", "tem q", 'Dqagb', " ✈️ AV", "o cap", 'qyUIL', "tus d", 'BpXcU', '.3gp', "⚠️ ADV", 'dAAIw', "emas ", 'ApKiY', 'JrXsf', 'aQmma', 'ory.u', " *Men", 'sagen', " = re", "ora q", 'AFZgJ', " se p", "🔸 `gr", "O NA ", "dm 😂", 's_aut', 'ddd', "se se", "OS OS", 'AranX', "/10 h", 'FuPJH', 'YAJKe', 'OKqip', "m bas", 'HbEni', "há` ☕", ": 12:", 'JZhrN', 'LkzwY', "me Em", "do In", "HUM A", " No S", "tas\n•", "o aut", 'ferir', 'JnRib', 'tlORS', "sh; I", 'PSLQT', 'QUPQx', "..\nEx", 'URXsy', ":\n• G", " 𝐀𝐍𝐈𝐍", 'er)', "Em Di", 'FECHO', "a par", 'mwltu', " sua ", "\n│ 🧿 ", 'qbbVj', "po al", 'andam', 'KUuyZ', "soa o", " TRAN", " LIST", 'simih', 'pvodv', 'xzltn', "to. N", 'Seicm', "s ⋆\n├", "(?, N", "da de", 'zAGRn', 'CSVtm', 'zchHt', 'ocNPf', 'LUmDX', 'qfwrX', 'stilo', 'OPxuc', 'mpeza', 'ZGBou', 'TVkKO', 'chan/', 'MzFHW', 'o/10c', 'EÇÃO*', 'ingir', "a : ", "simi ", "/3\n\n", 'VTKPP', " ou v", 'ínima', 'HBqUt', 'stro:', 'qSRhS', "a, em", " 𝐎 𝐣𝐨", "vo (🔊", 'mxKOJ', 'resiz', "👑 ", 'ZZunv', 'pidos', "elo d", " *Car", 'menu.', 'WJSVJ', 'aBMSB', "EXT, ", "❌ Eu ", "do: ", 'nNGoq', 'oeOeO', 'LDazF', "odo m", "_ Ago", 'icati', 'ZEdbn', 'ata', 'wCBdM', "ld do", 'numer', 'PkncA', 'steja', "les r", 'xzlcZ', 'xXoPs', 'VvChd', " se n", "o dig", 'msgba', 'kQHhy', "n em ", 'ufEBz', 'fQJop', 'jogos', 'vSbBb', "o uso", "RE de", 'minAr', 'bzozS', 'vos!', 'emcom', "de qu", "tre 1", 'CONFI', 'wBVQy', 'base6', "rio\nm", "ou re", 'jNbPg', "ado =", "ar XP", 'pinte', "\n┃ 🍾 ", 'asaiY', 'impor', "sar e", 'wnATU', 'HAzLf', 'uwHtc', "to, ", "ido, ", 'vysTy', 'WcyAn', 'QuMqf', "gold\n", 'aQspK', 'sEktj', "cao r", 'VdpwN', 'qdPbT', "e rou", "os wa", 'hoje:', 'rinca', 'Wezrq', 'CtXPr', 'kZHet', "orna ", "ada e", 'QQtou', "ios* ", "ê VEN", 'nCzxZ', "M SUC", " capt", 'muito', 'LWllE', '.temp', " Kwai", '236x3', 'gyDAG', 'gYuEi', 'track', 'ienBR', 'ESXMO', 'Ddtnz', 'ligar', 'LIuvi', "er op", "luir ", '-name', 'bgQUR', 'rFoFE', " corp", 'neond', 'VgoMe', "ou \"N", 'ba49b', "IST* ", "na to", '_agen', 'mando', 'nuFaT', "g img", " (\ngr", 'ida.', 'InoiH', 'FHuhc', " ENCO", 'VBzax', 'mrAmY', 'kuuru', 'qIyeE', 'ytSDe', 'ASTA', 'QhTPf', "d da ", " Núme", '════╗', '*Limp', 'TmBUx', 'ídeo', 'Brmsv', 'QDtMJ', 'KZZZt', "as, h", " bomb", 'urbVW', " vivo", 'do(s)', " | un", 'SfakC', 'VKwYC', "ao tr", 'tório', 'GcNZG', "u gif", 'itfei', 'ZNyJg', 'ckgro', "der g", 'scoço', 'qalVH', 'csrDn', 'bwvUs', "p 10 ", "UP𝜣\n\n", 'eto.', 'lengt', "!*\n🔄 ", "rd b", 'drKDN', 'ZURhd', 'HTbcw', 'cGhut', 'BzoIF', 'TAS', "o atu", 'eguiu', 'DPqab', '|2|0|', "🌈 @", 'JNmTT', 'QJXHF', "└─ 🏢 ", ".. vo", "ê é: ", " SEU ", 'lculo', 'RkPLX', 'DRAGO', "\nComa", 'Jfnul', 'yABgQ', 'TFMQM', 'iryuk', 'wRgGv', "🤖 Voc", 'anQPD', 'ndBwf', 'Bot', "ocê p", "a cid", "ns em", 'rie_f', "r o v", 'JVskb', 'CMDWt', 'issuO', 'TKdlJ', " _(em", "do!* ", 'loefK', "de ro", 'lIwJY', "um da", "⚽ *PR", 'close', 'bOViW', 'icEkr', 'mtQvG', "\n\nSeu", " Bras", 'play_', "𝐄 𝐃𝐄𝐋", 'xIzHP', 'ak_at', 'mnPjM', 'wwGEq', 'udio/', "á pas", 'oIIZY', 'CJlqD', '/proc', 'KzCmw', 'KmfOe', "❌ Víd", 'vedJf', 'RIDme', "ada: ", 'istas', "BOT P", 'êntic', 'ocume', "\n\n🫂 𝐓", 'majcK', "- Per", "* mús", 'LHDKn', 'jsuvU', 'ração', 'rapas', 'oGWqN', "o sor", 'vDmqA', 'Q66f-', 'iberd', 'uiser', 'LrvoX', 'OTaym', " Meio", 'tcMZT', "🌟 *Ac", "m dad", 'pzUcC', " reje", "O* 📊\n", 'UhOCh', 'dcFQx', "\n❓ *Q", 'yoNfk', 'isArr', "ker a", "a fre", 'lHWVU', "o] / ", 'FnCPY', " *ATE", "n` - ", 'onWha', 'EMDTO', "xo nã", 'getGr', 'hlLjT', 'ERFIL', "\n└ Na", "mix 😂", 'RDEU!', 'WTIlD', 'Sonor', 'wIzJf', 'EknUH', 'tar', 'fastv', 'po:', "! 🔥 \n", 'NmnkE', 'ZyweW', "old r", 'NJVso', "\n🎯 *C", 'WjanW', 'nquan', '𝐎𝐓𝐀𝐋:', " ar\n-", "r: ", "`\n🔸 `", 'sXCIW', 'KjupR', 'szHLM', "boa n", "🟡 *ST", "rte i", 'hmm..', 'HdPuL', 'OLzbD', "N TIG", 'pesqu', 'ERAÇÃ', 'PQGKb', "ubou ", 'ionAL', 'QlUem', 'feyvv', 'Portu', 'fraVd', 'TRyNl', 'rouba', 'bRVbr', 'IqRJw', 'issõe', 'VdZXi', 'bTNti', 'xoRMr', "T 15", 'posic', 'wwbfW', "ia do", 'ont.f', "─ ✅ R", " pron", "ÇÕES ", "am gl", 'JMeHp', "r dad", "DAS 5", "EL UT", 'xMKpx', 'AwYWs', " FIGU", 'dendo', '*DIGI', 'OddXf', 'CeGKr', 'fXbfk', 'cjOjS', "ssar ", "𝐒 」⊰━", 'BzAuU', '80328', 'YxIWC', 'SnEaz', 'jZKGn', 'rLBUZ', 'KmaaG', 'YtoUX', 'qChXp', 'RlkxA', 'quênc', 'rupo,', "po a ", 'RPutB', "te to", 'eZXEP', 'roteg', 'jnSOx', 'nGSIC', 'ios', "ada:\n", 'VcnGM', "] [gl", 'call.', 'd7a16', '4583995QWGwqj', "Útil ", "duto ", 'paper', "ada, ", 'JNGoe', 'jUsog', 'UTXWD', 'cUpNN', 'luind', 'XjRPV', 'gxLUo', 'tivo', 'VKhiz', 'bJUPS', 'Pedir', 'Myiuz', 'DORES', 'exit', " xp =", 'EZvOq', " Togg", "e etc", 'Ghccd', 'izpce', 'letos', 'xvWQe', 'WLmlI', 'eehBO', 'oTtbT', "ÇÃO C", 'sMIvd', 'oem', "nto\n5️⃣", '%20Pr', 'gWPuG', 'TFqEt', 'SgKms', '*Alia', "o a e", 'act', 'XHEfV', 'lWAIh', "─⊷\n𖣘⃟ ", 'oNFlq', 'MS..', "am re", 'REI', 'reini', 'ntage', 'AZGld', " 🍻 AL", ":* Gl", "bar a", 'pGqaT', " Escu", 'DD-MM', " <tip", 'GgTZm', "0 Gol", 'pfmfy', " rel-", "m 0 m", "AKU D", " ❌ Ca", "ome o", " incl", 'iSZgn', 'nickn', 'tHxZc', "in:* ", 'xwSsz', "ato a", 'DuGBY', '𝐌𝐈𝐋𝐈𝐀', "「 TRA", "IMA H", "s\n┃ 🗓️", "Grau ", "┆║\n┆║", 'Inati', 'YoygD', 'Ubkqh', 'YayJJ', 'atItT', 'ions', 'rZWCc', " ADD ", 'loKPl', 'mzVvj', 'Gltne', " 60 s", 'ldMwp', "s\n└ N", "┃ 7 -", "zza i", "cmd ", 'kwFrf', 'JsNAp', " no j", "vel o", 'idUcX', 'ransm', "💬 Dig", "o sim", "o e l", 'STbhX', 'nImEg', " *PAR", "as no", 'ydAwt', 'zTOgS', " ASC ", 'Marca', "ó lib", 'trava', 'OFXRL', "uem, ", "DD qu", 'tHNMI', 'xroPr', 'NdGGG', 'lXZKe', "𝐍𝐎 ⚠️\n", 'CaLar', "l jog", 'QCnXv', "ROM a", 'unt', 'br.if', '┉═༺◈✼', 'ssará', 'dBbjd', "om in", 'uação', "nha: ", 'ouHDY', 'RMLYG', 'IoeHZ', 'Yihhk', 'hCyzl', " item", 'a8ffb', 'YRSkD', 'DJaBY', 'cdBJj', "ido: ", 'plaq4', 'oxBEl', 't=jso', 'rolet', 'ndVfM', "N LUC", 'pxhha', "er mo", 'Nfffv', "M Usa", 'isnit', 'pmquw', "o opc", 'hCdlU', 'upo:*', 'DjKul', '4|3|7', 'FIKaf', 'EZFdm', 'JVMoo', 'IDCQy', 'm/man', 'ência', 'temPr', '744:+', 'alore', "ome p", 'xfIzY', "trou\n", 'IMAGE', 'FFZEA', "o inf", "2 - Q", "u em ", "m par", 'ias/d', 'fmgAv', 'ekWbb', 'UUIJF', "upo n", "\n│ 🔥 ", " vitó", 'dRLoj', 'ECsfF', "\", ap", 'jctDd', 'Isado', 'eis!', 'eChan', "fico ", 'la:', '://gi', 'rme', "R ADM", 'teItp', 'HRPBY', " meno", 'VgyGi', 'PuFgY', 'sforç', "po.\nM", 'zfFjZ', 'JYyAK', 'AKHuR', "TE ", 'TPtJp', "ão\n\n", "ver\"\n", 'hpWRw', 'tfprH', 'FHAEk', 'QsMKd', "vo ad", "🚫 *US", 'EhWQp', 'preço', 'qkzXu', "✼┉╝\n", 'idade', 'jogod', "🏆\n\n", "us co", 'rupo.', " do W", '(bani', 'MNOIE', 'flFjY', "da. U", " *Tem", 'm/...', "a dur", 'KCLtd', "i pos", 'ZGAau', 'EawPc', "e lim", 'alvao', 'ECE', 'YYYQl', 'VZwUi', 'vVTQE', 'PpXXe', 'lyMvC', 'uVugi', 'menuS', 'nflCI', 'JHIZl', 'ição*', "veis ", 'PzItx', " de v", 'nho:*', 'SGRAa', 'ndiçõ', 'emp_G', 'ALHES', 'o/ZVZ', " Espe", "ar pa", "pt, v", "nto! ", '5|0|7', "imos ", 'dnLdN', " razo", 'vUlyV', "ato J", 'IkWZH', 'tpts=', 'EuzLN', "🥃 Com", "?*\nIm", 'FQGtS', 'menus', 'Dbnev', "ses D", 'hSrHy', 'tbgoE', "onal ", "eito ", "a cri", 'MtsTV', 'IbqrH', "cisa ", 'raro', "bug \"", "IS OT", 'sURMr', 'kMyKJ', 'uel', '/jpeg', 'centT', 'riado', 'tbSYW', 'cjlnP', 'ntrad', "a em:", 'atemá', 'tvunS', 'lSOEy', 'dOGvz', 'EBamX', 'manhã', "gem m", "❌ Cat", 'JDijf', "alos ", "s! ✨", 'ZABHC', "` ☕\n•", 'HVCvo', '24IMh', 'jRcip', 'PCjgw', 'oJSlN', " [tex", "🚫\n\n🎯 ", 'Amiic', 'mento', '1|9|4', "in ou", "m mot", 'FYGic', 'ake-s', "o (va", 'lor=a', "Opa, ", 'yDTIW', " - Só", "ra] |", 'bpmDS', "ária ", 'lXSdd', '5bb63', '<coma', 'vwYdM', 'MJPbw', 'BbWUp', 'roxo', "do se", "te in", 'tktTo', 'JbMBC', 'lang', "!*\n\n💬", 'udios', "\nRua:", 'sário', "sg_ -", 'czSIQ', 'qypcV', 'GBfhm', '𝐀𝐋𝐈𝐙𝐀', 'hnFTM', "de 0 ", 'WkTrG', ".\n┃\n┃", 'ikaan', "tes a", 'YzGGy', 'VCiBd', 'QNTuB', 'dUMhy', 'LwXiO', 'HwEkI', 'xvide', 'NVENI', " BEM-", 'Vavvf', 'tus_a', 'EuKBW', 'nqIbA', 'ahjxe', 'EeDQa', " TIME", 'lycia', 'wgnJD', "a vez", "ê \n┃ ", 'UbogM', '3|4|1', 'Liber', 'CuoIM', "dos\n┃", 'blrjp', 'o.*', " (gru", 'nEKmW', 'WHbhT', 'iQQEQ', '://ne', "bela ", 'MrBmm', ".▬▬▬\n", 'qVbWh', "🔧 Col", "e ban", 'hURyH', "ta có", 'dmin:', 'bwCru', "as: a", 'VtJse', 'MlYTw', 'dade:', "Err: ", 'unce', 'BHdtZ', "nu pr", 'gKsab', "nem g", 'king.', "das q", 'ngyVH', "Xd, /", 'NvgpU', 'uDApc', 'igVAp', 'gmWgZ', "de su", 'a1411', 'bylSS', 'Reset', 'pt_st', 'BpkFv', " na G", "r: +5", "ica q", 'uBSSy', "o cri", 'pelos', ":* ", 'aqkHG', 'CcJOi', 'tzuHw', 'DtcXe', 'ciar_', " ou t", "NÃO E", 'senho', 'wKSFF', 'DraPB', 'tado:', 'osta.', 'fEjTX', 'Kpwbf', "r adi", 'mduKW', ") 👤\n┃", " São ", "💥 *Da", 'dWRNf', 'ostic', " 3600", 'Gacor', 'GiMXk', '𝐂𝐎𝐍𝐓𝐀', 'MVcIa', 'pmhzw', " feit", 'foot', 'DNKSH', 'HGxTE', "uto a", "OCÊ E", 'WlQUB', 'gitou', 'FDepZ', "f\nant", 'ZmCWx', 'tísti', 'fcAwP', "𝐧𝐚𝐬 𝐨", 'Zrinh', "ada c", 'rta-s', "h, 4h", 'Desen', 'awjXr', 'hallo', "S X 1", "ng, p", "ja ba", 'SYsSv', "` - M", 'palug', 'LEKNz', "á par", 'PnZzc', "_\n\nSe", 'harry', 'nMpcY', 'gyuEQ', 'link]', 'XFjqa', 'ividu', " abra", 'LbwxZ', 'nhar:', 'upos*', '𝐄𝐍𝐓𝐑𝐀', 'ceYDw', 'bvZmM', 'rSNYk', 'lhEaC', 'NDeza', "ído! ", 'IKLFF', " há j", 'kRPjo', " os m", 'i-key', 'uxjNp', 'onten', 'warni', 'jkYDy', 'YBpkb', "o, só", 'JKnoa', "Loja ", 'open', 'Clery', " game", 'etos.', 'Azul', 'yUsag', 'nHgoI', "nor, ", 'PzIIO', 'cf2it', 'OZALf', 'adrug', 'IEcih', 'IeXnL', "ver n", "das` ", "tem ", 'cvFis', 'ermit', "ou li", 'HSGhc', 'info`', "\n👑 *T", 'KjGZS', "ks do", 'Votou', "✅ Últ", 'to_in', 'BdnpH', 'anhar', 'RdIBf', 'aKzmQ', 'eon', 'MVjpL', 'Prefi', " ?\n", 'oyeCn', 'damen', 's-msg', "plit ", 'VwyLX', 'rbOEF', 'lAZLR', 'RfTBa', 'ZvDZu', 'goZxK', "m mod", 'uDilm', 'FWIUM', "do ff", "r, us", 'fixad', 'ido!*', ")\n🔸 `", "s\n┃ 🎮", 'ca.', 'tIzKa', 'ormal', "→ Sel", 'pJnjx', 'OmoRa', "as' A", 'reque', 'os|', 'fixo]', 'HIbIT', 'vrqhZ', 'BXCgH', 'xgsjN', 'TTryQ', 'nomea', 'esdea', 'vvgXm', 'MZqrd', "🗑️ *VA", "vez. ", 'AEBjd', "─⊷\n│ ", 'ɪᴍᴘᴇᴢ', "S:*\n┃", "pal d", 'iYNDW', "ssos ", 'MiXKC', 'NqZkR', "s 💣\n•", "┃ ⏳ *", 'VcVqc', 'skDxQ', 'vaCBM', 'movam', "ntir ", "% em ", 'tar-p', 'relad', "🏆 *BR", 'MNMhg', " down", "s def", '.0.si', 'TQjis', 'isCom', 'arado', 'EIkRO', 'Zqxgx', 'uênci', 'nGMCz', "e a a", " agen", 'oeJPW', "o de ", "tre n", 'Podem', 'xVVpJ', "💐\n└ E", 'XfQRl', 'kmyGT', "🎨 @", '😡️', 'LRCfi', " 𝐕𝐄𝐍𝐂", 'ebapK', 'etal', 'zrTaT', 'dnOCZ', "ável ", 'tBBVC', 'MOrDs', 'temMe', 'Level', "amp) ", '|quan', "le co", "O BOT", "ixa (", "Não t", "e (ou", "e tel", "io!*\n", "🧹 *RE", 'BjieM', 'zTktr', "u sua", "⚙️ *Co", "a (ne", "🥃 CAC", '7|4|5', " AÇÕE", 'kmfqi', 'acote', '🌳🌲', "Nath ", "00 mi", 'biAXu', " ffmp", "são p", 'HHfxP', 'vbOFV', 'JJwpO', "\n┃ 📞 ", 'jUGUU', "「 PAC", 'bPzpv', 'nvorq', 'ijOSg', "A cha", 'tuESD', 'MMjvG', 'IpZGJ', "OLD 🎲", 'lVhZX', 'JeRfm', "s. \"", 'CoemX', 'jcIBQ', "safk\n", "ais l", "ja be", 'bIczN', "[ 6 ]", "ero n", "s aut", 'MdcGF', 'cZQTx', "ão no", 'JLjfD', "De: @", 'rfHNy', "que r", " [des", 'yaIjD', 'mplo,', 'dogol', 'YCJOZ', "guns ", 'Bem-v', 'wHNiP', 'bucet', "gem a", "Só ad", 'zKoGN', "iro, ", 'sBseS', "RE 1=", 'IDE!*', 'bsMOx', '-clea', 'tureU', "HADO ", 'hub.c', "o ifu", 'nesce', "ra: \"", 'ahebM', "\n- ", 'fbgwO', 'cPlRw', "ma ma", '20Ser', "ades ", '//git', 'WOUIp', "* : ", 'JzvWQ', 'AoQCF', "xar ", 'TEGER', 'vKygp', 'iro(a', 'pot', 'vSihV', 'OTpMu', " 🆔 ", "oja i", '/Vita', "lém d", 'jHlGZ', 'TqaVH', 'URFKv', 'czLkK', 'id_gp', "OS 🔍 ", "lta a", 'm:ss', "que d", 'regra', "o ban", 'igyge', 'hQgVM', 'TsuVD', "e pad", 'kHSLG', 'sKhbA', "\n│ 🎁 ", 'JfeEO', 'plays', 'urado', 'QOOVH', 'EcoMH', 'brad', 'TqXWz', 'asAvi', "89`\n\n", ":*\nTo", "] Err", 'veloc', "á abe", 'VbIpO', "ual d", "ar, h", 'Sqhuq', "qual ", 'iJdbF', "olar ", "u o r", 'RMtRX', "ê com", 'o/txn', 'inces', "❆╍╮\n╏", 'iHPdE', "mina ", 'obble', 'hRMWx', "'em d", "m 200", " a tr", 'rupo!', 'CDoLD', 'YNhvu', 'BaNpT', 'FxdnJ', "rá au", 'YAjhS', 'ydoef', 'ubrdr', 'jdBVR', 'EMIUM', "m aut", " corn", "er GI", 'CHAMA', " 𝐈𝐒𝐀𝐃", 'vkgSo', 'Wnpns', 'bertu', 'cdefg', "↝ Ano", 'desc', 'VFcdU', "ldo i", 'upo):', 'armem', ". Ofe", " e se", 'uhtsU', "ODOS ", 'DRBlc', '6|4|2', 'cipal', "t de ", 'wPshf', 'jjIsc', 'WOwrW', 'cale?', 'PndSz', 'xar.', 'liryc', 'ancel', 'djqQb', "cos o", 'Cassi', 'nKoft', " Delp", "s \nOR", 'BHExQ', "s err", 'KFpIR', '3bc16', 'ados', " tipo", " - 📁 ", 'ERFEI', '12345', 'TS[v]', 'tPYyW', 'ɪᴀɴᴀ💌', 'globa', 'sgRHL', 'jKSSh', 'addOu', 'cale', "┃ *Em", 'OsCNq', "so ", 'tIFRR', 'queno', 'adm', 'gEoDv', 'TAgGo', "é 5x ", '▱▱▱▱▱', "et de", "🐻\nㅤㅤㅤ", 'ct:', 'BnaWL', 'SbCOv', 'der:*', "ar, e", 'VDdfV', 'Chave', 'jWRUH', "tes W", 'rneAK', 'rQePZ', '/Giov', 'WXwrR', 'EnMff', 'BVkhV', 'Rdpos', "❌ Sol", 'lbaSn', 'utebo', " fest", 'loja', ": eo\n", 'IUUsO', ", o l", 'bal):', " faze", 'KPwwk', " Fort", 'UTKdK', " en\n-", 'IBLkX', 'ios_f', "oas A", " 😈👹", 'fuIWF', " (ou ", 'sRdgP', 'lRTDc', "rsos ", "a (al", "ra te", "tino ", 'OyUtO', 'nWRVC', 'ZAEvA', "que t", "💨 Res", "- Dan", 'MfsTH', 'tingi', 'JFHau', 'eFhcH', 'nFHju', 'nuke', "T mot", "Sem r", 'OlcPk', "\n\n👤 *", 'KvirB', "bot 🤖", 'size', 'mbro', 'IATOR', "o, co", " o mo", " *𝐀𝐂𝐄", 'nUpLv', 'emini', 'fgcDa', 'lIhxU', " O bo", 'SruGS', "│ \n│ ", " Os d", "╠➥ ht", 'lCuIo', 'GGMGs', "o gan", 'syidL', '_card', "ini e", 'owgqz', 'eguin', "dia o", 'bjgtv', 'euVyc', 'MrjsT', "𝙰̃𝙾*\n╚", 'oqBaP', 'ário:', 'nxveP', 'JTftH', 'PPAma', 'YCniZ', "ho se", 'XcJix', 'EkKtZ', "r no ", "lay o", 'jImib', "ÃO NE", 'DmDaQ', 'dmBTX', "do ví", 'rvvis', ":\n\n✅ ", "udo a", 'zTivz', 'jGbyu', 'rios:', 'sLZYW', 'bjGVd', "ou ex", " no b", "a o c", "a e a", 'PSRao', 'OJIGO', 'Tipo:', " Acer", "*[ ❗ ", 'NJCii', 'te).', 'YlBgs', "ano1 ", 'ncia!', "DO RE", 'BtsoS', 'BQzZj', "\n🎮 Si", 'le.', "u úni", "NTE (", 'mGaMf', "o ÁUD", 'XDGlb', 'vUSae', 'SBLUe', "🔸 Mos", "isa m", "lha!\n", "m o l", 'yPYkq', 'ZwrqS', 'dipiM', 'RzNdx', 'tArLC', 'Tyxbx', "F𝜣T𝜣\n", 'brirg', "do *!", "*\n\nNã", 'ooldo', "o ope", 'ditar', 'osta:', "lor d", 'linkR', "jogo ", "ra 50", "ver p", "๖ۣ• T", 'socia', 'gbUWr', 'OHdPW', 'FsHit', "an qu", "T:~ ", 'CPtcs', 'jEBCD', "PO)*\n", "al = ", 'ZAHqm', 'mQsdd', "o tod", 'czvoN', " veze", "se vi", 'CDlys', 'iimni', " 0, m", 'nSFWF', 'jtgcs', 'AgVHN', "🟢 *ST", 'YvPFz', "-mix ", "- O V", "🚨 *PR", "off`\n", 'oQMWE', 'HwMMQ', "🤖 Já ", "TE:\n│", "o a c", "bom, ", 'xKTIv', 'AVwYf', 'hrpfo', "os pe", "z\nExe", " [a/f", 'qDARh', 'UvKUa', 'no)', 'JTzuV', "E typ", 'pXGDA', "🤔 *CO", 'GzlqW', "1`\n• ", "💨 Vel", 'mado.', 'AJaPN', "ou ", 'QxBwn', "━ CAN", " no s", 'DMobt', "\n\n⏱️ O", ", res", "do, e", "e mar", 'NZwiZ', 'roluS', 'mpXaJ', 'ORqGE', "r aut", 'wbQxy', 'iptio', 'bADfC', "rio: ", 'zTHOL', 'IyQnv', 'LsjEm', 'BrcsD', 'xNIyZ', 'foybE', 'whLHS', 'getUs', "DONO ", 'jhPHl', "r, fo", 'LISTA', 'eESfA', 'Jvfth', 'totEd', '.webp', "RT IN", 'USUAR', 'fgBtm', " aume", '|3|1|', 'UuoWi', 'ertên', "\n- Us", 'XvhXU', 'Aumen', 'OmaLt', "er [c", 'dyHTm', 'SUPUl', "all o", "🔧 Ini", 'gdsBI', 'BIihn', 'isVal', 'uinte', 'promo', "da AP", "t: ", 'npgru', "\". Us", 'smDmk', 'fgaKk', "xar o", 'lRONb', 'OTnjX', 'dific', "fil d", 'diret', 'FmBWp', 'wGIGX', "do. E", "「 UPL", 'fwURN', " braç", 'édia:', ". Exe", 'VOFNV', 'KTJmR', 'NvytM', "┃ *5*", 'oli', "iar P", "RE ga", "ADO!\n", 'CVtFI', 'neko', 'OfhBz', " é fe", " gala", 'ibge', 'krHgN', 'XBroC', 'over-', 'hrndB', "enta ", 'gp2', 'ptbzL', "oja a", 'XASGZ', 'nxhIb', 'win', '08aca', 'xCCFg', 'LcuIl', "(não ", 'EeswZ', 'nteli', "• *Po", 'uEEAT', "de li", 'eMNiw', " E ES", 'GPHOE', "c, ct", "0 rea", 'fwtBt', "OS DE", 'DWvnZ', "6 (KH", "✅ Bac", "a [va", "A GRU", " CORN", 'IMpmo', 'egold', 'VLiXj', 'addxp', "┃ *Co", "dos 2", "ia] |", 'quote', 'BQANW', "está ", '*Joga', 'previ', "\n┃ 🔄 ", '31525', 'nSQkO', 'HBPCU', 'IrNCY', 'LgSUl', 'ativá', 'ônus!', 'ePuni', 'dzSHo', 'vZyXI', 'nomeg', 'EjLvU', 'ssão', "🧩 Voc", 'iBIcv', 'ceu', "DOS*\n", 'wxRFZ', " as u", " Fixa", 'evel,', 'KvbnE', "A DE ", 'fNYRS', 'BIBfs', 'jogou', '𝐃𝐚𝐭𝐚:', 'NPDDx', '|4|3', 'CNRMT', "iv go", 'oZiOE', "um pa", 'EELBn', " bug ", 'sWith', 'XOigd', "do a ", 'tipv,', "CÊ GA", " seu ", 'drANS', 'PLIdl', "o Acu", 'Marqu', "st ba", 'kwai', 'geKey', "e XP,", 'ACMXD', "go se", 'WBsgp', 'DfEWr', 'fnxCF', "E lev", 'FgVhK', "sar a", 'focmd', "- Vie", 'ZdSGO', " a me", "\n\n*Pr", 'WSezx', 'xZGzN', "LTO +", 'FBcDo', "ers p", "\n𝑀𝐸𝑀𝐵", " 3 - ", 'fsuBH', "uito ", 'mRaEj', "UE PE", 'Sgoqw', 'chMEo', 'RYNiy', 'YsrHl', " 👮 PO", 'znRAw', 'inha!', " de g", '★⊱┈╌╌', 'ccYbO', "bom p", "c\nlib", 'KlDDY', '2|0|4', 'ONmfS', "💥 Bôn", "a reg", 'RsxZj', "└ Adi", " mode", "e, ID", 'IzNhv', 'AVqZV', "✅ Lib", 'vdEzv', 'ATFRF', "de nú", 'igar,', " CONF", "ntel ", "E EME", " for ", 'DvUbO', 'bFijE', "xto p", "\n1 - ", 'IvYDD', " olá ", 'vjyCE', 'CpmGv', "ela 4", "[p] p", 'eawUD', 'WAydv', "or!\n┃", 'ftSBo', ": cs\n", 'OpZET', 'rSiuB', 'TftlW', 'ciona', 'djyfp', 'pnfAC', "AS* 🧹", "lma G", 'bUitt', 'WHUBL', 'KgLQC', "béns ", 'tMhks', 'epsMc', "𝐬 𝐝𝐚 ", 'EGrTi', "al 5", "(A) C", 'WehcO', 'FSXQZ', 'wsjXQ', "a esc", "⚠️ Tod", "s mín", "DE PR", 'arcc', 'reiro', "- Upl", 'senvo', " para", "um ra", "so.\nN", '4|0', "(s) c", 'udio', 'qDVWq', 'rabén', "2 con", "ND ve", "\"CONF", 'DZvDW', 'eo2/t', 'LwedG', '2|6|4', 'GaCNO', 'ilbkZ', 'CacOM', 'timeV', 'muCja', 'iJrGT', 'gHZlr', 'FyBqb', 'tumam', 'EXCYo', "ê irá", 'rar-f', 'FtaZa', 'fLlQL', " caso", 'oads', "ulti ", "e per", 'TaLQt', "\nlibe", " Circ", "ed\n\n*", 'perso', 'ular:', "ir di", '𝐍𝐕𝐈𝐀𝐃', 'aça..', "╭「 🎮 ", 'TPHHr', 'QwsSv', "IA EX", "e do ", "até 4", 'HflnB', " RECU", 'NGIDO', 'cuçõe', 'Warni', 'WkZRO', " dife", "💰 *Re", 'ohFOU', "to.\n\n", 'etras', "fire ", '*Disp', 'LZcHU', 'inver', "vo gl", 'JIgEN', "┃ 🤬 *", "b 😂😂☝🏼", "ir sp", "ros e", 'la/', 'getOr', 'Gxczo', 'uZUgA', "✅ Pal", "to = ", "é Mia", 'RVQrg', '━━━━─', 'ar`', "🔄 *Ne", '1c75/', 'vWEcn', "🔞 ADU", 'BAKcJ', 'PWBrt', 'fhBJH', 'PQOnU', 'terad', 'uptim', 'uPGvH', "oad c", 'upedK', "] [va", 'nsole', 'esso:', 'getMi', "ite j", "\n\n_Es", 'espaç', './sgl', 'GjHWG', "ca do", 'lYoIr', 'dNXqQ', "l Reu", 'xfkQS', "bal: ", 'BWpSU', '10|7|', 'tMgMC', 'Prêmi', '4|3|1', 'white', "m uma", 'MawGA', 'olher', 'aNGNh', 'theme', 'CPaaS', 'BORUT', 'antip', 'RÃO', 'hatsa', 'FHpwI', 'FAKE*', "`\n\n", 'uOUCx', 'ca6ec', "e hoj", 's...', 'QsiJf', 'bBaFA', "- @", "D use", 'wRsro', 'lido.', "usar\n", "ro. T", 'Opçõe', 'oRJQs', 'rTOsS', 'lBTtv', 'xCLoL', "r mes", 'UbTsF', 'TBnTz', "de ho", 'ciaSh', "ido a", "de \"Q", 'axAHl', 'nváli', 'NHAS:', 'jFtWH', 'axfTB', 'CONSU', 'uente', 'hat', 'NZXJt', 'FOCef', "iado ", 'sbFCC', 'lxpqz', "sta (", 'tipoA', 'VBRDN', "haca\n", 'vbQwv', 'sCeVX', 'eUser', 'CcnMS', 'UCcKy', "rar*\n", 'GAMjL', "após ", 'xcVEU', 'oRmOt', 'jaiso', 'freem', 'VoHpE', 'tDLxp', 'hAiYr', 'mchye', 'ORDAR', 'NbjLB', 'uario', 'ima_a', 'leAhV', 'avelh', "es as", " CHEI", 'RAcMK', "le Pr", 'roman', 'KskhH', 'EDExN', " clim", 'kfHOS', 'sion', '31c8a', 'pgLEU', 'estat', 'hYvME', "ais c", 'PMijm', "cio, ", 'qhkKX', 'edruY', 'ossui', 'uraçõ', 'nVipU', 'ghoqa', 'webco', "ar ch", "ia ví", "s na ", 'ukYTk', 'ouTub', 'mitin', 'or=wh', "m jun", 'NeJvZ', " e pa", 'ado:*', 'aGVSG', 'SrMzo', 'foQlH', 'lBrou', 'NSWrK', "ar al", "\nNota", 'yjlUq', ")\n┃ ", "SET v", 'ker.', 'VDHNE', 'mOTwW', 'VuDsU', "com I", 'Uowur', 'mzazc', 'Xplna', "uel p", "iv im", 'bQVpr', "\"\n\n💡 ", 'tcqjt', "OT LI", "eta. ", 'mccno', 'QzbpS', 'DADES', " curt", 'cHRgz', 'SqItF', 'ssand', '0ccc5', "\n\né d", 'QQIdB', '485f2', "go Fl", 'ywKDi', 'rarli', " Não ", 'HbIgY', 'IXzya', 'GlIHN', "vie o", 'Snrfh', 'xqqAH', 'ADO', 'ZCHox', 'hBvxh', 'YCHjU', "TES P", 'apiKe', 'safia', 'dhfPq', 'XYbxn', "ê tem", 'MvyHC', 'mostr', " [núm", '(((.+', 'tSWBT', 'jid', '30%25', 'xUHOy', 'ZUqDV', '.0.po', 'JDjkS', 'gXlbd', 'INCIP', "clua ", " Dele", 'vOlgj', 'eroku', 'NÓSTI', "tá ", 'NcFun', 'PprZf', 'BslcE', 'LEVEL', 'SGXlh', 'XwTck', 'FIGUR', "ro 10", 'tcztF', 'oDoai', "ijo d", 'Yqgfl', 'BAhWq', 'Clona', 'NDMTN', 'imita', "𝚃𝙰 𝙳𝙴", "00 ca", "or do", 'vlPKl', "te li", "D gro", 'FPS..', 'lar_u', 'bekzv', 'thJKc', "em e ", 'rBqTf', 'auCXh', 'rJIDp', 'doc', 'dnuEP', 'ple', 'kitag', "ha co", 'dXWVD', 'rYjef', 'VJQyv', 'dar_p', 'NDuwu', 'ístic', 'YddmS', "\n│ 💎 ", '💕🔞', 'o&tex', "y 30`", 'toArr', "sic o", 'iltPq', 'ackgr', 'xSHdS', "DOR! ", 'sVCQv', 'Lista', 'bPMBw', 'lnWLn', "│ *", "rio p", 'JikfG', "evel ", 'wLEnQ', 'JRiHp', '3bc3b', "de bô", 'kecha', 'TKikB', "*, \n(", 'ge.', 'tatís', " Elit", 'USmiO', "r iss", 'menu:', 'delay', "ia de", 'Fruet', "vo ap", "vo', ", 'NAdvC', 'ZzMTa', "UEL* ", 'TQkzx', "📋 *Li", 'pDbcy', 'TXGVg', " PART", 'skSzC', 'ORMAT', 'OxZVi', 'Kbvit', 'kEYvP', 'xYNHN', 'salie', 'lotus', 'nYfwR', 'ndeza', 'esEjL', 'rcaMm', 'amora', 'tro', "TO!* ", 'fGBfT', 'qwzQt', 'rwRyv', 'cente', "l, da", 'FfeCm', "s for", 'gyMCE', "05h, ", 'JAdCl', 'fiTHN', '|3|0|', "OSA* ", 'stado', 'zCPGx', 'kxlqH', 'INVER', 'WERBj', 'OQNnj', 'çado', 'mvrWK', 'wATFG', 'PERFI', 'criçõ', 'ZWRjG', 'ylpbg', "o que", 'GgbEN', 'WxlNZ', "ios t", 'EIiBr', "• Bas", 'yWCXP', " há m", 'UGLOK', "--\n", 'jackp', 'lista', "┃ 👋 B", 'deMHc', 'GDjiT', "o pri", "ta: ", 'sZkMl', 'zyBGy', 'OWuzc', 'gimag', '*ID:*', 'JJHhl', 'OgECz', '537.3', 'strin', " remo", 'ariáv', 'tcMpT', 'jKsOZ', 'DHtdp', 'Coloc', 'ldade', "ais 🙈", 'ravés', 'Glkve', 'MHLth', 'lor=1', 'ira', "! 🎲\n┃", 'Gusmh', "ove X", 'oBot', "tema ", '12a08', 'vFtkJ', "esto ", 'NKUyv', 'ZvRle', 'RvaFC', "║✼🪻 *", '6ca03', "a voc", 'ttp5', "━━━┓\n", 'WSRzX', "R BY ", "as ge", 'FXHmw', " Rápi", 'beça.', 'irar-', 'hfdzW', 'ximo', 'vxyz]', "e fal", '98705', 'xhJDG', 'net', 'attr', 'lKgXW', ".\n\n", 'VJCyf', "a cac", 'ByKkE', "brar ", 'ro]', 'ZpLeo', 'QEXeK', 'DxIqg', 'ZRrKS', 'o/G7R', 'sHVMM', 'dRZjC', "cia\n•", 'pVFGq', "- Rem", "══╝\n\n", 'BaLnt', 'tOzYd', " GOST", " *1* ", 'WNPbG', 'CELAD', "nte i", "W ati", 'omgQD', '.txt', 'Aadrp', "rma d", "gite ", 'GydKr', 'ÂMETR', " YouT", "sos a", '_dura', 'rEEvK', 'histo', "| lis", 'Updat', "po qu", "𝐎𝐌𝐄: ", "mo: ", "o 😝", 'clone', " 1203", 'leJPd', "AND i", 'RSDSa', " *Dig", "ros q", 'laqui', " 'RP%", 'Coloq', 'ENbHk', 'AMAS*', 'KGYNc', 'gn3t/', 'MCoME', "ium \n", "to Vc", 'outro', 'VpcnA', ":* `", 'Xdiqt', 'PCsyp', 'dIUdx', 'io-op', 'addGo', 'Czech', 'vlMcg', "ock l", "et au", "\n\n📚 *", "e ond", 'hFmTu', "tui a", 'QebyB', 'ma.', "ê PER", "i air", "` (to", "iu! P", 'EnoEC', 'id-ap', " ou ", "a apo", 'luKEJ', 'Kkmvd', 'TUNE', 'KjmvK', 'ntTvo', 'qvyXC', 'oVide', 'jOAyM', '*GRUP', "25 ", "e van", "sic\n", 'notar', 'dXCqM', 'istag', "cia c", 'DmtoI', "KEY (", "IO EX", 'nhyjt', 'QiyHL', 'gznCv', "ad do", 'pos/', 'TsdAh', 'Acabo', 'SOOPA', 'WGxRy', "E FAZ", 'ti-ví', "📝 ( O", 'cOCds', 'MNySF', "lo: `", 'UajiS', "└ Est", 'stdou', 'MiJSk', 'KNtws', " será", " ou r", "off\" ", 'trar`', "hada ", "\n - U", 'XknOe', 'bedVr', "ogo d", 'oeAGL', 'ShdVH', 'TNwxp', "do Gr", 'qYRZk', 'AjLWR', 'ag.', '𝐏𝐇𝐈𝐍𝐄', 'VDSNX', '2|0|3', 'infom', 'xnsNX', " do Y", 'Xhero', 'tamp_', 'tualm', 'IYZWl', 'HvWwH', "*\n• ", 'eiro', "\n\n💰 *", "der a", 'FoTOE', 'kzAvQ', 'm/c/a', "IDAS ", '4c8e0', 'warn', 'dwTiS', "ma pr", 'DGKKO', 'DDlZc', "e ado", 'UsVWy', 'jxBeJ', 'lugue', 'UuUIo', 'tando', 'balme', 'eslig', 'Mrkgm', 'ypPRW', '(grup', "pt Ol", 'GrGK/', 'limit', "dios ", "tar o", 'SKuFr', 'guel.', 'xpXwR', "\n💰 *S", 'separ', 'kTrfN', 'NLWDO', "AS DO", 'CclpC', 'ZuhKL', '020e1', 'hquuU', 'NhbBq', "s Fla", 'RmygZ', "o úte", 'dWRLr', "ado.\n", 'figu,', "🎉 Com", 'f5a28', 'mKtZh', 'zXTEe', 'TupPe', 'oIeDa', 'OmIGK', "D𝜣 GR", 'weJbB', 'VmNhS', "ra st", ", ctt", 'últim', 'FYXXq', 'QRhIm', 'OTExP', 'auPFD', "T 0, ", 'QSjFX', 'TbWnY', 'dCNMM', "do jo", '[cate', 'ápida', 'lhXyG', "ndo q", 'fire.', 'MCGze', 'ns_ag', "e ses", 'ição.', "\n• Fá", "do o ", " -fil", 'AmMXH', 'iRJPm', 'bnXCK', 'Archi', "o iFu", 'vQmUI', 'qceUw', 'verme', " MAIS", 'argol', "Voz d", 'rbuLy', 'FdoHm', 'mMtKt', 'HJajN', 'uUSrv', "🔴 *ST", 'jnTWO', " de R", 'WokJN', 'QNgkp', 'mJels', "e Mut", 'etida', 'igold', 'lSpxH', 'OMPLE', "\"buce", 'menti', '/Nome', "á adi", 'obWut', 'ologi', " cari", "ia 1)", 'SES', "da vá", "Topa ", "edos\n", "DOS\n", "s:* 0", "ões R", "da\n\n", 'nota', 'estiv', "g atu", 'KqNio', "\n┃\n┃", '8|2|7', 'oaIPm', "\n🔸 `t", " \nFRO", 'gumen', '70%', 'gRPka', " all", 'gDNWW', "nce: ", " REAL", 'sitiv', 'arnie', 'gITVu', 'XZGsk', "o JSO", " é ga", 'imc', "a num", 'DZsYU', 'kGFrM', 'MnBGC', "ado n", 'valor', "igno ", 'urada', "r pre", 'kkJuf', 'EBtaL', "── *P", 'qSgUD', 'kKnOl', " reba", 'LgNRj', "cê nã", 'argsE', 's_res', 'Lcxkn', 'YevUq', "verá ", 'kPFks', "━⊱「 𝐌", 'SotaR', 'mfGTs', 'Creat', 'LENwW', "vo da", 'gFCBw', 'sigma', "Com a", "eus g", " dia,", 'ofBGX', 'tWjqN', "│ ▸ R", 'URODk', 'XEMPL', 'RSlWk', "por f", 'uUxNL', "s dep", 'bela-', "ou eu", 'devFw', 'WRbBL', "* 🧩\n\n", "eio!\n", "rá re", 'ível!', 'run', 'regis', 'vMqGS', '𝐑𝐄𝐒𝐎𝐋', 'mTOID', "gem\"`", 'ccWoY', 'oHCmX', 'HECxg', '-abri', 'dnlLK', 'MlThK', 'reate', "3 vez", 'IcFUj', " twee", " ou s", 'oVCoL', " 🧹\n\n⚠️", 'xUnPA', '4|0|3', 'MqRMF', 'UXaqn', 'prskR', 'ADAS!', 'lyCss', 'tats:', 'FyazO', 'FYHCz', 'falta', 'LEOPA', 'jyoyE', 'Kvuqh', "ar, s", " whit", 'Enuqd', " 5 ou", 'ile/5', "me se", '.ogg', 'ZZeaL', 'ual.', 'OBMhx', 'tlYTv', 'nador', "izar ", " Anti", 'rLcQk', 'EHJXp', 'uzir', 'RUfqV', 'rhya', "ttp E", 'NmEoP', 'teste', "as na", 'zOCKM', 'BGstR', 'tbnvm', "l faz", 'ma_af', 'ODIWP', 'HsPEf', 'HdwVy', "oji\nE", 'DahYs', "\n\n❓ *", "𝐫𝐪𝐮𝐞 ", 'ngjog', "\n🎯 *E", 'JYsxK', 'AlYnI', 'uZmht', "ção ú", 'ces', 'user,', "o. Es", 'hfnBc', 'seBOS', 'WNzve', "a dow", 'hpVfF', 'iQVlA', 'ABRIU', 'ergun', 'Fecha', 'garia', 'lBGOh', 'MNpUw', 'bgnMh', 'jKheW', 'rei', "🟤 @", "com c", "❌ O t", 'pjEnv', "nho j", 'ato(s', 'mLchw', 'UVdzL', 'erviç', "um cr", 'IOSA*', 'TwxRY', 'zgPNl', 'xtZHf', " o nú", "er me", 'topmu', "ÇÃO D", " fsti", "ro co", "mes, ", 'NTjbB', 'NbgGr', 'Mtewo', "dor\n", " por ", "\"\n📊 Q", 'overa', 'SzaDN', 'xUpEJ', " Avis", "isa c", 'Paulo', 'IztjU', "isa u", "\n📞 Bo", 'HvDcJ', " IF E", 'os/mi', 'o/7KQ', 'ficha', "a rec", '_Apen', 'qyHkQ', 'rktPe', 'YaPRx', "tes, ", "tify ", 'ZwoCZ', 'ubnEZ', 'viso,', 'qxixW', 'GSief', "⊱「 RE", 'MzwQH', 'dicVF', "NIR D", "LUES ", 'TSpoD', "📋 Pai", 'evRyQ', " Docu", "IO CR", 'SeNKB', "a url", '120m', "/Xh, ", "\n┃ ví", '*APRO', "go\n• ", "so a ", 'lHbZJ', "• *Co", "* com", 'camen', 'autom', 'kFohO', 'pbQKK', 'CdVfU', "um co", "cima ", 'de..', 'tos-c', "I. Li", 'jkgqo', 'CnobB', "❌ Inf", 'Wmusl', "\n\n\n👾 ", 'XkLeH', 'QEBev', "afa e", 'mpKwk', 'a0053', "╠➥ @", 'BcIuI', 'ícara', 'espec', 'NCONT', 'RfxKE', 'yGkCT', "iosa ", "e = 1", 'NARUT', 'lo_ho', " -lim", ". Seu", "├ 📈 T", 'INfTS', 'ktSxC', 'uKkOt', 'as...', 'bACQO', 'ZjFrK', "s usu", "r mel", 'OJGpu', "RIOS ", 'ewarn', 'UCEgj', 'vQJfC', "to, e", "\n\nPar", 'v2/le', "sal\",", "CO DE", 'ybWki', "to Do", " a ch", "cmd a", 'estau', 'ativo', "*═══ ", 'VSscn', 'mNlsN', 'aifu/', 'ha1', 'nail', 'refer', "e 0, ", 'illKw', " Jung", "ocê t", 'qtHen', "✅ O n", 'BsCwA', "*📊 DE", 'terce', 'garem', " quei", " dize", '𝐐𝐔𝐀𝐋𝐈', 'GEXdy', "E CAR", "da no", 'STBtv', 'uwaxf', 'f77dd', "usic ", "os:\n┃", 'SWDdt', 'tadas', 'gue', "off →", 'GEEwt', "el es", 'ULTAD', 'libra', 'tyYpV', '=0.5[', "modo ", 'eto', 'aBeXc', 'MpezH', 'allow', 'TYaiw', 'ZzKTT', 'vzbjW', "❌ Mar", "\n• *I", 'ffMDL', "SO\n┃\n", "00 ch", 'DXYNr', " 𝐩𝐨𝐝𝐞", 'eruWb', 'uIONn', 'IRnwq', '63025', "a dol", 'inlIH', " Há ", 'QtCYQ', 'ZmpSh', 'YzBUL', 'herli', 'ickcm', 'IkauY', "ue\n┃ ", 'gif-a', 'kpDVz', "er ap", 'nmJnb', 'NoxHs', "💰 *Si", 'gno', 'kiUGV', 'Avanç', "no en", 'uuPpL', "m de ", " é po", "ate, ", 'SVKhQ', 'WucNu', 'VDYRA', 'HA1', 'rGsUN', 'ÁLISE', 'UHxEU', 'agem]', 'ile/d', "ar pe", " ving", "bro d", 'FEFgl', 'XmMYz', 'dbmsD', 'WHyoe', "rary ", "╮\n┃ 📋", "no Wh", "📎 Arq", " PRIM", 'jKRcd', "1 - G", 'RVaaB', ", Est", "ÕES* ", 'uZjqs', 'GITAx', "em ch", 'fnojC', " em f", "- Des", ":*\n┃ ", "ro es", "bal d", "dio m", 'OMVnM', "Ver b", 'olao', 'upqWR', "os \"f", 'QMYrS', "e apr", 'OVTlq', "SO QU", "`\n└─ ", 'lidos', 'skxNn', "a:* D", 'yLiXl', 'fileN', "A DO ", '𝐃𝐀𝐃𝐄𝐒', 'dark', 'fTshY', " pot ", "ê É: ", 'elBHL', 'pUhqy', 'lo_', 'dzBRd', 'dOUFX', 'YSjpc', 'luYQD', 'BMAuS', 'djyhm', 'GBGET', 'NhVyH', 'RgCjT', 'dex', "e def", 'eAfvY', "ao pr", "as\n• ", 'SKJth', 'qdPsG', 'ESTAT', 'Miner', '|3|1', 'xycMY', 'YBjLN', "E DAM", 'avyEO', 'safio', 'IHrPU', 'rmelh', 'ZPUAG', '4951.', "do já", "\nStat", 'DUhgc', "sem '", 'iao', " @use", 'pEEBc', "a tab", 'EMPAT', 'uuowg', " dive", "A DA ", 'iMKin', 'RLIEr', 'oriam', 'mgnGp', 'NzBDQ', 'dbHRp', "a, só", 'BuqTW', "r o j", 'mas`', 'aiqFQ', 'ntaçã', 'WNfQT', 'HasBp', '━━╯', 'io]', 'yygQR', 'EuPzX', 'Branc', 'UfNTT', "da ve", " term", "pos\n\n", "\t~ VS", "* ✨", "🧠 Voc", 'iqWET', 'BHnuJ', 'EQEou', 'ncsqw', 'gnFqm', 'caRMH', 'tuqSi', "5 MAI", "ITAR ", 'TDOuO', "eu sa", 'liber', 'HtsyU', "uma v", 'sim..', " símb", " BY v", "há gr", "r\n- G", 'YQSZG', "eio! ", 'IMITA', 's/tem', 'aylis', "┃ 34 ", 'dNJQe', "s 20h", 'lhob', 'QjqZh', 'melio', "y, da", "┃ Dia", '1f364', "uear ", 'de]', 'OoakY', ".* ", 'specí', "i: ", 'eJuyD', " obri", 'SViWe', 'RuOse', 'WOIZT', 'dEDDg', 'ória:', 'UAYkG', 'Death', " ls -", " mas ", 'YlSSW', 'haçad', 'ihVbr', "e inc", 'MhnRu', 'AQYOp', 'AEFod', 'aiore', ")\n┃ 4", '/alea', 'espno', 'hNrwR', 'crimg', 'IlXLS', 'gSlxB', 'yJWjE', 'qWvyN', "\n🔸 Mo", 'xcKnU', 'BSuNQ', 'Cozin', 'mkgtD', '*Nada', 'NOZEO', "do! U", 'ZJPbd', ".hrp ", "RTE 🎡", 'VrquW', '/pret', 'ICwJN', 'packf', 'LVcIN', 'HntRu', 'smiss', 'NeELO', 'jWAxh', 'HhoaI', 'nLqTm', 'WqAEX', 'CfOgx', 'usOrd', 'hQOsl', 'lQpPI', 'bMQPM', 'Menor', 'DIDO)', 'telis', "ar) d", 'jnkrw', "e as ", '_CONS', 'CRkmk', 'vado,', 'rrado', "A ima", 'KEnrl', 'rTYqV', "*\n💣 *", " os v", 'psm', 'ídeo.', 'kltSU', 'upZXk', " 🏅 4º", 'nTOci', 'XVfBZ', 'LlMuW', 'RgSJw', 'aILMG', "/30d ", 'jwOJP', 'RROR]', 'chaça', 'VOS', ':00', 'VVlEX', 'XMBAN', 'CMDvj', "ue eu", " atlâ", 'cnUKA', 'arafk', 'SPLSp', 'CLoPr', 'aYihu', 'WJaPD', "i Cha", 'BxwYF', 'aoEjm', 'SuubW', 'aQduT', "ve re", 'usuar', 'mute`', "eu: +", 'LkukK', "unca\"", 'IoqcC', 'NjIcj', 'xVpUB', " 5000", "tico\n", 'ANK!*', "Ex: 1", 'DSID=', 'ALtgC', 'dvnTO', "anir ", 'forwa', 'ceSPD', 'tema_', '/Amii', "ico: ", "cia p", "🏆 *RA", 'book', 'DqbCJ', 'TDmHd', "TO me", 'aKiSd', 'DyxvE', 'exibe', "ibir ", 'acert', 'oEUGl', '🚢👨‍✈️', 'Imign', "ins d", " ver ", 'o/x6z', 'GLCYx', 'Mvtyx', 'wOytT', 'xMcOz', 'HcwqP', 'gzeVB', 'KWUJG', 'mTfoj', "a: En", 'dfztb', 'CTmdV', "mpo p", " do G", "s = ?", "as nã", "):* s", 'PUnKu', 'TROLE', '|5|2|', 'WsQHQ', "r não", " / ni", 'ORMAÇ', "ja o ", 'ca-mg', ']atem', "údo n", " Áudi", "𝐄𝐋𝐇𝐀 ", 'meStr', 'UGXXK', 'ozozp', 'ÔMICO', "ma ca", '72202', "e mui", 'QhsnF', 'DOksG', " INCO", 'ANIR', 'nQXNa', " ou j", 'subtr', " *DET", "iu fu", ", PAR", "re o ", "*Tem ", '•CID∆', "a 1mi", "ro en", "ot em", 'oes', "dos s", "elo s", 'PoyOh', "s sep", 'ZtsHz', 'palha', 'MDhSw', '(is_g', 'BgEqP', 'ens):', " paym", 'eral*', "de in", 'skbRj', 'ngar', 'ljWls', "ta)\n•", "• *Es", 'MaroU', " !jog", 'yjGor', 'panti', 'conqu', 'ywAIx', "do = ", 'ook_v', 'Coofu', 'XdgFZ', 'ErSNt', 'coOtT', 'AydsQ', "pero ", 'YvIiB', 'ker]', 'AÇÕES', 'YNZRm', '`admi', 'TTjYr', 'JymHj', "no gr", "ི⋮ ྀ ", 'rto', 'vnwqe', 'tvIvA', 'upo', 'UNkPW', '0,18:', 'BhwFA', 'OJpmw', 'jOeBA', "só AD", 'IVO', 'zgHzo', 'tkLEv', "r:\n┃ ", 'XUKvB', " ONLI", 'NCoxI', 'sdwmD', 'KYvln', '.mov', 'ShFIp', "━◉\n╔┉", 'WmSlC', 'MPPqQ', 'mqqpk', 'criar', 'nfScz', 'VmfAY', 'gPLgt', "op!* ", 'ZdiXp', "a (15", 'JuhUl', 'uJFDz', 'mNWyN', 'DmOoN', 'GATES', 'IUoBO', "nte. ", 'ter', 'Sourc', 'ROcnp', 'tomat', 'quKvo', 'rtilh', "│ 🖼️ I", 'MCwFW', 'sFJgc', " cons", 'INEZ/', "│ Env", 'ium:', "h\"`\n", "ir, f", "ate q", 'oSufZ', '/2.5/', 'Erro,', 'iuKKW', 'TKCMw', "da Co", 'ilenc', "me pa", "na a ", 'bxFIS', 'YlkJE', "p4 [n", "ra ", " ✅ Re", '99540', 'desej', "g -st", 'dENrY', 'IDENT', 'izar', 'UfiHF', 'BvECK', 'LsNGl', "o\n┃\n┃", 'BWKqh', 'NRkgG', "so se", '3|2|8', 'LMUGR', 'UqyEw', 'pVqUK', "𝑂𝑀𝑈𝑀\n", 'setcQ', 'edite', 'iwGSG', "em um", '04595', 'bugs,', "420p ", 'olhzd', 'SXTeL', '/101.', 'FhKHG', 'PNnGq', 'nados', "m a n", 'BovkC', 'Recus', "o due", 'rgy', 'eMCTs', 'PGfXh', 'ehu-w', 'WJmdh', 'tyvrF', 'jzkmX', "s, ti", "d INT", 'OZiah', 'estão', 'DVbrD', " (id_", '[marq', 'rgkOj', "⊱「 💕 ", "l tra", 'vZ3d/', "- Em ", 'nFqlM', 'pwTVU', 'wTcXA', 'lvAVi', 'usar:', "iar: ", 'rJYJD', " um\n┃", 'WbUWw', " `ant", 'VeIsD', 'HGwBV', 'tenho', 'pHktI', 'BRMQz', 'tada', 'AQfyx', 'CIAIS', 'VbwQv', 'maria', 'XkjHL', 'Proce', 'zoCpX', 'nKLdH', "mp, i", 'tos!', 'PfhqB', 'Acele', 'HCGiS', 'fqiEl', 'entár', 'ecidi', 'maEGD', "xo al", 'WSmMd', 'IqdkI', "do. U", "\n🏆 Pr", 'QzyvG', 'pZkRG', 'ionum', 'TYure', 'TgGje', 'AuYwY', 'rde.', 'rVPGr', 'PntBQ', 'LbLZm', 'tgegw', 'dSMgK', 'pJgJO', 'EUJTt', 'Syngh', "dora\n", "ta um", "deo o", 'qPNyS', "e amo", " invá", 'Ponto', 'nal).', " na w", 'sTVaZ', 'nHtGA', 'hGUBN', 'IqvMO', "[ Pro", 'EEzsG', "e ani", "el: ", "Olá @", 'FUjEw', 'encur', 'XQKlV', 'CZrgB', '://ra', "\n🏷️ *T", 'link2', 'vSyOW', 'GOLPI', " A ch", 'JFGJL', 'LINK_', 'azxAs', 'iEbVz', 'WbRKS', " ⏳ On", 'oFQXu', 'temp.', 'HnMCF', 'PoYQT', 'STEMA', 'brinq', "es cr", 'iMidE', 'oktqh', 'TIfZV', 'KaSVn', 'Simul', "mas f", 'RuhNC', 'thumb', 'ycXPa', 'kPFYh', "e Avi", 'nslat', 'Iptnw', "vo:* ", "]`\n\n🌍", " 🎰 ━━", 'BaCAh', 'ycRsc', 'BhFRy', "S COM", "☠️ @", 'MnzZO', '👨‍✈️', 'gQvGK', 'OEzqJ', 'eImsE', " ), f", 'Adeus', "o gên", 'alhaç', "te di", "l, pr", 'Insir', 'NOVAÇ', 'sXWYK', ") det", " meu ", 'ekGPl', 'mage', 'yUPra', 'lRUxr', "e exa", 'lida!', 'NTUAÇ', 'Opnpg', "m eme", 'MxTLF', "─┐\n", '//cha', 'list', 'fpsma', 'mpens', 'ormas', 'pink', 'ZLvwY', "\n╔═══", "┃\n┃ P", "e\n┃ u", " e 2 ", 'xante', "m cha", 'vado!', 'ERRO,', 'XGBwG', 'kLrUW', "+ Com", 'AVzxx', " a ta", "🖼️ Arq", 'colar', 'VqjMC', 'mite', '3|7|4', 'merad', "E CON", 'bVASt', 'Cspsc', 'hAZdj', 'QZjST', "m bol", 'hIjeH', "t sai", 'oXsvb', "e [al", 'USLMh', "lpe, ", 'CBKiz', '*IMPO', 'rário', 'Mkkmp', 'EhJNP', 'band', 'GKpIO', 'hMdoi', 'tUnQk', 'DULTO', "aura ", 'r&tex', 'RqcMz', 'JcGPl', "te em", '30%', "- 7 D", 'HYtLO', 'ZmWgo', 'VjLCD', 'ywyFg', 'gtts.', '_type', 'uncio', 'fwNez', "🏆 *", "⚡ *PE", 'TOeEG', "cê se", 'ze=30', 'AGvyy', 'antia', 'LROuj', "ou be", "𝐀: ", "isa a", 'JbZKD', 'Recar', 'po!', "ng* o", "O arq", 'oTvFG', " ❰ Pe", "o: A ", 'bybmH', 'Epohg', 'WAPHe', 'fzbDR', "Mata ", "up do", 'aca', 'PvPGV', 'engra', "ASC, ", "ê est", 'qUZRC', "BIG B", "LIKE ", 'Sempr', "e ser", " loja", 'pleWe', 'pcrMO', 'FfqbQ', '𝐄𝐌𝐎𝐉𝐈', 'dono2', "io ad", "IA:\n╰", 'MYwyq', 'BRANC', "S MAI", 'abili', "te só", 'eDjCD', " ེི⁸⁸", 'shipo', '/gith', 'PRPpd', 'inand', 'bbaLC', "o fin", ", Cat", 'slow', 'getEm', 'uTQay', "o / P", 'orado', "bot [", 'uCuGF', 'cache', 'CKSIU', 'jxhEd', "e usa", 'znyYT', 'bEoHN', 'dades', "𝐑𝐓𝐈𝐑 ", 'on/of', 'rzjiN', 'Ditff', 'IrDhJ', 'ty=71', 'RgdqH', 'EhdPk', "• Mai", 'delos', "ship ", 'oedas', "não d", 'hxoOU', 'gremi', 'itou.', "o(s) ", 'ihIkc', 'aoTWc', 'rfuIC', 'LEnuI', 'uPzGf', 'yjCyW', 'ProHx', "sou o", 'ugNzN', 'cattx', "🎮 Gir", 'sIBoX', 'ThoKA', "/[id ", 'ontec', 'zGaJu', 'Dutch', '48000', 'ybyZi', 'ZMZAy', 'ação)', 'Ubkpt', 'DaeRg', '_coma', 'KIgHb', "ot mu", 'kSTlX', 'DcWID', "etam ", "m tex", 'fgoJV', 'vDwcx', 'mato:', 'Huryr', 'ndada', "ud at", "tão e", 'rudxv', " coma", '8031e', "ECT C", 'xTjhC', 'LESfQ', 'qFPpR', 'MqubC', 'swZqg', 'ZSAAK', "lisa ", '51199', 'WnuPP', 'usu1', 'ouFIO', 'uivo.', "❌ Pre", "o 📝", 'wOjKc', 'pican', "ve de", "ldo: ", 'OXrBY', 'nIJuA', 'RMJoX', "a açã", 'XlLyK', 'XySQl', 'INFOR', 'anegr', 'nUmVw', 'MHVts', 'xgWbI', " nume", 'FYiTu', "E FOR", "stra ", 'hfxkD', 'UdLwu', 'yWvxB', 'nagDj', '𝐈🔥', 'lCZWn', 'ELACI', 'limpo', "ak, t", 'xJgLf', 'kCpyh', "A*\n║ ", " POST", 'hmyjD', 'autod', 'wVjjV', "m voc", 'DhUnq', " morr", 'RaSiZ', 'iuItZ', 'oEPQH', " e um", "Qual ", 'wTNcP', 'avUkX', 'MHixX', 'MHKIY', 'tre', 'ZhNOq', 'vOWaA', 'UXsZa', "TML, ", 'fpmau', "\n║\n║ ", 'FijJd', "1 min", 'fmlHG', 'pSJOd', '15f85', 'kvbyT', "ra qu", 'bfkFQ', 'lGqP0', "👋 *SL", 'oyMDe', 'nNMth', "⚠️ Err", "a o o", "📱*\n \n", "✅\n\nRe", " Play", " BY i", 'mAfnf', 'gpYpg', 'gJsNN', 'idas!', "m ser", 'MBYCI', "if ou", 'rpudr', 'ZtvWp', 'yfpXu', "ia: ", 'o/cha', 'lavra', 'entam', 'zMKva', 'MttOu', 'mSFXe', 'ZgiUW', "ro: @", 'RaBcL', "ela c", 'acao_', 'BPuRq', "rá an", 'BDwmi', 'hekPV', " Quer", '══╝', 'promi', 'ZXqtV', 'KQltq', "❓ *SI", 'KDorM', 'ld.', 'striç', 'auCJL', 'agtMo', "cmd l", 'wBWaZ', " Stre", "S ppt", "o2 ", 'dias)', 'esUjM', 'GgVUd', 'CwJeY', 'bAqWR', "x \"[0", "ões:\n", 'LxtIb', 'efnbg', "bal u", 'o.jso', "\n┃ ⚡ ", 'pGFRP', 'cGtBZ', 'npDiy', 'sou.', 'SkqDF', 'haDyO', 'IFvuz', "ar ví", " | 🔓 ", 'hSSTG', "\nINSE", "✅ Ant", "OS 」⊰", 'JOVyW', " é be", '4|6|0', "em 🖼️", 'Peque', 'VVnZq', 'qDayH', " de r", "rme u", 'dvGtb', "• *", "OAD P", 'ANdsh', 'CqYJF', " ou i", 'IGURI', 'iedad', 'ar.js', 'kings', 'mix', '0-163', "r o l", 'ctLTs', 'EQqZU', 'anhou', "┃ 🔑 *", 'goldp', 'YeYHE', '═════', 'roups', 'ruZnM', 'nMIkC', "go en", 'fijIr', 'KjntX', 'Carhb', '*List', 'NXjdQ', 'ile/1', 'algem', "┃✼❄ @", '--psm', 'GsAVL', "\n\nObs", 'SHINO', 'fect!', 'o/qyr', 'lqMQX', "á ger", 'qhtwq', "RE en", 'FUUqL', "⚠️ Est", "s [ca", "mas d", 'nTmNS', "eKey ", 'rKXmP', "EGER ", 'msg-a', "🖼️ *Ob", 'eJpwJ', "e *", 'DKGIa', 'angei', 'ist', 'dEjWr', 'hrOyn', 'PkUkH', 'ITADO', 'o/DCT', 'arece', 'lCANU', 'tkwOr', 'kHKBe', '/Me1a', 'strip', 'yURFa', 'ZlTxb', 'eqfWM', '[v];[', 'ma_fa', " Paga", 'aLwMG', '1|0|5', 'UZStX', 'reu..', " util", 'zQefQ', 'joKeu', "ɢᴀʏ🏳️‍🌈 ", "ai do", 'SORTE', 'VJjao', 'EsDea', "━━━╯\n", 'XsQDk', "* | 🔓", "o`\n", "co!* ", 'nal)', 'uXkMN', 'slowv', " 25\n💡", 'TNPnb', 'ᴜɪ́ᴅᴀ*', "á tá ", "inal ", 'DpjAo', 'OYBVG', "upo (", '𝐍Ú𝐌𝐄𝐑', 'cmmHf', 'le=it', " Eu i", 'mZvOO', 'AisTX', " Spot", 'RkhLX', 'iUMkA', 'nmGEe', "do no", "ar fi", 'wgBlZ', 'mBnZh', "umo g", "m \"ca", 'VELG]', "..* Q", 'wmJCN', "o aca", 'nuUKo', 'ensag', 'ce!', 'tirad', 'tenci', "┃ • V", 'GVmzv', "or! 🎊", 'arde/', 'mOyCK', 'aohrG', "m\nSta", 'rupo_', " JÁ ✅", 'CIA', 'Axnyp', 'WgebS', 'CMNWS', 'handl', 'poJNI', 'vUrHQ', "tre 5", 'dfwjq', 'LneQT', 'ceAll', 'es_gr', 'ações', "❌ SÓ ", 'csVxc', "📖\n┃ •", 'ttp9', 'QFsub', "\n- Pr", 'aQlFh', 'sDvet', 'CYuqo', "* 🌫️", 'yIrWu', "te um", "o: do", 'zRprt', 'FYCyO', 'rios', 'href', 'vVnSB', 'vmKcl', 'dDJuE', "💡 *Ex", 'rudcJ', 'tário', 'isLev', 'FySmI', 'TgeFF', 'WuWtS', 'QElUx', "le De", 'ipal', 'BxNFd', 'ENaGF', 'NfiRi', 'ApgPc', 'o/bra', 'ar]', "RUPO ", 'MvpxT', 'tvCZA', 'OHAhu', 'cript', 'Zmhxd', 'Uuhgv', "\n\n❌ N", ", 2h ", '--lea', 'MkGyz', 'ompen', " paco", ".\n💡 J", 'pqGyH', 'DJsYJ', 'jWnNa', 'ns/ar', "l' pa", " mata", 'xMUAe', 'cixNt', 'qOotY', 'EJMsZ', 'LFBDg', 'desfe', 'qunvf', "ro an", 'opcio', 'wSbxK', 'le.co', 'cKjsC', " 🥃 ━━", 'orRmE', "prar ", 'gKoDN', 'uCtiO', 'RvGoN', "ja ex", 'icarC', 'IYvuU', "🌫️ *Bl", 'cPiNo', 'reak', "cipe ", "ico (", 'dOiup', "ove b", "do re", 'nzPRp', "s, te", " 5\n\n⚠️", "ios d", 'eset', 'tômag', "\n┏━━━", "iv au", "[🦬] ", 'pGpTJ', "ões X", 'DhMfp', 'JevtN', 'VQjxo', "ar\n┃\n", 'ferra', "D do ", "DEIA ", "S CON", 'zAeOe', 'voaSt', 'tsapp', 'mhDBg', 'TlGHm', 'STBqQ', 'etiçã', 'CPxZv', 'peg?t', 'YgfmG', 'jxyOf', 'LMrSi', 'XFnjl', 'Xvreq', 'ximos', 'XLqLT', 'XYZvQ', "mo Fu", "e ele", '──⊷', "dia d", 'PGtQz', "📌 Adm", " modo", "de ga", 'ZoLnU', 'MbGAP', "ar`\n3️⃣", 'jfgsR', 'arabé', 'hpzBd', 'cudo,', "ara n", 'IZzwT', 'RdBLD', 'flore', 'pPmwM', 'dinHr', "o dad", "a os ", " infe", 'ebook', 'TQbNm', " o us", 'eOdXV', 'VNFoR', " arti", 'EmyXP', "do`\n│", 'qUiEa', 'sador', 'uel:', 'dHJwE', 'oad', " 10", 'vQJQL', 'pyvlK', '@mari', "le pa", 'JGvQc', 'iBQRh', "es ID", 'kSxmo', 'pBZGy', "os ef", 'amazo', 'uzCtw', 'YKsOp', "\n┃ Vo", 'uguel', 'apike', " ❤️ @", 'VDJRI', " (ex:", 'DKNXj', 'tiplo', 'Uwhyl', 'JeMxL', 'Tenho', 'ImyoK', 'ZAztK', 'lIknT', 'pbBiL', "└ Nen", 'BIROs', "o GIF", 'RHccT', "as ou", 'Telef', 'NwUaP', 'PydET', "\n❌ *V", "🌐 Des", "*\n\n🎯 ", 'adv', 'CFeBj', "s hpa", 'oBaPp', 'flame', "xas n", 'sages', 'apaBM', " emer", "╭⊱「 C", 'zBxzx', 'VkaEE', 'total', 'OMUNI', 'CkrVa', '_nota', 'xDqGW', "a 1 c", 'nyMCK', 'AGIBt', 'LnKVN', 'Bpxlf', 'dGWoZ', 'rátic', 'Seqru', '𝐀𝐑𝐓𝐈𝐍', 'oader', " a jo", 'share', "\n\n*Fu", 'xykGw', 'aVmqu', 'utado', 'QcWJn', 'erv2', 'TIhrF', " > ? ", 'nMKMa', 'ThWzR', 'tivad', 'RqIwZ', 'cnlWo', '.vip/', 'dFAfH', 'CAtPm', "or pe", 'flKJE', 'ivo:*', "ado]\n", "* 💀", "ica o", "ns ex", 'pp.co', " char", 'sRQUD', 'NwZJb', 'ZkAmT', 'yPgiV', 'ltnyT', 'CuBUh', "de pa", 'ysOWG', 'Sypzd', "a dad", "o Gol", "🥷 Voc", 'qoTDr', "tes c", 'CZxLE', 'lGTOi', " APK:", "zar t", 'TFyFQ', 'arXQn', 'ontin', 'w/gif', "` → V", ": de\n", "o dif", 'CbPRT', 'JoUFr', 'NdEle', 'vXsAf', 'wXybV', 'fsyFQ', 'nWWZZ', 'CEKFG', 'mZwAI', 'TaSyq', 'AFxKr', 'odere', 'ctRXw', 'cCiVB', 'XkzLa', "ETA D", 'nceme', 'eVySz', "CEU! ", 'TTYHh', 'dvtmI', 'zCfem', "bter ", "┃ ⏰ S", "𝐑 」⊰━", 'yEfqU', 'IiBLg', 'mVtAV', "S UM ", " Apos", "\n\n👥 *", "ores ", 'BMsBL', "zar o", 't_par', 'SWnNj', "es!* ", "ito n", 'nXMoY', " 𝐚𝐝𝐦𝐢", 'som', " on", "a (10", "eja d", 'QLcOT', 'iZVMD', 'fyIpf', 'jbqDP', "𝖠𝖰𝖴𝖨 ", 'ndice', 'lucra', 'ahXCe', '4rm1f', 'llyKr', 'VlkPW', 'file', "┃\n┃ 👥", 'pPqEl', 'QEplv', "por t", 'ty=0&', 'zNipN', 'setLe', '0000-', 'iorit', 'rOPLZ', "a Lop", 'JdceJ', 'fmcxe', 'LDoNi', 'bjVXv', "X é o", " ao e", "down ", 'statu', "\n┃ 🏢 ", 'Japan', 'cmPaZ', 'ntaxe', "img, ", 'zkVvO', 'qybpj', 'bncZV', "S EM ", 'rgênc', 'pZuYA', "idas ", 'otaçã', "has r", 'YzdWn', 'yHHdf', 'lta!', 'icsCv', "imc p", "ivo: ", "ar da", "a rou", "NDO R", 'PILsV', 'aça', 'nslyk', 'statS', 'dOlFl', 'xvWth', 'ttp10', " *Cat", 'DRHdE', "g nes", 'dia..', 'UoxHz', 'pMZPF', 'mbret', "por c", 'kBooh', "✅ BEM", "ink\nE", "tiv x", "\nddd:", '9ipOb', 'ghyHz', "└ Cas", "or, F", 'HbPpm', 'tura.', 'yYvNR', 'mEJqt', 'vSPcz', " carr", 'das/e', " Mulh", "ens, ", 'wFTJo', "utro ", "os, T", 'FISSÕ', '1|3|5', 'dados', 'tcYG/', 'rOpqy', 'ajmCV', 'dono.', 'FutvX', 'irACP', 'wkbiS', "\n❌ *S", "d FRO", 'nUyRh', "ução ", "TE FR", 'ipika', 'mesta', 'VYfSv', "📝 O b", 'nrZva', "me de", 'YtmFU', 'eight', " desl", " À WH", 'TDcrE', 'flat', 'JqxpY', 'YknUq', 'WeGHb', 'udHRD', "r até", 'wATqF', "onar ", 'reboa', '.ph/f', "sira ", 'textM', "⚙️ *Ti", " ele ", " stic", 'rbole', 'zrinu', 'AfPHc', "po ju", 'aBgpt', 'glimi', "o pes", 'sound', 'tCEwd', "é ou ", 'KbJNZ', "📖 *Si", "go on", 'asLwt', 'oro', 'DKPvh', 'DuStS', 'ento*', "⚙️ *Op", "tre t", 'YuhVO', 'ico', 'jCybt', " port", "ue so", "ker: ", 'er_au', 'RboAd', 'da_co', 'ptBnc', 'receb', 'CxCRv', "quem ", " Atua", 'uGEMG', 'Eiiuf', 'qujfd', 'hncTL', 'genda', "am su", '_proc', "os At", 'imih2', 'euOkT', 'EOQoy', 'aMFGe', " de f", 'GQnsV', 'mwRFS', " | 📅 ", 'TiUMo', 'nt-di', 'hCFuv', " PACK", 'lLhPO', 'nagi', 'cbWxf', 'ghJli', 'CONTA', '|0|3|', 'HrgRB', 'kvRqS', 'lTiut', 'io)', 'das1', " de 5", "「 @", "ia. 🥰", 'AnrUS', "es, l", "ete o", " no S", 'vela', 'TgbEt', 'BZKyt', 'ebaix', "LT 0", 'yqIsl', 'Algun', 'almei', 'hbHGC', " 【✔】ʀ", 'yCBjA', 'WKpii', "𝐨: +", "o = 1", 'ol.co', 'KmpLB', " inco", " OF O", 'Wnckq', 'tring', 'YomYu', 'eng+i', " → 🔓 ", 'kOOAn', '00*1.', 'yUHUa', 'Qjoea', 'ysMrD', "são t", "ipo ", "𝐚, 𝐦𝐚", " ou a", 'AoSRe', "ão pe", " \n\nPa", 'HprZz', "ou \"d", 'ughaG', 'oISGP', 'JHihl', 'divin', 'GREYS', 'oxKjR', 'vHADy', " = ?,", " chut", " proc", 'JVhZm', 'nPdpn', 'QxTvn', 'qyXuz', 'HiKHb', '0|1|3', 'MQjNL', 'ivo)', 'VZXzd', 'teado', 'tFrDp', 'hlDzQ', 'cTtKe', "ar as", 'gNZLS', 'o/sJb', 'QBVeH', 'hAySl', 'PARAB', 'ByrQA', 'NNIHf', " MEU ", 'DsIut', ": `da", 'OMjhL', "ir do", "u /Xm", 'aAZXV', 'ekdDF', 'IOhXL', 'JhvqF', "ara \n", 'KErwX', 'AwLwf', 'ClSQC', "\n• Pe", "ara e", 'PhCiR', " 🍻\n┃\n", 't-ffm', "\n╰───", 'PMrhN', 'rgtm', 'GmLzD', 'blowj', 'siste', "eu ao", 'glSIE', 'usênc', 'ngo', 'd-lea', "ão Re", "dor e", "zem c", 'cNvhh', ": +20", 'KfkhB', 'bTnUt', "ink, ", " 50 G", "tro m", 'guVRV', 'OOChH', "_id =", 'FhxFX', "tar r", 'Simi.', 'zodia', 'NdZSb', 'dor', " Sald", 'dir!*', "🎲 Rol", 'tHAEZ', " ✔️", 'xDPMp', 'iOVvh', "ais d", "o esc", 'yTUiM', 'DuKbU', 'QoMPS', "o Goo", 'resso', 'yMhfG', 'HjIsY', 'IVIDU', 'krtFc', "eo do", " rest", 'KdqjY', "🙏 Obr", "por d", "gold ", 'Bkjhh', 'mhgRY', 'uKKYm', 'faxkb', "co da", 'XxYyh', 'figs/', 'lEhdo', 'lUKNk', 'Uciys', 'mandM', 'a/%20', 'rante', 'xGMrO', 'BEQHk', 'sVWje', 'WNnWu', 'kaXEC', 'fatPj', "ono [", 'idyGc', 'CuaXh', 'tVTIK', 'CngZQ', 'ntre?', 'YNcYz', "to em", "das s", " 」Voc", "te el", " ENFE", 'pbpSr', "ia di", 'URhSy', "❌ Des", " ae v", 'Númer', "da fi", 'faPvY', 'uNRoE', 'del', 'jfgEI', "ou \n┃", "\n⏱️ *T", 'har', 'KifyQ', 'slNhE', "e-se ", " prof", 'agant', 'izarl', 'RADO!', 'TatMj', 'views', 'twits', 'FiAAD', "er pr", " Gato", "tudo\n", 'rpPMt', '*Velo', 'byDvW', " *2MB", 'ra-de', 'nJQxh', "dos d", "\" par", 'KzHcq', "ou an", 'ADjXj', 'oundc', " gent", 'JQJEf', "m\nExe", 'Yluds', '/YY', 'lor=0', 'qDqhl', "⚠️ Por", 'LaWkf', 'lusa,', 'KSmIR', 'tvrhL', "er re", 'o/6XG', 'xeaIC', 'antif', 'ram.', 'cgwpI', 'KJPpe', "✨ Ima", '°ೋ•❖═', "𝑶 🖥\n3", " GitH", 'FKzxg', "da\n│ ", 'S🚷🚮🉐🈺', 'UvGKD', "r púb", 'dexge', 'sMWxv', 'oid.p', "\n⚡ Bl", "bot e", " rela", 'jaUAA', "m tem", 'GnzsO', 'Gysbs', 'aPIUR', " a pl", 'xfYuh', "🔸 Des", 'te-no', '=o:wi', 'HjrFr', 'llhim', "ória ", 'bindo', "s dif", 'ética', "\n🔧 Ma", 'tify', '/sys/', 'eDoAr', " o me", 'RLsvZ', 'cture', 'Vid', ", nem", 'bJxbJ', 'WHdgc', 'intro', 'VsPmB', 'vyfCW', "📝 *Co", "└ *Cu", 'OBAjo', "do\n\n🎁", 'wgdmF', 'turas', 'ayNam', "viar ", 'CjtjO', 'YjwXi', "o don", 'yFNvp', 'htBnO', "eme g", 'GHAtE', 'nFYfF', 'ecuçã', 'NMxBC', "o! 🛫\n", 'MEXXR', "ta`\n\n", " RARO", "\n💬 Me", 'e=441', 'bNXBD', 'ATUS:', 'FN:🚸⃪֟', "ar li", "da\n\n⏳", 'rio(s', 'c4439', 'bKsLS', 'Provo', "* 💥", 'IrbPf', 'yzlsk', 'YTozD', 'jrKlv', 'pjXhi', 'ings', "IS GO", 'da_lo', 'axWoE', 'itlxq', 'ireta', "na fi", 'PqyNK', 'wFhPw', 'aZfot', "tras ", 'laHxd', 'y/mem', 'olhim', 'tists', 'JKzus', 'D6247', "to fo", "e\n┃\n┃", 'lXrmQ', 'ons/', 'wrXUX', 'sões.', "📦 Ver", "Gera ", 'IQhbw', "idas\n", 'artis', 'sao', " digt", 'PIGGY', 'e/vid', 'bbyFy', 'awQcO', "┃ • ", "o. Te", 'ivBwQ', 'entar', 'kQGLe', 'aVOGd', "┃ *Fi", 'MISkY', 'CUnqP', "7d\npr", 'SxRsE', 'PNEFa', "O] ", 'WxRkD', "ibe m", 'Proíb', 'kNqck', "SSÃO ", 'mtSUv', 'nSmbP', "jis d", "de, A", 'OOBFF', 'bApkw', "ero m", 'da_au', "d) as", 'Elogi', 'MjwIC', "🆔 *ID", 'vglCf', 'LYvFg', "or se", 'rneça', 'ciali', 'uTugo', 'oqACX', "7d\n- ", "• sta", 'hxeOw', 'DfCke', 'AfNen', 'QuAtR', " 🎉 VO", 'rma..', " se o", 'evSSM', 'OubyM', 'vdaPy', 'tVjjp', "*Ops ", '[link', 'VhnSU', " acei", 'viand', 'Erro:', 'nLNLR', 'cvvLv', "as um", '?s=cl', "nar q", 'IZlSP', "\n\n*ME", "l hor", 'VLZZO', 'beRjz', 'KEhCL', 'RPwYu', 'subvN', 'erInf', 'sOsrV', "ia op", 'Hutug', "rado ", 'StBxf', 'Yulyt', 'FCNno', 'WhIzE', 'aixo:', 'wsoVE', " .rem", 'seeTo', 'qJzLd', "l ger", 'lcRPu', 'yAnno', '/zipb', 'setfo', '𝐡𝐚𝐦𝐚𝐫', 'XesOi', 'VSbGG', 'penai', 'OiKSf', 'PetDA', 'GaVko', 'NkdjC', 'Próxi', 'ZrNgJ', 'fblRl', 'is_hp', 'zEjLG', 'fjTso', "ra jo", 'ctsJY', 'casal', 'dEaKd', " 110%", 'o/MRX', 'qHIEm', "e blo", " ínti", 'ilare', "om se", 'ISPON', 'NWWXz', 'qALof', 'VCFgL', 'UBPPM', "` não", 'JXtwg', 'aSmXR', 'iAHYK', 'rel-m', 'FNsYS', 'ze=25', 'esafi', 'lLTjv', 'vTpRZ', 'aGBFm', " 9722", ".js d", 'shipp', 'jjWBx', '@user', " \n┃ 🎯", 'cPmRw', "ivo'", ':minu', 'pRvim', "ão ma", "tá at", 'Wymji', '༺◈✼🪻✼', 'pera', "nu an", 'eNoHo', "ar pl", 'map', 'lpEke', " isen", 'OmVGc', ": `", 'eyCGG', "*「 ❗ ", 'vo).', "va os", "\n┃ 🔮 ", 'nantk', 'euPbs', 'TRADO', " 👥 To", 'kobot', 'kWbxp', " dele", 'SHXwZ', 'ndame', 'YQoWS', 'MrWkl', 'gtlyY', 'DlvSR', 'ccCIq', "go Co", "┃ 💸 D", "🔹 *Ou", 'LWGQN', " ativ", 'iogol', 'magen', "ot: 🪻", 'rkAHH', "aso q", 'DdmJV', 'fxiwP', 'GwzJe', 'uXJLQ', 'LYMPU', 'upAEm', 'hLpUc', "ias d", '/Egri', 'cruta', "a o q", "o\"\n• ", 'fxOxW', "ra ro", "RD OF", 'aRzAc', 'each', 'DWvRv', "o ser", "oji\nf", 'ByXOQ', 'UHPKK', "📺 *Vi", 'iCqoP', 'nisTr', 'sento', 'sas', " orig", 'ucCeF', 'tável', 'ltado', 'remoc', "em de", " 💡 Ou", "k WHE", 'ECUWg', 'YFnPZ', 'sobre', "🟤 *Vi", 'xZmDf', "𝐎𝐕𝐀𝐑 ", 'apare', 'ZpqtT', "S 💕 」", "r not", "ld no", "ings ", "OURA ", 'TlRfJ', '65a64', 'TcNKn', "ero v", " pers", 'UVLsS', 'aEXpF', 'Bane/', 'cEumP', 'VMfCm', 'XUIOd', 'vdXpC', 'ntera', "lo em", 'sar:*', "*No p", 'GERAL', 'yYOqI', "ços`\n", 'sRdyn', 'local', 'PjOWv', " form", '-ss', 'tBHjk', "ntos\n", " sere", "sar s", '[usuá', "iar a", 'VyMCu', 'CRlNP', 'x9_pr', 'AOcZr', " • Re", 'SaAHD', "t res", 'quinh', " (24h", 'YkOYZ', "ou um", 'stema', 'eVadW', "nte.\n", 'subsc', 'bzbRH', "\n*📱GU", 'pAgeO', 'CJNWn', 'Bmuhy', 'PhgzS', 'MKovQ', 'style', 'itada', 'mzqAu', 'jbXSr', 'tes/f', 'itará', 'hDZQB', "!* 🥰", 'getFu', "irgp ", "* pre", 'VqDPS', "rio n", "odos'", "ᴏᴍᴇ:\n", 'izUdB', 'vido!', "m val", 'ggVka', 'HnGlH', 'ndzZb', 'Dexbd', "r adm", 'OLiWc', 'GfTEf', 'ESENT', 'ual', " mim,", 'kaNMB', 'anute', 'erios', "e\n• `", 'JhlRz', 'lceAW', "com `", 'omUse', " MINE", 'eceba', 'bet', 'NÇÕES', "ite d", "tou t", 'im??', "ir ne", "não é", 'Mi92L', '|QUAN', 'Relig', 'humor', "is go", 'QTUOq', "TES:\n", 'RRvMv', " os u", 'aAjkn', 'sível', "] pal", 'kGprH', 'rZmAz', 'tSaSb', "] [se", 'maxRo', "k dir", 'URQgI', 'iGlnJ', 'NuAtZ', "nto c", 'ÇÃO*', 'xNJcq', 'UKoUm', " pt (", "is do", "Cep: ", "k [li", 'TxerZ', 'rPSIB', "🛡️ *Si", " • En", "a o l", 'gIkTi', '|2|3', 'siDuE', " / ", 'dCkkH', "Sem d", 'ht=70', 'dcfYr', "Mais ", 'ticam', " Hora", "rá ba", "m ale", 'RHgTS', 'WspjM', 'placa', "m da ", "✼🪻 *W", 'cikxW', "\"SIM\"", "• `!p", "🔸 Apl", 'ard.s', "te\n├─", 'huKsP', 'JjCCY', 'mvQDx', 'FkONe', "nces ", 'xtInf', 'c...', "s bás", 'kKlkE', "E usu", "gou c", 'HPtjZ', 'EhMFv', 'gens-', 'hive', 'ben', 'TidaN', "s.\nEx", "t ace", '*Atal', 'xhANV', "ora n", "s fun", 'vrsPb', "r hor", 'INEXP', "D ATI", "mo de", 'AvDlY', "XXXX\n", 'weigh', 'GAbCU', 'rATLp', 'iATgh', "ra).\n", 'sta_v', "💰 ", "s` pa", 'cJKHj', 'levan', " malu", " 1234", 'mundo', 'infoc', 'bjpYX', '🛍️', 'wzwoS', 'KHYGn', "ra in", 'pBiIy', "ja Pa", " [pal", 'QKfaG', "%😂\n\nE", 'IIHTd', 'lGSuq', 'PRYPw', "HERE ", 'rogre', "m col", 'SPRIN', "tar\n💡", 'uvIxz', 'gxkGT', 'vos.', 'nIcuG', 'cerra', 'rJUwt', "es do", 'Nopoj', 'QlGpV', 'OnVFZ', 'yOmas', "ei re", 'CtJvU', " ente", 'zLlTI', '3|2|4', 'oSUlg', 'fheQS', 'NnYLN', 'XOhsA', 'SfTYc', 'JUqFf', 'szCPw', '&apik', 'DcqzG', 'qOejI', "oad?\n", 'beaut', 'ntrar', 'vHhmc', "s em ", "s e c", 'eComp', " o do", "𝐇𝐀 𝐋𝐎", "⏰ *SI", 'f=20:', 'asRCh', 'finit', 'qWfmI', 'toFCZ', 'f5ab6', "gar r", "cas c", '𝐂𝐑𝐈Ç𝐀̃', 'emplo', 'PguIW', 'verso', "L LEV", ") ❌\n┃", 'VHLsS', 'tBKrU', "é sup", 'BunQO', 'WkIxi', 'MmHxK', 'rBRrk', 'ferre', 'fIYqu', "tra c", 'nida:', 'zLqUw', "o ine", 'QCSYI', " a au", 'a70d3', 'tição', 'KfVOQ', " \nWHE", 'bsaUh', "┃ 27 ", 'rankk', 'plaq2', "🇮 🇬 🇸", "r. Se", 'pQfRq', "AGAR ", "e sej", 'IFICA', "0 gru", 'YxyPe', "om a ", "dado ", " • Pe", 'wahOh', 'stoso', 'auto', 'SjdNK', 'Stick', 'DJSMF', 'ontos', "\n\n🎉 O", "ais e", "elar ", 'zbZJq', 'aKxhd', 'iZsIz', 'rodut', "d par", "S ━━━", 'ink*:', 'xempl', 'video', 'uLSnF', "hum e", 'ftRIb', '*Prec', 'AjOmi', 'OQUEA', "? AND", "um, n", 'ovada', "ico. ", "g -i ", 'dKait', 'FcrUk', 'TiFmK', 'úmero', '5|7|0', 'BGceP', 'Sigma', 'pAIuD', "HUM B", 'g-aut', 'pacta', 'ADA*', 'ALnLR', "r o g", 'x9_ro', 'ros.', 'icame', 'mUAyU', 'OXJtb', " 31/1", 'nrlJV', 'teios', 'matem', 'xPKvP', "um ar", 'kTdDy', 'ivulg', 'duKtV', '[hora', 'ODWQq', 'ZnLHS', 'fQFUg', 'vXWcU', 'jlAxu', 'KdfFW', "═╩══\n", 'elido', '|0|1', 'OrwNS', 'PWVtb', 'fmJhC', 'obn', 'SEEDi', "o, o ", 'bQivP', "𝐃𝐄 𝐁𝐀", 'KecKN', '|07:0', 'PGXIR', "A CON", "3h e ", 'damas', 'olMGi', "ões d", 'level', " leve", 'mQSwP', 'MgMYY', 'lqdVU', 'rzOpl', 'HvqaM', "/100 ", 'wGzGU', 'io/10', 'cOqiR', 'LCIMm', 'tysGY', 'TSvjL', "ed ", 'Permi', 'XnZez', 'paten', 'bfda5', 'BRASI', 'nto', 'xVJfY', " Stor", " Para", 'GZjdt', 'lIgkB', ":*\n│ ", 'Baixa', "deo e", 'luEDa', 'BDSsj', "⚠️ Não", 'fHcbR', 'EjiiI', 'CBJIj', 'rjZAW', "───⊷\n", 'dVEFV', 'QrYPs', "do ex", 'hBRTg', 'tirar', "om IA", 'UkRBq', 'RClNh', 'hmjox', 'XoOwk', 'rupos', " 💥 JA", 'zhPnJ', "u arq", 'ptGFG', 'AfVAx', 'msg-o', 'tects', "20\n• ", 'kXxDG', 'Paten', 'urinh', 'clown', 'NKZkA', " poss", 'GivJX', "a pla", 'NNUkt', 'ᴏʙʀᴇ🪙', "WILD ", 'XClNv', 'bCTkL', '6ee26', 'vBSRK', "IMC (", "oji G", 'pinto', 'rasQF', 'VbFXN', 'sar', 'tfOZi', "🔞 *PA", "I alt", "l não", 'tFxWb', 'RRDji', "r e d", 'hgdsx', "e se ", 'forem', "Gire ", "io Wh", 'GayiC', 'botaf', 'trIFT', 'sUIsl', "N REM", 'carga', " Perd", 'ztcDM', "\n\n■■■", "io já", 'qzAuT', 'catch', 'qIGTl', " Rank", 'AOBIl', ", exi", "\n⭐ XP", 'bf257', 'SuUzd', "ai ma", 'OuTkF', 'acwqE', 'rada:', 'gos', 'link.', 'mnOLK', 'rel-h', 'mensa', "o Sou", 'GYJFI', "tam j", 'justa', 'ZCQKV', "rna u", " é \"", 'ggbOc', 'rte:', "lo: !", 'COMMI', 'kRXgf', 'SUGel', " 0\n\nS", "rir e", 'hpPzI', 'Fácil', 'LYqsz', "a. Ap", "='min", 'rDrWX', "╭━━━ ", "o Bri", 'nYMwb', 'FNxFl', 'temát', "a\n┃ •", 'jGGTO', "┃ ⏰ A", 'AXwLv', "E sor", '𝐃𝐕𝐄𝐑𝐓', 'AHbtm', " e pr", "oad P", "e cac", "🔄 *Co", 'zkTIR', " duas", "po 📝 ", 'PMhfD', 'o/rtL', 'ortei', "m del", " pesq", "as di", 'YJuNZ', "p [ca", 'rio#', 'IuvRd', 'ocdcK', 'ejyoi', "⏳ Agu", "ue os", 'VtQoB', 'zGYZY', 'IMbSQ', 'clMJC', 'EmVYU', "te mi", 'LynMR', "to pa", " eu n", 'ZNoAo', "os sa", 'ZFgcf', '━━⊰❆̸', 'Msgs:', "olds ", " prev", 'sPwff', 'JRlGe', 'adici', 'ucetu', 'vmUyh', 'cione', 'VAyKq', "*═ 📋 ", " !sis", 'ocess', "ID es", 'creat', 'MDvxU', 'modop', " opçõ", 'SouKv', 'lovem', "om to", "il. T", "┌─ `", "6 fun", 'rcula', "de]\n*", "ho go", 'uaFDR', 'BurPc', 'ex-al', " 365 ", 'QZgUn', 'Bdkng', "): 1.", "s Nam", 'eres', '🌫️', 'KFJGI', "\nPeça", 'qDvfb', "uma o", 'BgAZp', "0, re", 'Lsrew', 'oEpNe', " a do", 'atus', 'mpo]', 'nipul', "o: se", " _- @", 'humid', "lo: ", "a def", 'uXdly', " gara", 'MhZkf', 'Gestã', 'IyXLl', 'OcPAT', "es di", "qui p", 'ItSGS', ", 0, ", 'NbOyN', 'eiras', "iou u", 'HoFZz', 'RfrQZ', 'itos!', " expr", "io ou", '.xyz/', "uer c", "OM me", 'VCiAN', 'lYkYt', 'KIUQb', 'PFVBc', 'cJLjN', "PODE ", 'istór', 'pnI0k', 'zKHnP', "📋 REM", 'MxxSQ', "ndo n", 'onteú', "tá pe", 'rou.', "as vo", 'essar', "es. R", 'RFiZH', 'xBVrD', 'lzYJh', "SET p", 'elegí', 'evfAa', 'ulo.', 'at.', 'RZXMw', "isos ", "enos ", 'bcflQ', "o est", "xado ", " BOA ", 'ys/pi', "or po", " ao ", 'UPO]*', 'gHPON', 'icada', 'ite_g', " Fina", 'categ', 'AHlMM', 'yyuhu', 'fault', 'IygNF', 'NOWGo', 'tedxT', 'EIylQ', 'lBsfz', " 😁👉👈❤", " 🏆 @", 'mYSOl', 'kkuYQ', 'sQIJD', 'ag2', 'LsDtC', '❆̸⊱━━╍', 'XXlXV', 'bDZhH', " um b", " 💋 @", 'igs/A', 'OycaF', 'wCKhS', 'VhUrk', "u foi", 'UZSmq', 'OXbzx', 'scSHl', "ta Ne", 'mcVXu', "a o m", "?, ?,", 'dias/', 'RlVEt', 'ZrLfr', '╰════', "ase: ", 'user2', 'wQVCW', 'rDFLL', 'ZaInr', 'ivtRa', "AÇÃO ", 'lendá', "\n🌐 *S", "eus ", "erem ", 'KtFfm', 'HH:mm', "ara b", 'SJsPt', 'zenad', 'aEaBL', '01885', "imi 1", "-> At", "━━━\n\n", 'vLHuY', 'onALB', 'QRwNg', "a esp", 'kwLGB', "┃ 31 ", "ica a", 'opera', "┃ ❌ Q", 'mbro)', 'VtBZY', "⊷\n│ 👤", "l 🔗", "ara u", 'hiaVc', '/Porn', "\n• Ex", 'SQQTv', 'imigo', "s (sá", 'a|pap', " ├ Di", 'offcm', 'cnEWg', "f`\n│└", 'sikms', 'nti-i', "ca pi", 'o/GVZ', "\nAvis", "\nDica", "om ap", 'from', 'VJuZA', 'IeObN', 'gYvXr', 'OnmZe', 'ZxtzH', "⊱「 🎁 ", 'jYuKc', "ado\n•", 'itivo', 'ntion', 'KmdIh', 'OSJQG', "LAR\" ", 'DPemu', 'imas:', " Perm", "nho d", "uer m", '*Alte', " *BOT", 'YfZFk', 'cCwAd', 'AwaKv', 'vsEoi', 'ipzuA', 'kUsoa', 'fnBvr', 'rpYru', 'txt', 'sCmtU', 'QOwTZ', " 𝚃𝚁𝙰𝙽", 'cDkbD', 'SOUND', '3|0', 'oUHUz', "⊱「 💝 ", "\"\n• *", 'LhXpt', 'XTTmj', "da) ", "um lo", 'l=0', 'jNrMt', "WN* ⏰", 'yKxQW', 're-li', 'qMQ9o', " 𝐀𝐌𝐀𝐃", 'ROUBO', 'ULCYh', "⏰ *HO", "rgo i", "\n⚠️ ", 'DFiDZ', "cas [", "0 \"", "one q", '#porc', ',en;q', 'hqVnj', 'tDPIU', 'aNTXa', "co de", "sar, ", 'pYZPS', " Ínti", 'CCgsm', 'gada,', 'NXufp', 'aily,', 'DxKTP', 'RIvKb', 'RgsX/', "Rola ", "*\n\nA ", '@c.us', 'BCrem', "┃ dur", '╔━━━━', "O RES", " Roub", "nas o", '593ec', "ado p", " 🎯 *T", 'XCwny', 'GfeOD', 'anti-', 'FfYyb', 'aHXNh', "r tem", "á ina", " [com", " - Aj", 's_rea', 'CIPAÇ', 'fKyuj', 'eteYF', 'vo.', 'ão.', 'EJVGx', "ma:* ", 'itos:', "'venc", 'xZVxD', 'avra:', " \n┃ o", "a lim", "car f", "!* ✨", "m apl", 'WIhgq', 'ole_c', 'DfsOA', "ocar ", 'RNXkd', 'cIAZg', "s pra", 'nxILv', 'fJUQe', 'LsgMF', 'NDO_C', '*ERRO', " ou `", "r Com", 'branc', 'jnPbw', '_Samu', 'HPgDo', 'WrQeA', 'RjocD', "so: ▰", "UEL*\n", "ar / ", 'ify.c', 'gsIma', 'hZlBY', 'ântic', 'QbrDT', "lher ", 'McBsU', 'gWqZW', 'TPYhn', "📦 Res", "\n🏆 *R", '*Valo', 'nho/a', "\n\nPes", " comp", 'XLEnu', 'link', 'viato', 'NFSAD', 'dhdIj', "* 🎨", " +\nEx", '❤️‍🔥', 'jxYde', "ar\n╰━", 'qvPNf', 'VwhgZ', "✅ *Li", "a [te", 'attp8', 'certo', " [val", 'HEAD', 'OSreH', 'SMLjg', 'RQlTa', 'ytGXM', 'KWmOU', 'hlRvN', 'ywqfg', 'imSim', 'aCdto', 'ALLPh', 'nned', 'loada', 'CREAT', 'hxkFo', "Top A", '𝐃𝐨𝐧𝐨:', 'JzWjN', "┃ *3*", " Entã", 'w.git', " ✅\n┃\n", 'em.', 'ljbES', 'otal:', " dano", " o em", 'nha:', 'AYney', "「 𝐕𝐈𝐃", 'IPvUq', 'msPmC', 'KARZO', "│└─ ✅", 'qqbFB', "ORA*\n", 'PNiAS', 'nQPEY', 'hado!', 'psWhr', " 𝑨𝑷𝑹𝑬", 'jGvJV', "IRA D", 'QJgsx', "cal e", " em F", 'dPMAa', 'NgiVU', "r de ", 'lAjjV', 'da_me', 'plano', "do ->", 'bQZnm', " 🔞 」⊰", 'Imgrv', 'kIziK', "ians\n", 'UMmiF', "res q", "os an", 'lar.', '_luxo', 'dizad', 'MBINE', 'scXYa', " Pala", 'Buffe', 'Exclu', "por \"", 'ÍSTIC', "- Adi", "o ace", 'or].', 'KvvNZ', 'XuWII', 'cmaoW', 'XwRoS', 'ropWv', 'NOFDC', "\npriv", 'AUBHT', 'xqwYr', 'entac', 'kZRMh', 'DXwpk', 'Image', 'cf6d1', "\n┃ 💎 ", 'cando', "ra e ", 'yqJYi', "- Use", "m for", "er pl", "A, NÃ", 'HuIMT', "pos i", "┐\n│‣🔺", '--at-', "gar a", 'langu', "👤 *Us", 'LvhOY', 'Fciie', 'ZXczw', 'oje):', ") ✅\n┃", "Sou u", 'bYpBy', "loca ", 'SWmSX', "s 18+", "Sai d", "ar gr", 'mMjea', 'zYzGx', "eio 🙉", 'TsLDF', '🏷️', 'XIMwR', 'MfFlW', "... e", "🟤 *Ef", 'XaPFZ', 'cífic', "mas: ", 'kLgxq', 'ZItUl', 'LyPuj', " gtts", "   └─", "\n┃ 🎮 ", "a: Al", 'ZbmCg', "ig18 ", 'írgul', "\n\n𝐎𝐜𝐨", 'MJMmP', '50f29', " 𖣘⃟ Us", 'conso', '.org/', "la al", "em ", 'VnPSW', 'dhSlG', "𝐃𝐀𝐓𝐀 ", 'yQqUU', "RTO C", 'ojqMA', 'dDEug', " - Se", 'vgjNc', "DO CO", "ue o ", 'MSdjY', "no pa", 'pGrPo', 'mJUHA', "1 - @", " (hor", 'xlfdu', "e. Si", 'HkIZf', 'EeBOC', 'old:', 'MqHyI', 'rio`', 'centa', 'SIcxB', "el ", 'uGBzm', 'HBwyy', "─⊷\n", 'ZACQY', 'KSXRN', 'NBZKT', 'EaGdl', "g con", 'zJWJa', '/intl', 'TMUzW', 'khJxr', " Próx", "adm ", "rdeu ", " um m", "⚠️ For", 'r.jpg', 'clusi', "e alt", 'ivers', 'uQyQH', " inat", "DESC\n", 'ws%20', 'Ross!', "ulo d", 'YHOLm', 'iMoLE', 'ink.', 'lMadY', '/iron', 's/lin', '244dd', 'LaiVm', "! Fal", 'rdido', "da Ap", 'rvisu', "= ?, ", "ra ab", 'Mssmx', "e exe", 'su2', 'SQeDO', "ona e", 'OpYYJ', 'somen', 'pages', 'yDpxv', 'tNaEi', " Foi ", "┃ 🎯 M", "a lis", "one h", 'qfWJy', "s inf", " é ir", 'novac', 'SDCcb', 'uceta', " todo", "\n\n╭──", "⚠️ Box", "deo [", " 😊/wh", "ra em", "ar im", 'andar', "itui ", 'BDSVe', 'eJqiQ', "\n\n⚡ M", 'oite.', "🌙⭐ = ", 'efone', 'acamp', 'hrHho', 'revia', 'ar-na', "Não p", 'SQADi', 'ZtaQi', 'UpzJA', "O* ──", 'aNXVR', "o. At", 'cxCCU', 'TUALI', 'xbKMB', 'ombat', 'vyzYQ', "✅ Sau", 'wroBD', 'EEcRw', 'NFAEX', 'etkHr', 'dNgtO', 'rGadb', '/30d', "\n🎯 *G", 'qbyvX', 'sso.', "\n┃ 4 ", "𝐎 ", 'eIuPT', 'mHsGV', '_stre', 'aster', 'vdhGS', 'jIPvz', 'xRRSw', 'om/', 'LjRzz', "mas t", "ce qu", "ÃO\" p", " -ar ", "eu li", 'em#', 'TOR', 'azmxr', "Não i", 'tkOOa', 'ojhpA', "✅ Ini", 'aAQkX', '://br', "Pior ", 'waTZb', 'Gywix', 'HUDCR', "! 🤦‍♂️", 'fase', "─ *SU", "a exp", 'DFpRN', 'yyAYb', 'TKD1B', 'fklSj', 'mwwYt', 'vRwrK', 'RmuWe', 'wpCyg', 'LQzWS', 'OqQnq', 'whaay', 'gkjcp', 'norma', "L DE ", "❌ Res", 'gnFHe', 'LjEWr', "*\n🎯 P", 'ttYou', 'Data:', "ra o ", 'JhIIZ', "s\n┃ *", 'Tzifa', 'nfdxM', 'onman', 'kghhD', 'thJJM', 'dUEnz', 'ntLKB', " BLOQ", 'YUDAY', "em \"", "- Coo", 'bVCIt', "os!\n\n", "A GOL", "me do", " teve", "ot es", 'SOzHu', 'lOhgR', "u a r", "ensa ", 'qjTUn', 'UYtAU', "á men", '𝐌𝐀𝐑🔥', 'siKMX', 'zoyUw', "gos a", 'zlqpI', 'ivo.', 'LEAua', 'FwdBB', "━━╯\n\n", " - 💕 ", "] [da", "ha um", 'ate))', "uel2 ", 'MCijb', "┃ 🛫 O", 'Last.', 'XvhYT', 'vAlqd', 'ThAAC', 'nense', "r (re", " DE 1", '/simt', 'cRMrn', 'EsyAf', "á dev", 'DUGAl', "o cor", "ndo e", "! Use", "tada ", "💥 Bat", "te mo", " liga", "so : ", 'iXRfz', 'ZysTj', 'HbUle', 'PACK+', "*BOA ", 'NtNZA', 'MqWLE', 'Erbpk', "Ser W", 'VvGsQ', 'ʟɪ🍭【✔', "!*\n💰 ", 'AgXQG', 'cuvXF', 'count', 'shALq', 'Enrve', 'Menti', 'RtUmS', 'offse', 'fDNRD', "vado ", "• tes", 'enta', 'ryACm', "i, me", 'dmbRS', " usan", 'FPXyC', 'ticao', 'JUfRz', "ar 🥷\n", 'rWXLc', '20e9b', 'GdHGE', "erne ", "ulo o", 'kVbKv', "*\n║ └", "A fot", 'RTxho', 'JbhZn', 'qTzSO', "údo d", 'IYeCo', 'puZxJ', 'xdZWc', '╚┉┉┉┉', 'CShGP', 'Swbzo', 'KvuuU', "a: Es", 'ywCgH', 'ldotV', 'NnYTH', "va né", 'sbAJH', 'Faceb', "e gru", 'uarde', "💝 ━━━", "de!* ", 'msgan', 'QxPDR', 'kzluv', "ir li", "\"noit", " 5) s", "tre 2", 'xUxia', '_fech', " se d", 'ançar', 'xNpAe', " de l", 'riasi', 'cVcRh', 'ualiz', 'oyXrS', 'vDSwZ', 'Blstk', 'jdPTL', 'Termi', "ITO C", 'UnXBj', 'AiGma', 'rSJXc', "> ? A", 'GTdJQ', 'notJo', 'JiEpc', "o e q", '.0.fo', 'nfJnZ', 'vbXhL', 'vmHdj', '🕊️', 'tPovl', "ca ab", " 📩 Ms", 'CyNXX', 'MJyNK', 'KxAWc', ", don", 'Reque', 'EURji', "de gr", "ra to", 'DpISl', 'lendo', 'QZdbI', '𝐈́𝐃𝐄𝐎𝐒', 'logot', 'uYcHo', "ia me", 'Azcym', ". 🥲", 'eYrhh', 'tcuFp', " stk,", " pala", 'DEMQd', 'kkMDe', ". 🔞 ", " dese", "min`\n", 'PdRGq', "de so", 'jgDfX', " usar", 'mXQgv', 'CtTTP', 'showG', "la re", "e a c", '.face', 'hpVah', 'Jmrdf', 'ZFQUm', 'cbrTJ', 'imgcr', 'GITpZ', 'sbjUG', "all\na", 'YhyoW', "YYYY ", 'WkFas', 'uRqnT', 'remen', 'ETuQy', 'ETXJO', "s, im", 'lpDNW', 'bovuH', 'TlevT', 'RBLBZ', 'isAct', 'kZfDX', "as pa", 'nLrKb', 'yfrtS', "kup: ", 'QLenA', 'idos', ", rec", 'isBuf', 'Dzxdc', 'ctere', '𝐄̂𝐍𝐂𝐈𝐀', ", ond", 'ERROR', 'rupam', 'KrWYU', "ta aç", 'YAyZN', 'URL.', "n\nver", '*Tama', 'styLs', 'BIhBv', 'GYTSp', 'volui', 'cJsNj', 'HhgiB', 'NuMyd', 'sGFRj', 'maTIL', "HAÇA ", 'fsjKA', 'geren', 'uwYSv', "r2 in", 'fPKwW', " fi\n-", 'fcxMT', 'mJJzu', "er mu", 'uco!', 'ando(', "ros f", 'WtpKa', 'acumu', 'MqESw', 'dWWjX', "* - @", 'qQJDB', 'smxur', 'waste', 'Artis', 'abraç', " Que ", "L LIM", "iv be", 'iUVYK', 'JILVT', 'SJcDb', 'o/2nm', 'BKXET', "┃ 👥 P", " Vent", "18 an", 'ZqstY', 'rTmUR', '-msg-', "ue um", "K DOS", 'kedav', 'CLUSI', "a o b", "t gol", 'Bloqu', 'oyipv', 'o/5LP', "o 200", "O: AZ", 'BbyHy', "ar sé", 'tJIMM', "┃ 📋 F", 'BYdCG', 'round', 'iaGcN', '3dsto', 'vJbaO', 'VOShZ', "k @us", "do su", 'bKit/', 'fawat', "vel r", 'uPChA', 'bpQOn', 'fLipb', " *HIE", " ROMÂ", 'gif-l', 'ttp6', 'BoBXE', 'XpdYF', "* foi", "o exc", 'JqbCK', 'QCRga', "─── *", "O ATI", 'ntico', 'MiGKX', "┃ *Ve", 'dbDjW', 'HWFyD', " 2 - ", "o Voc", 'aZLeU', "lão d", 'IBbVm', "━━ SA", "ra:\n\"", 'rnece', 'EutKE', "ame]\n", "🔸 `", 'gosto', "m quí", " (Glo", 'VAfbh', ":\n\n╭─", 'wNkRq', 'LvAgA', 'MBRE-', 'Titul', 'bTrqU', "Faz c", "ᴜᴇᴍ ʟ", 'wTFcW', "ar ne", " e co", 'HukVq', "o lin", 'jVzjc', 'topta', 'msgBa', "✅ *CO", "✅ Mod", 'munid', "║ Ver", "a opç", 'MqOhq', 'AuDQe', "u peg", "stas ", 'iDsqS', "n: hu", 'ZLFBO', 'NAMEN', " 📄", 'gcBgp', 'ctOwn', 'númer', 'irklv', "ois p", "T lim", "da te", 'saber', 'IugcH', 'zqyRB', 'JPMHc', "O tex", "⏱️ Tem", 'OdPxL', 'HCaKN', "mi1 ", 'ttp4', 'irVEM', ") as ", 'eYSnG', "📊 *Di", " erro", 'PvBNR', 'tHwit', 'FUmVp', 'nOrwN', 'LJfPQ', 'GTRAP', 'btuTZ', "𝐢𝐧𝐞: ", 'rQQCt', 'esort', '┗━━━━', " GADO", 'jcpZD', 'fLzNG', "Use ", "io ch", 'hhAeT', "l pos", "odo 2", 'pedra', "SET n", 'rankg', 'PnUDU', 'TayHx', "e, \nl", "io:\n", 'Lyaum', 'nrCfn', 'ejEmX', 'nstan', "s)\n", 'métri', "QUE N", 'ILWMh', "m man", 'YJWwK', "ms\n", 'hhjGM', 'comec', 'oaxSU', 'zZCJA', "\n\n_Nã", " numé", 'zQlHi', " 😐 RE", 'AHFtq', 'coroa', 'ping3', ", per", 'CYXCV', 'gamen', "┃\n┃ ⚠️", "sa\n\n💡", "S:*\n🔴", "te.\n┃", 'fZgvO', 'inks', " Esco", 'dmbNE', 'uOwEF', 'oBNfz', 'VICPJ', "rir, ", " USO:", 'ariaç', 'OSPpT', "ir?\n\n", 'vMKng', 'phgqI', 'gvaIS', 'VPXvy', 'HKPsT', "io qu", " nada", 'dos..', 'civOh', 'GFmOl', "os 😢", '5|0|3', 'url=', 'EjXFZ', 'FOThe', 'ecisa', "aos n", 'vznxv', 'EvUdE', 'ram.c', 'ylIbq', 'bcgNi', 'XHcVr', 'BLOCK', "bP: ", 'buffe', 'FFPLA', 'QtwJT', 'dd/v1', "✅ Tod", 'bc51c', 'eOkMU', 'angel', "elo m", 'tes.', "cê é", "de au", 'er?q=', 'hATDH', "\"Serv", 'AzjfI', '.gif', 'ymYWw', "PT pa", '.andr', 'bMmta', 'gpv2', "🎰 ━━━", 'ttps:', 'EUyBH', 'SQlsV', 'yQbuy', "m tod", "iva o", 'real)', 'UwfXA', "hat: ", "\n🎯 *R", " Erro", 'mEbzd', 'eo2', 'ARgdU', 'oNmdS', "cê te", 'zYOeF', " Bloq", 'gubTm', "ça um", 'ojriC', 'yEmTu', "am do", 'vXngi', "s ano", 'cJXeE', 'eEcXY', 'QigqW', 'GzYJy', 'cEzmN', 'reta:', 'Lmxaj', 'jQvZU', " *CAI", " espe", 'ndade', "📋 *LI", 'QUÊNC', "s com", "dos p", "G SUC", " part", " 🕹️", 'AIVRB', '.me/', 'so.', 'zTUMv', ". Cad", 'opçõe', 'ZBbxs', 'OJvJn', "OR DO", "ra ge", "⏰ Tem", "ser D", 'tivo!', 'behNz', 'EOFWM', "Alta\n", 'oubar', 'VÍDEO', 'e838d', 'pvmsg', 'okLnb', 'asbyT', 'txbeW', 'KkeCa', 'FILnD', "━⊱「 𝐀", 'TIVOS', "no si", 'kkyiT', 'usera', "1 pre", 'LIDBI', " há s", 'gdzDj', "] [me", 'xtCrP', 'YOPdE', 'qEmaG', 'rsos', 'fasly', 'sQSPn', 'ária:', '*Todo', "══╗\n", "veja ", 'prêmi', 'ePlIJ', "to es", 'salva', 'QwvuT', 'UjcFK', 'YZiJm', 'uKSfh', 'ga:', 'pDLkN', 'TdwHA', 'ICNlf', ":\n┃\n", " quer", 'wpKps', "va:* ", 'zTQKW', 'TefDs', "tão n", "o é, ", 'gvrPy', 'PNoiZ', "sao W", 'zbEYq', 'ale=t', " atem", 'NtIcj', 'rsyVv', 'icar', "🤤 do ", ":*\n\n", "a 😈", '1f2cb', 'zMDoO', 'swWGd', 'ubo', 'OEfvK', 'igJbt', 'nMXhg', 'dTFki', 'nUnSj', 'XxUYs', "DEU!\n", '0|3', 'SroCT', 'KHISA', 'Joatw', 'YYfJX', " ❌\n┃\n", 'NVRjb', "ideo ", 'Umrsx', 'ww.fa', 'LEIRÃ', "Por f", 'EorMZ', 'ti-ca', 'tdIEN', 'wWzYN', 'UrPsn', 'vsMce', 'mitid', "\n\n🚫 *", 'ercei', 'figra', 'OEvtu', 'iGYsp', ": sk\n", '*Reno', "ós\n│ ", "🧠\n\n🎯 ", "_- CO", 'occPi', 'CyKBR', "ão qu", 'hzLoC', "o:*\n•", '0.jpg', "visu ", 'ghQHM', 'dxZND', 'deo)', 'IIjPc', " [tip", 'jHuTI', 'cpf', 'stban', 'glitc', "mum: ", 'NxWKd', "vo me", 'tusaf', 'ueQaT', 'WUBxy', 'qTMFl', 'jhHrg', 'lDSnA', '33268', " ou 1", '𝐃𝐌𝐈𝐍𝐒', "💡 O X", 'bgyLS', 'rarcm', 'HtllB', 'aVcAA', 'geral', 'gerie', 'boMii', 'PuTJY', 'dhrmP', 'LTADO', 'Perce', 'tNdiw', 'vlYww', 'Preci', 'pos', "• Por", "ra us", 'trata', 'oVWUI', 'TyBsR', 'PJIpH', 'neve', 'WRptf', 'tDtaG', 'EJlJy', "👮‍♂️ *AD", 'BfZsX', "m men", "\n┃ tr", 'FefgL', 'EScxd', "┃ 29 ", 'FRTHh', "a pos", 'Orgas', 'rDwnd', "E RAI", "o [sí", "o (pr", 'jMOUP', 'lqHCe', "e 2 c", 'bitos', 'nao', 'BljNb', 'pXasp', 'ons/%', " não ", 'vfNQQ', "ido\n•", 'bsjWq', "ão te", " *Qua", 'rter!', '════◉', "r o u", 'ventu', " iFun", 'qdUVR', 'Only', 'LTkNu', 'om/re', 'qnksU', "┌─⊷ *", "ru\n- ", "erde ", "dos.\n", 'deo..', 'XDutV', 'NKffE', "a\n┃ 4", 'ElCQJ', 'egab', 'TfOSe', '/sort', "é irr", 'fases', 'tifak', " Só g", "oje: ", 'cOcco', "nto, ", 'QqTep', "DE DO", 'aBjlq', 'sg-', 'mar', 'mdlev', '.drop', 'nBeIF', 'FVoNw', 'DvVyu', 'HmoFk', "AS:*\n", '.opac', 'ulYFW', '0d0bd', 'rPkQU', '࣭࣭࣭ٜꔷ⃔', 'bar', "✈️ Com", 'RrTlw', "k, Tw", "sta e", " 「 🔥 ", 'zuTCt', 'egbwI', ": \"", 'nVscP', 'dVrjg', 'pyXUB', 'DeSoJ', " 😁", 'uFWRQ', " *PAI", 'vibra', 'n.x=-', "POR R", 'YfESo', "\n• Bo", "s não", 'do/sa', 'jDhsY', 'Comum', 'judar', 'x9_ed', 'gtCNp', "o) VA", '5|0|6', 'IhnFU', 'SzEqi', " menç", 'pjVbl', 'qAcjb', "O 1 A", 'QEaNH', 'IMEIR', 'MdqMZ', 'oJZVF', 'CRETA', 'vbPpM', 'ANTI-', "M alu", 'wkDXS', 'sAyTk', 'yrKvq', 'MClTG', 'CPLTN', 'cores', "que a", 'LJoxR', 'zevdq', "ma] [", 'games', 'eLnPv', 'hip:', " GOLD", '8tJN/', 'staur', "2 em ", '4468b', 'otalm', 'upos,', 'nUImy', 'anunc', 'llNBB', 'qXwzu', 'vitar', 'cybLu', "ca at", '06,as', 'kOGtp', " o no", 'oroa:', '𝐮á𝐫𝐢𝐨', "ndo: ", "O: SO", "das W", "o \"", 'QBmxW', " 𝐍𝐀𝐓𝐇", "T INT", 'y.co/', "🔵 Azu", 'FLrwb', 'SOS:*', 'qNeoI', 'sʙɪᴄᴀ', " na(o", "\xA0cy", "a fec", 'LLZOV', '16591', 'RkFlK', "l` (p", " noti", "em, e", 'ersíc', 'nfSlH', 'qeMqj', 'quUiU', 'zdxAC', 'XpBWK', " e al", 'ionar', 'orDjY', 'RCENT', 'zyXrH', "───〔 ", 'NVwNP', 'TATÍS', "🟢 Ago", 'yGFoL', "ÃO FA", 'les', "move ", 'VwcNb', 'LGDum', 'gipco', 'oAIcA', 'hBjsg', 'tipos', 'MGRtD', 'nIfrz', 'ncele', 'NNhNX', 'fLOJa', 'bsEZU', " e vo", "us do", 'ONADO', 'NYOIl', 'SxXNI', 'VERSI', "\n🏆 *P", 'ade:*', 'khUOx', 'puto', "tivo\n", 'FzdhN', 'soySe', 'CpGBG', 'omuni', 'otegi', ", pro", 'ONTRO', 'da_im', "\n*╰──", "s ale", "m int", 'payAC', 'ltros', 'TqyXp', "S NÃO", "e qua", "ay`\n└", 'ar-hr', "m fot", "m per", 'XSmuu', 'ndo]', '/ulti', "arde ", 'bro', '*AQUI', 'hDeQI', 'BuvFr', "te ma", "a por", 'sprin', 'ub.co', 'bdec0', " (18+", "e tir", "✅ *TE", 'wCNXg', " ao p", " 👩🏼‍✈️👩🏽‍✈️👨🏻‍✈️👨‍✈️", 'NavXV', 'EmrbQ', 'Nota:', " Auto", "se !d", '../st', 'kLcIk', 'yKkBW', "re 🗿", 'secre', 'TqSTG', 'uraçã', "\n🚨 Te", 'DSHfK', '𝐑𝐒𝐎𝐍𝐀', 'WFWzv', "F VIK", 'ITES,', "lano ", 'twYCA', "\n\n🎮 *", 'CxfWr', 'EsJui', "só po", 'o/mt0', 'euvYV', 'XDJSJ', 'ores:', 'LqHIc', " cach", "com b", 'BhIFr', " *Pre", 'PLKZD', 'gqDiU', "já jo", "ado. ", ". Ace", "e: `", 'ibnnw', "ot e ", 'ZWHDp', '_data', "do `", " um u", 'ikwvm', "ua re", 'mPrvg', '2|1|0', 'VCEgf', 'abPee', 'mOSTN', 'HAUFm', " 𝐂𝐀𝐑𝐍", 'ructo', 'IgWbk', 'lastd', "s gru", "um 55", 'nGIsu', 'tido', 'istad', 'ão:', 'nGblC', "ldo a", '🔥🕊️', 'ermis', 'PseTw', 'fUatN', 'ffNAL', " TEXT", "s no ", 'VOlsl', 'NjHOG', 'hffgi', 'FFnxJ', "o men", "-PV ", "gar i", "XA MI", '/unde', 'XvJfT', 'qhLgV', 'KuLQc', ", ok?", 'mado', 'Rmqzi', 'JvWJH', "avra ", 'UWxrm', 'rm_co', 'NOVtB', 'parti', 'ERRO!', 'GnPIW', 'zseRV', 'um.', "aior ", 'nyApW', "Ver L", 'MINIS', "cmd y", 'newSt', 'kjTlp', 'ry&fo', 'zllkw', "ure v", 'forma', 'HeMse', 'ZDBrU', 'WmqWM', 'cFENP', 'entag', 'AUfQJ', " é 1 ", "s ser", 'FlHAW', 'capti', 'lLRPe', 'a_rec', 'NmRvX', 'ktok', "o. Su", 'hlxqJ', "ome d", "o 800", "00\" ", 'tIczL', "ido c", 'wTpPO', 'EqehT', "tão p", "a o W", 'AUwRO', 'w.pla', 'SaSgW', 'lJPJF', 'fixo,', 'iBNsh', 'azul', 'QIdJq', "NÃO É", '🗿RANK', 'yUPht', 'aFjXi', "→ Esc", '【✔】ᴏᴛ', 'wcrBO', "guês ", " -c:v", 'quant', 'gpMew', "✅ Ver", 'JsCxe', 'rfwXP', 'elogi', '1f9c6', 'qArjT', 'SoDon', 'vAulx', " _res", 'aqgxT', "DE DA", "he um", 'koIsS', "m pro", 'DsRRl', "ca d'", " mais", 'edde3', 'bal|g', 'dZpmL', 'NkDHx', ") nov", 'badDe', 'acoes', '💂‍♂RANK', "do co", "AS o ", 'ATÍST', 'dNYjc', " DE B", 'sWfRd', "TE AP", 'cudo', 'ar/%2', " a le", 'arios', 'MOtzs', 'esist', 'allmi', " 𝐁𝐑𝐈𝐓", 'a...', "┃ 1 -", "s* or", "á pal", "🔎 Não", 'MAL', "\n\n❌ E", 'MdlUA', 'OSUqS', "❌ Oco", 'cebid', 'PJxPu', 'idZqf', "have ", 'IDOS*', 'jQyaX', "s os ", " o se", 'FohCe', 'JNeSf', " Cata", 'act-f', 'bCmYH', 'eros', " Pron", " | 👑 ", 'sto.', 'SACTI', 'RWiVl', 'XhjoC', "ma pe", 'ovend', "ize o", "𝐎 📝\n┃", "ngs @", "` - R", 'eb085', 'AaRpm', "🎮 *Jo", "sso!\n", 'topmo', 'dolar', "ogp 0", "ior q", 'mojig', 'wAQJt', 'ake-e', "ual\n🔸", "ta si", 'sgant', 'RYJEm', " ter ", "\neuja", 'qgWZK', 'erar', 'ojeBD', " bemv", 'rkXMv', 'm/pag', "bot S", 'RAVAS', " 🇸\n┃\n", 'lmLOi', 'EGYsk', 'XZIuE', "a uma", 'NQYnM', 'ilida', 'euZkf', 'qVdqT', 'be.co', 'title', '═══◉', "e `", "um ta", 'ngpCo', 'trUal', 'TaxSm', 'HPTZL', "a exe", 'qPZBR', "al, b", 'r-msg', 'tão', 'ignor', 'onbUh', "\n\n⚠️ A", 'bDLcg', 'Respe', 'wikip', 'SqxGQ', 'pMFVG', 'TiHpX', "𝐎𝐌 」⊰", 'sKTUS', 'nkgol', "k htt", 'hRWdC', 'lzEfM', 'vbOhx', '_edit', 'RloBr', 'Nplre', 'fwMVf', 'KaaRX', 'tTfcc', 'venci', "a, ex", 'iskmv', "h res", 'other', "á cha", 'BdUQW', "5\n• ", "te a ", 'qftPB', 'KwtOf', " 𝑽𝑰𝑫𝑬", " prem", 'odos!', 'Cliqu', 'waid=', "mo 1.", 'IpYmg', 'getIn', 'packs', "iar n", " ao i", "dio h", 'CFTfQ', " data", "`):\n└", '𒋨·࣭࣪̇🔥', 'AGAR', "𝐃𝐄 𝐆𝐑", 'hFyCA', 'cas.', "!!* 🖤", 'ngirc', " só p", "tros ", '🙂🖕', 'nWAcN', "ica.\n", 'bjfVc', 'mite_', 'xoslm', "TE O ", 'AUOtL', 'rDMpj', "r, te", 'JUJvZ', "rte t", "LOJA ", 'IsgFu', 'pPYKl', 'hnXEH', "oji l", 'kPySB', 'fZLXO', 'uAKhU', " 𝐝𝐞𝐬𝐚", "a rus", 'McvXB', 'xKjVz', 'HMhIU', " MEMB", 'reta.', 'uTtCx', " Ultr", 'dIDBP', "e mos", 'ec14c', 'RKhci', 'ck-id', "NU TE", '96fc9', 'TODAS', 'e).', 'vHveo', 'nadas', 'içãog', 'pGhKO', 'FAULT', "\n\n👑 *", 'HzhUv', '0|4|1', 'VNCZf', 'setpe', 'PTsLb', "os 30", 'WasZo', 'Não', "  🔵 S", "ES*\n", 'muYyF', "l: ", 'CTUGu', "a mud", "o Jog", 'EytYG', 'OxpKA', 'atlet', 'zIrtR', 'OfuNe', "o Spo", 'dataG', 'melho', "es gl", 'tGkGn', 'wodjI', 'yKIkx', 'rqEcC', " dia", '4|1|3', "a em ", 'pKStv', 'AllGx', "nk de", 'qWeZM', "M (ex", " e po", 'YDsOH', 'reto!', 'AkutD', "⏰🌟 Pr", "Lay N", 'HWMxD', 'KtKXd', "*📋 AD", 'XBWTl', "r reg", 'YDhwk', 'fhGGu', 'inCyh', "gos r", 'Jogue', 'recru', 'fikfm', 'rEZYE', 'kDBhV', 'VOaeK', ". Se ", "⊱「 🔞 ", 'vBIwI', "O*\n\n🔍", 'GIKiG', 'QGZOB', 'mfMkB', "o o g", 'dos:*', 'stand', 'tOrSA', 'indin', 'assin', "a a k", "NDO*\n", 'CvYSY', "𝐒: ", "m res", 'aihio', "p e o", '://i.', "Mc Pr", 'vEjBs', 'AKUZU', 'nhuma', "\n\n🔍 *", 'TsiSG', 'auNVp', 'banne', 'DqEyi', "gem, ", 'eQNjJ', 'AYAKA', "e pri", "rou ", 'OMpZZ', 'mIMph', 'luuck', 'dCGsJ', 'zHbOm', 'SiAqg', 'lRenI', 'xzftF', 'ink', 'yryvS', "T his", 'figus', 'dYMzH', "dido ", 'nnKAV', 'NoANg', 'proce', 'iBVEM', 'sAdPL', "ante ", "┃ Lim", 'bd270', "r [me", "i não", 'kcCWC', 'etro', 'xNafW', '𝐎𝐒🔥', 'gVEMv', 'lQWaO', 'madar', 'jSlnY', 'INTER', 'QtLmK', 'jHNqR', "/ +/]", "RE id", "\n\n🎉 P", 'UtpPM', 'pHPzh', "isa t", 'er_vi', 'donos', 'Obazh', '-glob', ", pla", 'FvUiK', " *@", "I GPT", 'YpaHF', "DOS (", "tm Ol", "bot a", 'ONFIG', 'JHQIc', 'rLvgV', 'nal]', 'HyMIu', 'Ibrti', "ipos ", '▰▰▰▱▱', 'ZzYrj', 'kzsXc', 'kYjBF', 'DEbWC', "DE GO", 'sairg', 'ALxxH', 'ioso', "Vc De", 'OmLAl', 'lozwV', "a Des", "es pa", 'JhCBn', 'iekSE', "um va", 'KWNxd', 'UEPzD', 'terat', 'AIYig', 'Q5Hd/', " de V", "le po", 'sura*', 'jMqeU', "\n┃\n", 'mi:', 'BAL)*', "ique ", "\n\nDes", 'lklsu', 'Alyci', 'ncias', "hum g", 'MLEPp', "*47 a", 'sKQfM', " médi", " minu", 'MeEnZ', 'jklmn', 'cIVGu', " Surp", 'r4OSk', "o glo", 'vIJTf', 'dfmst', 'eios.', "┉╗\n║ ", 'VGofl', 'zfoiz', 'mXWVa', "- 50 ", 'eira', "\n\n🍀 B", 'spons', 'EXFeJ', "do!\n╰", 'seada', " DESC", "de* :", 'Figur', 'KKZmM', 'Urori', 'usuár', " pela", "oria ", "er um", 'ubleg', " regr", 'ser/s', 'wCQJJ', 'ouijf', 'Falta', "al\" p", " fará", "ASS S", 'ySLOZ', "uel n", "❌ Fal", 'orgia', ". Det", 'uzdHd', 'numbe', "s par", "TEXT ", "a a c", "Opa: ", 'NhxtW', 'BznFA', 'gxHmB', 'Limit', 'rlGxV', '9a1e4', "no qu", "do ", 'ema.*', 'lCHUb', 'essBa', 'opção', 'mniWm', 'CAPTA', 'EGxev', 'XyYdR', "XT, d", 'RiVZv', "sa se", 'LLFDG', " alea", 'mNvbM', 'DdEsn', "iw)':", 'HRBur', "bcgp ", 'erior', "io ", 'lAPJY', "e tra", 'su1', 'Amado', " elev", 'gSRPg', 'post', 'LHZJZ', 'gemDi', "e em ", 'iXfVI', "8 ANO", 'ZZYLu', ": es\n", 'ojRip', 'qqSnD', 'yZmLI', 'Escud', 'pUcOE', 'reOpx', 'DkofI', 'qcPOz', 'pNJGx', "mbém ", "E 'RP", 'ergol', 'kerTy', "sc [m", '!inic', 'oquea', 'LLvsM', 'kfeea', 'erarc', 'vHjAg', 'pSWus', 'rafk`', "ário ", "ado 💾", 'idTsU', "ser d", 'exy', 'qIBrZ', 'pGmER', 'kBqBd', 'puZFm', 'xTopE', "/3\n╰━", 'LÍCIA', 'qZGRF', 'tWJAN', ":* 1.", 'ZmOON', 'VeeIo', 'CCeJx', 'osida', 'coold', 'wykTM', 'upooy', 'nth', 'preci', 'qwdqz', '-vcod', "ios n", 'GFVUf', 'xPZMB', 'gify', 'rSRst', 'MUVPH', "O:* c", 'WVGoM', " em a", 'MqkMD', 'ckerc', 'eKjSx', " Dias", 'isita', 'YogWK', '╔═══❖', 'mmHEv', "..\nfa", "so, q", "tá pr", 'avada', 'vtNCq', ":* `!", " ❌ De", "S:*\n", 'binar', 'QJibQ', 'wUNSE', 'BQjaY', 'BwLAo', "「 GER", "c [nú", 'bXVcO', 'AS!', 'e-tra', 'aoNgB', 'ake', 'KAXup', "l` - ", "% \n", 'tuaçã', "VADO ", 'Bgwnj', "NK 」⊰", 'undo', 'cita', 'JfCYF', 'ngbot', 'IkKnQ', "etar ", "┃ 25 ", 'wuPWA', 'esour', "\n🔄 Pl", "` - A", 'JKaKG', " o st", '_prem', 'hora)', "o cad", 'mBdpB', 'rNPvs', 'smo..', 'add_c', "Vita ", 'json', 'GQXmm', 'vBRra', 'jPHMi', 'BHybr', 'zvQwP', 'body', "ano v", 'dores', 'pfArT', "Nega ", 'WkZwR', 'FySQf', 'lpzPg', "r áud", 'YisjG', 'mTNmM', "\n👤 *R", 'BDzTA', 'bSPjN', 'BDZPJ', 'essag', " ⚠️ CO", 'casam', 'GTXYQ', 'jImtC', 'oster', " 🔞", 'wRsOP', "dos\n└", "\n🟢 Li", "\n┃ 💡 ", 'gwYhR', 'nVDBx', 'BrhXb', "📖 Com", 'aDewt', 'dWwXT', 'YJHmO', 'dYhaf', 'eadWH', 'lvFJZ', 'ESPOS', 'tiQYR', 'NOprw', 'DMSEJ', "GUEL ", 'QxPLO', "e era", 'Atenç', "r rar", 'ngs', 'AGYjU', "e peg", 'dlGPp', 'VbfBc', 'PjMSn', 'IwXGN', 'ogar!', "do Pi", "💰 *Ap", 'WOogu', 'yYslE', 'rel-r', 'colaq', "da di", "\n│\n│ ", 'dsDlP', 'zaZhy', 'admau', '/Baby', 'backu', 'uSYhU', 'ItOJH', "rtou ", '|0|9|', 'winge', 't=700', 'epggK', 'bZYpe', 'rnati', 'ERED', " OFC ", ". Err", "_~ 🌈 ", 'FmJgJ', 'bQEzj', "MB\n", 'cido.', 'YmUnd', 'htJBe', 'equit', 'SZwhm', 'MXOeq', 'ry/vs', 'Acao', 'GQkMV', 'recup', "🔧 *CO", 'WUStf', 'wsufG', '759f3', 'pSElU', " lege", " 💰 SO", "\n╰╍❆╍", 'zNaAP', 'RTqgK', "bra o", 'tNKSx', 'onsul', 'MVdyb', 'jdwRU', "k do ", "uma i", 'DADE.', "\n┃ 3️⃣ ", 'HDtao', "de áu", 'WtOtY', 'leVpk', 'UwmUt', 'himen', 'YfKJa', "ue se", "Só am", 'IIvWl', '╭━━━⊱', 'VZWDv', "ário\n", 'TbCvQ', 'LrysY', 'athb', '6d9b0', 'lecio', 'AtsyL', "r, mu", '/www.', "do X9", 'XWwNb', '6|5|0', "s env", 'KFAFu', 'rêmio', 'UYITk', "só pa", 'cts&e', 'rte', "á qua", 'iKXSp', 'vwHcc', "eja m", '•ID∆D', 'oldTo', ".\n\nEx", 'LAWjB', "\nIbge", 'teres', "e nom", 'mRnqA', 'ZAxlo', 'aId', "\n\nAgo", "❌ Est", "AS GR", 'fAZpB', 'brinc', "io [l", 'remov', "ia in", 'ununc', 'kMEaF', '*⚠️ALE', 'tMhry', 'eHtEp', 'Accep', "io no", 'ZfylC', 'YKWOR', "M con", 'g.us', 'íntim', 'rgunt', 'fqeSD', 'vmMMU', 'gold.', 'takus', 'o-Lot', 'g?tex', 'TISQu', "los\n\n", ", men", 'XAYns', 'cotes', 'tTZML', "IA DO", "┃ *De", 'kgkwn', "os ho", "tiva ", "do\nEx", '_DO_G', 'tyLgH', "e pro", 'pMEkQ', "*Uso ", 'LsnzZ', 'yGBKx', 'cimen', 'rente', " TE D", 'Sync', 'ran', 'ext.1', 'cmMtE', "ian: ", 'DJAsp', "um st", 'pecia', 'YRKgq', 'gfKOM', 'YCifJ', "a 2+2", 'rwTHP', ", míd", 'JUXIa', "𝑼𝑫𝑰𝑶 ", 'rankc', 'diari', "rão a", "r, do", 'ZbiaF', 'WIUin', "rar c", 'eNHVB', "o na(", '1cfb8', 'PoYlw', 'NPDxB', 'uGyLB', 'sorve', "⊱「 EF", 'MYzgT', 'ftabJ', "\n-> c", 'erati', 'ores', 'FgrGl', 'pQFQl', 'IYDze', 'DNAyA', "ndo `", "ist p", 'uWITV', 'lgDWP', 'gSjtL', 'ionan', 'RaAQf', 'FZkNg', 'zista', 'derad', 'dbZwG', 'erPos', "\n┃ Go", "⚽ Mos", 'vasco', 'ural.', 'CBvFI', 'nRwvW', 'TIDAD', " Prog", "✅ For", 'icWgJ', "ue pe", 'ersár', 'OKyTL', 'NbEgg', 'HgEkd', 'YpJeO', 'ESSO*', "one [", 'audio', 'TkEAS', 'oDxot', "e tít", 'grsXR', 'FRyAM', 'KMOdc', 'kvkeY', " usos", 'Ender', 'WPIhb', 'aixam', "a hum", 'PlJCI', 'e1094', "el (n", "a / m", '8f2da', 'HkbCP', 'GoSGG', 'Músic', 'Oriux', "ulto\n", "icar ", "te al", 'GLKoY', "┃ em ", 'LbzIa', 'IFDlu', 'sYFKL', "de mo", 'foIrX', 'nEWGj', 'MKrOX', 'TYZTx', 'OEGQH', 'wdEbz', 'ciHlY', 'Ktida', 'bCrof', 'qxyaM', 'HQRxR', 'hrppr', 'xvuat', 'cara_', "s SET", "ema n", '|3|0', 'bilhe', "\n\nUm ", 'KuiXF', "o BRI", "zar e", 'eZXGL', 'oZZze', "Esse ", "o?\" c", "dos m", 'act:', 'MJOOH', " Desa", " acen", 'FnJug', 'nteúd', "┃ 15 ", '5657b', "\n\n📊 T", '💕✨', 'AsefO', 'RKAst', 'DSZGa', "\"hábi", "😐\n┃\n┃", 'rtear', 'FfnWs', "te ro", "└ *Em", " @mem", "Não s", 'eKfMh', " colo", 'ERRO', 'nica', 'UTBRp', "osta ", 'jYAVe', 'ercon', 'kzFjR', " e 20", 'alan,', 'Kfofz', "🎁 Voc", 'filtr', 'ENÇÃO', 'DIFER', 'vOiNy', "m, s\n", 'kxzmj', "nha u", 'hWUGf', 'usdBV', "om\n", 'qDydF', 'er2', 'CrJYu', 'Gif🔥', "use ", '.jpg|', 'ieFLG', 'Adnxw', 'minha', 'Mostr', "s. Ac", 'CysZd', " [res", "o Ori", " - *", " AFK ", "ing d", 'diasI', "𝐃𝐀 」⊰", 'Fgkgm', 'if%20', 'ssoes', 'ltura', 'wCQgX', 'GliAU', 'oquzG', 'oCuoc', 'EdKmE', "\n⭔ Co", 'OQKAa', "t a p", '6|5', 'fBBbw', 'isAft', 'ArRiq', "o:\n└ ", " ?, h", 'baDek', 'VfOyM', " exib", 'rgJKb', 'pVsxx', 'fAUqJ', "O*\n\n*", 'HITEL', "lsa c", 'ppt_d', 'PnHgI', 'qMsVE', ": PER", 'rm_al', 'xt.0.', 'SEekA', 'MArFo', "│ ---", "(?, ?", "❌ ATI", "bot s", "n pod", 'ce%3D', 'ebKGd', 'QIpKW', 'mllif', "o`\n\n", ", int", 'Frifa', 'EVhkx', 'icar-', "R ao ", ", dig", 'WLGiq', "ivo\n\n", 'wEwCV', 'kjooZ', 'turad', 'VzMZq', 'vhjxM', "ra na", " o pa", 'pZdAz', 'EEmGE', 'EBmve', "o: ", "nAI G", 'estil', "r pla", "ar Fo", 'CZOsp', 'bbUzc', 'sRSUs', "m, to", 'bymww', "s col", 'piege', 'AavWb', 'gulho', " noçã", 'vTNDY', 'VvBSf', 'Ioaxf', "da mú", 'oHuFw', 'hWKnm', "🎁 」⊰━", " EMOJ", '7dias', 'HhBYB', 'UMNhm', "⚠️ ATE", 'MqfqC', 'PJRSZ', 'olor=', 'OMzIz', 'nível', "m:\n\n", "┃ 1️⃣2️⃣3️⃣", 'DJcAO', " trad", '6|1|8', 'FgdEd', "ـ\n☈ 💑", 'iZBLB', "ra AS", "✅ *RE", " *Míd", 'wveft', "os co", 'dtxKi', "dio, ", " hist", 'WlMlT', 'hiPGS', "* 🏆\n\n", 'gizqu', 'urgHD', "e o n", "IDA!\n", 'ar-ab', 'DejCw', 'BqXjj', "te pe", 'FHnao', "_fmt ", 'H2Dcf', 'kgFNe', 'SOLIC', "ET re", 'TRMzA', "u alt", "em co", 'ral', 'UzNAl', 'DDD', 'QoNGC', 'bdApB', 'wsijI', "\n\n🕒 *", " <sua", 'qoAoW', 'RbBgm', "ode s", 'afFZm', "a lin", "OS CO", "é fof", 'VIDOS', 'YnZlc', 'Qhahq', 'GLOBA', 'sYJba', '1|0|2', 'ngUpd', 'sumo:', 'eak_a', 'gcuQA', 'atWTG', '/app/', "ot di", "😵 *Tá", 'IrULW', 'QoCDP', 'iuCiF', '3660a', "nota ", '*ADIC', "Novo ", 'kGLUf', 'efavk', "ua ch", 'escur', "te Fo", 'trans', 'FqfyO', 'c3097', "uelo ", 'inici', 'scovC', 'ORztc', 'HGuiK', 'xsQOj', 'jwUoN', 'onxys', "us no", 'QrLaE', "a res", 'xRefW', 'qtedF', "o úni", 'fRIjG', 'wPEfj', 'rXNqG', 'agem:', 'utxlb', 'ndent', 'qMCBD', 'yArlG', 'gzpor', 'xparG', "ape o", 'qUxSd', "dio ", "\n: ", 'HWAGH', 'thund', 'rIUsm', "pa em", 'KrCmY', 'vkwvx', "te, e", 'gJjnk', "al\nbl", '[nome', "ão, t", 'RYzDm', "r Web", 'yMWKm', 'bBYJk', 'Jfgnr', "xo 1", 'xsxYR', "• Pró", "com r", '/main', 'gLqrZ', "❌ OCO", 'spare', "Xm\n┃\n", 'rGikj', 'wvIkv', 'unHfK', 'dGets', 'fedyj', " só R", "tra d", 'EmWcL', "dos, ", "ns) p", "┉╝\n╰━", 'icyye', 'DlmHq', "idos ", 'wgShg', 'HsFCb', 'btuxx', 'MkbGl', 'OTIXH', "l\n└ P", 'Jqubh', 'IUbsN', 'conn', 'd9182', 'sYzUQ', 'maker', 'HudAQ', 'vzjKq', "use a", 'ylAwf', 'noaao', 'EuHeI', 'ção', 'qPrh/', "a onl", 'nCcqk', ", no ", "s e s", 'drão)', 'rgari', "gos q", 'otfgB', "🖐️ @", 'b0a88', 'pynja', 'anco', "el ve", 'cysGe', " reme", 'eOJEY', 'kAXGD', 'pi/', "ar os", "50 ", 'alias', 'peZfb', 'AJSTq', "🔸 🔧 M", 'RsDXy', "iro u", '𝐓𝐄𝐌𝐀𝐒', "te\n┃\n", ": \n\n-", 'RFqlS', 'MANIA', 'LqEOu', " (glo", 'CfyLA', 'uVqBC', "\n\n👤 S", "m bot", 'tagra', 'NbtTe', 'hEXST', 'TnbWz', 'QdnCP', "⚔️ VIN", "bot p", "as WH", 'iKZGR', 'al:', "a Wik", "rão\n┃", 'FrQEl', 'Alter', 'lkGVm', 'Comun', " é a ", 'eFXgS', 'liFoR', 'eHqrT', 'MkKCt', 'HuttX', "uém, ", " 🎡\n┃ ", 'YaUVj', "[ Sug", 'LOcWP', 'ZOPJv', 'jyVYA', 'ILiCk', 'wypSA', 'algo.', "🎯 *O ", " +18 ", "] - V", 'zrTTC', 'ibyVR', "re me", 'iuPtJ', 'mite-', 'xZUUM', 'mulad', "OS - ", 'cup2', 'zCtun', 'hWCNn', 'MzHwR', "00 ou", 'zeHrn', 'etime', 'Cacha', 'pBgxt', "𝖯𝖮𝖣𝖤 ", "a\n┃ e", "rest ", " [tem", 'n.y=-', 'UeyQb', "A mús", 'jYudS', 'NkvCh', 'bCyGD', "upo e", "m opç", "❌ *TA", 'FjNNM', "📊\n\n", 'OwtnN', 'fqXVN', "i 2", 'ZKGbx', 'nsas:', "- Tax", 'ssrMi', 'EbBbc', 'OrPAF', 'eBuex', "Uma b", 'Einry', 'DdxQf', '-time', "e sor", "ta em", "md sp", "na! 🙃", 'mprev', 'fhCBw', "- Men", 'YFVKR', 'inida', 'igite', 'toLLG', 'wAUxL', "= ? W", 'munit', ":\n┃", 'zKkhw', '00.jp', " e br", 'yYkaF', '//ope', 'AsdLx', 'MM/YY', 'qJYTh', "ito -", " [fil", ":\n┃ ", 'dgoyD', "s, si", 'CoOSR', 'xxfdR', 'nltWG', "o alc", 'Aybgq', 'CxTuN', 'UaaoB', 'EtlAN', 'cazVC', 'JReDo', 'gdZra', 'zfAjb', "Da Ca", "ros s", 'SkCZj', 'linge', "• Ver", 'iar.j', "u pal", "1.8x ", 'zukNI', 'twURs', "vo re", "em 5 ", 'npSZi', "PO IN", 'HSEvz', 'PkPHS', 'oyDbq', 'aBQSr', 'MdiNx', 'fQohC', 'JFiDE', 'VIrdp', 'ahEmB', 'aTlmX', 'IJihP', 'vignK', 'fKZmE', 'nCPfe', "pe = ", 'ban', "𝐟𝐢𝐚𝐫 ", 'eyosy', 'PgkLy', 'ailBI', 'bixny', 'KOvoX', " - Ba", "o!\n💡 ", 'asuna', 'IEFIm', 'SsqZS', 'xrLNj', '1:col', "te na", 'ojnDc', 'ixftp', 'RvgTL', 'HBUsp', 'bonac', "ink D", ": +0,", "\nExem", ", pap", 'VhCjG', " Está", 'UTNSi', 'QXDFC', 'qSXIc', 'FHLlC', 'LLESz', "io\n\n💡", 'nWKcI', "ou o ", 'nCdpG', 'NWvfT', 'LlkXr', 'Sstrq', 'wMAZl', 'scobr', " vote", 'EtAOh', 'sauda', "her e", 'achaç', "s e g", 'UEdsZ', 'TyOrV', " of y", "rna s", " açõe", "erno\n", 'Nhaxg', 'inten', 'plo:*', "Adm a", 'SXmoe', "e o d", "s\nFRO", 'ChvAl', "soa1 ", 'goqci', "\nEmoj", "a a v", "👤 Sis", "T COU", 'wuLqq', "e for", 'yxdlF', 'ZrMwa', 'NmVmW', 'jqpHf', 'ente', 'fzijN', 'muita', 'Limpe', "𝐄 𝐅𝐀𝐙", "🏁 *DE", 'trada', "ou us", "ok se", 'paHTy', "❌ Esc", 'sSCdR', "┉╗\n║@", 'NLBUq', 'i-gam', 'firma', '[EXEC', 'AYKoK', 'sYdJr', 'YvVCr', "e da ", 'semoj', 'CrKBp', 'yOFMl', " [lin", 'IkvNh', "po* 」", 'cinto', 'algué', "os bl", "a, ns", 'zUmjy', 'XRQZw', '75c9a', "ra: *", 'roduç', 'ente,', 'gyome', "apel ", "xará ", "ve se", "rado\n", "LD AT", "ma qu", 'rico', "50\nse", 'ruçõe', 'Olnuf', 'dYauS', 'dzmhB', 'TbHfF', 'RKLWP', "ias p", "rá co", 'bApIL', 'JavaS', 'de.', "Dias ", 'berta', 'compe', 'Possí', "mas @", 'do.', 'KTZWB', " do j", " naru", 'JnwkL', 'Infor', "ipo D", 'RTA!!', "eve a", 'IgBOl', "pera ", 'ricos', 'HTfqA', 'OKnxb', "us)\n\n", "nu in", '𝐑𝐔𝐏𝐎:', 'geOmo', '--dat', 'zUBIb', "os ti", '4966b', "NO AU", 'NUeKc', "enu e", 'iZHQK', 'muuKk', 'end', 'dOTUL', "\n💡 *E", 'over:', '𝐈𝐄🔥', 'Uwxns', 'PSage', 'gra', 'pOraH', "sera ", 'turbo', " 𝐃𝐄𝐒𝐀", 'UhorX', 'gRXmP', 'CHngP', 'NvcRG', 'DMHGL', '3x)', 'ium.', "OS* 🎲", '━━━╯', 'eMcUG', 'WjlNr', " das ", 'CEYXd', 'ar?', "ID de", 'fizer', 'TLrrL', "rte d", 'bvWzA', "ão.\n\n", " > ?", 'ersão', 'RzYPn', 'mPflk', 'renam', "a ext", '𝐕𝐄𝐋𝐇𝐀', 'zcKLZ', "os di", 'CuENi', "ar us", 'gqOMA', "io2 h", "◉\n\n👑 ", 'TXwti', 'UawBT', "ta ", 'czEjY', 'ScTvy', 'pIeaf', "mpar ", 'UnVpK', 'WNRqW', 'ufici', 'rZULT', 'BXiQq', " digi", 'IRjXz', " Coma", "t são", 'UfpcG', "𝐍𝐄𝐒𝐀 ", 'BVdCo', 'QycGt', 'MvdLI', 'IWtDK', 'gundo', 'msiZK', 'PKdvq', 'hoUtF', "I de ", ", pre", 'NTIDA', "i ale", "no li", 'ulZEk', 'dRK2I', 'QpnQm', 'kfmfD', "ec [q", 'HKoGg', "nhã p", 'wCtUf', 'pkvQm', 'SqRfx', 'RGDBG', 'hPgzS', 'rtici', "Data ", 'api/s', "S* pa", 'ThISM', 'yybvv', 'azatl', "quis ", 'VaATe', 'qgeUs', 'bgKCD', 'a01ff', 'iCYTZ', 'lerfo', 'yrdUf', 'tuQVk', "(Por ", "TMAN ", 'yVzJp', 'terti', 'ielib', 'YbyVd', 'Grave', 'nt.we', "│└─ 🚫", 'vidad', 'bela', 'CGqEk', 'onsis', "Está ", 'SUPER', 'alert', 'Tamil', 'yPfmf', " a at", "is nã", 'oji:', 'ACARE', "💭 Mot", 'Wjxzh', 'BdtOh', "ker 🎭", "ão di", 'EMjuV', '┉┉┉┉┉', 'IvUgV', " apag", 'TTZoM', 'fDDUb', "𝐄𝐌𝐏𝐎 ", 'rativ', 'sitio', 'XTgpb', 'qYcVx', 'cFvKd', 'faz?*', 'lxTdW', 'MisbX', "A MAI", 'AAO-7', 'tter', 'VENCI', 'rovei', "s \nFR", 'vJHMG', "l` (t", 'bMLHk', 'expli', 'ativa', 'ppxrj', "- Esp", 'me]', 'iFHRW', "\n🔵 *D", 'VMAox', '23819', 'ugXRr', "ta fu", 'ZeEuu', 'MANUT', 'RPOMf', "zes h", 'IqoxJ', 'eraci', 'WJanv', 'uxBwF', 'ivHUj', 'keEcd', 'rOxaL', 'sOFDY', 'FzIRy', 'grama', 'ont.s', "🤝🏻\n\n🚨🚨", 'ntida', 'igado', 'dateS', 'sMTQG', "tudo ", 'OSkSp', "❌ Açã", 'erMes', 'qtiSD', "tre 8", "ES SE", 'Bspud', "┃ 18 ", 'eto)', 'nbRcD', 'TALHE', 'nowpl', "o esp", " prin", 'nqcgD', "ta, e", 'yTuOI', "tão [", 'YUbyB', "de, c", 'ttp11', 'jogo*', "io ra", "ndas ", 'vvklT', 'fiiSB', "om du", 'GlDzx', 'SLGZz', "ou nú", 'yskfu', 'fGLBC', 'ohCwM', '.0.te', 'NToBt', 'jDUFe', "!\n📊 T", 'antii', 'egend', '_eph', "* ⚽\n\n", 'ZqCMX', 'wUiFx', " os e", 'avata', "[ 2 ]", "no ca", "tual ", 'QDfdl', " Cone", 'JchFn', 'PwLKo', "┃\n┃ ❌", 'ttp12', 'ATIVO', 'dMUTK', 'mEUtg', 'FVOfT', 'Jfcva', 'nscri', '/wa.m', 'XWott', 'DuyUY', 'u01nD', "nny, ", 'WerlR', 'lehcG', "🌟 𝐒𝐎𝐁", 'kEoGM', "ass s", 'IGoTl', "itas ", 'Xapwv', 'en-cl', "m sím", "o o a", 'SwYaa', "ERE e", 'ualqu', 'LFzex', "\n\n🔧 *", 'najZW', 'CcZPo', "do Bo", "de XP", "o\n🔸 U", "IDOS ", 'QqrJZ', "erá s", 'sEOLV', " bot\n", 'goNaQ', " Tiny", "ra ac", "3 por", "i Int", "g não", 'calc', ") pod", 'RlbaQ', 'EBXci', "s tam", "a rem", 'MnFal', 'urar.', 'dvtIr', 'HEQit', " ORDE", "a` - ", " GB\n╏", 'UbbPx', "er ut", "tas\".", 'crGoK', "de te", 'pLBaf', " - Re", 'mGYot', 'omoed', " é um", "s res", 'CrEKP', "* 🚫 B", '@spam', 'zNMVp', 'aHjNv', "car: ", "lo: h", "⛏️ Voc", 'wVnQX', 'GAqXZ', 'U_MEN', "\n🌍 *E", "━⊱「 𝐒", "os ca", '•ೋ°', 'as/ma', 'aCrAr', "𝐬𝐭𝐞 𝐠", "r que", 'IzmgK', "\nTemp", " a mi", 'VOegn', 'enhum', 'vKWPw', "ndo i", 'LETA*', "\n- Ur", 'qgVQN', "teio ", 'arsva', 'emáti', 'perfi', 'ário`', "lo bo", "ro do", 'SiSAE', 'yGXmS', 'parpa', "or, f", " prát", 'NQFTf', "tas u", 'GexzG', "┃\n┃ 1", 'eYSUV', "- Sem", 'NSwrq', " Alea", 'VsOyH', "\n│ 📊 ", 'gClOb', 'eBwGA', "is ne", 'OWZXD', " Apen", "ir\n├─", 'scolh', 'Grand', "o]` -", 'ctSeQ', "🎯 *Si", 'xqRef', 'MXNrr', "A* 」━", 'jHNKK', 'pg?pr', 'r=002', 'nívei', "IRA A", "tal (", 'quisa', 'xIrVz', "nte [", "a, ve", 'tHzmH', 'crpKi', 'okCgg', '1.pos', 'ro-se', 'tcCmW', 'louIX', " sign", 'KtwrU', 'GOkfr', 'BRL', 'MYIgH', " ajud", "t esp", "s, ba", " *Adm", "er fi", " Prin", "ens d", 'LIMPE', "o Exe", 'yefxV', 'wjoqh', 'sgato', 'talia', 'HNPdn', 'kyDoq', 'sendS', "2025'", 'tvdBj', "qui. ", 'vitor', 'sejam', "🎁 @", "l do ", 'Conti', 'com/s', " letr", 'memes', "e sai", ": *@", 'BPNRn', 'ERROS', 'yZzdi', 'is_au', 'veis:', "o:\n┃ ", 'VCiOd', 'PijEI', "de, r", "🧠\n\n👤 ", 'edeus', " o ra", "「 𝐀𝐉𝐔", "er De", 'vYbsu', 'oCjYI', 'EMhQd', " as p", 'TDmvL', "acks ", 'NOVO!', 'zSsfC', 'fpklu', 'bNQTd', "po ", 'CIthX', 'JIokE', "ir pa", 'ter:v', " duel", 'trado', 'kkGWs', "alor ", 'cadei', 'szCjK', "ima l", 'HlkED', 'GDiqk', 'gyjvM', 'ile/0', 'cAzoS', 'ZNjDf', "aço v", 'giTaz', '┉✼┉══', '*ID*:', " só v", 'Versõ', 'mite:', 'xxiyQ', 'GRuJp', 'stamp', 'OJGVI', 'ERXqx', 'QzFal', "❌ Dad", '𝐓𝐀𝐓𝐎:', 'PCTOb', " (ape", 'jPKNH', 'Ganho', " uma ", "📚 *Ti", 'TINGI', 'agado', 'xVvsd', 'Azbap', 'cnica', "a ros", "eja r", 'nPYLS', 'wriEe', "a ter", "o\n└──", 'enta.', 'hMcAu', 'CQtbZ', 'kfEcM', " abri", "ent, ", 'XdcAj', "vai m", 'fLfZo', "W DES", 'sabil', 'CqJqr', 'Hacke', '=-2%2', "ono c", 'dor:*', '╭─━━━', "es té", 'MFKxu', "👥 *Me", 'AyOGj', "/ Bra", 'TWKOh', 'dia|', 'IpAGy', 'GNvvk', 'GKoiQ', " desa", 'eleci', "ite q", 'gaENI', "1-6] ", "se ch", "u env", 'NOITE', 'myYeI', "┃ 23 ", 'Tlxgh', 'acare', 'GGkvi', 'xFXRd', 'jKSmk', 'ZYHsg', 'd56e2', " vai ", 'yoyTn', 'sJHzL', "𝐒𝐒𝐎 𝐍", 'adas*', " desc", 'edits', 'uiCxf', "a enc", 'CFHmy', 'lgbt', 'cikDE', 'sXsWl', 'cOtHv', 'sYxJZ', 'AFyFC', 'yfIPu', 'FFyjp', 'ZiwVV', 'qTjfS', 'ersõe', " = ?\n", 'tênci', 'UcoGi', "°🌚💕\n ", 'upo_i', 'OYEWD', "\n┃ pe", "har o", "ono p", 'kbQji', " de D", 'OiWFt', "d [qu", 'BbStw', "\nAnal", "rma: ", "!* 💢", 'XDXVG', " jogo", "O NUM", 'lgefQ', ")\n• C", "er WA", 'hDhQP', 'omxok', "🪻* \n ", 'SWYyi', 'pyVJV', 'ndDqP', 'dYuRL', "e mem", "ao cr", " ( Ob", 'uZYGk', " vesg", 'gadom', 'NFD', 'pnaZL', 'cHplj', 'rXzmV', " 🥇 1º", 'DeboE', 'escob', "a int", 'GsRCJ', 'WPGEl', 'fvZBX', 'CVaMX', 'santo', " Bane", "\n\n🔄 U", 'oFDaX', " is_h", "em ne", 'oHrgC', 'OSnyo', "┃ 🔄 T", "os (", 'gif-m', 'vmsg', "\n└ Ex", 'ce.', "ão sã", 'gnrWx', '━━━━━', 'remiu', "*📁 Ca", "\n• *P", 'twLuq', " cora", 'kktjA', " high", 'HxYhq', 'ISTRA', 'jsons', 'zePzh', 'CsgyR', "d @me", 'Jihno', 'cKYyK', 'WkZiJ', 'orjad', 'clima', 'gIuAa', "zar u", 'FuZOZ', "afk W", 'kWjFk', "tras\n", 'g_car', "om ou", 'OBAL*', 'CZkVR', 'cjWJR', 'beRyZ', 'EbJFG', "\nhttp", "nt) V", 'hWZfN', 'HCeId', 'aWjgp', 'dsm', 'IRrpV', "o ven", '𝐈𝐀𝐃𝐎𝐑', 'plyaj', 'mvxnU', " tamb", "600 s", "\n*Uso", "1h, a", 'QCMYa', "o ATI", 'qTtCv', 'advli', "tei u", " do r", 'gicms', 'FvwOu', "ste g", "la es", "ó fun", 'AHroQ', "🏳️‍🌈 *Or", "lido ", 'ote', "ser t", "os, a", 'vqWkg', " ☹️/wh", "e, vo", 'yOdMT', "de CP", " off`", 'Atual', 'awKUK', 'figur', "Erro ", 'uvIqN', " (adm", 'rZJim', 'rejei', "ue en", 'cance', 'zTjpn', '752be', "mo co", "📁\n\n*D", "os fo", 'eXpFr', 'KpGfG', 'QFmNV', " TEMO", 'jysIX', "es\n🔸 ", 'ycoMF', 'ados.', " indi", 'ível', "de da", "uns m", 'onal)', 'apAvY', "ero d", '(720p', 'gjPqB', '12:00', 'MqPmu', " o an", "\n💡 *C", "e det", "👤 Voc", 'yOWGz', "ɪʀᴀ🍁\n", "ar @u", 'ERHVM', '𝐫𝐮𝐩𝐨.', 'xGMrh', 'aiZpE', "ser b", 'RqVNG', 'JCJLG', "vai t", 'quiag', 'EejJI', 'jOrTQ', "ld @u", "ate =", 'ikdyr', 'hrp_', "Seja ", 'JlxTL', 'encio', '...', "enu c", 'uinto', "m o m", 'ional', 'ad1b5', 'pSbxs', "res n", "nto m", "⊷\n𖣘⃟ R", '19e7a', " me r", 'OOCNX', 'celul', "o) ai", 'force', 'JZjAp', 'syEPS', 'meus-', "por b", 'NsWMN', 'o|Olá', "a ran", 'lkqRw', 'jEkmP', " do a", 'iuIkf', 'WNyLV', 'prem', 'ffqqE', 'ool:*', 'lava', "💰 +", 'FbgCH', "tra v", 'hWbfV', 'cQgkS', 'saMtH', 'mSZZa', 'aOjtm', 'KCwXI', 'FnWjX', "━━╝\n\n", "em en", ':v]se', "──\n│", 'sgold', "s rep", " \n┃ g", '┏━━━「', 'visuU', 'NZDTK', 'upEYJ', 'aEGKs', 'scar', 'fileS', 'CQnyP', '|5|0|', 'ampom', "nos r", "xos n", "inco ", 'Pggpi', 'OODkX', 'lay/f', "de Ca", "do vá", "o, ma", '𝐄𝐒𝐂𝐔𝐃', " Jack", 's-aut', 'trito', 'mtLii', 'HhQOw', 'OaZeV', 'BIKIN', 'KABNZ', 'xXZdJ', 'czECH', 'OygTX', "nos d", 'hzApC', 'ando.', "o / p", 'NHhsQ', 'faces', "cê co", 'xuxlz', 'UyeSd', "S DO ", 'e/mai', "ra 75", 'LdbGU', 'MtAPV', 'manen', 'AWUsv', "MIN V", "dos a", "Você ", "l. Co", 'iaAex', 'nuten', 'UbWdn', "API n", 'qRJqm', 'vxFcX', 'SzeQt', 'olori', 'peg', 'UpszJ', 'dvcLR', 'Astro', 's_avi', "jis: ", "em ci", 'JEDEC', 'sQlck', 'bolao', 'zenit', 'ansmi', 'MqZJF', "d @us", " e ou", "ara @", "eo ex", 'abnad', 'SCorJ', 'ticta', 'yrsuC', 'ctoe', 'raEJF', 'h2:', 'fcGxe', "\n\n✨ *", 'getBa', 'CmFKs', "old d", "s con", 'downl', 'charA', 'XURws', 'LYFmR', 'ivar-', 'MAIOR', " ines", "📌 Whi", "s e v", " o ca", "ar a ", "er qu", "n: ", 'LBrFe', " \n┃ E", "EIO I", 'ites.', "nte t", "O ADM", 'divor', "A ATI", 'jGmLK', " Info", 'iAVtj', 'TpJwb', '//br.', "o: `", 'pbwbr', 'Ojkqu', 'kOOgN', 'Compr', "┃\n┃ 2", "M sis", 'UXFzE', "1 mem", 'CONTR', 'aLoTw', 'jxSFR', 'Agora', 'SCvld', 'tOwMJ', 'wAVEZ', 'eCznv', 'cShWa', 'ivar.', "┃ 🚀 B", 'porce', "com t", "ação ", "a*\n\nN", 'ycqpD', "s\n┃ 📂", "6 Edg", "y\nver", "* Tog", "t 123", 'ascul', "\n💰 *A", 'PaQHF', 'SrkNg', 'arde.', " aind", "uma t", 'eVoqx', " PAU ", "ER O ", "r cac", 'p_atu', 'qnSOr', "do, t", 'AlrGF', 'OWjZm', 'Uyzic', '-pt/t', 'hCjPB', 'AQKig', " (tot", 'BKrjm', '𝑫𝑶𝑪𝑼𝑴', "sso n", 'YNlUj', "\n│‣💧 ", 'ytsea', 'wOFfW', 'isGro', "inge ", 'QbHzg', 'vHPvo', "┃ 💥 O", 'yzJSL', 'thian', " um g", 'witte', "e gra", 'VtQLc', 'JWAkZ', 'ZAHVZ', 'Praze', 'as!', "já in", 'MokgY', 'HhyfW', 'Ikhys', 'EMDhT', "• Gru", 'fGlEs', 'xhurd', 'mItZF', 'zSaTd', 'aPxVD', 'rgDhs', 'JifNd', 'VADO*', 'xkbda', "ndo u", 'ral:*', 'pPlLn', 'Wbiqr', 'qnLqN', "\n*• T", 'nais.', 'jZPCP', 'WMLCM', 'xos', "car t", 'kIrYu', "o é p", "dm - ", 'ário', 'olvid', '|0|2|', 'LDVxC', "sar c", 'nqUTH', 'cesso', 'jPwGj', "ro?*\n", "e sta", '0:320', 'jvhwO', "lds* ", 'iras', "lhar ", 'UdpCR', 'ializ', 'jblCx', 'gNJmO', 'xFVET', "!\nPal", '214e4', " de j", 'acedo', 'uevHK', "ub co", 'ReGUv', " 🔗 Li", "os no", 'QCbIC', 'eTiTQ', 'isNzc', 'ZOzsO', 'XVuQy', 'metad', 'ng=pt', "% do ", "━━╮\n│", 'ited,', " tags", 'pnezf', 'nd.op', 'WzFKS', "18 5", 'JenwL', 'YixnI', "a`\n\n", 'AGMwf', 'VefnG', 'jictH', 'uoRxd', 'kstNo', 'jyMof', 'kKOMC', 'wDmmg', 'LSkoS', 'sREUq', "enu (", 'movid', 'senpa', '/﹋<,︻', 'confi', 'eianz', 'GzoKx', "tão \"", "vo: ", 'NhhAq', "nos p", "te tr", "o via", 'qflIa', 'EQXEI', 'kPMiz', 'UMENT', 'FmEBw', 'gHjgj', 'rargo', 'kqYjh', 'NkPtJ', 'EsyCt', 'ecomp', "i e b", 'DDHAO', 'nXkDn', 'isGif', 'mcztP', '|1|4|', 'attp9', "iro. ", '/Imag', 'neFhr', 'Invit', 'rQJVc', "s\n\nEn", 'da_vi', '═༺◈✼', 'nkcRV', "er XP", 'wRmSV', 'uel.', 'NxIsN', "a \"li", 'roup/', 'vyYmN', "ns do", 'om/in', 'adult', "so, a", 'poumG', " humo", 'nEliE', 'máxim', 'PFUyI', 'yBLVk', "m rel", "(+ 1h", '8f6Te', 'UpbXL', 'temas', 'ch__l', 'ADEIR', 'nwvmk', "a : @", 'p_cri', "DE 18", 'jdVAf', 'XiIGu', "*\n║\n║", 'QrgBn', 'xhmdl', 'MsgnK', "in ap", 'banir', "II\n┆║", '00|13', "ra a ", 'jeZaY', 'mxUgX', 'peite', ": `re", "rar r", "│└─ 👮", 'UVSLS', 'RZOXk', 'o(ões', 'uaCwu', 'TlzpC', "dade ", " Week", 'gFcro', "!* 📷", 'userD', " a qu", 'preso', 'x9vis', 'EVaIr', "L: ", 'adast', 'XnkfX', 'novar', "𝐎𝐂𝐄̂ 𝐏", 'XIOfa', "RDER ", 'gcpDu', "S DEV", "p4 12", "𝐑𝐀 」⊰", 'yjIqh', 'spoLV', 'rMOpj', "\n│ 🏵️ ", 'colhi', " COMP", 'imABp', "dor p", 'gSYQN', '.fami', 'timos', 'BOQKW', 'ime', 'urCjQ', " a + ", 'EwHID', 'bbFgq', 'ScXZF', "ja ad", 'aleSt', " o bu", 'dos!', 'xXRXS', 'vqRGg', 'onha.', 'prJqp', "Ls lo", "s hoj", "ou f,", 'oSEOv', 'iIeOC', " Rein", 'pkirx', 'ROS👥👤', 'olLuz', 'goldS', "Que g", "om op", '56520', 'destr', "Jogo ", 'vhAzG', 'Fnrdf', "por a", 'QcSch', 'cjTNh', 'HIQvg', "✅ Com", "em ba", "c() =", 'WFUre', 'ARItq', '/fras', 'uAjjq', "ler c", 'joker', 'XlmwO', 'deIso', "𝐄𝐑𝐑𝐎 ", "rada ", 'raclK', 'rHIJY', 'AmhUb', "ct \n(", 'vYpaz', " / ra", 'uKJmN', 'ibprW', "ser c", 'LUGUE', 'PzrFe', 'rfdlQ', 'ostad', '?:??', "Os ra", 'UQnbf', 'JanSu', 'ZwAgz', 'tor*', "te!\n", 'qfrvy', "eros ", 'e...', "m usa", 'eXcnY', 'acont', '/meni', 'tm_me', 'Awufy', "o: #", 'pGwol', 'rxTwE', 'nepRm', 'gunth', 'HSIes', "e o e", 'blStz', 'ficaç', 'otAdm', 'gif-f', 'InJWz', "ha ou", 'evelg', 'bdraq', 'Vqecm', "io, s", "*RAM ", "O val", 'ENlpt', " 𝐯𝐞𝐥𝐡", "old\n\n", "m a r", 'odend', "es) V", 'IAwhO', 'temPo', 'BpgNO', 'oEdrO', 'firDQ', 'unida', 'yImCv', 'nBNSF', "aja a", 'tmiaP', 'feio', 'king:', " DO L", "pa pa", 'SANEM', 'CKKPl', 'oYkPK', "ndo 1", 'pHDGd', 'qejZm', '31ff2', 'xbYTb', 'xwyon', 'rassó', "✈️ ", 'iIJHa', 'UlkJt', 'oJCzn', 'uunic', 'qlbyX', 'REGIS', "vo, t", 'XKzAb', 'smiwB', 'Pront', 'ryVXW', "e rem", 'cdIQN', "os - ", "us po", 'cYokY', " Recu", 'irarx', 'NCIOS', " Comp", 'notas', 'cWHHy', 'pnuZb', 'fPqDH', "S JOG", " @ de", 'WispG', 'iSaYd', 'GDPNt', " as i", 'playm', 'tema:', 'to...', " 𝐊𝐀𝐑𝐕", 'HhCsU', "vo en", 'keren', "\n\n👻 𝐌", 'itgWp', 'elsiX', 'onvit', 'entre', 'Kjucs', 'pleta', 'pHAIG', 'AVBDW', " 𝐀𝐆𝐔𝐀", "TO!\n💡", 'zdOxO', "boa q", 'mazen', 'onfig', "👑 *PE", 'nSPpJ', " 𝐋𝐀𝐘 ", "ia gl", 'kVeGy', 'JiKPI', 'toric', 'Gupmp', "io pa", "𝐎𝐑𝐀 𝐌", "ado*\n", 'BMKmA', 'lnpZc', 'tJLgB', 'ahYPe', 'xar', "a sol", 'YlDss', " Prot", 'infos', " USAR", "𝐎: ", 'wEhyF', "das n", 'alha:', 'VBqIX', " Ela ", 'vkpPq', 'ONckN', 'rary', 'ctZnq', 'YcQBf', 'HhfuM', 'qTKya', 'ylejj', "⏱️ *Te", "roa r", '110%.', 'VGEcP', 'hOOfc', 'fVIGr', 'OrJdR', 'TiuLg', "all`\n", 'IkeFg', 'GfTpe', 'OIGAC', 'MQdJZ', 'aliaç', "mg, v", " = hp", ", 1 e", "tin: ", 'oamCr', 'fig', 'CnTLB', 'doarg', "ar go", "]`\n└─", 'ZDTTR', 'jpeg', '/Bell', " falh", 'LQafw', "a @", 'nsCAE', 'kYZIT', 'ZaSrG', 'RYhwJ', 'YmRcT', 'mereo', 'QftAZ', 'WUTsA', 'GTNYm', " /50 ", 'DqRjT', 'QFLPL', '3|2|0', " 」\n\n", " 」⊰━╯", 'YaaZG', 'rlxJE', "o.\n\nP", 'TKCxe', 'WToEQ', " 💰 Sa", 'pINCM', "o alu", 'drRrl', "👤 Usu", 'awoAC', 'ZFfJF', 'arvis', 'com/I', 'ICIPA', 'wBNrQ', "u tod", "dos à", 'UqJjQ', "seu \"", "𝐫𝐚 𝐚𝐥", 'riber', 'vfqTc', 'mente', " Eita", 'FIuBI', 'descr', "𝙽𝙾𝚂 𝙲", "U! 💔\n", 'Futeb', 'iNxCn', 'uofXz', 'lrsni', "rém n", '99000', 'NomeD', "ta* ║", 'HvCEB', 'CUnHQ', 'dZODV', 'njdBj', "al)\n", "m hor", 'Theme', 'MmvpS', " RICH", 'OLQdg', 'ldmhr', 'pRxuB', 'LTwwf', 'OJlIT', "ྀ🚸 ི⋮", "e!\n\nV", 'kfvZO', "LT 0,", 'ono2,', "━\n\n🎮 ", 'wmbLG', "[seu ", 'encim', 'Ksrwm', "\nAgor", 'fceTQ', 'rca', ".\n\nwa", "l reg", 'updGt', "g dos", 'rzvDB', " 🤡", 'url]', "RTE! ", 'IdufG', "🧠 *SE", 'nBYfr', 'er_id', 'aaeeA', "O: NE", 'PgjIn', 'ndo.', "sos p", "lgo d", 'DCqCR', " 🙅‍♂️ EX", "se ", "HOU! ", 'ZvLxB', 'tlJEN', 'xMvCq', "os\n╏❆", 'ar_go', 'FaEVv', 'PnXlR', 'matri', 'aGntS', 'WHERE', 'ItWQX', " o(a)", 'ultra', 'kIqTX', 'ytmp4', 'ySaim', 'viewO', "\n\n🗑️\n❲", "eu um", " 𝐈𝐒𝐀 ", "bine ", 'ICnwF', "e o t", "de al", 'r%C3%', 'LjWlq', "🏠 ", " Java", 'bOFXQ', "\n👥 *P", " tree", 'EhynZ', 'vcKff', 'dcbQN', '85bcc', 'kRlzl', "uto F", "\n┃ ❌ ", 'ehpIJ', 'Desco', 'lZrjy', 'ativi', 'ivxUZ', 'sexto', "al, i", 'wvYhS', 'PiIJD', 'XTOzL', " no p", " de 0", "App e", 'OJWgI', "ens n", '𝐍ú𝐦𝐞𝐫', "otos ", '|𝟠𝟠𝟠|', 'HXQvf', " bom ", 'ZtYaX', '1|4|0', 'NZWTC', "────\n", "rar l", 's/Som', 'KPlHA', "te é ", 'horar', 'WATrg', 'Apaga', " sai ", " Pack", "o WHE", "iv ", 'FmZPq', 'orial', "P: ▰▰", 'nxysh', 'drpds', 'Hunnh', "s o d", 'iBwfe', 'hocol', "e of ", "𝐝𝐚 𝐨𝐮", 'qwgEF', 'RSOS:', 'FonDD', '://ur', 'curso', 'LIZAD', " 23:0", 'isFor', 'STICK', " ⏱️ In", 'MjdCI', 'datm', 'YUDve', "io ca", "o 1 ", "\n┃ no", " 0\nIs", "m and", 'odyiu', 'NMgej', 'cBAad', "✼┉╗\n║", 'ispos', "s men", 'HcQCq', 'batsl', 'VaBxR', 'BfjXM', 'WbQKi', 'AfssS', ", alg", 'ZiVBK', 'TYNTP', "mbro ", 'ficti', 'ltima', 'HdoaH', " !gtt", 'FYOLP', 'YYjos', 'afio.', 'wlmfr', 'akBnE', "──\n", '_admi', 'i.bro', 'Mante', 'TkBkT', "no po", 'LReOI', "💕 @", 'e-arc', "rou (", 'talog', 'kvobM', 'hXrJR', 'yLtGG', 'Propr', " Lotu", "s ATI", "DO* 🚨", "mado ", " (vie", 'api/', "ano\nb", " (par", "enu _", 'qyLTL', 'OYLNY', " HD!", 'praia', 'HSJEs', 'DvJUQ', 'paMrA', 'LPEUN', 'akDay', 'LastR', 'po)', 'RAN', 'HtkjM', 'uvhuu', 'UWgAC', 'anula', '├────', "❌ @", 'mrHut', "r mús", 'mDhVF', 'LJZoS', 'ecarg', "la do", 'qyYoZ', "das\n🚫", "har =", 'wdVc/', " sint", "nt IN", 'OujYC', 'GFcPd', "CT * ", ", url", 'itidJ', 'CSKrJ', 'IdFuI', 'perda', 'OHmLg', 'owiHr', "ou ví", "r ran", '91548', 'uWCLg', 'TH2', "ta ✓*", 'jWZeq', 'pMgBI', 'mMJTC', 'lxpFJ', "❌ *SI", "o até", 'jMvEg', "a:*\n-", 'nfo', 'CwdFU', 'IwBeZ', "do1 1", 'qVjZe', 'THREb', 'onedJ', 'VeJJn', 'Zolwe', 'NeRMy', 'wNsqw', 'qMXrb', 'AWtdO', 'xNTUH', "al: *", "de um", 'CRHlo', 'ZKwoB', 'Umida', 'AzKOe', "e núm", 'PvTCR', "S AS ", "❰ Pes", 'o/zPG', '𝐑𝐒𝐆🔥', "T 1", 'io/ví', "to:* ", " o co", 'gent', 'awRjk', 'Cevth', " musi", 'FhrPH', 'XOouD', 'SANRt', 'ulgaç', 'cyIyC', 'queáv', 'bnd21', 'STxmy', "ima h", 'SzkGx', 'ifFxN', 'dmtgG', 'qdRhe', 'asile', " *Mín", 'UhcdB', " Ital", 'espos', 'QGPqd', "ium! ", 'XYwcR', 'yiKzk', "⏰ 𝐎𝐧𝐥", " próx", 'ciden', 'WFQyL', '🤖RANK', 'elaci', "argo ", 'ltero', 'carta', 'nSlhA', 'toFix', 'usand', 'asDay', ", msg", 'FoZOO', 'uts', 'Fklnh', "mar`\n", 'uhfpp', "raja ", 'bgusx', "gado ", 'reZSI', 'xícar', 'rGWXP', "eúdo ", 'ado..', 'qflFJ', 'WTlJF', 'Princ', 'hCGmD', "o. Re", "o cai", " e Go", "` par", "GP PA", "📊 Con", 'NlmIa', '_stat', 'nmUyB', " 5521", 'lBbuH', 'Whats', 'toimg', 'hdvUi', 'flags', 'CBePM', "terá ", "o] [m", "ndo m", 'perde', 'AWupJ', 'FSReU', "nue i", " brec", 'wngJU', 'CyDSc', 'AR_MS', 'aaYfc', "\n╭───", 'hyYBm', "ão: /", 'trim', 'HuXcq', "o cas", "attp ", 'TeSoa', ") res", 'nsegu', 'e=221', 'UJLLv', 'omati', 'fluen', " Mine", 'ncion', 'VHokk', 'KpXrg', 'nick-', "𝐃𝐈𝐀! ", 'irWJk', " meta", 'dTTmc', 'kddET', " (equ", 'kEgRk', "dem u", 'NBhVx', "*\nTot", '0d871', '_list', 'XjFEs', 'aluga', 'Thehs', 'relay', "as al", 'NDVAA', 'jaBci', " /24h", " {p}l", 'dentr', 'tipv2', " tabe", "\n\n🏆 *", "𝐔𝐌𝐄 」", 'BaqPd', 'qUwYW', 'hpasS', 'YXMQm', "por /", 'roxjo', 'GP.we', 'QDReM', '👨‍🍳', 'moção', 'rNgIV', 'qeVgR', 'xsnZa', 'nvbSj', "e col", "o irá", "d ytm", 'ta.', 'osati', "la ex", 'empat', 'zxVlb', 'qLmZb', 'RXahz', 'corin', 'gens', 'plkVQ', 'you', "to an", 'goldd', 'ZwByG', 'pXXxz', "h | 👥", "ara m", 'initE', 'nuoGy', " Conf", "o\n└ S", 'er.', 'RARQU', "vos [", 'aXNiA', "to ac", 'ico)', 'IwJVg', " 𝐀𝐓𝐔𝐀", "imo h", "não, ", 'lWkOg', 'SOyoR', "*\n\n✅ ", 'JVbOH', 'embra', 'uídos', 'vWBWd', 'detai', 'HYBPN', "NDO S", 'kRvIP', 'ᴏʀᴅᴀ🍿', 'isRec', 'goku', 'utm_t', 'JOnRE', "fy ht", 'Vppxy', 'oKmhD', 'AVStF', 'hador', "o!\n┃\n", " a Ta", "!\n\n", "ado é", 'NJSUj', '*FOTO', '.font', 'ZoKdG', "\nsetm", "em se", 'OeVBg', 'HTVHy', "s Prá", 'ACDmc', 'ea4b8', "MARY ", 'Gjpkh', "os pr", "e inf", " dia.", " 𝐡á 𝐧", '01/01', ':g=15', "to ex", 'oroa', 'izer=', 'Encur', 'PRECI', 'lovak', 'axdqo', "│ 📩 M", "t, us", "\nADM?", 'algun', 'perfu', 'tual.', "á mem", ": wa.", 'LLBgX', " *🪻𝐂𝐑", " o so", 'yLnZm', 'zdEIF', 'iwQjd', 'EwnOC', " modi", 'main', "cas d", " xp +", 'onder', "S 𖣘⃟\n│", 'terar', 'LLjfj', "r o d", '𝐑𝐀𝐃𝐎!', "tra e", '𝐔𝐊𝐈🔥', 'akMJM', 'skIts', "k é p", 'me2', 'HhnjO', 'ze=45', 'YMKdL', 'resa', 'ZdBcO', "𝐎𝐓𝐎𝐒 ", 'ndex', "togp ", " dias", 'KreiR', "DDD ", 'RTLE', 'dQoUn', 'BqqyR', 'medie', 'tsJtb', 'l/bra', "r em ", 'AME:🚸⃪', "gban ", '[mens', "✅ O N", 'uSXiB', "a:*\n", 'IGGER', 'ranko', '*Escr', 'Anime', 'NcQuU', 'mdUKK', 'd_use', "ndo r", 'IJprm', 'Nenhu', 'eGQtx', 'ader', 'misso', 'lvUuc', 'ksYPg', "O PEL", 'da_ca', 'yuPTF', "ege c", " bast", "bot B", 'tComm', 'IJRcv', "i e o", " ambo", 'apres', '55219', 're<3', 'bHTbm', '.exif', 'bBqyM', "+18 p", 'McQfs', 'fAqbK', 'nOhJY', 'auGOJ', 'jiUlS', 'qnyaq', 'rYPzt', 'YJIGV', '_tran', "ões, ", "ÃO CO", 'RHAWR', " 0 &&", 'jHCww', 'rocar', 'fNlHK', 'ENVyG', 'mcSWe', 'mblyA', " 𝐃𝐀 𝐕", "ra\n• ", 'teio_', "⊷\n│ 📈", 'rrvGY', 'jiNLG', "• Se ", "` - S", "❌ BEM", "do\n┃ ", 'wbGyX', 'znhfY', "u int", 'dvXmB', 'glyhy', "el. R", 'x9_li', 'BbwRG', "x a", 'CBKpk', 'XKRjI', 'ios_r', "a \"", 'DekdC', 'jIVvL', 'GIlCQ', 'gEXaw', 'rJdGb', "\n「 @", 'IVKrw', 'tuEOn', " ao a", 'amily', "ir to", 'ikwQR', 'ssbpH', "𝐋 𝐃𝐄 ", 'ituir', 'XHvVU', 'os]', 'gOFgt', 'GRUCC', 'ina-c', "ua o ", 'kezcl', 'ajmfX', "10 pa", 'DGClN', 'Compo', " só f", 'IiAVo', 'QbLyq', 'daduO', "ga co", 'PzpYl', 'CIllE', "o car", " 𝐃𝐄 𝐎", 'rotas', 'wHtdn', "me o ", 'gqjqO', 'mVhza', 'FkqhG', "ot po", 'iaocL', "ou bu", 'jEjFG', 'rock', 'ARPou', 'EHKYA', 'smoke', "ua am", 'vdktY', 'ytmp3', 'fvJBP', "rio @", 'JXsel', 'fglUK', 'tiga!', " Regi", "vo (📝", "bros ", 'BTwmq', 'WAI', "*\n`", "m rem", 'rDlJP', "upo ✔️", 'rIfPj', " 𝐍𝐄𝐆𝐀", 'b8ac4', 'FffgY', 'gRgKE', 'sNcFl', 'istor', "da\n┃\n", " role", "🔹 *Co", 'qPRAz', 'MqAmo', 'zEXXv', 'THAI', 'naMui', 'vcvEb', '--ht-', "do é ", 'qMeBo', "só ag", 'czwau', 'nfMun', "m\n\nVo", 'ndos:', 'CSRyG', 'tTlbW', 'mitaç', 'ouro', "te pr", " Menu", 'NDuja', 'criou', ": Fib", 'eRcfd', "IA MI", "io ti", "e rep", 'gKpfj', 'ynPjj', 'vrhUB', 'wIAGm', 'RENGO', 'npVhM', 'VMzva', '٨ـﮩﮩ٨', 'kiJTD', 'aders', "ocê é", 'OAXqg', "e '", 'Padrã', 'blema', '】ɢᴀᴅᴏ', 'BqdLD', "riar ", 'ngVqf', "cia g", "uém p", 'ogKwy', 'GPDhA', "a mes", 'bSOlW', " há a", 'DjEnU', 'jKPoI', "PRAR ", 'VBLPk', "e pac", "nda a", "abe c", 'migos', 'wfXCB', 'Ancvh', "no)!\n", "is ou", 'vWqCC', 'heKaE', 'lUUzf', 'SUDdq', 'omVGD', 'QYeFu', 'qJXSk', 'colet', "\"glob", 'IiLjp', 'zIKuS', "ium o", "e o á", 'BWxoY', 'qWLod', 'IpSek', 'cDvfk', "❌ *Ti", "á, co", 'VbUWe', " (exe", "ura! ", 'princ', "pot!\n", "⏰ 5 m", 'nquet', 'hKYyG', "ivo p", 'nKfHU', "\n┃ 💵 ", "OSTA ", 'CQFWZ', 'hDAJj', "tos a", "Não R", "gos*\n", 'CRQVR', 'aUWnM', "ATO I", 'kCWuR', "sua a", 'APYii', "xibe ", 'ites:', 'ufWop', "rar h", 'USUÁR', 'APFDj', "Bot: ", "a o f", 'ZebIQ', 's/raw', 'nKsmv', 'RMcvU', '//wa.', "AS ES", "Use e", 'EaIyu', 'GHAMi', 'idos!', 'bilit', 'cYcbY', "a: ", "of ou", "S 🔞 」", 'PdiLZ', 'IlSKJ', "𝐕𝐎𝐒 」", 'wmiwh', 'muQlB', ", apo", 'AqlMA', 'hidos', 'xbsnr', 'iotMq', 'w/api', "s 3 a", 'nqnIR', 'spFFw', 'NeDbi', 'elada', "💰 Mod", "ossa ", "es cl", 'ybzyW', 'xXNsa', '01.0.', "s` - ", 's/mid', "empo ", "usa u", " & ES", 'greys', 'nk]', 'ossue', 'ntrat', 'versa', 'UEYNP', 'gem_i', 'YHFME', " (Men", 'XoACy', "𝐂𝐈𝐀 𝐒", "eças ", 'EZxMJ', "✅ *TA", 'pRtmk', "o ID ", 'sIJJy', "\n\n🎯 *", 'XwZGa', "ot 🤖\n", "tem t", 'lWwLy', "ão: A", "ie o ", '𝐆𝐀𝐋𝐕𝐀̃', 'jymIn', 'rvoqO', '|1|3|', 'qNcGS', "📱 Nov", "😍 *Li", 'os*', 'dCFSf', 'OrArN', 'jCRst', 'ot..', "e 'li", 'hunhT', 'exto', 'dxKUH', 'npCeo', 'SCHxE', 'ftUCo', 'qToUb', 'OXJyS', 'wVMPu', "e bei", 'TIgMG', "id 🤣", 'NalJe', "f you", "🔸 `gl", 'mXfRD', 'cMKpZ', " - Ve", 'vOyoq', 'dHcKY', 'bZPGJ', 'rmgod', "ava a", "ngp [", "s!\n\nH", 'BfWCF', " do á", 'ads', 'BCFEw', " NUNC", "RIO 」", 'odele', 'USivk', 'CbaSP', " Muta", 'aliza', ". Use", 'rAZhd', 'pQzyj', "r\n3 =", 'uZzyJ', 'AHcPW', 'servi', "es: ", "S DA ", 'esper', 'pjVdU', 'IJeWV', 'OUXeE', "ngp 5", 'onlyB', "rio a", 'Verif', 'egist', 'owjtU', "CASH ", "S HET", 'dqnRN', "💰 Nov", 'RgwPq', 'rtura', "s\n🏅 5", 'EznQr', 'YQjGQ', 'kup..', "Olá ", '|0|2', 'QCJjr', 'PBAoZ', 'IEJZs', "S🍀💰*\n", "│ 👁️ C", '1508a', 'jJdQa', 'gora.', 'cmd_m', 'PLrhg', 'Wdabg', "A sua", "be co", 'oMHFG', 'ndivi', 'ticvx', 'IfLdl', 'Pvgwb', 'gurad', " nick", 'preta', "cê é:", 'rel-a', 'CLQjy', "\n/﹋ 🅴", " 👤 @", 'zEDVh', 'xTIrW', '/doAu', 'otaca', 'pTITN', 'qAJvG', 'WkqUw', 'Aplic', 'JUNGL', 'eBase', 'unshi', 'sfgTk', 'cAfyO', "am at", "ico a", "la se", "aça p", "RO AO", "do es", "ões m", 'oderã', "o @me", ", shi", "nte p", "es no", 'rRYwN', 'a_aud', 'CXehb', 'oku.', 'STRIT', 'ceil', "oji p", 'com/b', " pouq", 'LaIAr', ", @", 'RÁPID', "* art", "O INI", ", esp", 'ZRKjJ', "ua ap", 'sposi', 'Deus', 'FejWr', "\n┃ 🤖 ", 'rm-fe', 'io/[q', "rro, ", 'ico:*', 'ulCmm', 'gados', "des d", 'RZIeJ', 'EaFwl', 'Tabel', 'NSFW', 'jdmkW', 'YvdTg', "rá en", "ovo!\n", 'ZPyks', "ama* ", "/3\n┃ ", "bro1 ", 'LyqrD', 'es..', 'SoSMm', '━━━┛', "- Alt", 'es/An', "bc BO", 'MExAa', " • Di", 'xERfR', 'rtifi', 'NxHib', 'SBwwt', 'ças', '𝐞𝐢𝐚/𝐚', 'sHgey', "ipo: ", "enu h", "o:* L", "mas c", "ltar ", 'NELE!', 'vo.zi', "it 1 ", 'oupDa', 'Pquog', 'NUwXL', 'INATI', "erá a", "io fi", "pido ", "vel e", 'ubbMJ', 'taayD', 'XXJJN', '┏━━━━', 'tmlCI', "us de", 'SuAdl', '[quan', "iv in", 'blUWK', 'vPOBj', 'Ogckk', 'ikUrw', 'ORGIT', "💻 Hos", "p ani", "nti I", 'vxuwg', 'resta', "\" adi", "lo:\n", "ium a", "A CAR", 'BkshZ', "OÇÃO ", 'wlPeM', "⚠️ Órf", "❌ *EM", " de G", 'RERss', "at co", " o gr", 'rankb', 'BQYut', 'IZHxC', 'Obesi', 'xto|q', 'topxp', 'PRESE', "es en", 'wzkCB', "o apó", 'YUEak', 'pPOFR', 'rupo:', "ate T", 'XcDVm', 'NFDik', ":* To", 'cAhNA', 'vFwrv', 'sPJHo', "nd de", 'SaUUQ', 'pcidt', 'MexGb', 'o/%20', "t rev", 'coAit', '4.jpg', 'ucess', 'CxRuH', 'UYtEy', "ipo. ", 'ópria', "áx 1 ", 'ezone', " mk\n-", " nas ", 'TtqDV', "E ARG", 'kQRbD', 'esKqu', "le\nSt", "🖐️ *SP", 'ICION', 'ZUwvV', '-fech', "> { ", 'azend', 'EozbO', 'rstwu', 'bdaTw', 'Sgpeu', 'bdcri', 'TINjM', 'anjBY', "ma De", 'XviJM', "foi e", "p = ?", 'pruIb', 'BCLvU', 'NKcLr', 'wame', 'NXSjT', '23:00', 'velop', 'ARpCg', 'cJZkY', 'QHaBl', "⭐ Dic", "dos +", "sso` ", 'NDTxt', 'kaRve', 'ᴄᴏɴʜᴇ', 'rDWVv', 'WFDat', 'BLOQU', 'seleç', 'Gring', 'arque', "er at", "e Emo", " Ganh", "vo co", '*Modo', 'qVZUI', 'CycYk', 'etalh', 'gkNtq', 'qVrYc', 'Token', "🎮 」╮\n", 'Yxnck', "O GOL", "❌\n┃\n┃", " ) - ", 'LqSqK', '/desa', "nte (", " Adve", 'xyqiL', "r [ma", "• Des", 'iofcA', 'tory-', 'gtts', " alta", 'EVhhk', 'rIRsK', "io (a", "po, i", " chav", "❌ For", 'lLlvq', 'KRDNu', " algo", 'Makaj', 'wrpYE', "á gru", 'LohfL', "eia s", "d e e", "u fec", 'ZPvFk', ", se ", 'ract', 'emvin', " Pizz", 'eBQde', "rar M", 'MFkMm', "mo fo", "es ap", 'UNTY', 'egvyY', 'npuwQ', 'EQqcq', 'MMBUU', 'qualq', 'QIwAh', "de HR", 'LUFVI', "or um", 'hrpPr', "ste m", 'RJoOe', 'ZTuMy', 'ATH', 'NÚMER', "🔥 *CA", 'mXhLv', 'zYsac', 'NTIMA', 'sqDmx', 'us-na', '_expi', 's-amo', 'stara', "u: ", "tre 0", 'yXDWZ', "ra AP", 'k_vid', "F par", 'PxbvK', 'rYvZB', 'JoYkr', 'asame', "a:* ", 'o)|Ma', 'yuAui', 'KTedd', "p = t", 'rVlhB', " idio", 'bMFoo', 'plXfT', 'hEAmt', 'bJZXx', " *6* ", 'wIsBx', 'nama', 'iiIYR', 'tpCir', 'OvPYk', " DDD ", " na c", 'UPO!*', 'dSCdA', "var f", 'Execu', "o pre", "il de", "✂️\n【✔】", 'talic', 'whOvQ', " (env", 'ZZLcW', "\n┃ 👮 ", "a seu", "ne! 🫣", 'tfQcj', 'sivos', 'veis', 'fire', "na en", 'yXkKh', "akes ", 'ldpbt', 'kxrPF', 'STERI', 'bros.', "POS I", "\n┃   ", 'cSeeN', 'Antif', "━╯\n\nE", "⚽ Pla", 'mgYeT', "a, um", 'gar', 'lhada', 'CFQXH', 'KysDM', 'xFryf', 'TOAhL', 'esa', " 1 - ", 'gARaE', 'rBRTZ', 'JDqFJ', 'WOGwz', 'SOLUÇ', "al qu", 'BYhzB', 'suali', 'ptyoL', "er fo", "E DEL", 'surpr', 'eoAKX', "l alt", "a aut", 'steve', 'link1', "ou do", 'ZqaDO', "asta ", "io [t", 'oNLzu', "il '", '19954', 'ista`', 'reen', 'JsVRt', 'fd0ce', "\n🔗 *L", 'PSxHk', 'BwoBR', "E ANÚ", "UEL R", 'aDawN', 'viada', "0x\n\n🔢", "ÇÃO F", "NE RA", 'uZLku', 'OBluS', "sumo ", 'IPKXS', "o 😖", "mi2 ", 'sWXxe', 'neces', 'perad', 'dUOwf', 'yjIln', " exem", "trar\n", " 𝐁𝐀𝐑𝐁", 'NjxWa', 'subst', 'So_Ad', 'tcsUI', "da co", 'HIdPb', 'icos:', 'HveWa', 'ões', 'QGxhf', 'mVqsl', 'FULvB', 'MVoZT', 'LZtpB', "os al", 'topgo', 'FAhdo', 'ion', 'sinto', 'rLmny', " X9 p", 'DqtWU', " *HOR", "dem c", "ges, ", 'IORES', 'rzkpo', "OS ÚT", 'AkjcR', 'vMhyQ', "dio p", " 🏆 Vi", 'wzjTA', 'HkhuE', "(até ", 'JMkiC', "eset ", 'Gubww', "OR* ", "om mu", "ter. ", 'aoTWL', 'AurCl', 'TYkgd', " 𝐃𝐄 𝐅", "os 50", " *com", "50\ndo", 'ssfdG', 'iais:', 'dZIIH', "e \"ac", 'stPay', 'gZWNy', 'XRHJw', 'de:', 'eJIdE', " ling", "OS PA", 'jMyGm', "M lin", 'zIhLJ', 'gWqha', 'MNFnZ', " já p", 'Index', 'XNQJr', 'almad', "ocê:\n", 'ivBzh', 'égia:', 'qzsYB', 'UIcxy', 'ize=3', 'SoNMH', 'OIVXV', "ar ho", 'ce4e2', "MIN* ", 'lha', 'dPpyJ', 'ukdXw', 'vjgCR', 'ico-m', 'izFGX', 'BSmcY', 'dd82b', 'BUcov', 'SsIeH', '=100&', 'UHpgV', "dots ", 'kZENk', "l meu", 'uivos', 'GerWe', "el - ", "LD 🎫 ", 'jDaVU', 'FwzPO', 'qLzpA', " imag", 'AkMed', 'kGfyw', " vota", 'QcYCY', 'viNqa', 'OpaeT', 'xUSiy', 'resol', 'EiJhq', "s Fix", 'bfqaC', "com o", "Msgs ", "tar s", "ial S", 'ccgJQ', "Zera ", "o:* A", "car v", 'Hbilu', '𝐄🔥', 'qeCDW', 'GUÉIS', " bolã", "r aci", "\n┃ 🛡️ ", 'esqui', "ções\n", 'Bybqe', 'ZatgI', "ime!\n", 'hxQNF', 'hyZOq', 'Lkiov', 'KBNlf', "for a", "o seu", 'QIeRI', "da al", 'JrqOF', " coro", "re to", 'guran', 'QukvT', 'DrGwV', 'foaTZ', 'Tradu', '://ww', "osta\n", 'VdZas', 'URSOS', 'OsZtH', 'TlUIA', "😡 *TR", 'qJtEa', "\n┃ 2️⃣ ", "ED!* ", 'KJqzh', 'cRkYq', "o dem", 'ime]`', 'MBvjR', "o. Ce", "! 🙏\n┃", 'hmShF', 'ByMVA', "ÃO:* ", 'gmsgb', "r. Te", 'Ijoxg', "ken: ", "❌ O s", 'userI', 'YRrXZ', 'elefo', "⏰ Def", 'ESchS', 'jUkGX', "TO* 💑", " - GL", 'CCTVi', 'HyqGP', 'KQxso', "「 LIS", 'ontêm', "• Glo", 'marqu', 'iNqwb', '.9,as', 'lLzTA', 'NÍVEI', "de\"\n\n", 'OjmaW', 'xGBzC', 'OQPWu', 'CDxAf', "ex To", "\n┃ 0️⃣ ", 'cFbDN', "❌ LIM", "u con", "ou 2 ", "PT e ", 'antes', 'char.', 'wvSXR', 'tmRRp', 'cas-r', 'HswVC', "DA - ", 'lmdkP', "por g", "🦇 *BA", 'oot', 'IEGuA', "isa n", 'GwWxZ', '🕵️', 'mmLjq', "O!* 🚮", 'ion.y', 'Oyoou', 'Álbun', 'OjnYc', "mi ai", "o> <q", "Usar ", "de 2M", 'em-su', 'PATIB', 'tqMUp', 'ttIGz', 'nhbxw', 'YoYry', 'coóla', '90408', 'JdTNu', '0.fon', "gem é", 'RÃO*:', 'funci', 'TjJYe', 'Yfjou', 'RtMwy', 'mWimW', 'o/CP8', 'VddWC', 'Derro', 'KJjQa', 'aixa!', 'tXvVe', "foto ", "a Sim", "nou o", "\n- *C", '|4|1', 'NfWsE', 'hange', 'Teste', 'UQMnv', 'oJWmW', 'cedid', 'logia', 'oCkky', '1000', 'todas', 'mDlSM', "• Dig", 'ipo]', 'CqNmc', 'IiHZx', "𝐮𝐠𝐚𝐫 ", 'AUzVr', "🔄 Sta", 'is.', "❤️\n┃\n", 'Splzi', 'dindo', 'eGame', "p @us", "sta' ", 'vIRqM', "a LIK", "do ge", "ROM o", 'aior_', 'FRGwh', "foi ", "o @us", 'xTQpZ', 'eseja', "ê mes", 'dAUQS', 'qnehP', "\n𝐜𝐚𝐬𝐨", 'TaTUs', " = At", 'ook_a', "\n🎁 *S", 'AsoOn', '⊰━━━╯', 'qcCHL', 'Uxjrn', "!\n┃\n", 'SjHZA', ":* Um", 'kLAgz', "o blo", ':05', 'nBNVk', 'xRoXW', 'ypHbP', 'addst', '/TABE', 'qGoKj', 'FMkYt', 'ADORE', "ior i", 'imosj', "vos d", "rar R", "m ten", 'ileir', 'IsdEV', 'HWIzh', "aça \n", 'jYgEg', 'AIS:', 'asa', "que \n", 'r/env', 'hCeYR', 'HjiDC', "to* ⭐", 'o-don', 'mNode', "┃ 🛠️ *", "e doi", '𝙽𝙾𝚂*:', "OM SU", 'últip', "ra fr", "AL:\n\n", 'hDfsO', 'SFDRa', 'FBwWt', 'WKcQM', 'THDXE', 'allmH', 'iLCtP', 'sprom', "w bro", "ber m", 'qYEzE', 'INBIK', '*Divi', 'ngCac', 'Pbdbu', 'Nzznt', 'RdDQH', 'TichA', 'taine', 'NXdLn', 'MOAWf', "o 400", 'tcSdC', 'UtAvd', 'CDdyu', "🇯🇵 𝐎 𝐀", "tra t", 'fhDTN', 'IvPyz', 'esetD', "rgtm ", 'nuvem', 'pagam', 'bBogF', "LE GE", 'akruF', 'gensb', 'mnSGe', 'TXRvG', 'POSTA', 'foSku', 'IaTxU', 'ar_al', 'ng!*', "res i", "u a d", 'oólat', 'cWrNw', 'Todos', 'falho', 'VLqvZ', 'tuito', 'dade]', 'Prote', 'toISO', '31c3d', 'TlHgC', 'User-', 'fENpH', 'fZpaf', 'hLxMQ', 'Metad', 'isMod', 'eraçõ', 'BnlWy', 'GEPMh', 'UkQIm', "apa e", "mal (", 'KXPsH', 'packN', " AUSE", 'NVqWu', "pp, e", 'moaoC', 'MQDso', 'tivo,', 'fjAXO', " Tota", 'iNDNP', 'lXVpb', 'RuvOX', 'dEqmv', 'mRVei', "AR AU", "uem o", "?, at", 'akes', 'gurac', "ve at", 'TuZiA', " *Arm", 'ndisp', 'IwvLN', "ema g", "to Óp", 'zXnNA', '֟፝🎡⃞꛰𝐋', 'miwEt', "e sto", 'dunge', 'DvHRp', 'ban)', 'VCJlb', 'fIjhX', 'guraç', 'nHCBY', 'RjHUL', "omo d", "ns no", "a cla", 'memór', 'lAArC', "va de", 'XmgNG', "! \n│ ", 'WrhfH', "ng WH", "sua s", 'mZgiv', 'JZSnW', 'ppuAo', "pp do", 'DuOyr', 'ESnjJ', "es ma", 'kPQsz', "🏃‍♂️ Por", 'le...', 'UEAnp', "ona c", 'NSHUD', 'LRziw', 'porár', 'devem', 'hour', 'yNJvb', 'WmPDI', 'klJeo', 'mBDYN', 'FbxcE', 'estav', "o\n┃ 🛡️", 'reply', 'Thnzl', 'mGHzX', "ê per", 'nDjxG', "dd el", "a tir", 'gram,', 'KJQOG', 'aOfSL', "do! E", "eijo ", 'iada.', 'qWyGc', 'IMmNZ', 'wing', 'NVDUd', "s <va", 'LPmjH', 'ados*', " *Mar", "em ap", 'zGgqV', 'zgNMz', 'SJFpu', 'eEGwS', " Alte", 'bevGf', 'UzLGl', 'HbrCM', " 💕 AÇ", "ica c", 'ios-a', "viem ", "abre ", 'xyeMp', 'jSPBc', "\nFigu", "var:\n", " Inte", 'PKDPP', "4h, m", "S💸💳 T", "!* 💕", 'ZtbcW', 'nPxIh', 'NZKKE', "il pa", 'OXHSV', 'fLWpr', "「 AJU", 'AfRFA', 'toso', '):*', 'JAiVh', 'FJFbX', ":*\n┃", '1|2|5', 'zoFtN', 'LEONA', 'UeiyW', '7fdb2', "ma av", 'SjjGm', "eo [l", 'xybPS', 'arPJn', 'FfAjp', 'rscmd', 'GqOMH', 'atlrt', "\n• Um", 'FiOKa', 'JsIDK', "ção d", 'OZEwA', 'xJSbg', 'ImUJV', 'zrUJa', " resp", "te` p", 'zZXsw', '╰────', 'uIDAm', "💋 *Qu", "1 WHE", 'dasai', "os, i", 'coffe', "ras) ", 'aIqpj', 'cular', 'VUnbn', "s] [t", "s tem", "ono.\n", 'hcFUK', 'fQJFA', 'rviço', ", *ho", "io ir", 'mNsNP', 'BIoeH', 'cialm', 'MPO──', "te ", 'yxzUp', 'jkScH', 'vKqdA', 'cDQdy', "i Gat", 'kVyuW', 'WkQBz', "ar au", "dono\n", "so, u", '𝙽𝚂𝙼𝙸𝚂', 'NTOhw', 'ífica', 'erno.', "sar: ", 'GSZQi', 'pack', 'ackag', 'RXSNT', 'WwEWt', 'MbPbA', " *Tot", 'Cuevx', 'herma', 'pThjN', 'ssifi', 'uRlqQ', 'NdffW', "º lug", " Seu ", "▱▱▱ 5", "𝐮𝐦 𝐞𝐫", "nor\n┃", "🎯 🎪\n\n", 'HkoZS', " ECON", 'po_id', 'GBaDL', "s pre", 'endab', 'opaci', 'BlcaP', 'manua', 'Into%', "📋 *Ti", 'grilv', 'PyOhU', 'kpAyC', "da à ", 'qSaxP', 'to:', "_id, ", 'jHnfg', 'TVbbB', 'upo!', 'uYGJu', 'FVSXz', 'gQyIG', 'lmPfF', 'lzyXQ', 'fJzEM', 'NwmOq', " → Mí", 'l/Con', "x\n┃ A", 'IJtDS', 'XvRYY', "│\n│ 📊", 'QVGlm', "la a ", 'gSNNq', "ue vc", 'wGMkx', "📋 ═*\n", 'acaba', " stre", "ador ", " sele", " perf", 'brYfq', 'gSojK', "a\neuj", 'aYOGY', "KING ", 'JNyib', 'WGELL', 'XPSBo', "r rea", "⊷\n│ 🏆", "📊 *SU", 'rESdj', 'ZRyeW', " *Jog", "o int", 'RVYmA', 'yxqBJ', 'WoLHr', " rico", "!* 😂", 'olpe', 'sAwnl', '5|3|2', 'caliz', 'RXsAP', "TODO ", "ão af", 'IzXFp', "n, ma", "2 nao", "m pri", 'novoT', 'itind', "EL 」⊰", 'OOqmz', 'KQuQI', "ro 🤧", 'OdqDF', 'sNhbE', 'CUvcD', 'HHqVu', 'simi1', 'eKQjK', 'cJsHn', "TEIO ", 'Xouci', "go po", 'jrWtn', 'xCTaM', 'KQkUL', 'pWUYi', 'Busca', 'nsumi', "osso ", 'ETJXt', " Comb", "stes ", 'BJwVC', "ao ro", 'vSZku', 'QabgW', 'MLgFn', "\n┃ 💼 ", 'JqMbk', 'Tirpi', 'Obtém', 'defau', 'GqvmD', 'WPMCT', "𝙴 𝚃𝚁𝙰", 'TPTRD', "🌹💋\n*N", "𝐍𝐒 𝐕𝐈", 'visos', 'JBCkX', "r pac", 'erfil', "ma pa", 'caZOn', 'kZsrE', 'MMOTT', 'nesse', "u voc", '𝐒𝐎🔥', 'xlxrJ', 'HgCDg', ":\n\n1 ", " da A", "*📱 Gr", "COM S", 'BLnKe', 'TATOS', 'preto', 'BYLyV', 'jVGiq', "🖐️ *Qu", 'hdoyT', 'dvgKl', 'fQKJT', 'LULaa', "fw`\n│", "iz de", "nas d", 'verti', "─\n\n", 'pload', 'EFzrK', "ot [m", "IVO*\n", 'Akvvh', 'nextL', "= ?", "*\n╏❆ ", 'hCyKN', "\n\n🔽 E", " 🥉 3º", 'BXnbM', 'yuguY', 'vdWjb', "no) e", "o Her", 'bBrOp', "e diá", 'verde', "ado v", 'vinho', 'XMcCo', "*\n\n", 'ckXrK', "sigo ", 'volve', 'KdGLY', 'kgspa', " [mar", 'ESMyG', 'DhnHv', " - Ap", '8+:', 'erssr', 'JPlBd', 'UIYJV', 'XISTS', 'Cdatj', "\n┆║✼🪻", 'hTAhG', "as de", 'nxys', 'ções.', 'ZZTNj', 'yCsSo', '0.out', 'BVQRa', 'CBRnF', 'TbmOX', "ta ne", 'gangb', 'WPgES', 'MbalU', 'ack/A', 'imit_', "5\n┃ •", 'RAWPe', "ga de", "is*: ", "┃ 17 ", 'mLArU', 'BNGCg', "o hoj", "Adm +", "tam e", 'ARLuO', "que v", 'artir', 'lMvil', 'qVlXS', 'heEUQ', "Use a", "a mús", 'YRCab', " na p", 'AWhaC', "ixos ", 'OVBRo', 'anel', "r rec", 'Dhzna', " ou m", 'balho', 'SjMKA', 'rUrjg', 'saiu2', 'wvjYr', "o tex", " amig", 'CzNsv', "😅 *PO", 'esweC', "DER B", 'eSXaM', 'nk|ti', 'uCiQx', "456 7", 'tvsoG', 'vWCXL', 'Matos', 'lists', " 🎯 Vo", 'sed', 'tivas', 'soura', '3|1|4', 'FGaSL', 'us_Sa', 'unlin', 'JOVlt', 'GWCwB', "nas -", "ocê r", 'xyikm', 'MoVZn', 'uJOLd', "💔 Voc", 'perfo', "🧹 *LI", "os 🎞️\n", 'essed', 'SEjRq', 'BIlwn', 'YPVoe', 'ZqkOe', 'nQzeo', 'tPPbc', 'NFaiB', 'vras)', 'dono3', 'JoSFK', 'DYzcm', 'dLPiU', 'YgdSb', 'Mlyfi', 'agem?', "iza o", " ao l", 'joVoh', 'bwMsN', "RES ]", 'eLSCP', 'rebai', 'mPUuH', 'NenHL', 'uZkjY', 'XOHrf', "l ide", "u o n", 'sando', 'efMQJ', " Muda", "0p -v", 'gtTCo', "s) ou", "= ?\nW", 'ódigo', 'vxxdA', " /120", 'hEXdl', 'eonat', 'hadas', 'kdWVT', 'GLoEX', 'ilycm', "iar p", 'jlcAn', 'sstqZ', "o1, d", "soa n", 'FcGiV', 'UDZGL', "RO IN", 'dução', 'WYlbq', "a\npre", 'qdGFS', "!\n💡 A", 'hWQSA', 'umNmA', 'Ferra', "ir\n2 ", 'XNTrC', 'NCojK', 'vqPRD', 'embro', 'YASDC', "par\n•", 'MpsHL', "\" nes", 'hikVS', 'wGpEH', 'tDsjx', 'DPFKw', 'TrYJi', 'cxYik', 'vIzOG', 'INbqr', 'ário/', "ue al", 'lhida', '0|3|1', "ica:\n", " últi", 'ofzdg', 'olLbG', 'nsydz', "rte e", 'oGliQ', 'BpKcC', "á enc", "rda a", 'gNxpi', 'ained', "exo s", 'qdmmD', "al da", 'ng.', 'dmfvg', 'Índic', "se -a", 'equal', "ca\n└─", 'kNbAR', 'NlXtP', "guém ", 'Rczmr', 'ganca', 'OHDKZ', 'wJcAw', 'NOELL', 'gEmUl', 'yLgEp', "um er", 'Tpwdz', 'MbGKB', 'EyOug', 'TiXyK', 'aract', 'cEsQJ', 'NdKjQ', "er so", 'r-abr', "r mod", 'lxfqI', '0|5|2', "bot r", 'OpTHX', 'afc27', 'CfeOw', 'ef0b6', 'ww-fo', 'TjhHy', "ída!\n", 'xusEG', "O gru", "mem. ", 'redGa', "Gado ", 'zvPLp', "[ 4 ]", 'peso', 'FehG', "y [li", "┃ \n╰━", 'Caixa', 'Respo', 'yZRur', 'Iviiy', 'NPHYw', 'rIds', 'NjLgU', " dire", 'VWygI', "ot ou", "ono f", "!\n• S", "r os ", 'eIAzx', "𝑫𝑰𝑶 2", "osa, ", 'vZWPj', 'kaqdB', 'kYCzJ', 'abela', 'DdMgz', 'onado', 'raAvl', 'oiPFH', 'res', "um ca", "1 ou ", 'setpr', 'tapa', 'perma', 'gRbWu', 'KLtPS', 'getDi', 'OdVJp', 'RPxum', "o tim", "ou ma", 'wMymo', "s enc", 'ns!', 'omand', "0x\n\n🧩", 'uLqer', 'dorMa', 'Data', 'entat', "x de ", "┃ 💡 T", 'YHuMn', 'fast', "datm ", 'ozUfW', 'Tukta', 'Resta', " um v", 'DYQgO', 'Fyzoc', 'lJOLS', 'YXcHN', 'hXwxC', 'nt.st', 'mlgwh', "e err", 'WKkFE', "ram p", 'VujUL', 'dobra', 'alMen', "o` ", "ng de", 'ldMDu', 'eUfto', 'onlyP', 'pYoLJ', "RP%'", 'BTnZf', 'cep', 'JXcjR', 'iello', 'MFxMC', 'Odqri', 'múlti', "pra e", 'orHbU', 'BuuSC', "ok?, ", "tura ", "om li", "\nOu e", " as m", 'LdyCO', 'hfmPQ', "es, a", "t pen", "ar an", "mum\n", 'iplic', 'oGQTl', 'nSTjQ', 'icon', "so à ", 'SRDci', " AND ", 'USAR*', " Se a", 'mTGfL', 'BIZ-D', 'ebznA', "a Eli", 'ssoci', "\n\n🎮 C", 'cado.', "um pr", "te at", "eira ", 'zjgeu', 'leUQC', 'xOSUs', "⊱「 𝐔𝐏", "App. ", 'HbbuJ', 'lastR', 'tlYrP', 'egian', 'XIacd', "*📝 RE", 'vHzPu', 'uimcQ', 'TIMOS', 'UVUFQ', "264 -", 'ulibU', 'getMo', 'anças', 'esmo!', 'CLOWN', 'rWHqD', 'UXEBG', "cia o", 'gWhfr', " FAKE", 'BYRuK', "e dif", 'yoUBl', 'agp', 'cKosS', 'neKMk', 'WXPhz', 'hRgNh', 'QrmRO', " 💻 *S", 'GmwQh', " Arqu", 'NUUbo', '(padr', " da l", 'QoPfX', 'gXFsb', 'nhas', " luga", "- Ped", 'data_', 'mutad', 'ZBztG', "nças ", 'qXhRL', '╰━━━⊱', "ê ati", 'ZENIT', "EROS ", 'úncio', "ost 0", 'YCMFc', "O ABE", 'jXwPE', " de p", 's/Nom', 'nnZvW', 'ZBDGk', 'EYpvr', 'bOwsH', 'shipm', " bot,", 'ficos', 'eira.', 'primo', "L TES", 'xNUJu', 'Mljrl', 'x9_fi', 'yyqWE', "\n*• N", "📤 Env", "───\n┃", " que ", "i alt", 'hSgLc', 'wcuOE', 'de.co', "rque ", 'XUuYR', 'OLtGG', '.size', 'e.jpg', 'zuiLi', " 𝐨𝐮 𝐫", 'block', "po at", 'yWXkn', 'joUlF', "er ou", 'xOIYd', 'pXvRH', 'CbjcM', 'dwHmA', 'GynPi', 'ngglo', 'LVMVD', 'bHWbA', 'okjmu', 'bMySW', 'nNDhM', 'UFPVA', 'oluçã', "ndo p", "der.\n", "Use u", 'sPJxM', 'vweTY', 'KyJxW', "anco ", 'eWLfc', "a hoj", 'digo]', 'ptGLF', "s pen", "in* -", "l [@u", 'NRNUN', " Mate", 'snjQP', "mas (", 'isbrn', "r tod", "IO* 🚫", 'allgp', 'hnCSo', "cho q", 'ENÇAS', 'SSHtT', " tecn", 'QyFDa', "ULL, ", 'MCmRW', "da nã", 'CCzXL', 'aIoBa', 'xRgWF', 'BtojK', "to  ⚪", 'JwBIg', "e pux", 'CPF.', "\n\nA t", 'baixo', '_libe', 'nxgDy', 'TkzIL', "\nDELE", 'cVnYz', 'ai.co', 'ivada', "ho ch", "de ma", " 」━━━", 'dQYLV', 'WSCqo', "map \"", 'RzIxN', " viro", "ssa s", 'cles', 'olpis', 'iful', 'YWlCf', "lo me", 'xRlGG', 'PRiND', 'rlkey', "ê é h", 'viado', 'YfCni', 'desti', 'Hzgnx', "s téc", 'UCtGh', 'TIQje', 'ite_m', 'JctWZ', 'jpBEq', 'h-sco', 'WwGIi', 'byUzV', "l @us", 'gEjNK', "┃ 🚫 *", "- AJU", 'BruWh', ":\n\n", 'egido', 'mins', 'rXxqO', "ra ou", 'des', "ffer ", 'creta', "ta pr", "🔧 *SI", 'WVZEM', 'PBLAB', 'PXhKl', 'csYdF', "is ta", 'JhBqF', 'ZaWhH', "ou a ", 'bykGP', " apen", "❌ Mod", 'eLEnx', "ará s", 'álido', "dos o", 'AR!', 'Drago', 'NbTCt', '𝐆𝐔𝐑𝐀𝐂', 'er:', "do pa", 'Qfgce', 'FCTTe', 'nBDzS', "ler [", 'MsSjF', " 𝐁𝐨𝐭:", 'flfXC', 'temaC', 'EUTRO', 'falsa', 'notaç', 'xuRhd', 'naSWV', 'neon3', 'RDGYJ', 'c955f', 'xMEfd', 'OYemH', "m a t", 'jxGdi', 'bums', 'YuckN', "✅ AUT", "o Adm", 'ht.te', 'a2bOB', 'valid', 'Rmmcr', "- sem", "r do ", 'd6110', 'depen', "RÁS D", "\n*• I", "uir a", 'BWaJD', ", úti", 'wrBQf', "ocê e", 'mUcGm', 'kwteK', 'sas:', "e tip", "hum d", 'OQUEI', 'DiZyt', 'qvwyz', 'PnHao', " 💰 GO", 'ycUom', 'icipa', "m lin", "em al", 'llpap', 'ebCor', 'FRfIv', "d per", "upo p", 'qpURW', " a re", 'BEQFc', 'hoDkT', 'amada', 'qiXzr', 'TZsoG', 'gjwMu', 'guHqs', 'críti', "O usu", 'fixos', 'WEabC', 'e_ace', 'fdFaX', 'bmAry', 'MiskT', 'bfMnd', 'hex', 'erar.', 'MVvvZ', 'ksqoK', 'xCyDo', "own p", '𝐎𝐄𝐒', "ais r", 'JbkEP', 'RvttS', "M men", 'NzmFP', "ar fo", "\n✅ *", 'evbOd', "Mel →", 'KoldY', '/toim', " rein", 'YzwrX', 'priva', ": +25", 'tputO', "ÁRIO ", "S (?,", 'rengo', 'UMplR', 'JSvyb', "* (", 'ttixA', "NG GO", '545f0', 'estam', 'FpYCS', 'ount', "m vin", 'FabdK', ".🚫❌( ", '1jzgK', 'dPrXD', 'ackIn', 'w.goo', "┇ \n┇ ", "!*\n\n", "e con", "?, ?)", 'eitnY', 'imula', 'Hnaio', " pelo", 'RCCZX', "s opc", 'NnNYT', 'KTErq', 'bNSBx', 'XRlfE', 'taria', "eis o", 'NAozB', "e gol", "no é ", 'ZyOIM', 'NWuUE', '══༺◈✼', 'Mídia', "s:* A", 'abic:', "d 500", 'vuFZr', "\nNovo", 'nqimA', 'wdzOR', 'pGRZz', 'LoKmK', ": htt", "cep 0", 'KKtia', 'eEWfu', " Teso", 'DHhHK', 'OOQYd', '=metr', "ara\n┃", 'lXsEK', "el Ve", 'dulsI', "⬆️ Mod", 'ncUCe', ", até", 'Gjgtt', "o? \n\n", 'ultar', 'tCiBV', "━━━━ ", "deve ", 'BFnxx', 'VkaEk', 'Erro!', '91dce', 'XwYP/', "m suc", "ra ba", 'nada,', 'ensio', 'XrVJD', 'jpg', '2dd19', "\n╰━⊱「", 'ZGuEP', 'getTr', 'laçõe', 'iQaYL', '8cf9f', 'sões!', 'RQRQr', 'bVSzt', "a vel", "ios m", 'findI', "os.\n┃", '/vide', 'Expir', '3Dsti', "12 -p", 'cGuiK', 'AHCpJ', 'REPLA', "🌀 Ati", 'FrhFa', '-vsyn', "deo h", 'usar,', "𝐠𝐮𝐦 𝐛", 'DAaRx', 'RQOvk', 'omxUR', "⚠️ *Nã", 'ular', ", vol", "w onc", "do (2", "❌ Sis", 'mIIhl', "Da pr", 'lemen', 'uMTwU', 'gFRuz', 'Ebldg', "do e ", 'Descr', "⏳ *Ag", 'UEnqI', ':cria', "edo m", "r vis", 'wZSqF', 'x9_de', " e re", 'Dados', 'czKhq', '.0&te', 'kissm', 'UxTil', "m 0.1", 'poste', "2\" ", 'hkEeX', 'GCRWt', 'readd', 'mlshR', "\n> Gr", 'RUajG', 'hZFcs', 'iado,', "\n - I", " váli", 'ZsYws', "\n📊 *T", "s DES", 'lhido', 'VKpvp', 'TZvYc', " a vo", 'DRibm', 'nscre', 'wKrRA', 'cPbvu', '𝐈𝐍𝐇𝐀𝐒', 'com', '𝙳𝙴𝚂𝚃𝙸', 'ião', "📝 *No", 'prepa', 'sirir', 'VpqoB', "e gan", 'RzNqO', 'tos', 'pkIWY', "🛡️ *SI", 'BOIHb', 'RgqhM', 'fakec', 'celad', 'aLHjB', 'nTlrE', " de b", " e en", 'QeUEF', "-map ", 'zUQMu', 'frnlH', " míni", "𝑰𝑫𝑬𝑶 ", "tem l", 'GVEpa', 'tvNjZ', 'gcfma', " 👮‍♂️", 'PmMCg', "e nar", 'selec', "r e f", 'ontra', "te + ", 'yOVOX', 'EfzKU', 'oITcW', 'OOuFN', 'wKdhi', 'Espec', 'Pedra', 'fAtrN', '|2|4', "ay 12", 'sAHWi', " 😤", 'oFMGT', 'ʀᴀᴠᴇᴄ', "da:* ", 'APxGB', 'ualme', 'psbiz', "ual é", 'wHYeh', 'Ranki', 's.js', " +20%", 'hmtMl', 'kSTvv', 'nVsDR', "║ *Nº", "LD DE", " Data", "𝐎* ", 'ZRiMg', 'Y2PC/', 'oSPuG', 'oxLfJ', 'CWHaB', 'bSFxy', "a dar", 'NYYnT', 'IkSnw', "a ger", 'sas.', "ipo] ", 'nxLFM', 'HZtKx', 'svIJg', 'nte..', "ar re", 'celLP', 'VYQag', "são m", 'ncao', "NE GE", "d \nWH", 't.tea', 'RINHA', 'jxfdP', "te do", 'ntigo', 'CuZBc', 'RwDsc', "e ind", " e li", 'ucwwb', "ua so", 'rTlSI', 'VoPZT', "bs64 ", 'liAtw', 'eXZhz', 'd895a', 'entri', 'fjnFK', '/IsaW', "Pede ", 'tgJJr', 'ggrao', 'IHRzW', "ga 🧐", 'CQGdB', "*\n📌 *", " ao b", 'oohXY', 'uanti', 'Diiux', "ce de", 'o/gan', 'trole', 'NIDO', 'QZNKx', 'McYQd', 'gcQZp', "5% + ", 'adro', 'mMDaU', "🎊 Bem", 'wEVdO', "ra ví", 'HIkKU', "A API", 'Áudio', 'tente', 'lONur', 'IsiIN', 'faAvY', 'GICsl', 'gHYZO', 'vária', "ih2 (", '*Info', 'rofil', " isso", " BOT ", "r exe", "no do", 'UYoQz', 'ento-', 'hcamM', 'kkkWt', "╭━━「 ", 'oauto', 'ygWZJ', 'Plaqu', 'lrnzz', '[marc', 'entio', "v\" o ", 'TI-CA', 'MISTE', 'hAQHo', 'CgEbm', "u nic", 'packn', 'nta', 'beHMI', 'Grupo', "er, p", 'cQUUV', 'UhgbF', 'logog', 'conec', "rte a", 'LOCAL', 'JHJpD', 'Sol', 'orida', " o áu", 'ApaBw', 'UhVCC', 'sFUko', " acio", '━━━━┛', 'getCo', 'lSQsS', 'utros', 'RzFkM', 'AkSBJ', 'l/Tod', "ker p", "vo DE", " info", 'ijnkB', "tar\n┃", 'QauXh', 'eFeYq', 'qgMBx', "e a U", 'oHZDK', 'AuvTu', 'RMJYK', "a uso", 'koxsm', 'GOLD', "O min", "🎮 *At", "\n│ 🔄 ", 'o...', 'nEBWb', 'NRDTP', "a que", 'qvTom', 'kcwjM', 'p_url', 'fuLnL', 'qsYHR', 'XnhYE', '𝐚𝐫𝐭𝐢𝐝', '`[tem', 'mOheo', "or at", 'talin', "\n│ 🎬 ", "✨ Aqu", 'rao', 'xGSBO', 'Ndjrs', "BAN 」", "\n┃ 🎭 ", 'GOjny', 'jkyOC', " *MEN", 'wrHrB', 'SPcjb', "ome c", 'BcrBj', "do? \n", 'cl/fi', "com p", 'EHahH', 'nIuZH', 'entan', " é bê", 'longo', " emoj", " dar ", "❌ Upl", '|6|3|', "e\n┃ o", 'gcOgS', " da f", 'ALIZA', " 𝐕𝐄𝐌 ", 'OHnxU', 'rVupJ', 'PcMZy', "es to", 'Scrip', "cep [", "os:*\n", 'sYZku', 'uidad', 'IeAEK', "\n\nVoc", 'ator', 'kFwcP', 'Assis', 'attp2', " ⃝⃔🇯🇵\n", "tal: ", 'coWPm', " 𝐫𝐞𝐢𝐧", 'NFIRM', 'IQcsM', 'JTsbq', 'ter/X', 'HdEAD', 'IXxEV', " [tít", 'MYaoq', 'orneç', "nsas ", "urar ", 'AMENT', 'yntlJ', "po, p", "「 𝐑𝐄𝐍", "io (o", "de, e", 'ciado', "║ Obt", ".\n└ 🔞", 'cpmYa', 'PKVsW', "ld, q", '15556', "u *to", 'caZJq', 'QmVMp', " = ?", 'LhioA', "[ REM", "cuso\"", 'StIPq', 'QmyTz', 'gens.', 'uBxkt', 'CNZph', 'TcmPq', 'KnXKA', 'mpati', 'axaNS', "✅ Est", 'm_con', 'GBPfI', "「 TEM", 'amoro', 'BxDeg', "✅ Qua", 'cDkrJ', "i, Qu", 'RUOkp', 'EZCAJ', "qc Ol", 'LmiyM', "ig de", 'mCJxc', 'HuvuX', 'elará', 'ybekn', 'HcoST', 'GPPwk', 'ZOQSz', '໑࣭࣭ٜ⟅', "❌ ade", "são e", "de ad", 'ria', 'slqov', 'yOvSe', 'SFQad', "*\n\n• ", 'VJsQv', 'qcZfm', " 0 - ", 'tTbSK', " tard", "):*\n•", 'JtmBq', "ho:* ", 'ksplw', '-vf', "po ⋆\n", "e ama", "ono d", ":\n\"", 'tion.', 'UXclW', "a. Re", "NU* ─", 'OWzPz', "nas e", 'PQpgH', "U:* ", 'PTDOL', 'YuguI', "o sta", 'tiple', 'mNAiQ', '/json', 'kQQEz', "e Coo", 'ka2', 'jtyPk', 'CcJEq', 'HrqAs', "\n• *Í", " ao c", 'DiWhe', "hum p", 'sim|B', 'VdYhI', "rto e", 'orjet', 'miyxx', 'Fzxpb', 'aldo:', 'OdkIe', "\n┃ 🤝 ", 'a02fb', 'cgnnJ', " a cl", 'bHgke', 'yxqtZ', "* ⚠️ N", 'VAÇÃO', 'ídeo:', 'resou', 'gtqTK', "BY ho", " | et", 'bCNxK', "PI Pr", 'feulK', "s rec", 'xpinf', 'ngeir', '3|4|2', "r bai", "r:* S", 'ZDuet', 'lPLmj', 'o/1vn', 'nciai', 'kpcTg', 'Tube.', "d de ", 'reduz', 'ZGfRu', " anot", 'uXfxh', 'dMess', 'appro', 'oyMoq', 'UGWXr', 'PEEiU', 'siona', 'RctWm', 'HAoRj', 'frTkt', "oque ", 'cjGLo', "ra ma", "e ran", 'JutQl', "ura o", "😐 RES", 'ganAA', 'XWhVx', 'uHzou', "┃ • C", 'ções:', 'eEvMD', " - _", 'vWvdo', 'eNgUD', ", qua", 'HOU!*', 'vrZGF', "o seg", "o apk", "RANK ", 'SHdus', "🎯 Mul", 'rrent', " Form", 'Hqfli', 'ZnXpM', 'ratan', "*\n┃ 🔄", 'rsist', 'TzhYr', "ubo q", " 50\n💡", 'oTVpC', "l de ", "sos e", 'GRRww', 'usic', 'OpJgX', "cial ", "AND n", "ma go", "Dos G", 'tCWmD', 'ZaCyB', 'BfZif', 'LHO', "ma in", 'WfhrT', 'eCDwd', "ic: i", '%20', " do c", 'eland', 'MOHVa', 'sxiyL', 'RVOSI', 'bIkQv', 'GfIaq', 'negra', 'irand', '𝐃𝐄𝐎𝐒🔥', 'dOLkB', '|1|0', 'WFzvr', 'gitcl', 'ink|t', "ima r", 'mojib', "us (d", 'stagr', 'unto,', '2|7|3', 'tpyEL', "\n\n🎫 U", 'lqhcE', "alto ", 's_sta', "ão ⏰\n", 'CgwZW', 'lfFUg', 'ICCUs', "rso d", 'ainel', " reco", 'laPXX', 'OehMA', " *STA", 'TnBhb', 'YgdsT', "o bai", 'haço!', 'IuRdj', 'hahGK', "UPO S", 'yvwym', "= ? A", 'arcad', 'XkOUc', "s log", 'nimaç', "lha u", 'UEzwk', 'RRAlw', 'DOEbE', 'GVIhv', 'ycfpS', 'sBLBq', 'ESTWJ', ":* Es", 'da_li', 'RitZE', "O DA ", 'RMvYt', 'Deter', 'dgRpT', "o voo", "iew e", 'IBlDY', 'knFba', " né", 'agem)', "ne @!", 'OImGd', "lo: 2", 'urant', "ÕES 💕", 'szap', "o...\n", "rga d", 'Ihtsz', 'NOtGt', "s\n🎙 *", 'NltVW', 'cVPdv', 'xzJHG', 'nMVfh', 'YsjgN', 'RluHO', 'no_id', 'HPFew', 'IcnBl', 'kqkoY', 'age', 'qNyPO', 'XtrOd', 'eergg', "&& ", 'SfOtF', 'AtORw', " do T", " *Fun", 'mdgol', 'RpHmv', "!\n💡 U", 'tbl', 'yZyNp', 'RNXUs', 'amoun', "is:\n\n", 'sbxAB', 'yPwOv', "cudo ", "os, f", 'yRank', 'gWYaQ', "tir @", 'mhFbi', " fich", 'VtNXU', "bra e", 'wEfBx', 'LYnPe', 'CrYXq', 'QMeMI', "ões a", "em do", 'BFxbs', " 📝", "u reb", 'bcgp', 'IfRWJ', 'qBBhZ', 'FhNKF', 'qBBQx', 'ão]', "ã voc", "🎰 Gir", 'HUkiO', 'aDbfg', 'PPaUe', "ove d", "á lin", 'GFvpU', "wing ", 'ywivM', " - So", 'EXINH', "\n\n❗ E", 'FGKHC', "ake A", 'falar', "ar. )", 'zWpbd', 'mem', "e aum", 'kYPEc', "das ", "s pel", 'GANHA', 'GGdce', 'TesAL', 'qiquT', "uir e", "⭐ *Ch", "vras ", " os g", '════╣', "⏰ Ven", "ARAM ", 'VjWXx', 'vsell', ", o t", 'lHcqH', 'cmdpr', "IPAL ", " poré", 'CMSLN', 'TUPmF', 'GkgcD', '9|2|1', 'LQuFT', "kiss ", "saem ", 'HordG', 'YBmyF', "ndos\n", "d ou ", 'Pinte', "a tra", 'yEnky', "ra:* ", 'koeHM', 'MeRAd', 'lines', "👩🏼\n【✔】", 'vjNtw', 'rCuzM', 'issao', 'verse', "s são", 'uGiRo', 'CHUQf', 'cJGLX', 'EfXrP', 'mplo:', 'Troca', "o 🥺", 'cadas', 'mkolZ', "lo, d", 'JlfRt', 'xhtaC', "r ou ", 'iixrw', " regi", 'bPMij', 'wImGs', "𝐯𝐞𝐥 𝐢", "vo ca", 'ssuem', 'rNHax', 'AgFNp', 'sRHVb', '*Nenh', "cha o", "S NOR", "as ne", 'LfkMm', "odo b", "er do", 'NlHDh', "de ht", 'nyLNg', "DO PA", 'jrLyI', 'nklHg', "PO ", 'Sobre', 'ormat', 'SXwsW', 'VIDEO', ". 🤐", 'WAfqW', 'yxJwi', 'SbtGt', 'alhou', 'TDuhT', 'iNEBK', 'ave.c', "s\n\n🎲 ", '//exe', "P MOD", 'ENCED', 'dmins', "ine s", 'miStl', "lan: ", "io co", "as fu", " - Gr", 'oSmha', 'ecer', 'fvhyQ', "se `", "h)\n", 'GpFXp', 'IvyOv', 'cIsoF', 'eELqa', 'iHBHK', 'doShf', "ais\n┃", 'TgEGV', "isse ", 'tempe', 'lvIll', 'wqmyo', "✅ Tem", 'ki/%2', ".\n\nUm", 'inqVs', 'Modo:', 'MkPgX', '╌╌╌┈⊰', 'UuLcY', "pack ", 'vzaKG', '95cb0', "ocê m", " buce", 'tema.', 'tar*', 'qdhJd', 'ripti', 'mas!', 'YZLzY', "d não", "va um", 'hSGlA', 'WXcai', 'ETvqn', "ida c", "dmin\n", "e os ", "olo e", 'bQnqj', "mir n", 'CGJGA', 'gXDXY', "vo pr", 'puiMU', 'mSSMw', 'nUeGw', 'uJldn', "cure ", 'JRHSS', "rão b", 'tymbz', 'hwpCB', 'cwFEg', 'mEYSl', 'XXLIo', " deci", 'utili', "s\n┃ R", 'uMNnB', 'mmott', 'bnFAz', "ões (", "𝐄𝐃𝐈𝐔 ", 'qzkki', 'nSMCH', '/Maru', "ITE A", 'TzvyT', "M HOR", 'bGSmk', " ❌ VO", 'PpJQq', 'tivar', 'títul', "🔓 Abe", "┃ 💰 S", " 💰 Se", "ar [m", "💏 *Mo", "na\n🔴 ", 'OiMcq', "e Gad", '[🎴]', "e glo", 'RdGic', 'TNwGl', "9999\n", 'yFezE', 'gMAoX', " Limi", 'ensas', 'zDzwH', 'heade', 'ewcIc', 'xAILy', 'KaAhF', 'rosa', 'de!', "a g\n•", 'mgqud', 'lixei', "vra [", 'stane', 'NERAÇ', 'e272a', 'ykLMD', "\nSELE", "trar ", 'CANCE', "s sim", 'qYXPo', 'om/ab', 'XkGCu', 'nual', 'hsMGo', 'JfEyv', 'MkWFj', 'OyCcE', 'ximo!', 'UZZsl', 'xTRRv', "as, c", "off` ", 'itnUy', "18 3", 'REQUI', 'NnkQf', 'NORMA', 'YFdyS', " Edit", 'QGBst', 'iMpKd', 'TQnpo', "e o í", 'ZqfmT', "│ 🎨 F", 'FzOPd', "% ❱ c", "a ace", 'Ocorr', "la um", 'YxpQC', 'uAFvd', 'AAPHc', "ove c", 'erada', 'qEXUE', 'vYceb', '𝐭𝐮𝐬᭄❀⃯', 'Indef', 'gpt', 'JCbmr', 'eNADT', 'econh', "ir\".", 'bEwnB', 'RxCgT', "a.\n┃ ", 'RjFUy', 'yDOeb', 'curre', 'o|hor', "ade t", "「 GRU", "gar p", "vou c", 'FNvOp', 'gameE', "a\" e ", 'plaq3', " e fe", 'PpETh', "das. ", '2B18/', '=Sour', 'YFJoZ', "o X9 ", 'VtcXt', "avra\n", "ção b", 'GWZGz', 'yeCVo', 'LUjla', 'nbXIw', 'bCGaU', "\n🔮 *P", 'TIpdC', 'xFrpk', "is pa", 'pNFrx', "do me", 'EvQnb', 'lCLat', 'squis', 'gMzLX', "oje à", 'pQbge', 'NYqiy', "├─ `", "m fin", 'vKHbC', "𝐫𝐫𝐞𝐮 ", "tar c", 'SNmbp', 'sUkTr', 'moYGi', 'oUKWV', " Só a", 'xBIId', 'AÇÃO!', 'zeAcU', " :/", "d pre", " dos ", 'você!', 'RtjoQ', 'final', 'NdSkk', "go do", 'Cbwwb', 'EWGGk', "m gru", "🎊 PAR", 'wlcWZ', " 25%\n", 'encid', "esta ", 'atrav', 'OshLI', 'i/ups', "ó usa", 'GRwUD', 'ITELI', 'mepCh', 'bkcBC', 'SjTex', 'etári', 'myHQF', 'uQpyb', 'gCzBV', 't-Lan', 'ZKDkj', 'caJoj', " 👮‍♂️ *A", 'vEAeT', 'utf8', "r:\n• ", 'rmais', " > ", '𝐚𝐝𝐨.', 'wjIoX', 'conex', 'MKtEm', 'UvCNV', 'lsuJj', 'CwKEj', 'tovid', 'verad', 'vuyDS', 'rAbSx', 'leta', 'ized', " é ve", "m bat", 'NTRAD', "📋\n\n", 'ar...', "na ro", "Kg\nE ", "\n🟢 *V", 't.wha', 'kVyAg', "ndo l", " de a", 'crBom', '(24h)', "em 60", 'McRlx', "r emb", " alto", 'tKXjk', 'Letic', 'SEfhU', "e, su", 'o/PjM', 'EicnZ', "%\n│ ▸", 'EQntG', 'M/YYY', 'qzWaj', '━━━━╮', "ar jo", "os au", " comu", 'eact:', 'cINiy', "hes: ", 'otifi', 'nsear', 'utils', "sivo ", 'rrame', "á mun", 'Ewhsu', 'tab', 'MvhAG', 'ySuuu', 'zseCM', 'PvpmV', "el2 [", 'atrap', " e ga", '10|0|', "O* ┃\n", '*LIST', 'ada', " is_d", '-tabl', 'o/qkb', "as IN", 'obana', 'fxGsz', 'lTinK', 'mitar', 'hsmIR', 'kBonu', 'dNNtb', 'hhITd', 'MmAkx', 'ado.', "%\n➜ (", 'LSTSk', 'autof', "mo)\n-", "o FRO", 'KntCs', "ivo v", ": *R$", 'kZLwT', '0.tex', "ixem ", 'NRfih', "*\n🔸 `", " plat", 'VQxon', 'HvolJ', 'ename', "\n*• C", 'YVWFF', "ÃO*\n\n", 'LtsyH', " <val", 'ncime', 'BCZpx', 'tsfzD', 'PGZQS', 'ADO!*', '🙄😆', 'HLnHe', 'WBcAN', 'ajlux', "nca n", 'txtqu', '3%A7%', 'WdiSe', 'ilyRe', 'TODOS', 'CNZeS', "📊 Mos", 'LBIGA', 'ZaiHE', 'Coman', 'VVoOU', 'XdvYp', "valo ", "o ID_", 'jytZB', 'ENORE', "cê pe", "𖣘⃟ RAN", "a cas", 'dIAnX', 'kUono', 'TLSST', 'rzDzO', 'HIzEL', '74cad', 'atíst', 'VxQGz', " igua", "over ", 'om/Nu', "omo f", "s hum", " = fe", 'VPfaS', "da im", " 8x8 ", 'escop', "ink h", 'xQgWu', "a Ven", 'lLByH', " [🐃]", "IOS T", "co no", "r\n🤝 *", 'O/due', 'ario/', 'NBlPs', 'grcGd', 'wqZLk', 'ermel', 'compr', "r: +1", "olão ", "ê não", '*Mens', 'rado!', "e tod", 'LWGMr', 'HUXxq', "ou ti", 'FTiTH', 'nAsoS', "cia (", 'douma', 'âmera', 'mmMWH', 'TtmXz', 'enanc', " Este", 'weath', '://tw', 'AkDUv', 'vOkZT', "do +1", "á ten", "OM al", 'WQdfM', 'getHe', 'esent', 'ZbEGs', 'hYsPQ', 'NkeQX', "rwa G", "S:*\n•", 'RkrLi', 'WljCf', " 👑 *D", "┃ ...", 'Count', " @ful", '(todo', 'jxOpm', " em 2", 'hfhXS', "👻 •N𝜣", " às ", 'oPqHa', 'DtBWR', 'MdJAL', "es*: ", 'vadas', 'jkyPf', "💕 」⊰━", 'rankl', 'AIJGH', 'EuaCn', 'getAv', 'ThYTs', 'bdTfw', "r: \n", "ipo d", 'atAKV', 'bNYtF', 'gMQZy', 'qgQXa', "o açã", 'etind', 'hijkl', "jo ro", "QUEM ", 'ECdQf', "sv\n- ", '2f36d', 'giXYQ', 'creme', "a. Ve", 'ERyAV', 'sQYfn', 'arde,', "━◉ \n ", 'ost', 'var)', "ser p", 'ponto', ".\n╰━━", 'XqVNt', "1 cha", "Ê GAN", 'mwGBZ', 'nHUdl', 'bee57', 'lLSxa', 'eleta', 'mzbJs', 'izaca', "ot nã", 'OhcEo', 'MSdgu', "vos*\n", 'HSdbL', 'UGUEL', 'ESAqp', " da s", '15739', "└─ ✅ ", 'LDaDy', 'Falou', 'apunZ', 'LYKKQ', " de w", 'EJVUu', 'CALEN', 'euNun', 'RVAEs', 'UJLWz', "\n🎉 Me", 'WlqSg', 'recen', 'PjLaU', 'ors', 'xJlWs', 'mindo', "❌ Máx", 'UVmeG', 'ímbol', 'tomp3', "to nã", 'FexIY', " reat", '<valo', " é bo", 'xists', 'aUlyj', 'uijuE', 'ras', "ICOS ", 'Quiz', '_atua', "ma Em", 'nhGAO', 'EstaN', 'HooLL', "ter i", " vind", "tes u", 'hUlhM', 'XqfTT', "do:* ", '/10m/', "ltro ", 'errub', "odo n", 'eWtET', "quer ", 'mPCUr', 'DuMtg', "\n\n*Al", 'LFYCu', 'ck-do', 'dJMOt', 'xlGpH', 'hhftG', 'alk', 'JENGD', "es Ín", "🎉 *Ne", "= ?\n", 'eVtqz', 'DreEP', "hum u", "\n➻ *~", 'aHxKe', 'YSdGe', "soa p", "os pa", 'attp6', 'LyTWd', 'rLuUg', 'sic', "👋 *Pa", 'SOssr', 'qLrNK', 'PNvDW', 'eKaCC', "tore ", "📱 Cel", 'jSBuZ', 'YLDQB', 'KdREa', 'B-PRO', " forn", "┃\n⚠️ *", 'oBPqk', "📋 *PA", ", cat", '𝐂𝐑𝐄𝐕𝐄', 'sIJfN', 'devid', "[ OBS", 'os.', 'DXwFM', 'aiXmr', 'HH:00', "𝐌𝐒𝐆𝐒 ", '@s.wh', 'BEtAy', "1 - D", 'bCfEV', 'OpZKn', 'wjQwU', "hum s", "ode r", 'VCvrO', 'UlFuF', "ir\" p", "eria ", " 🍕🇮🇹 =", "re h4", '𝘼𝙂𝙎➭᜔', "das p", 'LLXKV', 'objec', 'nivSt', "a qua", 'RzKEY', 'ndand', "🔍 GUI", 'LMvaH', 'bzdpR', 'album', 'RIGxR', 'gNXuV', 'ORTAN', 'ands', '_duel', "esmo ", "ver T", " ⛏️ MI", 'AHrVR', 'GZZAn', 'OQtSb', "mo do", 'WcamX', "de Gr", 'NbblV', 'erifi', 'eVoAO', 'fileP', 'IHbhs', 'danca', "ram a", "ão fo", 'fROWe', 'yvyCi', '91b25', 'DpxZJ', "ink*\n", "os. E", " ulti", "ubar ", "⚫ @", 'pções', " └ ", '80e76', 'JDkfq', 'swohP', 'eneaX', "a tex", 'entes', 'etici', 'nkxp', 'HA3', " Figu", "ca im", 'eorol', 'VWwiJ', 'playc', "ma vo", 'sexti', 'p.net', 'XiIiv', "arar\"", 'VDrll', 'LmpPI', "s*\n┆║", 'IpNFF', 'vaGen', "R (Re", 'downs', 'XjnAK', '8/03)', " null", 'YOWjW', 'yIwVk', 'aperp', "udas ", "ções ", " )\n\n", 'erro', '-bot', 'tGyUj', "」*\n\nG", 'rMRNN', 'xadas', 'dmksW', 'divid', 'pBvrM', "ot:*\n", 'Nbhyu', 'qOjyY', "drão ", 'FQLLd', "┃ 13 ", 'bNyMC', "EIS*\n", 'UzxnI', 'GhyXP', "𝐈 𝐀𝐓𝐔", "G ERR", "a ser", '5.jpg', 'TaFuf', '9a76d', 'uHfAk', "\n🕐 *H", 'WJbSK', " fina", 'chanc', 'ciar', "ivo d", 'Sinto', "para ", 'ebrxs', "za in", 'ame', 'ico..', 'ti-ro', 'EmmxB', 'atsAp', 'enc', ", tud", " inse", "\n┃Ent", 'Nmonm', "no pe", 'ZduRv', 'xFMqI', 'Rosa', 'RESUL', "e, e ", "r o n", 'OkScF', 'zLTik', ", ?)", 'SaRvu', "em lá", 'lvKXV', 'ncKUj', 'eRkYy', 'LMTwq', 'aEkJm', 'ante', '𝐩𝐚𝐫𝐭𝐢', 'HEglQ', " back", 'etorn', 'QXQtz', "se `!", 'GMJAp', "ie ju", 'nyGLz', "[ 3 ]", 'iRQOA', ", vit", 'mands', 'tQZrQ', "SSO -", 'wts:', " o bo", "vam X", 'serav', '2/202', 'eOPis', "s = '", "tiv b", 'OVfCK', 'ksnTV', 'ixada', 'BLJHw', 'ALhzP', 'saldo', 'gerar', 'VRwRt', 'deo]', 'hLVlq', 'mitec', 'NERDV', 'NqjrC', 'quenc', 'scopo', "o a t", '0|2|4', 'MUdCW', "erar\n", " Pess", 'bdNLf', 'NfLZL', 'mcPFy', 'UOikj', 'asEsc', ". Ten", "a.\n\n🔍", "rt: +", 'vPAlb', 'filme', "┃ 26 ", 'PqUai', "m tap", 'YRyNS', 'heter', 'XPKnc', 'lesce', "Anti ", "a... ", 'yETnD', 'iEJQb', 'UguVD', 'XrslD', 'wfCGb', "18 8", 'XnblA', 'NVtDq', 'KAdZq', "t con", 'WrIYq', 'ífico', 'aRbBO', 'GhheC', 'ttoJc', "eçar ", ", víd", 'jHUtz', 'mQgld', " diár", "→ Rar", "✅ Env", "no má", 'WGeIu', 'ZLMcS', "IÇÃO ", "to de", 'artid', 'mIneE', 'qgdcG', 'uTWdw', 'MuPpL', "e a e", 'hOHAr', 'getTo', 'KEYbs', 'timeC', 'pToFv', 'eFox/', 'sfojj', 'exp', 'WMKPe', "❌ Ape", ": DD/", 'zzcCN', "THAM ", 'QIAqG', "ily p", 'utos)', 'gYmKC', 'ayJsS', 'ranka', "owns\n", "💾 Pro", " sem ", "que o", 'bhRAG', "nte\n", "nda u", "ia', ", 'eAoKe', '*𝑷𝑰𝑵𝑮', 'NCADE', "eço: ", 'in/an', 'zDZCD', "no, s", 'ses/a', "ho / ", 'MOQEc', ":* On", "ir o ", 'chama', " e es", 'fYTqJ', 'FqYCh', "o:* @", 'IVpJE', 'CjDax', 'n=que', 'YRhGn', 'VfBdM', "a cat", "ece d", 'HFCdO', 'uando', "\n┃ Pa", '*DIAG', 'rmqpL', 'lJkpO', 'LYhBB', "ual o", "💡 *DI", 'ativ', 'hwaXb', 'oiIQI', 'RPwfd', 'XeNet', "rtar ", ")\n┃ 3", "NDO X", 'mosjo', "o apr", " após", 'GAWAY', 'AYBcZ', 'SEuqF', 'atori', 'Ttxla', "\n💡 Us", 'uUAIy', 'UPTce', 'nzJpq', "\n👑 *U", 'PLETA', 'Qvtbe', 'JVEOr', "ay of", ", lim", 'RcaID', ", Par", "𝐔𝐁𝐀𝐑 ", "to cu", 'rWPJX', 'evAbU', "si me", 'sEtQE', 'fNsBb', 'XYeOb', "sole ", 'EdiFV', 'zKsBr', 'aaMYF', 'cDLui', 'dirna', 'BYCvO', 'e-msg', 'RUwmN', 'wikJb', 'rxRTf', "de ba", 'jrJwN', 'Rfnup', 'ZroLY', 'ossív', 'PYuoA', 'yMAwk', 'NimCH', '/bl2i', 'segun', 'bakUh', 'as.', 'shKPX', ". Gru", "* - _", 'Key_D', "guma ", 'sEoBv', 'ietzE', "ez pa", 'bTbGH', 'AMMkE', 'etos:', 'DATkZ', "t* - ", "o!*\n\n", 'NSENd', " Negr", 'KCRxn', 'ha3', 'IXEbw', 'GURAÇ', "uru, ", 'erqr', 'AWbcY', 'uGTvN', 'KYQTo', 'hitel', 'oHZBQ', 'HEiDJ', 'key', "az o ", 'gGofk', "eio: ", 'MAqti', '𝐑𝐄𝐆𝐈𝐒', "❌ \"", 'N/A', '9piBf', 'hidet', "E\n╚┉✼", 'YvfiA', 'durat', 'concl', " *EST", 'rECsl', 'eio', 'LFPWd', "%\n╏❆ ", 'otgol', "tens ", 'lwlqm', 'plaq5', 'dono*', 'bXRqq', "ar\n┃ ", 'puta*', 'gaFFd', 'XWqGl', '-1r0n', " font", "💡 *Us", 'ITSCr', 'ukruw', "\n╭╍❆╍", 'bolão', 'tter.', " músi", 'ogwox', 'add_p', 'rlBZM', " 𝐉𝐎𝐆𝐎", 'gBxPh', 'Ligad', 'cShth', 'ssos', '//sun', "u\n┃\n╰", 'anal', ": alt", 'CWcWX', 'FtwZN', 'NIKOy', 'não', 'SkHmR', "\n └─ ", '.su/q', 'zTAIz', "lho b", '22c49', 'apaga', "s* (`", "✅ OPE", 'hbsAj', "slow ", 'MIDAS', "╭━⊱「 ", "r bca", "`\n• `", 'FNolb', 'zFrjm', 'tar/r', "ot. U", "hã pa", "old /", "as po", 'RZVfu', 'kpjwN', ", ten", " de t", 'addcm', " • Se", "NOS A", "s adi", "DROP ", '╚┉✼┉═', 'xuXyW', 'RZQWD', 'nFifu', 'phMWf', "!* 🌈", " Desc", "\n👤 Us", "io bl", 'ados:', 'text', 'lfUlr', 'fnRTS', "A DES", "\n┃ 🇵 ", 'qglxr', " um c", 'kfqEn', "i ser", 'axYad', " min", "as co", 'ON:3.', 'rankh', "*\n║\n╚", "Dá um", " códi", 'bxuVo', 'MvGnj', 'e=ita', 'NkyRr', 'cUSck', 'akeEs', "s Del", " 1 a ", 'syNCW', " → ", 'UgJWS', '𝐅𝐈𝐆𝐔𝐑', 'ZyKtg', 'relac', '/Anin', 'inzVA', '|2|4|', 'nlsxr', 'LOBAL', 'nBGZv', "ÃO\".", 'XnBxi', "ual =", 'CIWMM', 'Mlvyl', 'tvNNP', 'ItlaW', 'vkTIW', 'tivaç', "ar, a", ".*\n💬 ", 'wAPNS', 'XJQpu', 'PGoIA', 'MfNEx', 'TMlFo', 'IOApo', 'jFxPR', 'DRCGa', " de h", "a: Os", 'packc', 'dos_g', 'ece', 'YwLXp', 'yuBDu', 'VgnBY', 'iElHU', "ui es", "po = ", 'CrtaA', '.0.ou', "imo p", " Tent", 'DHGgF', 'cjWzR', "𝐃𝐀 𝐓𝐑", 'razge', "r uti", 'ldxpl', 'vFPWU', 'nJWFK', 'hbPfr', 'uJpLp', "┃ 📈 P", 'VTuTM', 'ReklO', " ⋆ To", '」⊰━━━', 'potif', 'erica', 'xFjmI', 'amasG', 'DKClM', "a 51 ", "do bo", 'pTFPh', 'gPMNy', " !vin", 'mvaGB', 'YtdVO', 'ar]|[', "zar a", 'aRYAY', 'VJDGR', '.colo', "🎉 GAN", "sso\n┃", '1|0|6', 'mqbTH', 'zojnm', "[ ATE", 'YXHJC', 'PHqqX', 'BmIwd', " *Mul", 'IHMwj', "ídeo ", 'FproM', " ao t", "NÃO t", "u, ex", 'rto!', 'LPiAE', 'vditc', 'gVrBp', "ries ", 'OatPs', 'txSuF', 'TikTo', 'loli', 'pos!', "😊 NOR", "Não e", "ele s", 'riIhP', "i fal", " 𝐖𝐀𝐋𝐋", 'bPNDk', 'JBlpe', 'NnKwC', 'lular', 'AdBVE', 'YOYLT', 'OCeqE', "4 de ", "res) ", 'o|men', 'AUVrJ', "com 1", 'ZhUEC', 'lmYqo', "e fig", 'EpGeV', "ê (@", 'plier', "ero.\n", "icos ", 'LINDÃ', 'vidua', 'fnMtS', 'BJkXR', 'HfDlv', ", mul", "\n┃ *E", "-lo c", 'as_fe', "o bem", 'reviv', "O LIV", "vier ", 'yGuyv', "e pel", 'missã', "ted, ", "cê vo", "es\n\n", 'KLumh', "TI (a", 'BobQj', "1 Ale", '.jpg?', "tas =", 'ughte', "do ma", 'gQKuI', 'hjxMu', "DO! 🎲", 'lAeVE', 'wIKtE', "mins\n", 'ar:', "💰 Val", 'dgLWm', " _- ", 'fRVmM', 'yTime', 'bzvEg', 'woFZa', 'Parti', 'GftDx', "ça: ", 'alhem', 'OKJWj', "de vo", 'ECUTA', "ma po", "e! Pr", 'OrdoI', 'PFTVs', 'm_lin', 'QguxJ', "po es", 'iNReL', ", pat", 'hbltw', 'PpyBN', "\n📚 XP", 'NPJRS', '0|4|2', 'adas.', 'NZIBI', "ve ta", "┃ ✨ T", " um p", "2 car", 'PPpFS', 'e/aut', 'letam', ":\n- P", "do, p", 'Quant', 'ntuou', "er da", 'CRcJm', " ?, u", 'WuROd', 'UORgF', 'shape', 'getHo', "o off", 'DNSsy', "│ ⋆ E", " gere", 'hjwiG', 'XukKR', 'PbHXE', 'dJEND', 'uizHz', 'OcHWS', 'rmCJR', 'BOjLO', 'RFOzu', 'vPpAj', 'ens*', "o ati", 'jKZRj', " baum", 'zwLiv', '89@g.', 'SOlzf', '6f5e5', 'OLaWo', 'id]', "ão. T", "Feio ", 'gCdRx', 'CRRYI', 'batio', 'zaTPP', 'EBgHX', "ake D", "r par", 'pena.', "gem n", 'rGjLN', 'vRCiK', 'NcKtJ', 'ono.', 'ar-ho', "ovo p", 'DTRjE', 'argo', "eo2 h", 'lMbaw', 'qGvfI', 'oRnJp', ", o p", "S BAN", " `don", "e A ", 'dmowW', 'nome', 'ddpuy', 'SEIYA', 'NETLF', "ara t", "m CEP", "um do", 'cAQxc', "v2\nSt", 'hFaog', "um ti", 'JgqBl', "nha. ", 'iliza', 'BLPnL', 'JZkSK', 'nuPlb', 'profi', 'cRUuj', 'bMSIF', 'dnCZf', 'kKoYu', 'LOpXF', 'LTjnI', 'BKvBj', 'XiJlo', "e o l", 'FREDD', 'GSCpE', '512x5', 'bpyVL', 'bMotK', 'ulo|t', 'UTjHc', 'spere', 'mrxTg', "r ban", 'CALL*', "CT CO", "LINK ", "o Sim", 'litar', "A EXP", 'mínim', 'nEUmZ', 'sific', 'iante', '0|3|2', "e des", 'eGold', "s\n• *", "🎯 *Co", "┃\n┃ 🔄", 'phngV', "tos u", 'OUIfn', 'Deixa', 'POST', 'MtWnE', 'jXXsw', "o Hyp", "\n┃ 1 ", '25b14', 'prUnI', 'elopp', 'mutar', "epo l", 'cwHxm', 'jxgmL', "osa? ", "🔴 *Fi", "📊 *TA", 'slBjZ', "r:*\n•", "o vál", 'vDjkS', 'TeuHC', "na pa", 'WbwkW', 'wvIWB', "eja u", "ura 1", "DE!* ", "ÉNS! ", 'RYpEU', 'IAtVT', "ias r", 'wuuDr', 'ECSlg', 'ORtYu', "de se", 'AjVAW', 'ntes:', 'isEPC', 'ONEPI', " [qua", 'Remoç', 'jWyTh', 'NgjgJ', "ello ", 'mzrUA', 'oad-l', 'llVYR', "u val", 'gijWb', "nir a", 'YtsvQ', 'vGrkS', "e adi", 'XwgsM', 'BxnII', "c, li", 'MNCeP', 'EtHct', 'FqIez', " 𝐏𝐀𝐑𝐓", 'JdkXx', "🛡️ Res", "lado ", " o de", 'attlo', "ts na", 'heapU', 'ZbnfS', '0-274', " pess", '3|2|1', 'ido.', "ica m", "o htt", 'ycFEv', "mar u", " 🔞 Pr", 'kqBtb', 'pLYGT', 'Cache', " Caix", "am no", "ares\n", "30d)\n", 'VmYzT', 'FQbzP', 'BUHGT', 'DrAla', 'FhUhz', '21edc', "\n\n👮 𝐀", "on pr", 'vBIpG', 'pGDdx', 'GKcDC', "seja ", '9af98', 'vDIdM', 'dpLaq', 'bIjwo', "u o a", 'tSicX', " Forn", 'WQJUc', 'oad.', 'SzRGZ', ") Chr", "ES (?", 'cQLDe', "ção j", 'fcZFl', "* Usu", "o ini", 'UEMwL', 'bCHRe', 'CUxWz', 'AKDtA', 'GzQCk', 'KCfYB', 'NuYUe', "da a ", 'lacio', "es fi", 'OKWVm', 'miner', 'ezXOk', '0|07:', 'GVkwN', 'gtxJX', 'ificu', "meu c", " e de", 'eiro/', 'chHyP', " 😈", "vos r", "a @us", "upo [", "'\nWHE", 'epeti', "ks se", "a ess", "ink g", "le es", "es IN", 'fHuLx', 'FkcLO', 'NvsXa', "cia l", "er At", 'iysiB', 'vedor', "s opç", 'da_ve', "t não", 'vtpPF', " *JOG", 'aZqLW', 'irdzx', 'talha', "tes f", 'txNaO', "⚡ Pro", 'IJjPx', 'DONO*', "ste j", 'ailyc', 'golda', "a o s", 'JFcbv', 'mCydS', 'MVTkL', 'YwDzr', 'vUWUv', 'dgJvf', "ndo.\n", " app]", 'bdYAL', 'yloCf', " 😏", 'WdvpQ', 'otaku', 'cyinR', 'XXRLn', 'óximo', 'XtlKi', "dem p", 'QLZiC', "• Res", 'SPUYc', "os de", '://ti', 'qVjar', 'wxJwe', 'jmuIr', 'trigg', "O 」⊰━", "iros ", " 𝐋𝐄𝐓𝐈", 'ClgHA', 'ições', 'AKedf', 'jBkHl', 'p.com', 'dkxbg', "IDO a", 'ÓXIMO', "𝐈𝐍𝐅𝐎 ", 'BWkWJ', 'Jbzxb', 'nftSw', 'GgRow', " em g", 'hades', 'jHPtD', "r, vo", "so en", 'LmRjJ', 'NUviB', 'que-s', "al : ", 'SawCE', 'sSzAG', 'IKAtG', 'youtu', " upsc", "po pa", 'QFDlQ', "sta? ", 'KPGcZ', 'nsmis', "do', ", 'IZAoT', 'não?🧐', "🤡 *Vi", "──\n│ ", "\nErro", "rro ", 'lha:', 'getTi', 'nqUPO', 'SZlBD', 'DwIbB', "já fo", 'kxSgu', 'HhOtu', 'goldb', '𝐈𝐍𝐀𝐓𝐈', 'PawdM', 'qWiSe', 'ybThb', 'focad', "to [m", 'AQAev', 'eTH5D', "\n• Es", 'equer', " 𝐆𝐈𝐎𝐕", 'iovan', 'ossos', "uras\n", 'XYFfO', 'igênc', 'cemit', "NTO* ", 'mgoWY', 'XBOJO', 'enced', 'PJkiC', "\n• Ap", 'UQopc', '࣪̇🔥ʀᴀʙ', 'fnrxK', 'zuCKX', 'wnZhE', 'XlBsJ', 'LeuJX', "(1 ho", " 50\nc", 'rKPLZ', "º: +2", 'orári', 'VppAq', 'eEuqO', 'ZQxry', "NTES ", 'pUMEi', 'me.', 'fy_mp', "\n*• D", 'MJqGr', 'fb920', 'aço', 'uXeUz', 'tkNTM', 'HtSeD', 'osta,', "deo, ", "te: h", 'rVcUT', 'OuVHL', "so ne", "ê já ", 'wZcgZ', "║🌟 CO", "le au", "⚠️ *AC", 'nTFnY', 'WXRcn', " - Ad", 'RmQaf', "Cada ", 'UOIQj', 'GDUIH', 'sakur', " Aqui", 'GPQDI', 'ajFhD', "um.\n\n", 'SLAP', "- ⏰ H", 'llEif', "po re", "ra ve", 'Games', 'er-st', '-read', 'dpWvZ', "on pa", 'qcgrF', 'todos', 'gyXRz', "ade: ", "do só", 'volum', 'RVNVt', 'ABJsf', 'ziMvY', '6dfd9', 'MbXkt', 'fmBhu', 'Vsjgw', 'COkxI', "s:*\n└", 'mPZgv', 'eaSyu', 'po/us', 'kzlnB', 'ercmd', 'tipv', "e, po", "*\n👤 A", "ido. ", "old b", "ode j", "📦 Ini", 'DWPzN', "│ 📅 E", 'decol', "lds\n🥉", "┃ *To", 'BkgoG', 'RQJtL', 'JwozG', "⚡ SOR", 'olone', 'imqmz', "ATUS ", 'asdPJ', "ted 1", "h)':f", "e a f", 'JOQkf', 'gAGuo', 'mgold', " ao s", " *Dic", "md @d", "a gru", 'FWfGI', "❌ DES", "x pon", 'ngdCj', 'sjwNJ', 'PwlwM', "💡 Exe", 'miste', 'detec', 'rtenc', 'ANKLE', 'NPlAX', 'black', 'qWxCy', 'JfKJo', 'ngxp', 'nteki', "eu de", " use:", 'UnMuU', 'QYwfs', 'aqXnT', 'ador.', " o in", 'JAmZB', 'LaMrj', 'yHwnt', 'iLcMe', '-entr', 'WscAe', 'HnGHh', 'neon2', 'JYMBv', 'yuri', 'qNrsQ', 'unLov', 'zpBod', " mome", 'TTZle', 'UtDSe', "o, si", 'hEWwI', 'EGoZJ', 'lHdFh', 'KOFQn', "nome ", 'uHTAM', 'LhAzO', 'SiaKu', "ou me", "do do", "\n│ 📱 ", "UEL V", "r ati", "eita ", 'nkaQQ', 'yKPCs', "\nSe d", "𝐀̃𝐎 」⊰", 'adDev', 'PEymR', " só m", 'newTo', 'imada', 'MvRJQ', 'I|10', 'fyIdl', 'mxzoD', 'JMXhy', 'wdRol', "ione ", 'jlEgy', "\"*\n\n💡", "ker, ", "o, fo", 'Uipzx', 'jvJoq', 'uXkPz', '7|3|2', 'ada|r', " Part", 'EyXUx', 'velin', '34567', "ct WH", 'dJOlb', 'Xhmui', 'tUiPY', ", tim", "já ou", " + Co", 'EYPvO', "S AVA", 'jybxg', 'YSYQV', 'BSNgH', "l 🗿🍷", 'NiETY', 'DJNkA', 'irBrp', 'RrfHn', "ista ", 'IZAÇÃ', 'IWqoL', 'HxMqB', 'sJYnE', 'GlaWQ', 'gJoub', 'IxrjY', "ber o", "gs: ", "que p", 'BrENr', "mo po", 'ckUQn', 'cwVsk', "is bl", "Use n", 'cXzzw', '55bc4', 'sts', 'jWkGi', 'ankin', 'TaToK', 'qrkPG', 'em...', " escr", 'xoCsT', 'XSqhs', 'acess', 'ATENÇ', 'alto!', 'kqEQw', 'bbTQO', "a cai", 'nVCQq', "ão\n\n💡", 'ZdUzj', "ica, ", "lor v", 'rest', 'PuQrt', 'utro!', ", con", "DRA, ", 'pVBXT', 'CFzdb', 'zUxgX', 'YBkeH', 'gurar', 'QrVjA', 'nQZzf', 'rdomz', 'gxdWQ', " ause", 'oIwXt', 'eoZvY', 'riang', 'Qepnp', "ar ga", 'mBjJX', "pois ", "SUN &", "nsfw ", 'Insta', 'urclw', '[()ab', 'ePgrI', "𝐮𝐚 𝐢𝐝", "es qu", 'PwiyV', 'gindo', 'TwBjF', 'hkoXw', 'cas:*', 'golpe', 'OuUie', 'digt', "ica g", '✅...', 'ZnuwC', 'AgzFP', " \"est", "o des", 'skzil', 'CzEsW', ", hor", 'iJiyW', "┃ 9 -", 'ccdnv', 'ook.c', 'wMZzi', 'esso!', " past", '/imag', 'RfjUt', 'u/leg', 'hzWcU', 'uHwBu', 'KALep', 'nvert', 'KrUgg', 'cFKVg', 'jkxDj', " [gol", "e ver", 'aqfrB', 'Nzgxb', "io cr", "T id ", 'UXuqg', 'hmuUf', 'IgLgp', 'dastr', 'ZxMgm', 'VDaNg', 'cSOhr', "vião ", 'mbate', 'CNNQK', "IAS (", 'dzeHa', 'daTri', "🤖 𝐀𝐏𝐈", 'NkbfU', "rte f", "* ⚠️\n\n", ": *", 'gnlTx', 'mBKhR', 'PlHxf', 'tdFOQ', 'JbMuk', "- Tha", "𝐨 𝐛𝐨𝐭", "\n\nA v", 'prisa', 'ZRMTU', 'Frced', 'tomát', 'io2', "O 1 D", "gban\n", 'TCrvd', 'nido)', 'NYzWo', 'drão:', 'dswMv', 'lJXjX', "iu qu", "\n📈 Bô", 'NffDT', 'IBZzq', 'MENSA', 'hyand', "bro i", 'sYtpB', 'UKAYP', "gos! ", " lent", " rari", 'dido', 'hUYEC', 'YeWqB', 'xstoC', "/5\n┃ ", 'NqXKo', 'oSRWj', "tico ", 'tada,', 'YxwWY', 'EssCv', 'UMHTA', 'Mozil', '𝖲𝖤𝖱↯🍧', 'guOmm', 's_pre', "e use", 'yrTAs', 'xzBZf', 'IFmCE', 'hora:', '42aa2', 'UqgBJ', "💡 *LE", "\n*MOD", 'XXXXX', '.spot', "u o s", 'alGHn', " o ví", 'ltimo', 'DBTjC', 'VuMNd', './com', "O*\n\n📅", "e FRO", " (só ", 'fran', "DO: N", 'ZlDWx', "fica ", 'SGuKG', 'VrvqQ', "- Seq", 'iEMuY', 'minAp', "stá a", 'UwUeu', 'rRYoT', 'CFQdP', 'Url', 'mTxCu', 'mnopq', 'KQhtK', '*Exem', 'reYWQ', '2cd52', "do ar", 'IHABy', 'plugs', 'Verme', 'QOVEI', 'apTqU', 'goldl', "foi p", 'nnoun', "ta in", "a a q", 'QrdoC', 'rões.', 'ZcqFc', 'dYzHh', "dabv ", 'vado', 'a..', "┃ @", 'ddtkW', "O 💰 ━", "te so", 'aDYml', 'kFhKE', 'zdGoO', "ser W", '2.0&t', 'IiKox', 'BUJPz', "S DE ", 'mJsSY', 'GlecS', 'RON-M', "┃\n┃ 💡", "ia\n└ ", "rio /", "tos\" ", '1|2|4', "DO (b", 'WTICB', " núme", 'ICRlb', 'roubo', 'hHAiX', 'bdsm', 'ZrZgX', 'com/i', 'htUG5', 'timer', 'QvkVN', " Cria", " - 🔞 ", 'PtWeo', 'yqLWx', '/Polo', "ova p", "e vit", 'x9_re', 'rJGdW', 'MjxCp', 'PLASH', "ar na", 'crHEG', "es, p", 'ImeOm', 'xjnYf', "ATÉ M", "um po", " prom", "ção e", 'ATING', 'LwhvJ', 'UDuoj', 'proxi', "E DO ", "al\n┃ ", 'itac', " 📺\n┃ ", "enas ", 'ctt', 'hWAkY', "lui a", 'OuInm', "⏰ *Re", 'tTGeG', 'qNqLK', 'YJxdn', "[⛩️] ", 'eio.', 'epFru', 'VsonR', "vite ", "💾📦 Pr", 'cFymT', '9ca6f', "ite \"", 'tore/', 'VALUE', 'ePvhy', 'OLvyz', 'oEprY', 'hJJOG', "sta t", 'HvVDk', 'ghuNM', 'tos).', 'peita', "de ap", 'NtfxC', 'LPuzm', "rio e", "as:\n│", "loli ", 'uHWWJ', 'MCqKR', "has c", "O hor", 'ica:*', 'TzTBr', 'CfTaZ', 'RizsL', "vés d", 'clmcx', " Cate", 'ZHRVi', 'kFTtG', "a 😳", "\n\n*CA", '22%25', 'PCvsT', 'IJSWv', 'UFMMM', 'KVEnr', "ra sa", '56789', 'fZgPj', 'ttp8', 'VJpUM', 'peito', "to + ", 'qzYoH', "\n║ ├ ", "> ?", 'ceTyM', '/api-', 'LeNDb', "os ab", "ntão ", 'hocJC', "vio d", "⚪ *Se", 'mMbgZ', 'KqCtD', 'XWnCP', 'gunta', "nir n", 'wMcmf', "LD DO", "ono, ", 'koIdh', "┃ 12 ", 'remot', 'deIkH', 'rAyKw', '*PROP', 'skZpZ', 'xYwjz', 'aEwmY', 'displ', " no g", "o ver", 'qizfC', "dada\n", 'jkHrM', 'Obrig', 'achin', 'dworL', "🎮 *DE", "rtem ", "MB\n\n💻", "💭 *Di", "ito d", 'odobr', 'zNWIA', "go Sã", "\n🎯 *P", "BELA ", 'ZgOZq', "ximo ", 'GOKU', 'MÍDIA', 'Forca', 'GwNjM', 'MiCjP', 'NEPnS', "nte 1", 'fDNur', 'WQOao', 'FDolZ', 'GCeEb', 'kgrou', 'HCylN', "azar ", 'FXmBX', 'AmNpw', 'RZdTY', 'OpGmH', 'YUhKD', '[@usu', " = jo", 'WTNlS', 'bFfuz', 'BYygw', " • Us", "\n╭━━━", "e 500", 'WWsdJ', "/3, t", 'ares.', "ndo ", 'YkfqH', "isa e", 'rsjhd', 'ayn', "o, nã", "y com", 'TaTiJ', 'GHaUH', 'YIhSi', 'arDVS', "s, et", "gar v", 'lkOri', 'rIUim', 'Fixad', 'Dvyel', " a \n┃", 'MjgPM', 'novo.', 'lQMWW', 'o%20', 'VdSZV', 'qKPyw', 'vlfWI', "o! O ", "TRO 」", 'yuCBp', 'cipar', 'queir', 'FIaox', 'Nome:', 'sjiYD', 'aZyZg', 'EumNR', 'nyurl', 'zMPfG', 'xkUXA', 'Myscz', "⚙️ 𝐑𝐀𝐌", 'JLUui', "m err", "iver ", 'cpri', "all m", "ch: f", 'bzRZl', "r com", 'ecent', 'gener', 'id_do', 'nervo', 'faESU', "um ad", 'PzZki', 'GAxMr', 'gJemD', "vo ", 'aEAoe', 'núnci', 'iBgiq', 'põem.', "O DE ", 'Banco', 'abKPo', 'gvUEW', 'elOkq', 'IjLLa', "iggy ", "2 -i ", 'dJfHs', "da Sa", 'MXYnV', 'epo', 'TmsKd', 'DeExi', "s ins", "nte d", 'GyhMH', " pres", "❌ Men", "u\n┃ ", 'ZjMnr', 'yXDZd', " tran", "𝐀𝐔𝐓𝐎 ", "o sti", 'QqcUO', 'jWMJZ', "er ho", "e áud", "ks e ", "- Swa", "ND gr", 'WXVBi', 'rsati', " 50%\n", 'ADVER', '-da-s', 'cpRvn', "ndo a", 'at.wh', "ema e", 'CLOCK', 'CdJuq', "- Sai", 'ZipOY', 'rSRns', 'GxnVt', 'Egril', 'ceber', "\n*ID:", "ND st", 'yrIBB', " VING", " 🎉\n┃\n", "r um ", 'qsuct', " no h", "\n└ Si", "uble ", 'NtuXx', "o são", 'uePmy', 'TjKmq', 'XoUom', 'zSiBi', "ões r", 'CmAnI', 'vWQzW', 'uubUb', "r dir", 'hvDkt', 'ngas', 'GGRfO', 'MsbJY', "O com", 'OcUGO', 'XQdUm', "tra n", 'ANYA', "l loc", 'UnIRf', 'uinho', "ted 0", " audi", "d foi", "ROM t", 'fFvpT', 'ZYfXS', "🔄 Tod", "s do ", "all s", '16312', 'rna.', 'ilciL', 'UtcyM', " prod", " GIF ", 'Hfaav', 'os_me', "ção v", ", est", " nova", " SONO", "e a q", 'zOHHn', 'WTgMQ', 'kzFer', 'mvXfv', 'img/', 'oNntB', 'DgqFx', '𝐞𝐬𝐚𝐟𝐢', 'gança', "f \"sc", '=32&t', 'NpDNN', "o atr", 'qYwNA', 'ZADA!', 'xtcor', " 𝐌𝐄1𝐀", 'lLblq', 'EOMIe', 'PEraU', '_alug', "jo go", 'pNDLk', "🚮 *LI", '|1|3', 'diagn', 'BEGIN', 'yHuXc', "┃ 8 -", 'BHQPH', 'ned', 'ixskT', 'tHjWB', "lay S", 'PeArT', 'aNPfb', "🥃 Env", 'CgJgq', 'Reduz', "┃ • D", 'orret', 'ziUxa', "r* - ", " ASC", "om qu", "ceba ", 'eOYvu', "mo fu", 'ErmQd', "\n│ 🎨 ", 'dNLBU', 'inkha', 'kBLxS', 'EUbfW', 'hFePT', " MB", 'VtJqv', "| lim", 'UAiSj', 'BvRGQ', "ita!\n", 'RhAvN', "- Afr", 'kwvnb', '95400', "do ou", 'ongas', 'ktCTZ', "𝐅𝐀𝐊𝐄 ", 'sYzvE', "LL AT", "es jo", 'YBARc', 'FdqtP', 'vado:', 'iMNnA', 'sJUGH', "ing L", "item ", "Deu e", 'eProf', 'ney', 'OxIUW', 'tWQdF', "gem p", 'vrJxS', 'olhid', 'fbMcD', 'HtTFF', "or no", 'GjrCK', 'sOJvV', 'kAtli', "rte v", "dice ", "DO DE", "N dai", 'KuVoz', 'tRwTH', "rreu ", 'PlBjJ', "não e", "ld pa", 'DtUVy', 'iaclR', 'KnsmZ', "e faz", 'Txtpr', 'qOzKJ', 'NKrwB', 'PTQWu', 'sfoca', " arma", '*Áudi', 'N_MEN', "* do ", "ro?\n\n", 'eyTHE', 'qwnpe', 'LMiTj', "ider ", "ue el", 'emsBb', 'pp]', '2*PTS', "seu p", "└ Eve", 'WcCLk', " APAG", 'sFGnD', "ovo v", 'eqGYZ', 'VpNoW', 'ecmd', 'RDhAi', 'Calcu', 'pEoOV', "SÓ EM", " em d", 'MayFE', 'oPGHD', 'kijsT', 'qrCdV', 'novas', "ROM u", 'EGrIw', " ⚔️ ", 'KeIXE', "e 5..", 'NolIu', 'UfNeG', 'SPGqA', "S PAR", 'pRVxb', 'GmuMm', 'EAazF', "do, s", 'IoGyI', 'RaiDC', 'BTAhC', 'JTQBY', 'OPJLA', "anto ", 'NWNIj', 'TtCeu', 'UAOYU', 'xuMtk', 'GyQbj', " IA.", "io: ", 'HEKcd', 'ouwBu', 'ndo', 'wmPkQ', 'aBJUA', 'lNubf', 'snReE', 'PaWsg', 'KYeKG', "u anú", 'tecen', " os c", 'Iobja', 'tYcKQ', 'AUnfk', 'uland', 'vTlyP', 'pDNfm', "! 👥", "ida. ", 'qGTnO', 'PkEuw', "o 1 a", "da ac", ". Par", 'rmar', "em gi", 'tYxNY', 'nlFrN', 'OIILA', 'dLkoc', 'KOLNA', 'uXatq', 'qZcKY', '🫡🏳️', 'VbPpi', 'RqQtS', 'hQwbG', 'YvNeo', 'YSsLn', 'inuZM', "*║ *A", "🔥 @", 'YmbMP', 'hmNUm', 'rdGqB', 'Setti', "s ✅\n┃", "não t", 'ddyZj', 'vSIRk', 'mACyK', 'xEcIL', 'yqEHy', 'iIbzm', "de im", '=wlkn', 'vado✔️', 'cUkYe', 'MWoSn', "\n┇ ➥ ", 'wLHYR', 'SDmwo', "into ", 'KOUHO', 'wVIQe', 'dium%', 'zjjGr', 'IZVaF', "❌ Val", "*4 - ", 'AhPDq', 'jIBNC', 'gaZpv', 'EFvFo', " (?, ", 'aQkvq', "na aç", 'WnXUF', 'HYIKF', "de us", 'gHhxV', 'Convi', 'PAPEL', 'VXSKZ', '───*', "ão in", '.me/+', 'SQeIL', "fw ", 'sapp.', " aler", 'svWuu', 'PYviv', "┃ • E", 'LUÍDO', 'AYuNv', 'la/5.', 'edBfM', "e fos", "🤫 CON", 'UJtcc', "io se", 'ji..', 'álbun', 'qXWbY', 'IhrmN', 'dxYAQ', "ua in", 'rHgsU', "🌍 Ant", 'VzPWU', 'sTSmH', 'FGRRr', 'LzbXY', " ?)", 'UdNDu', "c`\n", "te (", 'pCADz', 'atame', "é o p", 'IVRJh', 'xGoUf', 'sLGQa', 'morre', "a! O ", " Valo", 'iBVvK', "m, pe", "r o b", "a mai", 'NCfCF', 'TGrdO', 'Preli', 'PKazO', 'CKTkQ', 'elay,', 'fghVW', 'KqidM', "\n🧹 ", "ivo m", "r:*\n┌", "po fo", 'hDZcy', ".\n└ *", 'UrOdP', 'oQoOl', "o com", "RP%' ", 'RNWUK', "o [ma", 'sHVke', "o nsf", 'dsUMs', 'cessa', 'TWJRY', 'itxKN', 'nhas:', 'uber?', 'fwHov', "load ", 'lguém', 'NJTFK', 'stPar', 'OclKz', '6bf46', 'TES', " os d", 'ujLry', 'ÁLIDA', 'tTYHO', 'BiLWB', 'kbRpr', 'ysjIQ', 'REAÇÃ', "os it", "MAIS ", 'Ryagz', "r ape", 'ntrou', 'nnmgm', "har q", "⚠️ *AT", 'MoVLl', "ira d", 'OvSHK', 'DOCUM', " meio", " fica", "❌ Ren", 'ZZibX', 'flOdQ', 'GlgQY', 'nfOGi', " CATE", "ite `", "o : ", "\n\n🎁 *", "as Ad", "gos c", 'upZrw', 'ikAUr', 'MExeu', 'IYaFn', "o can", 'erter', " 7 di", 'cts', 'khfus', 'ono', 'teudo', "º* ", "er no", 'IlCav', 'ZvfHH', 'QwJWj', "io bo", "⛏️ Com", 'ZMStD', 'zendo', 'rtlMu', 'ultas', " garr", "ões c", 'wEjHs', 'sxPbC', 'EataO', ":\n𒋨·࣭", "s adm", 'wzxbT', 'Ysewu', 'úvida', 'qWsbx', "!\n💰 S", 'TQmeg', " ]\n\nU", 'MCIsi', 'poeGn', 'oKVrp', 'dEjRP', 'McKxg', 'SCOgf', "!\n⚠️ V", 'saqzc', 'bLWOl', "*, en", 'OLUcq', "ra gr", "ica. ", '*ANTI', 'getRa', "á em ", 'e_alu', 'apren', " do t", 'CERTO', "10 se", 'p5g&d', "e: wa", 'knHpK', "\n│ 🎵 ", 'Nvgel', "✅ Efe", 'gWxhf', 't.0.f', " melh", 'HVqCg', "o [li", "* 💰\n\n", "ega s", 'NHBaC', "% ❱Go", 'pKciv', '_paga', 'd.jso', "m seu", 'cAFKb', 'GIeDl', 'fcTKs', 'tsXlp', " carg", 'pasdW', 'krxCT', 'pleto', "\n\n🔗 L", "ade] ", 'temen', "r emo", 'PRIgk', 'Jwici', 'dGrBa', 'GCrTx', 'IRfDX', "❌* \n\n", 'auHme', 'fciAG', 'ador:', "COMO ", 'UAioJ', 'PtgDb', 'MmCwG', 'scote', "ia nú", '4|2|5', "• Não", "╌┈─\n❌", 'vnsHh', 'VÁLID', 'ZUsSk', 'AANMW', "sa on", 'ooden', 'xiiPO', "ot au", 'EThJm', 'EXTma', 'eKicE', "m enc", 'wtqfR', 'nte', 'VvKqz', 'mFsnp', 'ng-bo', "to Ín", 'nhTPY', 'enado', "⏰ Voc", " um r", 'IOsib', 'fTidH', "m... ", "s: ", 'KiZDl', 'zLbET', 'tojze', 'ylmuQ', 'iKNbo', "al de", "┃ 20 ", 'rTCMF', "🎥 Víd", "mpo m", "m mem", 'jXpZX', "em ex", 'rYLvU', 'ZmIpf', 'secut', 'BcGpk', "ais t", 'llYea', 'AHbWP', "⊰━╮\n┃", "to lo", 'MkKkj', "s: af", "e Do ", "- Hun", 'vLoYW', 'anido', 'ioqUG', "ram, ", '4|1.7', 'neon', 'MaQxe', 'stuma', 'BAXwV', "do AP", " - Jo", 'Iojum', 'vRilO', 'QNPuv', 'dyuEg', 'BDRoH', "🎮 Lis", " *No ", 'LMoaa', 'SGDPr', "asal ", 'RHOmq', "* lim", 'gwneX', 'FHCto', "l enc", 'ZMxzX', "*\n┌─ ", 'BZsIf', "ma: ", '6|2|1', 'lefUn', 'GOvUI', 'MANDO', "┃ 🤖 *", 'Argum', '2025-', 'kvazO', "🦇 *GO", "━┓\n", 'xBibO', 'KcLRk', "SA SE", 'vacoe', 'XnNKc', " Sort", 'MM-DD', 'OeuXH', 'lqovv', 'tufMx', 'IJRZA', 'ijpGi', "ue ap", '02404', "a o I", 'CUryE', 'token', 'QNbJw', "m 7 D", 'NEGAD', " *TOP", 'wrnpM', 'shEuG', 'LEPRE', '╰━━━━', 'tesou', 'log', 'HEX', 'ninha', ". )", 'ite-m', "am ou", 'YklOl', 'zyeDV', 'pvZPY', '────', "e: 10", 'raVzd', 'eSubj', "s\n\n👑 ", 'glZno', " Açõe", " se v", '/Nath', "os WH", 'YyTAf', "!\nExe", 'ivinh', 'ircul', 'Docum', 'coIVH', "tra o", "o aum", "dos D", "ero]\n", 'XyfmJ', 'YNzHA', "cte u", 'LIrxK', 'rBoar', 'avor,', " 8760", "*O si", "ar:\n┃", 'LSJpP', 'oZzbF', "3 - T", " zera", 'GGxoL', "r2 [m", 'qRtXQ', " limi", 'ceito', "s pró", 'tickc', "「 TOD", 'xDnOV', "\n\n~» ", 'lPBki', 'aDrCj', 'EtDdU', 'ANHEA', " +200", 'zzkjb', 'Wikgm', 'gered', 'xRyCc', "dio s", 'Jhctw', "OLÁ *", ':mm:s', "no ch", 'nnXWJ', 'tsDoq', 'qJHhJ', 'KejjR', 'qszMb', " sigm", "┉╝\n║ ", 'EcEJz', "🎯 Ten", 'DdAik', "ÇA 」⊰", 'liste', 'jEzQK', 'TbywA', 'BEWwj', 'o/PNT', 'bs64', 'bJVbt', "🎰\n\n💰 ", 'izOHG', "\n\n\n\n\n", 'qbpIt', 'lbeEU', " tant", 'SxfpZ', 'DciOC', "dos. ", 'prete', 'ORNot', 'kcKKJ', "⏰📦 Pr", 'WaFoL', ") deu", 'IVdDx', 'VkNGE', "tado ", 'vhmYO', 'api/d', 'lap', 'sSKzt', "o Pau", "ças r", '|2|5', 'hQdDc', 'nBxMn', "┃ 🎨 E", 'blur', "eça o", 'kLRim', "r tit", 'UFfDi', 'Moder', 'pJSvE', 'wsNRg', 'PkjoO', 'omxIj', 'inha,', 'DBkxH', " *fec", 'gEWPH', 'FGdBQ', 'inha(', 'ilySt', "a Mui", "elho ", 'MMbWI', 'RKZMW', " Bani", 'argos', 'IGqaw', 'terDe', "┃ *Fo", "S*\n• ", 'Unida', 'nNLvU', " deu ", 'PGEHU', 'asead', "a evi", 'gSwpc', 'quenj', 'Rank', 'rgCLb', "CT id", 'lho', 'strea', 'nseTy', 'CrMWn', 'getGa', " Veri", "│ 💬 ", 'vos', 'UXThW', 'po]', 'fUpvl', 'wkBIG', 'EtItB', "!\n\n✨ ", "om su", "NTIS ", 'cluir', 'fUgBZ', "!* 🎮 ", 'ᴠᴀᴅɪᴀ', 'pCOOD', "o. Co", 'ponív', 'EqGqD', '╔┉✼┉═', 'ly=Cr', 'RYahc', 'znrBE', "*Por ", 'dyaNS', 'hkXOl', 'oLuQi', "o tot", "s ven", "ê: ", 'iação', 'IDSTQ', 'ocorr', 'mxETC', 'TELIS', 'NfIyM', 'hoPkB', "rá mo", 'vxoCG', 'NSAGE', "m um ", 'poJCk', 'oVPmo', " ▫️ ", 'gif-p', "te pa", 'BrfAn', "t #\n│", 'UcKSC', 'osPSJ', "ncia ", 'jeJUi', 'rPUqG', 'xecut', 'AtuUN', 'Fbnnr', 'setdo', 'AplLH', 'rDXDt', "sao (", 'NQCjm', 'fivbV', 'dXyXX', 'irmar', 'dxFLa', 'AAKWv', '789', 'geTkz', 'Rejei', "s dad", 'UAkKH', "\n\n📞 S", 'izarb', "\n💎 Pl", 'icias', 'XfEVO', 'hywBZ', 'RÁRIO', 'palme', "\n🔄 At", 'hescm', 'bfOlR', 'qeAyv', 'sSujJ', '𝐑𝐈𝐍𝐂𝐄', "gir s", "𝐬 𝐩𝐨𝐝", 'ens:*', 'JoEFB', "a si ", 'tBslK', " 」⊰╮\n", 'omoca', 'olds!', 'CXeiH', 'nYjrT', 'EUBfD', "na do", 'igura', 'eOWWa', " porc", "🚸 Tot", "r pos", 'IihRu', 'bcdef', " 🎡 RO", 'nGHeI', 'mNFKs', "dio! ", '*Form', 'cido', "nce P", 'YKTob', 'tEFzg', 'EieQK', " acer", "📊 *De", '𝑖𝑥𝑜𝑠🌚', "it\n- ", "as ch", "iv le", 'qmMsN', 'cruze', 'cUOlW', "min)\n", 'iSvgk', "🗑️ *DE", 'ktiJY', "i → a", 'oifAf', "r apo", 'HZyNY', "a: *", 'wlUaY', 'ltema', 'NAGAT', 'accou', 'pOiMl', " KENG", 'oxjog', 'hDqXm', "NOT L", "ks no", 'zkQqK', "a mar", " NEGR", 'QhRIl', 'HMUFn', 'cIWsG', " peso", '0:a]a', 'ODrtz', '𝐓𝐄𝐒𝐓𝐄', 'zQpji', 'nse', 'tMXrV', "ram m", "to gr", "t [no", 'cViXL', 'RBzoQ', 'ehbsd', 'VeiDu', 'AUxjw', 'ição', 'zuQWi', "lo us", 'club_', 'rapid', 'VSATh', 'flag', "á órf", 'VSKDr', '12a38', "\n💝 *P", " gay?", "vel a", "gens ", "ar.. ", 'edore', "deo q", 'ndos', 'zylEn', 'ido!', 'mbebe', 'OCCbc', 'OrpEb', 'UyHmt', 'FGJju', 'as-vi', 'LmtpQ', " Catá", 'nnage', "ho ta", " Text", "s exe", "ema ⚙️", 'ObiVr', 'IONAD', 'bERxQ', 'ediaD', 'urce%', 'evela', 'os)', 'wLTEP', 'fFinq', 'OINBw', 'coepx', 'QabIV', 'kQItg', "ças d", "t bai", "- Ver", "🎯 *Es", 'WIOdv', 'uri', 'PkLja', "gem e", 'rease', 'pdate', 'JoKgO', "sta` ", "\n┃ 👤 ", 'plane', 'aAJfA', 'lputS', 'WGnse', 'OdkZB', 'FcovZ', "\n┃ 💸 ", "ão de", "5 seg", 'APjGY', 'ario:', 'diári', " 🍫\n• ", 'XKLvq', 'dkUou', '701bc', 'linkh', 'Feedb', "\n┃ Ei", 'OAXOH', "O INV", 'o/C0r', 'hJUXK', 'pYJYJ', 'ta]', '034d7', 'BYdCh', 'IGDUV', "aços\n", "ES 🎁 ", "ã par", " tal ", 'dorda', 'EFAUL', 'moJaY', 'GEWzO', 'kCZnz', 'kdybp', "Doar ", "└ Men", 'RaNdO', 'qNHQP', 'nto:*', "\n┌───", 'hxpBY', "soa u", 'qQNTb', "YY (3", 'RKhgU', 'GRwkS', "DO LI", 'spost', " ou b", 'yHKiW', 'PXpFj', 'dMIAU', 'ofaSt', 'NgJnX', "\n๖ۣ• ", 'dFdbF', 'AnOOs', 'ZzLUx', "o 📱", 'MhYcw', 'icial', 'rmo]', "o e t", 'wNXsd', "Cria ", 'srkig', 'EKgFa', 'sumin', 'gemSH', 'TORIZ', 'Multi', " 𝐋𝐎𝐉𝐀", "tido ", 'atual', "PI da", 'wdIss', 'Wxrfw', 'gcghz', 'pen.s', 'lose', 'ora', 'mdhOh', 'pandi', 'PZZkp', 'adrad', 'derro', 'yXEkt', 'GOdNV', 'dUjtz', 'TRIGG', 'FJZOt', 'KEubt', "or ap", "ser A", "\n*Gru", 'obUio', 'Eviit', 'UjrHC', "r, em", 'dYKZu', '🖐️', 'tica-', 'e5c4e', 'istar', 'crica', " opçã", "NDO D", 'kIdGm', " virg", 'DXBFE', 'nJOCF', 'WCQyf', 'ivos:', 'nGLui', '𝐖𝐀𝐈𝐅𝐔', 'orgol', 'JTnqr', 'grCOq', 'sfiFm', "d est", 'rquem', 'aOyYO', " no t", "dos n", 'kKvOL', 'VfGTD', 'IjBCS', 'vídeo', 's;q=0', 'rsYwd', "MODO ", " 🤡 El", "ogo é", 'RewNQ', "RA MA", 'ited', "iv br", 'olhar', 'rio.j', 'zCXnt', 'modoT', '5d785', "O GP!", 'AUHqS', 'taInf', "al Si", 'KltJg', "ra se", 'vQfmP', "Ver r", 'xuGoR', "jar, ", "│ ID:", 'fEpiv', 'gngyX', "a, en", 'isto.', 'uWVMJ', "ink c", 'zvNEj', 'Criaç', 'uykiH', 'dbf0b', 'JSDto', 'sykbg', "18+)\n", 'ubSpd', "𝙻 𝙳𝙴 ", 'PwSTe', '(320,', 'obal`', 'exto]', ".\n\nPo", "SHES ", 'ANMMR', 'nKEZJ', "tir d", 'score', '|0|5|', " memb", 'hjPoT', "ate b", 'PcDIk', 'azist', 'WzysY', 'nente', 'IzSRw', 'QXDUy', 'taça', 'ktDKh', 'fdwHL', "nas n", 'Rjlwx', 'MQEJv', 'EgxIs', 'FngWo', 'Solic', 'FwXlV', 'tOZyU', 'cSsQz', 'hnXDq', 'true', ", lin", "sões ", 'ario1', 'gWGKj', "ar o ", "o. Se", 'byMdz', "MAS] ", 'YlENJ', 'eta!', "GENS ", 'asaIF', "d do ", 'ufXlX', " útil", 'EIIfo', "\nsó p", 'bXgPK', 'afiad', 'ikGio', 'quebr', 'SGVyr', "STE 」", 'QEFjT', "o Lev", 'Clean', 'axQVg', "ar do", 'bdf08', "ias c", 'lhado', "o2 ht", "𝚂𝙰̃𝙾*\n", "r mem", "à lis", "ê! Vo", 'CFDGZ', 'xSUZJ', 'CDnld', 'rTHiP', 'msgs_', 'vbBhR', 'YBwNz', "s: 1/", " o ho", 'YttuU', 'fdWcC', 'ZWonm', "🔄 ATU", 'XNVPr', 'EPRnH', 'oPPWu', "ase d", 'bloqu', 'SLrJc', "das r", 'Zopyv', '61019', "no co", 'text.', "ADAS ", " *Seq", 'apr', 'lPLac', " - *I", 'Rrfin', 'sHDtk', 'fbbb4', "fy [l", 'avail', "os\n\n💡", "🔸 *Co", "plo: ", 'hQqGw', ", 7di", "is:*\n", "r ima", "║    ", 'gxAPF', 'piBuz', 'WwNWB', " - At", 'ontas', " de m", "uel g", "*\nUm ", " pref", 'Urxkx', "NE TI", "\n┃ 💰 ", 'gens,', 'JOEhU', "se: !", "de ve", 'ihHGt', 'riosv', 'aKjxp', '3080b', "g.us ", '5fa39', 'tHyRQ', 'GpheB', 'BzLMp', 'OSLLh', 'uBzqQ', 'ydCAb', "el pr", "os?*\n", 'TksSr', 'sAZkw', 'etrat', 'FwXUg', 'tivos', 'HlYOx', 'EvFnf', 'pedid', " na f", 'kqlCA', "uem é", 'Ewlly', " de d", 'OACBj', 'elist', 'PxPph', 'BkZkr', 'er.co', 'Uwkqb', 'zvZNd', "nhã, ", "ndo b", 'tulo:', 'Srcyu', "o Med", "em ul", 'RUlQP', 'RPyqy', 'RFBPf', 'luGzR', 'aeAZT', ":* Qu", "s) qu", 'roces', "os qu", 'ceboo', 'qXefw', " (31/", 'LDLPR', 'WMEDu', "pos*\n", "lo\nul", 'ages,', " Deta", 'sOgVr', "ato D", "aces ", 'fgTfO', 'Vqwxh', 'rá-lo', " inex", 'ibb.c', 'rmcmd', 'XSuAQ', 'EVEL]', "50 Go", "agar ", '5|1|3', "ira, ", 'chute', 'WZhvy', 'usnjf', "amas ", 'IaMCR', 'dkmVd', 'afk', 'LzuoR', 'HKvIv', "s ver", 'PLujk', 'SYsjH', 'haLop', 'DFsKj', ":* vi", 'uldad', 'ente.', 'gando', 'duYQb', 'CPxwA', "gp / ", 'okBAs', 'fabxQ', "de up", 'hFjFc', 'eMGRc', 'GUZiS', 'nselh', "pp qu", 'xTuJg', "il no", 'ESPER', 'IBILI', ".\n\nSe", "uém c", 'oPFfZ', 'TMhoq', "fast ", 'OaAun', "é ape", 'dulto', 'Dono', "o]`\n├", 'tname', " 🤖 Co", 'KEYee', 'arcei', "as:\n1", "\n*• A", 'rio', 'a9026', 'situa', "zir h", 'days', "│ ⋆ D", 'YTqUX', " casa", " você", "o ]\nD", " grup", 'GVHLy', 'liXRV', "• Arm", 'gMPmi', 'EEJRd', 'LTrJB', 'ciCVq', 'ale:', 'KwGft', "enu i", "er (0", " de á", 'FnxUn', 'lXQwv', "alho\n", 'csXTV', "⚡ Som", "s atu", 'TYbhK', "e o v", "rar a", '://bo', 'ddHDe', 'SUNG-', 'DoNxo', 'user', 'tApjD', 'brlVN', 'BKgiF', 'OOBfz', 'Ysrat', 'DLPsB', "- Vol", 'uUucG', 'DteKb', " 🔥", "p [id", "𝐌𝐀 𝐌Í", 'KKeQJ', "ppt p", 'mXapw', 'jNcky', 'yXqTK', "ma é ", 'lheu.', 'edia', 'possí', 'fake', "ay\nin", 'osiçõ', "0 - C", 'qRGhz', " de P", 'orden', 'indo', 'vITeW', "T NUL", 'ulo]', 'TMocV', 'Kmzan', "a efe", "\n┃ 🛒 ", " tr", '3e4c2', 'GesgI', 'fSXCo', "m GIF", 'Célul', "s, x9", 'taBgY', 'uemgO', 'tiQxL', '3348d', 'sair', "po, d", '9Eaa2', "te, m", "ipv2 ", 'GBrtz', "o do ", "ada u", 'Downl', 'tedRe', 'AMAND', '𝐈𝐍𝐄𝐑𝐀', 'cador', "omo s", 'CwNhC', 'GCvwc', "os se", 'qocWa', 'cXmPd', "inos ", 'PCTlT', 'ifere', 'aKJVy', 'PJDIg', 'anoys', " o cé", 'kjEvx', " beij", "lta r", 'stosa', " ENTR", 'zhkWd', 'sxlcH', 'ogada', 'NzKTz', 'zseER', 'priet', "a Rib", 'hlAju', 'FsDsD', 'zrkTx', "em gr", 'figen', 'uport', "sas p", 'qVaEK', 'vkTlM', " 👥 Pa", 'uhYWU', "🇦 🇨 🇰", " - Qu", 'arvKL', '🚶‍♂️', 'om/..', 'SBbFL', 'BPhjQ', 'setms', 'eWSRR', 'CHAVE', 'WAGEl', 'nLLvN', 'VzaaA', 'lvime', '/08', "to] (", 'PlxKN', "e a m", 'QCLUQ', "upo. ", 'JOroP', "18: r", 'ion=q', 'pjfrT', 'HUkGV', 'SjhRG', 'QDFHp', 'ando:', "u rem", 'opAIN', "e, ou", " em c", "rgp a", 'hrWcZ', "oes =", 'FYtfO', "xo: ", "tos h", 'WethG', "onde ", 'cubra', 'welco', " do F", "O FAK", " Cont", "te gr", 'gpalu', 'oNBBN', 'ihJzx', 'vagkX', "ro:* ", 'HiZdb', 'toptr', 'rm-ms', "N* pa", " bran", " evit", 'inhos', 'lVFlF', ", Exe", 'ra-nu', "👋 Bem", 'teVNS', 'PjKXY', "nti d", 'rainb', 'GZzkm', 'IhJTG', "ISTA ", "IN BO", "a pes", 'álida', " 1h, ", 'uMHOe', ":* wa", 'rnozP', "ole d", "e o c", " OS E", 'rte!', "* Est", " O va", 'NOBvn', 'volvi', "m pod", 'pt-br', "r: *", 'NJyQU', 'EYOrN', 'PYezp', "* @", "?, 1)", " 𝐑𝐎𝐂𝐇", 'eta', 'bJXrt', 'aviat', 'ZDGrd', "ra (f", " 3 (e", 'NIvjT', 'FFYWn', "Sexo ", 'lhes.', 'kEEyz', 'xhbd/', "tar p", "e pes", 'ossam', "ao bu", 'EGAgZ', 'nWnrK', 'ujKMP', "0 (Ma", "air\" ", "mo us", "!* 🎬", 'íveis', "\n (gr", 'LqOZE', "o, me", "ovos ", " 💰", "\n\n@", 'rimei', 'vTMlw', "💬 Aut", 'dPueO', "ao in", 'GXbVs', 'vnweQ', 'HfQXt', 'x9_pi', 'NqCOB', "te co", 'el-re', 'ade', 'negat', 'AakHx', 'JnmTQ', "Abre ", "ê dev", "ha ao", "\n│ 🤖 ", "s uso", 'yrfBU', 'BoMUe', " -af ", "nte\n\n", 'thub.', "❌ Dig", 'GSOEF', 'mrvzu', 'te!', 'vjkKi', " únic", 'nimen', "or gr", "boas ", 'Qfzfw', 'AFEXU', 'Român', 'FqcYe', 'RBKFh', 'CyYZj', "ROM m", 'cXvvv', 'FrAFw', " Cara", 'minKj', "🚫 Blo", 'sIRvL', 'GAZJA', 'GFvXg', " quas", "rjar ", '20f34', "ria:\n", 'iar_v', '45678', 'NZMCH', 'mada!', 'dOnly', 'baseM', 'QkMiG', 'nUXwA', 'wUvlY', "M tra", "ia Sh", 'zeRxX', "p 552", "ndo d", "* 🟤", "cao -", 'sNAVA', "fale ", 'sLXHu', 'tFAow', "ara G", 'NoChf', 'zAkTO', "mas\" ", 'kZXxR', 'TMAYU', 'rtkCc', 'carre', "iv si", "icas ", 'jdWwp', 'onais', " cass", "old e", 'hPaKy', "ou. R", "• Pap", " ou *", 'peATk', "erá o", 'JunHm', 'pp&re', 'twFBD', 'XPrPw', 'ntate', 'AbHnW', "s) ex", 'ROUBA', 'LMpcD', 'ezSOF', 'xJasn', "sApp ", 'vGmBP', "pra E", 'aIgKN', 'cao', "é bom", 'mCzaL', 'tKgbh', " saud", "\n👑 *A", " acid", 'memsg', "ld. A", 'SwOUk', 'RnzNv', "━━\n\n🏆", " sist", "em me", 'btARE', 'GtOnh', 'xMJiO', 'futeb', "que g", "e mai", 'orce_', 'MFFWz', "era 2", 'eract', 'UmNQH', 'SON.', "ver ", 'DJxcu', 'YJaWl', 'xbiPW', 'gSjoK', '47d55', "etro ", 'NHEgA', "ta pe", 'prEsF', 'ias:*', 'start', "\n⏱️ *E", "\n┃ No", 'GwzYl', 'ZnLUi', 'RaJor', 'packm', "r, en", "endo ", 'oNPZS', 'hCKWR', 'Quadr', 'jUmlT', "⊱「 𝐏𝐄", 'react', "todo ", 'http:', 'rutur', 'tuali', 'SMnfi', "ter o", 'kYzZG', "s!* 🌳", 'Canal', 'ShmlA', 'obXFg', "ou f ", 'f7bc9', 'tGPT', 'vpSqN', 'SFKnG', 'XMhXj', "á est", "go no", '0|5|4', 'blCyC', "d tem", 'a...*', "❌ Por", 'vrTlP', " ? AN", " do b", 'icion', "a faz", 'egra*', 'pSDSw', "Este ", "👋 *Qu", "1️⃣ • D", 'riant', 'dQMhK', 'FeiN,', 'tante', " 𝚽𝐈 ↯", 'BWFnS', 'JRsBW', 'bGBiz', 'vuOGa', 'refix', 'PpzMd', 'JMgSn', ", nom", 'Utlch', "🅾🆂 🅳🅰", '💄【✔】ᴛ', "\nmens", " sufi", 'aLIrN', 'gestõ', 'RbhhY', 'edir', 'BkBWG', "do Tw", 'YKojk', "je. V", 'iya', 'fer', '.6,as', 'nmGeq', 'AcGJn', "inha\n", 'mIUqD', 'lada!', 'mium', ") vs ", 'rbati', 'xclus', 'TEL;t', '5|3|4', "ir\n┃ ", 'jdfEm', "uma a", "do ha", "\nUse:", 'NGHkF', "RE*\n┏", 'zLBqz', 'ehwcO', 'bdZir', "\n\n*", 'cBVYL', 'YOLDi', "cas L", 'LFjMG', 'Ptzuf', 'xaghL', 'LrzNz', 'ement', 'gJNMi', "o nes", 'po.', 'zaçõe', "⚠️ *Le", 'glx', 'DRIKQ', 'eseta', "r ter", 'qcFtA', 'XSRUp', 'KWMQn', "╯\n\nDi", "s ID_", 'rmiss', "┃ Fun", 'wPWdx', 'posiç', 'rZLzs', "\n│ 🔢 ", 'wPKlz', 'hyqQL', "│└─ 🎵", 'jNyxF', "\n\nRei", 'tircm', "ero i", 'Yqtlk', 'yimVP', 'nagem', "pts*\n", 'OrkPG', "🖼️ Ima", "\n\n👥 𝐆", ", Geo", 'jtppI', "VOCÊ ", 'ccc1e', 'ZvtOk', 'KugQw', 'WBVfm', 'VbDYk', 'licit', 'MESSA', 'iWvZb', 'VIqqS', 'pdgfv', "u dei", 'gjvhi', 'mais.', '|5|6|', '3|7|1', "e usu", 'ZsmWg', 'terna', "a 3 r", "VOS S", 'EaeVR', 'HmKBH', 'ompar', 'egíve', 'LqOvb', 'yCabA', 'qtiNP', 'ackpo', 'VXaGw', 'rYnGq', "m nad", 'packr', "ema a", 'hxvEM', "e jog", 'qKMIV', 'UyrYX', "0% po", 'O):*', 'bgAod', "🚨 *RE", 'sPYse', 'Bjmjn', 'aYKQi', 'VxVoU', "L 」⊰━", 'wtnDP', '𝐇𝐈𝐑𝐀𝐘', "IMIT ", " velh", "r [li", 'aABaw', "to vo", 'yyMqy', '*Func', 'rdddY', "└ Rem", "\n🐂 *N", 'iYMJS', 'dwxgD', 'GwGKd', "IDO O", 'nBnIU', "ou Te", 'JIBoN', 'orJwg', 'EIKPv', "DO AT", 'diff', "a ass", "nu de", ';[0:a', 'es:', 'OYFwD', 'ghXgw', 'OytZC', 'zxjHa', 'PANUP', 'êmios', 'uLUuC', 'uuwWP', 'kjfGV', 'hDKMq', "❌ Use", "S* 」━", 'aDesa', "┃ 🗣️ S", "ar UR", 'gel_l', "r*\nOu", 'HgLOR', 'gta', 'cJQGd', "━━⊱「 ", 'Soluç', "erar ", 'ecjDy', 'KxmMg', 'aMjSa', 'fCaRr', 'tamen', 'VVJyW', 'vfHpZ', "va ho", 'ANDO🔐', 'index', "🎲 Rea", 'uXjVW', 'BzBMg', "se gr", 'ozlEz', 'xkdjj', ":\n• 1", 'eauti', 'XHoNK', 'kEbBA', "que z", 'PxWMz', 'zlhwg', 'HTpFX', 'OTARU', 'mprar', "rave ", 'PKfrn', 'jAzPm', "E AUS", 'cidos', 'kxlWR', 'CEfnz', '*Níve', 'EbTMj', "\n🎯 *O", 'fZoQS', 'Zyief', "🔢 QUI", "s ati", 'oGBZB', 'TztFM', 'redef', 'ses', 'gora_', 'IAXCF', "(sem ", 'wsInS', 'nbQMT', "ito g", 'SyMUb', 'suXvv', 'SnwUW', 'mUNrA', "\n💎 *P", 'cmcql', 'cDHAv', '/[num', " [nov", "!* 🧹\n", 'CqWzL', '25/12', " Só d", 'FKRHF', 'combi', "dos` ", 'gerad', 'inati', 'PyoSf', "s fix", 'GEMDg', "rte U", 'zFOtW', " se f", "ra ad", 'i..', 'tcvaF', 'MsggV', 'HoLiW', 'LlIfR', 'STFGp', "ens r", "!* Te", 'ojis', " 👑 CO", 'HBkcq', "ono à", " dia ", '/self', 'CESS]', 'SQXPA', "ount ", "▄▄▄\n\n", 'ugzds', 'nt.fa', " PARA", 'RssEz', 'Delet', 'SGOQf', "* vez", 'FpKqT', 'Corno', 'BtHop', "📊\n\n🎮 ", "to é ", "\n📝 *M", 'cdcmd', "ica s", 'xbIFD', '𝐢𝐜𝐢𝐚𝐝', '✼◈༻═┉', "tId: ", 'SxSAp', 'XbTjV', 'OMRCd', 'oment', 'tima:', 'neLJZ', 'nGJJA', 'WBCoV', 'LfMNl', " disc", 'suári', 'aPaoL', "PO!*\n", "o LEV", '442fc', 'font.', 'YHmoP', 'rio.', "Peso ", 'olEtm', 'erxwn', " *Des", 'rjopa', 'oIbnT', 'QvVvh', 'CIADO', 'a.me/', 'ylVMT', 'qXXpF', 'xlkbw', "𝐃𝐎! ✅", 'DzIVM', 'mrFsu', 'SDsWD', " XP", 'nPDtM', 'cUnTm', 'packv', 'xduTI', 'zqvXq', 'IRsQq', 'x9_', "ÃO DO", 'qLqCz', 'IFwlT', " a ro", 'ocr', 'rhDqD', 'jmcxy', 'KmSGb', 'neWqr', 'strua', 'GNpYE', "rão m", 'dOKBd', 'IRETO', 'rsar', 'TemaM', "bas =", 'KgHYL', 'mídia', 'KAxXz', "s.\n\n", 'qroUN', 'gJmYU', "\n• *N", 'uBKeh', "ro pa", 'bal', "Uso c", 'RQhWE', 'qGwyr', '29385', 'iais', 'zKKCe', 'pffdi', 'GWAGJ', 'BXJOK', 'matic', 'ZiLDU', 'ÁUDIO', 'qPArA', "r o m", 'jyRIm', "✅ Men", 'lor>', 'UAXWG', "peça ", 'sMCJp', "um nú", 'sWEpF', 'zfJJs', "nos h", 'uaZZc', "ocê d", 'STURt', 'yetKL', "TO al", 'aruk', " nest", "o ter", "e emo", " vide", 'ZxjWV', 'TBesZ', 'ntos)', 'llect', "hum h", 'wpqWS', 'mJFgo', 'TDXQr', "e pre", "OM PE", 'sdfmm', "r Gol", "\n📊 A ", 'FNMhb', " *2* ", "r / r", "\n┃ • ", 'sPyId', "as er", 'yVwmz', 'tarde', 'zACBT', 'QjvYG', 'ePfzT', 'áximo', "e a d", 'etYtG', 'aNYIv', 'Kidpk', 'RAgnN', "do] [", 'cPUHE', 'WBuKx', "ppt @", 'wiki', '19%25', "ono a", 'RHYA', 'm.br/', "R REA", 'AilKi', 'dIBAt', 'abqyH', "❌ *FA", 'alvez', 'nJmno', "\n┃\n┗━", 'issão', 'hCAuz', " Gold", 'epPdd', 'GDMcv', 'nquis', 'tus', 'var/d', 'dias.', 'FALHO', 'xpira', "eja c", 'PuUyc', "I sen", 'rmite', "HA GO", "a got", "cil: ", 'ExHZd', 'rLgis', 'ANSMI', 'yNVJh', 'VqIFO', "a apl", 'VdlvK', "p\n\n*E", 'HBfir', 'Ngeum', 'VEiaW', 'bela:', 'ext=', 'khHoz', "🚨 *O ", "iv ns", 'MuNiU', 'tWFfo', 'm4nH4', "┃ 🎉 P", 'callg', 'GuupU', 'jdJdc', 'ifyrI', "ldos ", 'Fdphm', "o Bra", 'zxQNA', 'ytywu', "l (", "📦 Cri", "NS! V", 'Sptgr', 'NORA', 'dUIBs', 'rfBQE', 'csJRz', 'tBgHo', " cita", 'esult', 'astda', 'ehg', "ela j", 'MaHqZ', 'guint', "de go", 'vo-ce', 'XaTxe', "o @", ": Ban", 'BvJmX', 'Hricu', "mo pr", 'xbKkM', ", ava", " junt", 'IcQpy', 'Epiwo', " 𝐍𝐄𝐓𝐄", 'pTSFJ', 'jqaHA', "ra bu", 'hSOza', 'emJPd', "❌ Apo", 'bQUue', 'cACJC', 'TOMIO', 'DEGMf', 'Apost', "sso s", 'FysUT', ": 0\n", 'zGhyp', "ão at", 'CUgGD', 'avsED', "ite o", 'qaCki', "s!\n• ", '|4|1|', "- Pol", 'ros:*', 'OzCQJ', "a seg", 'kfWbN', 'xSMzM', "ca me", 'atKRx', 'SOMEN', "2️⃣ - T", "ve us", 'ubrif', 'bpaUR', " Reat", "as: ", 'ista?', "m ami", 'Texto', 'KFgkm', 'xFFIi', "a*\n\nA", 'bem-v', 'FIgvy', 'iYbGC', 'KeBkC', 'uRNFk', 'ilqFs', 'gkCFT', 'green', 's).', " ~\n@", 'vLLOR', "o Est", 'bzEhO', "delo ", " HH:M", "do (1", 'itaçõ', "as ma", 'o_Pau', 'WCBEk', "imo n", "s.\nCo", "ar el", "ne um", "ue po", 'aZMLg', "𝐍𝐎 👑\n", " Avia", 'weekl', 'irBfR', 'has:', 'taku', ", ord", "rupo ", " é co", 'ZTPbw', 'hAqpr', 'NT(*)', 'QLBxM', 'slcuF', 'oZxMy', 'o/reb', 'kBtDN', 'orico', 'lfOaE', 'QYbzu', 'SHBqa', "𝐄 𝐅𝐎𝐗", "bir n", '`dono', 'equên', 'KVFmc', "ixa á", "🎉 VOC", 'OohGI', 'zwDRD', "\n┃ \n┃", "\n😈 *N", 'ÇÃO', 'ório]', "o:\n", 'rgs', '1bf7b', "5\n┃ 💰", 'os_pr', "ogo [", 'CLEux', "os gr", 'rZdmZ', 'ntica', 'XwsaK', "Sem c", 'ceita', "uma c", 'kaJsi', 'PYIwF', " - 🗑️ ", '2d20', 'xytPE', 'cVTpk', 'BWWYr', 'kMGxb', "ar\nEx", 'tesco', " 🛡️\n┃ ", " ou c", 'BcuBg', 'lSmhH', 'YxVRM', "\n🔧 Te", 'UARDE', 'TboOk', 'se_in', 'nha.', '/Cami', 'cts=1', "s\n\nEs", 'Qbncq', "r\n┃ c", 'har-a', 'qxNKN', '15b07', 'gLxrN', 'LUqkh', "\n\n*AN", '━━━━╯', 'DO_BA', " Luca", 'rdpEF', '+100%', "ma fó", 'ItdDE', 'nLjzC', ". Inc", "a rol", 'XTUuy', 'dKMXp', 'ZQgFK', " - Pa", "é adm", 'check', 'nQDxR', 'Unbnm', "O sis", 'TCzfJ', "edia ", 'GVLFC', 'VDnXB', 'vPUhW', 'MRYdi', 'openw', "ra:\n", "os at", 'GZHTs', "CA*: ", 'zGITw', 'RuHze', 'gQQNx', " INTE", 'jdWPx', 'ArjFY', 'jQFLk', 'break', 'sxvuw', "o ao ", 'KMRDd', 'YHGkD', 'tStat', 'pEOoj', 'YYlqR', 'jEsnr', 'nudbo', 'jRwRK', 'spera', 'pJVJA', 'ebPRz', "SET D", 'LMJCX', "uir \"", 'MTuAR', "\"[a]\"", "\n\n📎 V", 'anime', 'in.', 'yKnED', "i est", 'HhnIK', 'cusar', 'OJpay', '|4|5|', 'maxLe', 'wgjFr', 'CLpJp', "8️⃣9️⃣\n╰━", 'remst', 'feito', "o bac", "oken ", ": Fun", 'Bspek', '𝐄𝐆𝐀𝐃𝐎', "rio b", 'aHLrF', 'MPoBY', "ou co", "r o a", " a li", "m dia", 'RxyEA', "CADA ", 'rreta', "ET li", 'mHsAM', 'PqZnk', 'FkrDB', 'bBwjZ', "vida ", 'BuXJI', '0|4', 'EoZep', 'GABHO', 'DAILY', 'XnSkW', 'nUuuc', 'bZgtm', 'YAOXD', 'uLByH', 'UWhRZ', 'CBtLf', " DO C", "na ex", "Use `", 'tQfKe', 'IyomK', 'BGjdK', 'aWcrl', 'fMYFS', 'oQzcx', ", PRI", "xas s", 'fMYRW', ".\n\nEs", 'ESDEA', 'yNKBq', "nte, ", 'anent', 'packp', " defi", "ao pa", " rank", 'KYDEb', 'QrAzs', 'ecuti', 'SoVRH', 'egaçã', " → se", "vos W", "tem s", 'rn_al', 'CnTJs', 'o/ZJz', 'VsSQZ', 'KtYav', 'ePwFM', 'KCaCL', 'tégia', "ble' ", "ova f", 'z8ybp', 'GRohA', 'IrZpC', ":* 1\n", "io nã", 'sJYGg', 'EXJfF', "ia 25", 'tYqkl', " A da", 'FoCAN', " DE G", 'QPtN/', "*\n\n📱 ", 'ysypW', 'LsupG', 'qHrnJ', " Simi", 'ma_jo', 'pRRxr', 'muQNz', 'ohhnb', 'o=dec', ": ta\n", 'suced', "gra [", 'gdOHc', 'wEBPm', "e com", 'ADOR:', "D DES", " 🙄", 'ra.co', 'TVubt', 'BAUNW', "iz nú", 'yaxJH', 'as/', 'squil', "to el", 'FbKGb', 'krJOD', 'uWpDK', " \"ate", 'cutar', 'ZIYCj', 'dorNB', "site ", 'Cance', 'INVÁL', " O PR", 'KDbRJ', 'OMAND', " gets", "al do", "d_gp ", "🎲 O c", 'lDRVm', 'cmdin', " em q", 'seque', 'VCJlm', "o e c", '2|3', "oc ", '/mpeg', 'fa928', 'vpkLq', "ium u", 'wlqUe', 'bPdCN', "3 - N", "zado ", 'jzpQX', 'DXsgk', 'vZZxm', 'keAXa', 'utomá', 'GQQJN', "Isa W", 'gpKYv', 'KMyRJ', 'deusu', 'yOSKa', "a\n\n", 'elgb', "das a", "❗❳ *L", "⚠️ Se ", 'zzhgs', 'BAFUI', 'cVtnK', 'Selec', 'Gedtw', 'zKHKO', "\n┃ ──", 'kfSOA', 'nterv', "te:* ", 'iva', 'hpMoD', 'KMkDP', '*REGI', 'IFQwi', "* - ", 'vzLnM', "CPF g", 'Capti', 'klSlh', " dura", 'tWPmn', "u pre", 'GPEnR', "vo qu", 'ling`', "ZA RE", "\n🔧 *C", 'recar', 'NYTPK', 'QhzPP', "% @", "T cha", 'EwQBc', 'ff000', 'OxLAx', 'agGUD', 'Menci', "u 3 a", 'dXDCo', 'qNMEe', "GOLD ", 'and=', 'ytOQi', 'OZPtc', ". ☪︎ •", "IO BL", '4|2|3', 'ZAUtQ', 'hxbVM', 'Massa', 'porat', 'bbTHi', 'lance', 'uqoLk', "ero F", 'SHA25', "┃ *Te", 'uaHTu', 'KXnRI', 'KTmwe', "r o s", "└ Noi", 'estes', " aces", 'XbDYf', "ão Sé", "al e ", 'kXaUb', 'ggYON', 'rudos', 'JrISG', 'ORrlG', "face ", "ir em", 'ISkIX', 'V0_X0', "N las", 'hfcNe', 'oycnh', 'NULL', 'AxTCe', "3 - *", 'achan', 'tiDAl', 'iorme', 'qItXT', 'ZNYws', 'lYwpT', 'fyMrS', "l` (s", 'VNJvi', 'bvkwG', 'XRPXC', 'EJuGN', 'UZaPJ', 'stats', 'SlBEz', 'tdCvk', "/6 fu", 'jejuv', 'exitg', 'hGQcq', 'XmZHn', 'QMYNT', '.getI', '𝐣𝐨𝐠𝐨.', 'jNFgr', 'elo', "o Gru", 'uYaoM', 'Leave', '|1|5|', 'zwQmJ', "stá i", 'pwVZO', 'Banho', 'eWPEV', "menu ", 'kwebU', 'owUWb', 'SPHkU', 'QSdvi', 'KYJpr', 'qui', 'hhVRU', 'dRErl', "tem o", 'tine/', 'RENbF', "📝 Lis", 'dUXFC', 'Encer', 'DlGxS', "ira 1", " nenh", 'yozWX', "ndo c", 'CpNvW', 'TleSM', 'TUS:*', "do go", 'LIFcj', 'gyzdY', 'jBDux', 'oaBsi', 'imers', 'iqoLH', 'GdySC', "ot ", 'nNCDi', 'bBSrO', 'GOxMW', 'mWSIQ', 'YAmDT', 'FbJWC', 'tesGB', 'YYNCj', ". Con", "o 50 ", 'dhzpx', 'kVCYm', "onos ", 'QtLuV', 'ikTok', "nar r", "🗣️ Sim", 'dia', 'MPezs', 'YcVgF', "ia] o", "o ( v", 'UhJTz', 'VXPfo', "a de ", 'gQjBR', ": 5\n┃", 'cmvoD', "a a a", " - 💢 ", 'nzeRn', 'QHcXb', 'IFvFj', "iso e", ", 1)", "o\n┃ v", 'Fkxpm', 'fohZW', "DAS a", "el sa", 'giISy', 'RDfXG', "ES DE", "os*\n└", 'valos', 'Sim', 'errou', "OS* ⚽", 'MUgPG', 'nKVUv', " DD/M", "par p", 'ausên', '2|4|8', 'TnOLD', "s: 0\n", 'AVIAT', 'kYwRH', 'iyiab', '://te', 'caoEv', 'UGIRM', 'xAwIT', "do da", "❌ Ina", "be es", 'iDLiz', "code ", 'EXDny', " - Mo", 'Fecpa', 'NTAza', 'rdand', 'mIMxI', 'necid', 'SHYNB', 'uAhuZ', 'Sequê', 'modbr', "18 1", "🎧 𝑨𝑼𝑫", '1/12/', 'Escre', 'yruel', "ta\nEx", 'uSect', "tar b", 'vidas', 'OfRfz', "e men", "odos\n", "om So", 'OeldC', "ite *", 'JzEvL', 'RvWac', "ou no", "a des", 'ZiiwR', 'tjkvl', 'ais', " *Sis", "❌ NÃO", 'emasc', 'YGjME', "ção (", 'ggrKQ', 'WateG', 'ack]', "s 😪, ", 'tweSr', 'conhe', 'nativ', 'SAVE', "😘 *Be", 'hgZVI', 'loud.', "odo X", 'svbmU', 'TdtTW', "pra d", "a o d", 'zkVnT', "tem g", "es DE", "uma m", 'XTbBO', 'dHrru', "1, 3,", "eio :", "o 🔊", " 😈❤️", 'dias_', 'serve', 'icas:', 'NGRoa', 'RZERI', 'mSISP', " do g", 'tema', 'info:', "r!\n4️⃣ ", 'EiMWa', 'nLrcN', "O con", "\n┃ e ", "es mo", "s ind", " send", 'te:', "]\n┃ o", " 2 mi", 'eus', 'WBlnX', 'SwqhZ', 'Rbqsx', " !sor", "no me", "━\n\n📝 ", 'ar-se', 'wFRyu', " ou p", '𝐒🔥', 'teIGH', 'QicvQ', 'dente', "to. P", "s\n┃ 0", "DAS!\n", 'slNSQ', 'Cargo', ", ess", "fogo ", 'wLApl', " func", 'as|', 'lUQyg', 'KhTzC', 'ore', 'nfigu', "a adm", 'decep', '0|2|1', "𝐀 」⊰━", "gtts ", 'cULNS', 'f=94:', "lhes ", 'LRPxt', '4b5f1', "e opç", "eus p", 'UKzff', 'FuwjU', 'self', "tos j", "ens N", 'HEtBL', 'iEzXJ', 'HPWxB', '602f3', 'nossa', 'erscm', 'vBSAk', 'mo!', '0.121', "ebo! ", 'XIOTs', 'vizin', '4|5|2', 'hPsIH', "👀 Hum", "🔹 *Gr", 'Viola', "s gps", 'uZUZE', "ck in", 'ErdqP', "lta i", 'NzOqu', 'Bemzy', 'KEKOb', 'aDpjG', " [cid", "re de", 'OgMeh', " ou 2", "s:*\n🔸", 'leoff', 'hKQlS', 'yOmXx', 'ApxKq', 'itCzN', 'RvIcV', 'VDDJj', "bre u", 'ltiKc', 'zenam', 'esso.', 'rsdQL', 'RJeUA', "a ou ", 'giiuH', "da so", "║ *- ", 'ntes', 'RGYsc', " DE R", " de C", 'gcLtQ', 'XllCn', "irar ", "▱▱▱▱ ", " exis", "🎥\n┃ •", "⏰ Víd", 'rhTRy', "sal! ", "es de", "* ⊶\n", 'ins', " algu", "BLE G", 'JAYDm', "ig ", 'MqqMX', 'cXQhu', 'xAled', 'oWJCM', 'RaDjT', "ium c", 'KvmqF', 'hjfDE', "ute c", "tal i", 'vfvRv', 'le(a)', "0%\n\nE", 'INSER', " (🔊)", 'cusad', "3)\n• ", 'JTBWQ', " \nGRU", 'ixos', 'RmJNJ', "s*\n\n*", "m áud", 'FpxmH', "nder ", 'srvge', "a est", 'dyjLv', 'olage', "ue vo", 'ozcYR', '/.doc', 'TCTvH', "⛔ Apa", 'xcRCj', "VER T", 'NOzve', 'light', "ivar\n", "vo su", 'SaGKG', 'QGSdV', 'LRPhC', 'QxQNO', "\n\n_Al", " hete", 'yeoPP', 'qakaR', 'améri', 'uído(', 'ojigo', 'rdKoN', 'ho.', 'XKjqc', 'bcgro', 'ream_', "「 REM", '.php?', 'MPtTK', "eos o", 'JIdCF', 'xPFqf', "𝐚 𝐢𝐧𝐢", "rtos ", 'cOYFH', 'ShlHR', "a not", 'sos.', 'edire', "ite:\n", 'PYnJw', "┃ 📅 S", 'XgLXf', "msg\nS", 'ainda', 'd691b', 'ITvMe', 'forne', 'XyrNP', 'bboqg', " - --", 'aqLMK', 'desmu', 'TlvJg', 'gx6N/', 'idDGM', 'MDUjz', 'f9538', "O GRU", "─ `", 'ozwDk', "s\n┃\n┃", "orma ", "s FRO", "k [ur", "ao en", "💡 Use", "𝐄𝐎 」⊰", "os* o", 'tdkJC', 'ZMTmh', 'iente', 'lvdLa', 'vity=', " *Esc", 'cduDg', "m ess", "nus A", 'uBQDK', 'KbXdF', 'nsfw', 'hUyep', 'ine.', "7 mem", "nk do", "┇ *𝙻𝙸", 'NgGxk', 'ncerr', 'ulaçã', 'xbVcw', 'PLmia', "🎮 Mod", "mpo r", " 5 MA", 'fCRbq', " é su", "er se", 'uyzjm', "s ent", 'ias*', ':VCAR', 'xlDpE', 'Ypssv', 'Reuni', 'lindo', "NE MO", 'Misrk', 'SCoQF', 'QzZpj', " http", 'n/x-w', 'sHokL', 'WYiuW', "👉 Bas", 'QbwgX', " Face", 'BlGPx', 'ZqqgY', 'kRvcN', 'agem>', 'ver', 'IlSTE', "w ati", "har J", 'und.c', "os\n🎯 ", 'IFocc', "os, n", 'guel2', 'OsyiJ', 'qtJmO', "oa 3 ", "em, p", "mo Ti", 'TnpGO', 'OkOkr', 'ANUTE', "ns: ", 'QlPem', 'has', 'ycTkg', 'kSdkD', 'gem..', "ji vá", "tra u", 'fLJUY', "━━━┛\n", 'URAÇÕ', "á nor", 'XQMUM', 'tople', 'mDDRI', "eis g", "do*\n*", " 2h)\n", "nce u", 'hIVYm', 'nusdJ', '2:00', 'ssão.', 'MgQxH', 'XBpbn', 'hqefM', 'ligen', 'ndos.', 'AmNtD', 'letad', 'IgwQU', 'EOfDX', "LD ME", 'iases', "LUME ", " ?, 0", 'NChAz', "ao sa", 'caçõe', 'rirgp', 'load', 'isa', ", Dif", "play ", "s G", 'ica', "s*: ", 'restr', '*_Ess', " *Det", "e sel", "s cai", "nAI D", "de ce", 'TRO:*', 'VDUwK', " muit", 'DgDGi', 'HtuUW', 'cFyZy', 'XtHpB', 'TXetA', "18 4", "ta, a", " perg", "- Ace", " a to", " \n╏❆ ", 'MZUXZ', 'QOfhn', 'lLVFZ', 'eo]', 'kidtj', 'halZd', "u des", 'EQZHr', 'dFijB', 'tlyJQ', 'rRPZe', 'NqSAQ', 'qMGTK', 'gameD', 'OSzXH', " nude", 'bUNyn', 'IvPmh', 'KSCjN', '┣━━━━', 'OJAXZ', 'RYJPZ', '/%20', 'DKaUt', 'iSNSk', 'aUYEc', "a ama", 'rter', 'quivo', "2, qu", 'gUcNH', 'spJih', "ero p", "d NOT", 'fHZov', 'Finan', 'hjbBf', "* Jog", 'excec', '04szj', 'Ningu', " do v", 'LQBZo', 'YYopL', "│ 🔮 X", " site", 'fuCoU', 'zgJmy', "\n└ Pr", '2835e', "a: Re", 'hYzMo', 'wNtVC', 'Posta', 'YYTql', "no Gr", 'WRKSF', 'hoje', 'FToTz', "❌ PER", " eu e", 'rNIha', 'ymWCI', 'xqfNr', "a?\n\n「", "os ex", "a exc", "otal ", "ões h", 'topal', 'çadas', "nce ", "ROM s", "al ou", "│ • U", "Ops, ", 'a.jpg', 'obal.', 'PSIlS', "📋 *Ca", 'mHlXo', 'LA/ta', 's.jso', 'LJtue', ", x9)", "ão co", 'JWwED', 'RRtxv', 'vkqEw', "ros d", "\n└───", 'vFwkN', " minh", "🎲 RES", 'acks', 'LCLJU', '✼◈༻══', "u mar", "tou o", 'lCeUC', 'ebido', 'RQWqv', 'VFmUR', 'om.br', 'DxSaq', 'dRBze', 'WWwVx', 'fIMJp', 'soblh', "60 se", "DAS G", 'berry', 'doce', 'riada', 'zcDEe', 'xfMcI', 'al]', " 👀", "* 🔄", 'qbxZB', "a!* 😂", 'ZoZPL', "TOP 5", 'jbLFw', 'vo]', 'kYgPu', 'DCrFX', 'xXJHc', " 🅿🆄🆃🅰", 'poder', 'ínimo', 'finis', 'rlJLb', 'dildo', "\n📚 *C", 'OJyMS', 'MbJEW', 'VFtCr', 'RKUyG', 'rtida', '/24h,', 'MGACT', 'VuUeF', 'zxpbN', 'coes', "Cade ", "i!\n\n🎮", 'rwrSJ', 'UlAPn', 'HLKML', 'OifDa', 'MPjov', 'o/b3C', "bar\n┃", 'PHOEN', "ê env", 'Médio', "do pe", '6c69e', '.posi', 'ITXcx', "eu in", "os: A", 'yrcPG', "o:* `", 'empo:', 'fvoOv', 'igar:', "⊱「 ME", "te \"s", " em v", "┃ 💰 V", "o inv", "r (qu", 'xmGqY', 'boasv', 'mergê', 'uqbfl', 'bFpZp', 'DMvzw', 'LIRwO', '})()', "┃ 🔧 O", "AS EX", 'ugjmG', "dá um", " as ", 'eIyiC', 'nciag', 'AIiib', "cao ", 'RyNjb', 'IxejY', "\n\nQua", 'zJfQj', 'afJXw', "io\npr", 'bXbKA', 'ikAur', 'ICegu', 'in_by', "vrao ", 'emium', 'UDgom', "\nBair", 'LeCkA', " qual", '𝐑𝐃𝐀𝐍𝐃', 'uEZNC', 'LjyJB', 'FFuNk', 'quint', 'DvfON', 'elar', 'yoLCN', 'QYjUF', 'fJlXV', 'chan', "m ven", " um s", 'KDydH', 'sfqSd', "sar v", 'Roxo', "𝐑 ❌\n┃", 'aCdZM', 'mAwqX', 'nFned', " DIÁR", "e (gr", 'dyQCc', 'yQifA', "u víd", "\nverl", 'dário', 'pUNkz', 'otege', "(s) (", "┃ 📅 *", 'hcRIP', 'QTtFx', 'ILTER', "IX RI", "co:*\n", "md ", 'inuto', 'WQmha', 'BcWZB', "a\n┃\n┃", 'MXcda', 'eg:', 'EdfMn', "✅ Emo", '20m', 'phiJX', "E men", "em au", 'opaga', "pede ", 'bwdeo', 'ZdNOA', 'KasAE', 'aAwZR', 'fgama', 'EOaqB', "e san", 'portu', 'XPDRP', '53G8g', 'MssQn', ") e c", 'Renov', "ᴀ:\n*A", 'INALI', 'digit', 'x.com', 'swWuK', 'vlzts', 'sGCuW', "em av", 'KGwQh', ". 😈", 'tiro*', "🔸 A p", "je em", " adds", "Já us", "ue de", 'so!', 'ez!', 'NGIxF', 'GyDpJ', 'fYtKs', 'FxlMq', "a o e", '𝐝𝐚𝐦𝐞𝐧', "ndo s", 'exif', 'ObECX', 'VwsIM', 'hTXaI', "ɪᴄᴀ💳\n", 'bebid', 'ae484', "o!*\n📊", 'GXODL', "l\n┃\n┃", 'gSYla', 'QwDMG', "ne as", 'LNnBR', "ndo] ", " Tabu", 'tdugp', '*Stat', "DA SO", 'NVwTs', 'LCIPk', "UPO\n", "🌫️ *De", ".. / ", "em pe", 'gekNk', " reaç", "s:* S", 'WfNEM', "é gay", "Simi ", 'tvAeP', 'posit', 'WQVjn', 'MTUHY', " do h", "é mui", '5|2|1', 'jCVxB', " o mi", 'TohCC', "┃ ⚠️ C", 'lateR', "ndo 2", "sso p", '*FUNC', 'icia', 'hrsoB', '/cred', 'vCBnA', 'ElyoJ', " e ap", 'bfkzK', "bre c", "\n┃ 2 ", 'pnszO', 'dccZZ', 'missa', "🚔 *CA", 'pkyHA', " 🎉 SO", 'ITIdX', 'crpsB', 'KMuwk', "r:* @", 'KAUKV', '1|0|3', 'hGfDm', 'image', 'VGFqD', "y DES", 'AS:', 'tNPrq', "RL: ", 'hvZNL', 'rIIzo', 'MEVGX', 'descg', 'KGNcI', 'QBXBF', 'NxEvk', 'gSgwF', 'SwcJc', 'BjwDx', "oi at", "d pla", 'o!*', '*Figu', 'oltei', 'sGkhu', 'culty', 'ysOEx', 'pYvPA', 'vJysX', 'AEdjZ', 'RXhuo', 'KhfbX', 'chang', "dio d", '/mp4', "\" rem", " beba", "🎮 *PE", "a atu", "is já", "inou ", 'logos', 'Bxmdd', 'mLGew', "ás pa", "in`\n🔸", 'ZEIeK', 'YlGJb', "e dad", 'ibera', "não i", 'oral)', 'tbsNC', 'KJrqV', 'ndo]`', 'CKPOT', "a\n- P", 'ekpaR', 'DMteT', 'wnloa', 'FbwBV', 'kUowX', 'vUouG', 'qWuSH', 'xeCuG', "le [r", "*, vo", 'er-ta', 'passe', "s Adu", "act i", 'QmHJF', 'ns_au', 'QkAFM', " o te", "📦 Fin", 'VADO!', 'rst', 'longD', ": MIS", 'tjoMb', 'ofspm', "loop ", "rio) ", "• `", 'itsav', 'rxdro', "r, a ", 'bGXmI', "exo, ", "」 Agu", 'uDTAi', "ZADO ", "\n\n📋 *", " ] - ", '[coma', "☠️ *MO", 'trmLy', 'XCZoR', "ssão ", "■■ 10", 'dRcBp', "as mo", 'xmnEd', "eal p", "e bod", 'drive', "━━━ C", "UES (", " [on/", 'SLUxT', 'ejJVO', 'gbkEd', 'ehulB', 'jppW/', 'JAKij', 'AJrBd', 'NruPA', 'goldR', 'clOig', 'QuQVa', 'renci', "eja a", "A* 🎮\n", 'eNxbc', 'ocLlk', 'wvooK', "IRÃO ", 'YgMEL', 'maior', " | st", 'star,', "\n📱 *E", "o!*\n", 'fique', "ima a", 'vazia', "al re", 'GZndH', 'IADO', '_mist', "fw\nde", 'rde..', "to\n┃ ", "IAM D", 'mXfOF', "no ol", 'zCxhk', 'YKhlU', " - Co", 'ls?id', "\n│ ⚠️ ", 'bronx', "ha!*\n", 'timmV', 'onsid', 'EccYT', 'UIvCB', "/30d\n", 'NzFnp', 'AIxcd', 'SiyBm', 'notif', 'consi', 'uFzEf', 'RwzAJ', 'lOSyl', 'rxxlD', 'itqib', " palh", 'QtTUU', "ne es", 'AmvlC', 'ryRvW', '*Sele', 'LSXPq', 'LBnGC', " 」⊰━╮", 'MBRO*', 'vmode', 'DMNEL', 'wbVkU', 'ueira', "*• Me", 'lPXWz', "E:*\n┃", "m pla", "A NEG", "na se", 'hqdPs', "▀╬\n◥█", 'édias', 'ujyOL', 'DtadA', "ssa u", "o doi", 'LIVDs', 'APENA', "e Car", 'tensã', "*\n┗━━", "rna o", 'O|QUA', "ma fi", 'e1a65', 'ejzif', 'dXQPT', 'YxUyd', 'GKOLQ', " 𝐓𝐎𝐓𝐀", 'jkzyy', "FOTO ", 'IRxgj', 'fQFlH', "o, Ex", 'uRGzh', 'osoAK', 'gold!', "r gru", 'pAMIS', 'libwe', 'taMoH', '/js/c', 'nviar', 'LsVbX', 'matos', 'ZuSoV', 's/mai', 'ceiro', "o. Us", "<= ?", "md ns", 'tido:', 'nbnEl', 'mMOAW', "ma aç", "sg, j", " efei", "\n- Ic", 'ZgQPa', "rar s", 'AUSEN', 'fPmXe', "já co", 'QMJuB', '5a472', 'mabzz', "─\n│ *", 'lGkWx', 'indis', 'vesti', 'OUpkS', "🌍 *DO", 'QeAkg', 'CHiCL', 'OvGNE', 'qbSUz', "❌ *Nú", 'splic', 'yArEN', 'ueado', 'cutad', 'DBrFm', "STA* ", 'obal', "% ❱ V", 'cetão', 'uLbLb', "┃\n┃ 📖", 'UYvmJ', "❌ *ER", 'toggl', 'qWxsR', 'jiVIG', "o jog", "tas: ", 'Resul', 'tRTae', 'MvKYj', "ado:\n", 'wKCQc', 'leitu', "cas t", " Ocor", 'pi/re', 'iWhmR', "\n│ 👥 ", '|13:0', 'YWOzQ', "as 18", "á o c", '/cmdp', 'DcwSc', "P%' O", 'mhrVb', '|3|2', 'ESTRI', 'ECXGj', 'aNQao', '𝐎́𝐑𝐈𝐀𝐒', "\n🔴 Ao", "┃ ⚙️ E", 'gOSnc', "sso\n⚡", " Khal", 'bsdm', 'mkdir', '𝐎𝐌𝐔𝐍𝐈', 'SRhTB', 'namlt', " expi", "d [co", 'DmRty', "🎯 ROL", 'o).', 'ual/2', 'PRETO', 'oSLqD', "!\n┃\n┃", "se: c", "nar a", "o: @", '2jyH/', 'simpl', 'midia', 'JrvoT', 'RlfHL', "🎨 Wal", 'DoaKU', "atua ", "-_\n\nQ", 'talXp', 'elhor', '🆅🅸🅽🅳🅾', "ais, ", 'Oecpr', 'msg', 'coloc', "🎭 *PO", 'lYJPE', 'randã', 'GpVlR', ":* Ap", "DE RO", 'itter', 'WvZhF', 'aNwAF', 'prova', 'xAGDd', 'uNuZj', 'HaVjd', "stá c", "\n*═══", 'mFjsH', 'lor]', " tent", 'ack', "O FEC", "po: 1", "iar m", 'DBrzB', 'MYgYu', "d\njac", " msg-", 'vulga', 'doles', '4|0|1', 'HxUTG', "uma p", 'pedia', "tem G", "cao, ", 'WnLHE', 'jBpmR', "ora N", '|0|3', 'IlsSN', 'Uuxjl', "es AT", 'IQlYp', 'oBJdq', 'GDZOJ', " o va", "rno e", 'aleTi', " víde", 'mtQqT', "e dep", 'oaGbz', 'Cyopd', 'miMDd', "elo n", "io e ", "gp* p", 'wnupl', 'udGUH', "a alt", 'QaYdQ', "de na", "de am", 'zrToV', " [@us", 'QKcjl', " acon", 'jfjer', 'per', 'YmCzc', 'ssar', 'bifpU', 'owVMf', 'inha', "ens p", '|7|4|', "r1 in", 'torep', "\" ou ", "foi r", "ra, P", 'mpbFn', "do Ti", 't_cou', 'pOuNR', 'ATOPr', 'imos,', "es Pe", 'ZxxmV', 'TEpsm', "ens f", " incr", 'nido:', 'xXijr', 'QlvCw', 'REGRA', "\n⚠️ Ni", "m due", " nunc", "64 Sa", 'kCWDp', "e aus", "uns i", 'sex_m', 'Hindi', "usou ", 'yJsRa', " setl", 'OHTVC', 'packi', "*📋 SI", " NOT ", 'gem)', 'sta', '..😑', 'ook', 'AiqKH', 'ceJdT', 'unçõe', "boa t", "📊 *To", 'TOGGL', 'Njftt', 'rJkok', " próp", "e Out", "\n┃ 🎯 ", 'rnCkZ', 'tençã', 'view_', "━╯\n\n📊", 'mvZJP', 'ógico', 'bucdM', 'icNEe', " 😌", 'tegam', "ente\n", "da\n• ", 'kcrie', "ar. N", " e pe", 'TABLE', 'PImuu', ", reg", 'está?', "tar e", 'cpnqZ', 'bGbIy', 'NsgyX', 'tofig', 'SQBdr', '0c1eb', "o quã", 'XxnNi', 'itida', 'owncm', '*𝙳𝙴𝙻𝙰', " 𝐦𝐚𝐫𝐜", 'EHIQu', 'no.', '━━━⊱「', 'evel', "ish: ", 'forEa', "ver:\n", " 𝐂𝐂𝐋𝐎", 'XlENT', 'NVDDm', 'iIeSK', 'air*', 'infel', 'ncade', 'PqpXC', "└─ *C", "ongo ", 'órfão', 'hkCRW', 'anHLZ', " NSFW", 'VvFlU', "lte a", '2ff&t', 'asgp', 'iRtyY', 'cYxOs', 'kNDaO', 'IWOut', "plo d", 'MnfcL', 'iAHpy', 'DUAcP', "🔸 🛡️ R", 'EWcpr', 'WjHlz', "):* m", 'ormar', 'YKeRT', "a(s)\n", 'muta/', 'hJZNa', 'nkgp', 'WJZzB', 'attp', 'quand', '98578', 'TzcYh', 'Axofd', 'AYVzp', 'XJdHt', 'kRUVZ', " 𝐂𝐄𝐋𝐄", "• `!r", 'BuRkz', "de ou", 'oeHjy', 'sBGNd', "🚫 Na ", 'sxbQj', " • A ", " arqu", "CC Cl", 'sxYdY', 'NEPVb', 'egVXc', 'repea', 'mencg', 'UgNWH', 'IdrCw', 'itual', "nhã!\n", "pos q", 'JlPeI', 'lecmd', "🎨 *Ef", "ip\n", 'Score', "「 REG", 'icall', 'GceSk', 'bCrfX', 'Pzpvs', 'ugUfm', 'uFaCD', "o pro", 'vr-cp', "⊱「 𝐑𝐎", 'eInit', 'HYjmS', 'GWEJv', 'SYrdw', " o ID", "r\n\n*E", 'bwebp', 't.0.p', 'Remov', 'ouhSv', "cede ", 'yDvUO', 'rieit', " *Lim", "o? 💭", 'MpfSU', 'MqxvA', 'Beta', 'wPIJt', "al\n║\n", 'UQDKS', " valo", 'pMTfu', 'Tzrsw', 'fNQPg', " cris", 'Krehw', 'r-age', 'Strin', " UM U", 'RkkVp', 'OSCsi', 'dRQTt', 'XpIuk', 'mdTVo', 'elar.', "time ", "po (a", 'prest', 'josnO', "ÃO AN", 'REmXn', "s pag", 'hOIcU', 'bftIT', "s den", 'updat', 'cido,', " LINK", "\n\nExe", "EIRA ", "ky, L", " 200 ", " estã", "ido e", 'PZxpK', "\n\n🔧 N", "┃\n┃ 🎉", " limp", 'po2', 'kpeuL', ", foi", 'TcZSQ', "que é", 'bHIRc', "「 CON", "ona n", "┃ ⬇️ A", 'nIEYa', 'antsL', "vez p", 'copo]', "rair ", " marq", "old, ", "e a ú", "Seu p", 'OQSdd', 'bOB?s', 'hlCjy', 'Viqtt', 'zacpC', "\nDigi", 'ZNcbK', 'EEtJf', "es ca", "le [m", 'NwCmo', 'NuzXY', 'Vexmr', 'evelX', "• 🍕🇮🇹 ", 'YSJME', 'ltas', 'OPÇÃO', 'xcdkk', 'EMmnM', 'QUtOn', 'onsen', 'PYOmJ', "arão ", "com !", '7441shseAC', 'ESO!*', 'o/0hs', '39647', 'face_', 'IOdfM', 'weIiy', 'NJnDc', "❌ Cor", "𝐀𝐍𝐍𝐀 ", "┃ 📝 T", 'MNgRv', "\n│ *P", 'rEZcz', 'IzSZQ', 'qDEpg', 'nuVID', 'ssari', 'eHRjE', 'rTdeh', 'bwpRw', 'RtwMy', 'NpHar', 'mvRvM', 'onar', 'wqLZv', " usa\n", "a mim", 'doKVE', 'KTMTV', "9 da ", 'upAdm', 'GjuTz', 'ANTE', 'OqVZS', 'c9dba', 'LNmVZ', 'leiro', 'XDLeQ', 'IeyYU', 'BClet', 'BlfOQ', 'mwoIe', 'oldGo', "NTE! ", 'rVZqD', "em ho", 'y=img', 'ndClo', "AND e", 'EJIzR', "id js", 'hCBzB', 'kFNDx', "no pr", 'kKTST', 'TLCiv', " [ AD", " paga", 'GShdQ', 'RDbbQ', 'pCsKA', 'HRcOq', 'SzIFh', "ra tr", 'TAwih', 'serme', "oad a", 'KfSCr', 'rtzoB', "om 🔊\n", 'ndiws', "ESSO ", 'TEgyU', "nto e", 'WSQnf', 'DikIq', "os\n\n•", "`\n\n💡 ", 'rBQJF', 'Erro', 'SAUDA', "r Nud", 'FZqxq', 'THvkN', 'nti-r', 'lastA', "S - ", 'mpart', 'FNqaI', 'sJmgL', 'LqlSh', 'upzkA', 'jNhyO', "esde ", 'SLhjB', 'CIzEl', "ID]\n", 'XLWgo', 'ÍVEIS', 'WnHNu', 'hatsA', '7c599', " faz?", "tmsg ", 'CvWbB', 'iWaRR', 'ZONSK', 'vXBdA', 'BWWvA', 'dabv2', 'lROeq', " 🤖", 'GnfNw', 'ight=', 'PI:', "s don", 'udaca', 'dono1', "⏰ *Ho", 'vBzAt', 'andos', 'QqFOz', "G] SQ", 'AHSVe', 'setan', "azia ", 'JvHCZ', 'anti', 'Ccppx', 'mátic', "ém us", 'HfyOY', 'urs', 'SvTbU', "itos\n", 'UTPMB', " Amor", "⚠️ Bot", 'jMrSc', 'nfHRI', "var, ", 'RbDZR', "IDA C", 'ache', 'OBfsv', "T nam", 'ChhwB', 'UNwGt', 'LPtUM', "zes, ", 'KTglq', 'VKzKp', "- Gru", "🎉 Bac", "ack d", 'fo?ch', ")\n┃ 💸", 'ClLKe', " as 2", "rou a", " 𝐃𝐈𝐕𝐄", "rir =", "de mú", 'nha]', 'FeEDK', "ngar ", "o e o", 'AaOEJ', "\n\n𝐏𝐚𝐫", 'sin', 'YjMCz', 'bvDjH', 'rZlIy', 'HHdUr', "🔸 🚫 B", 'down`', 'carin', "or>\n📝", "o pra", 'leNlp', 'ccCpY', "avés ", " Leve", 'eWEYy', "ÃO RE", 'IAS', "T * F", 'QumWY', 'ssame', 'dyxij', "\n\n - ", 'hCfRa', 'ZQpeC', 'UCESS', "ros\n🎯", "m *60", 'há`', 'vybSQ', "* Sem", '3|1|2', 'omple', " XP.", 'or.', 'jIdBW', 'utEgs', "🤡 *CL", 'jkohk', "ter c", "do si", 'mpZZU', 'csIHQ', 'kWznN', "ERE s", 'uakor', 'io...', 'KdRml', 'IFjAn', 'OdxIH', "s cor", " 🅵🅸🅻🅷", 'QACYv', 'aFyQq', "o wal", 'QsfyF', "tra\n┃", "NDO P", 'rMLZV', 'wZjDi', "as as", 'lador', '4a388', "o [nú", "DO SI", "za OC", 'JAgwT', 'proxj', "┃\n┃ 🔇", 'vnGbW', '*TODA', 'PPMqN', 'menta', "te am", "Faz o", 'OtEsD', "'dama", 'DgZfN', " um n", 'envio', 'xintr', 'fica:', 'equir', "GR∆S ", 'orgy', 'haiLH', 'spVjQ', 'yTzjq', "a a d", 'ushtU', "🔹 *To", 'ile/8', 'MAKcl', '1b460', "isa [", 'tenot', "*\n*Si", " dema", "‼️ Des", " Repe", "𝐑𝐄 𝐎 ", "UTRO ", 'kqOlm', " e a ", 'Valid', 'HwCcV', 'cEWpx', 'wToKJ', 'uuSEb', 'ncio!', 'mqEEM', 'BpIqz', 'ZjCAs', 'fYDPL', 'jylAk', 'rados', 'oneon', "om po", "lica ", 'RhMtm', 'ZtsYC', 'onacc', ", ren", 'nao_v', 'oStpW', 'ZKtsQ', '44).', 'zzsHM', 'Trans', 'elsh:', "mpar\"", 'Menos', 'ffava', 'mBCWK', 'YLoyD', "0 seg", "co: -", 'OIOsl', 'eados', "go da", 'BXuKm', "TEMA ", 'Inffs', 'utpzF', "m câm", "ixo (", 'nladb', "━━━━\n", "ATE! ", 'YbBWB', 'UZUI', 'zGfLQ', 'iezJd', 'ZTQDF', "á rem", 'FLMxc', "𝐀𝐋 ", "tou e", 'LkOjO', 'isual', 'zUtnV', "á usu", "es fo", "A!*\n\n", "o 60\n", 'XoiGe', ".\nIss", "e Tes", '/DUEL', "_-_\n", 'jvGeb', "\n📊 *", 'DoArq', 'erado', 'egori', " : @", 'oMrec', 'jMjaZ', "es ir", " [nom", 'TKabf', "tal G", "\n\n✏️ *", 'PCUKU', " BANI", " é re", "⚠️ *LI", 'twfMD', "🎡 Com", "Não d", "_\n\n🔗 ", 'Xqkdz', 'ZawVs', "um bo", "RAS P", " regu", 'PgwOy', 'eLcTN', 'RpAxF', "l For", 'evers', 'Diver', "eu se", '*Comu', " • It", "s (", "o sob", 'd._', "ira p", 'ma...', "por v", " cate", 'poRVA', 'EXXFB', "rwa [", 'uto', "l qua", "╭⊱「 R", "\n║ └ ", 'MAveD', 'jdTNb', "stem ", 'ESATI', 'nganç', "\n🔸 `g", 'uPVVP', 'iSbeQ', 'WcqvW', "o(s)\n", 'McECH', 'oxeUh', 'DNj6/', 'utenc', 'tado', 'SoMKZ', 'ocqHx', 'GKBVN', 'Valor', 'FWOpA', "s idi", 'vcDKq', 'YpMfx', 'xibid', "al\nSt", "u pad", 'pixcp', "ator\n", 'Prime', 'TAjwe', 'WVvcP', 'cppNC', "Pode ", 'VCgzn', "rá al", "• Ace", 'PaODu', 'zctky', 'to.', 'ia]', 'xuQVX', "AR! 😢", 'MbOHj', 'EQ0F4', "m ate", 'aMEbM', "ase n", 'ivar', 'KcoQj', "mas n", 'CmyeU', 'SsePC', 'eação', 'xhrEQ', '0¥5', 'ZCqpN', 'RkYMg', 'Bgvmh', 'oVORq', "e ini", 'ZMcCh', 'vcugi', 'YlbLW', 'yWTvn', "bot\n🔸", 'gYQzC', "nem n", 'goqst', 'soUcd', 'zkcjy', " Russ", "! 🎊", 'anya', 'EoALx', "se no", 'VQVgu', "a Com", 'OVRir', '2:00|', 'fKigd', "KER E", "e his", 'eYviz', 'pAhBP', 'Nzjpy', 'hJkue', '𝐝𝐞𝐧𝐭𝐢', "enus\n", 'odos`', 'irmaç', 'adMfh', "azer ", 'ipo', 'KcHRq', 'ile/3', 'xCLTW', 'chlqQ', 'anDzu', 'UIvTw', 'qtvoA', 'fZqgY', "os re", "e Tig", 'SoybV', 'aOqjL', 'tipre', "i lis", 'OPERA', " Aten", " && ", 'aço.', 's_fec', 'wPLWc', 'gmGCZ', "ER DE", "S IND", "o\n\n⚠️ ", 'QsVQn', 'vUzZd', 'ZAIuA', "bum: ", " 」\n\n ", " Gera", 'UeBzi', 'wallp', 'wcBpv', 'ico.', "t [có", "*\n🔸 ⏰", 'icao', 'única', 'macpO', 'ssgdg', 'CWmHL', "*\n\n📊 ", " [cam", 'nIPJl', " Como", " *don", 'dUETE', "os es", "ens e", "T*\n┏━", "r `re", "se na", 'ihiuc', "G DEB", "\nPost", 'pi/at', "o-o t", "r div", 'nyajj', "a: Na", 'IR!', 'OOLDO', 'HBGAy', 'hTBXf', 'bane/', 'revel', 'CcIUa', 'dxiko', "ta os", 'OMAaY', " 🔊 At", 'GkeAr', " Vind", "lão. ", 'manut', "\n┇ \n┇", "oji /", 'ONSNH', 'ariam', 'hMUmZ', 'sta]', 'jmNWD', 'JvyaI', 'PIDCi', "nte\n•", ": Ama", 'TtQAj', "lds\n-", "de @v", 'infor', 'TPTjE', 'MJkVb', 'doubl', 'cyvTU', 'NFdco', 'jIHBf', " TikT", 'kFbPk', 'zkiza', 'BRSmh', 'lYMiO', 'DwpvA', "┃ 🔒 S", 'ossiv', 'ca4ef', 'Enxah', 'NiqsY', 'Estre', 'bCSyy', " cria", "s (eq", "ca co", 'finir', '🔥Aqui', 'erent', 'JfFv/', 'vio.', 'OxfZa', 'dTWCe', 'ujdxS', 'OCswL', " *CON", "ega n", '/temp', 'ição]', "r o q", 'CcekX', 'YtHfi', "Bot e", " 📀\n3 ", "🐃\n【✔】", "Sair ", "e... ", "k com", "ar mí", 'uyCUV', "*📋 LI", 'tbkgH', "inha ", 'aPSLK', 'wvjPB', 'Preto', 'p.jpg', 'Erro.', 'YESoR', " ?, e", 'htkxY', 'xsvaP', 'denad', 'tomp4', 'ZeDnj', 'etykE', 'LzoXN', 'GHToD', 'LfkJD', "f\nlib", 'pDcTr', '0_15_', 'Oiaed', 'VQlOd', "🖼️ Seu", 'DVLjW', 'te.', "ipv 2", 'WoduB', 'ranki', 'ouPFT', 'ZmdjX', 'ssoas', " 💰 No", 'sport', "*O qu", 'tHlDL', 'rado.', 'nidad', "ato v", "no ao", "ir da", 'mbPmi', 'uZtGJ', 'ilwnJ', "dem s", "or` 💌", 'vaqgU', "agem ", 'HlmWJ', 'dwmZG', 'GwkYH', 'prime', 'eZdqy', 'CQcmE', "po`\n│", 'LHEfz', "ivo Z", "x9\n\n*", 'rfunc', 'zrJWq', 'cjHlx', 'fwqgw', 'asfal', " id\n-", 'Kmazy', "ases ", 'XwpUG', "DO GR", "do!*\n", "has 1", 'Nsqtf', 'ITXbs', " caiu", " Apto", 'JsnLB', "suas ", 'KyXvG', 'rpCHO', 'Gecko', 'spdmP', 'ks.js', "lar ❌", '8|9|0', "T, so", 'corno', 'Nvwxf', 'aByZf', "na ca", 'aqOuV', 'OQEmK', "s\n┃ (", "as o ", 'Tftwd', 'hZVkb', "AGE O", 'JTKqA', 'YjvGU', "or de", 'ktovj', "que s", 'PaBzn', 'ontem', 'IsXsr', 'ogo.', 'onsab', 'rBNfd', 'MifFz', 'cFNUh', " e au", "s, fe", 'SalbW', 'lucro', 'ha.', 'EQshR', 'xxrwC', "🤨 Sus", 'LhXNL', 'MLVGm', " 𝐓𝐎𝐃𝐎", "📈 *ÚL", 'llmNk', " /100", 'senta', 'guoon', "a dos", "ia ar", 'WteYi', 'SLFzl', 'xQRrU', '_dono', "! Uma", " e su", "Com e", 'rack', 'IKBil', 'SlIQq', 'ntes.', 'mMQuV', 'RREU!', 'SUykY', 'REMOS', 'KVzmq', 'WdOzk', "oram ", "rsão ", 'pOyTs', "ra ap", 'sKDuY', "m CPF", 'RIZga', 'eBloc', 'nqCWn', "ink: ", "Obs: ", 'filte', 'DO_CA', "🦅🗽🇺🇸 =", "= 0 O", 'conca', 'cKryd', 'zismo', '_pinn', "2 7di", 'vxsUT', 'AjclB', 'BHOHc', 'jigEl', "o:*\n┃", 'chá', 'oa2', " ⪧ *", '://pt', "soa\n•", 'po..', "「 💕 R", 'ear', "TES (", "fixo ", 'pante', 'GunDl', '|3|2|', 'izaçõ', 'cvfKg', '_gpt', 'rMjPg', 'WbmcR', "━━━╮\n", 'YWOVN', 'MenuP', 'AIS:*', 'rm-ur', 'rhUOM', 'Resga', '42669', ":* Po", './tem', 'XkWCK', 'PUdwu', 'fb.wa', "mpo d", 'xmMeG', 'MJRqV', "\n┃ 📋 ", 'das.', 'aIPiX', 'llhNU', "o na ", 'enta,', "\n💡 *D", 'GBCEr', 'VKECJ', 'leted', 'omycQ', 'OOqUD', 'ora:m', 'Usqjs', '/100', 'ApiKe', 'FeLtL', 'yadBU', "ou\n┃ ", 'PVSrI', "O que", "ivo =", '0.8,e', 'golds', 'cupid', 'JVtsT', "te, a", "hum j", 'pfNLW', 'LSiUV', " pro ", 'tsCEV', 'FfLcH', 'termo', 'oral,', 'xnSdt', "= abr", "ll of", 'YWnOH', " enco", '=cl', " a ve", 'RVyZt', 'alugu', 'ZKnTB', 'phHWT', " \n\n[🎴", 'gkxRz', 'eyWQm', "ode a", 'ar.', 'prox_', 'llCgy', 'XHfjo', 'tdGZI', 'GVEia', "... ", 'XlIlr', 'KrZVc', "ver o", " Dama", 'qvzgv', 'blico', " na v", 'auquX', 'over.', 'TICOS', 'XVgDH', 'lPRKx', " [men", 'gDSjK', 'JeVrI', 'reati', 'pecif', "dia\n┃", 'SuSmD', 'dando', 'YyPBm', " use ", 'IEsAt', "X9 (t", 'lleve', "dos q", "o` - ", " ganh", 'GtFmB', "\n• Pa", 'kpCNM', 'e-se,', '_adve', 'FfpEu', 'GjtYw', 'ᴘʀᴇsᴇ', 'ero-d', 'PAxCD', "🥷 Com", 'pIWVJ', 'layco', 'PgZCW', 'PCMbr', 'hKEje', "ro al", 'qioNq', "adas ", '5f6d2', "IP, p", 'direc', "e a s", "\n🔗 ", 'toxdj', 'jauLG', 'dFSTS', "ar? U", 'LDVze', "iada ", 'mHdng', 'GwtMB', 'EaNeY', "t:* h", " URL ", 'ikwTk', "ji: ", 'hRqFr', ": +50", 'ofYOk', 'd001b', 'djFFF', "👑 @", "\n\n𝐍ã𝐨", "ao le", '═┉✼┉╗', 'IIJks', "* R$ ", 'lNTfX', 'PENAS', 'wLoEN', 'JVvNy', "ARA M", 'japin', 'heonn', "gp e ", 'FSXpY', "✅ *HO", 'kdlVa', 'MVKVX', " cont", 'zvTem', 'hvwOi', 'GHoMr', 'RZhGw', 'mbolo', 'Eouxa', 'XPGDB', 'isarf', 'envol', 'eta..', 'rinth', "amor ", '(3x)', 'xbIct', ", ?, ", "ulo\np", 'EaULx', 'FgyRm', 'BlSuq', 'WKiiD', '1jMPL', '_2v14', 'SgIjT', 'ZGPLs', "se en", "m: ", 's/org', "a\n• M", 'jvKia', 'qmMJi', " e,\n┃", 'boARC', " e qu", 'ontat', 'Geral', "nta Q", 'xrbLi', 'CEsDJ', 'jvfNR', "\n\n*AD", 'vertê', 'uxQFO', 'AAOUa', 'NoAaZ', 'XktdC', 'FUizK', 'IZpbj', "nu _-", 'Info', 'nkkHa', "ó pod", "rá a ", "esa D", 'homeB', 'imit', " por:", 'ZkJxq', 'TMjyK', 'AxWfh', 'oji', 'Cdszi', 'YWFAG', "GER D", 'nlCuR', " os r", "\n\n📊 *", 'uMvGU', 'ento', "T use", '7a011', 'KVSjU', "App\n│", 'yevWm', 'codig', '5637f', '(opci', "me va", 'ube', "P de ", 'tados', "eres ", 'aQhuZ', "digo ", 'cadeS', 'YLNSO', 'Venci', 'pSwXR', 'SjIxH', 'ype=C', 'a_atu', 'RvnYj', 'CBmaY', 'ShSeX', "*\n*5 ", "er o ", "*\nQua", 'bVAsO', 'uptor', 'k-X19', "r. )", "🔞 Mod", " \"des", 'Frezz', 'cLHTn', 'UIyyO', 'mvdRI', 'UCgss', "GIF c", 'AsyfC', 'ZLbIb', 'gjEZo', 'irZEi', 'LGTFg', "SÓ BL", 'YOSHI', 'GDKsA', 'KzQuJ', 'Unzla', 'LerbQ', 'fLqIv', 'KhUuJ', 'ENYvh', 'clear', 'usu2', "ify e", 'bLnMB', 'leira', 'EGvYJ', 'autho', ")\n┃ 💰", 'YouTu', 'vwVmF', "XP To", "el at", "• *Ti", 'tqTrf', "Is de", 'yiTtf', 'mwZHk', 'ecífi', 'ppxSq', "eça l", 'LPLdi', 'MQTMq', 'bIwIl', 'RECIS', "r Sau", 'QAsFI', 'eNEeJ', " vári", 'line/', 'iGDqG', 'EhdXR', " LIXO", 'bado/', " só d", "❌ A q", 'wJLee', 'anho/', "ma im", 'yRhch', "🥇 1º:", " reno", "! 🎉", 'r-men', "\n1 = ", 'icker', 'tqoqI', "s mis", 'boves', 'o-bra', "nda: ", ". *", 'Wxtbo', "etra ", 'ItNIG', 'DGQnu', " se q", 'sbloq', 'MPttS', 'Vsnaw', " (01/", 'Vvksc', 'fZiUk', 'ZVqGu', 'Adm', "iv me", 'FvpFP', 'UIEGX', 'foto_', "🔄 Atu", "Irei ", 'aurad', "STA C", 'eNACp', 'FdEpP', 'BGmxa', 'GrZkE', " is_g", "┃\n┃ ", 'UJoUf', 'b1a1a', 'Links', "uem n", "DEU! ", 'envie', 'nviou', "te` -", "has n", 'BEPEU', "t ou ", 'BvcWe', 'cLkQX', "]`\n• ", "inho ", 'rgHoI', "pira ", 'flyZs', '╰─━━━', 'pZkvb', "deu u", 'bilid', 'KKCaF', 'oxTAt', "o Twi", 'essõe', 'jmdld', '*Ativ', 'vgqzp', 'listl', 'jRKQY', 'uTgLL', 'figro', 'vip/a', 'xIbZt', 'ck-na', 'OXHhM', 'vuQFw', 'book.', 'prgrZ', 'feLxt', 'ptrSw', 'qFblI', "m efe", "\n\n𝐀𝐩𝐞", "ake 1", " Minu", 'QJIEQ', "s!\n┃\n", "📈 Lev", "ra AD", 'UYBqs', 'perfe', "um.\n", ", lev", 'YbBVu', 'WWjxw', 'tória', 'SxnlG', 'JAIL', "U! 🎉\n", '|3|4', 'LcmNL', 'LClxe', "itar ", 'eling', "ogo S", 'zyeUL', '2|4|0', 'elp', 'XgTmC', 'ZqzlK', "UCA C", 'Vgial', "):*\n", 'ome/1', 'fZHOc', 'jhcUg', "ste t", 'IIVLs', 'iaram', ", Sub", 'bGDYq', "ar.\n╰", 'IaHrd', "\n💡 *S", "vre: ", "na, c", 'NwkmO', 'DkVLc', "nte h", "são +", 'icaçã', "o bot", 'XzjSM', 'CmOlQ', "no av", " exce", '𝐖𝐍𝐈𝐀𝐂', "te = ", "ra do", "r:\n", 'lRkWc', 'Rxozy', 'PAGAM', "la ma", "do ab", "┃ 5 -", 'oUhFO', 'TFCIc', 'comfi', "on ✅\n", 'WabWn', 'ambos', 'ovand', "\nO te", 'ingar', 'VoWqb', 'DNQLb', 'YzHSf', 'IBRqs', "diz q", 'FCZMO', 'm.fm*', 'ZgpAI', 'VfnXi', '.png', 'ÕES', 'Coraç', "t vis", "k e t", "or en", '𝐄𝐑𝐂̧𝐎🔥', 'MEDIA', 'GnJSz', 'pZGtM', 'gDzRR', "ma se", 'PHqUD', 'cVTef', "o Tik", 'uetKY', 'zAkXu', 'HFCoc', 'mOvCc', "ceu!\n", 'nheci', '*Hora', "act [", "man (", "u com", " EXPA", 'KLebb', 'ito.', 'uJDOU', " = Ap", "s\n└ D", " ━━─╮", " de n", 'tSdsT', "o\ncoo", 'FSLYc', 'dadas', 'tipo', 'AKQgy', 'YxIok', '/josi', '𝐕𝐈𝐀𝐓𝐎', "oji: ", 'tmpoO', 'edido', " [cor", 'DEbww', "o sis", 'wNnRp', 'rankf', 'group', 'reglk', 'DAIBc', "s ess", 'ombin', " futu", 'JOwQC', 'TPXEu', " 81", 'HBFbI', "po:*\n", 'Cuida', 'OJPWo', " depo", 'cONAQ', 'ylfmc', "p!*\n\n", 'média', 'NwaHA', 'dsqtc', "e foi", '─────', 'sKajN', 'CwaIB', "o não", 'dziWV', " 25", 'data', 'UfSnp', 'ile/9', 'ssá-l', '-soli', 'sCAYC', 'pwMxP', "upo a", 'fm:', 'KISS', "g [te", 'SwucK', 'iavSo', 'LODlz', "po]` ", 'QcqKJ', "Suas ", 'ftlIY', "\n... ", "icie ", " Víde", "res d", "*👁️ Gr", 'ZfSAY', 'los:*', 'espor', "m esc", 'pIvzr', " '74|", 'lizar', 'aSrIY', "┃ 📋 A", "ão: ", "ue ou", " Simu", "al pa", 'qFLbP', " impe", 'YEhKp', 'ARMOS', 'ayHEX', 'ile/6', 'batma', 'aqui!', 'fEjEo', 'zjzBw', 'zJQIB', ">\n\n", "• Enc", 'NGexU', "is 😑", 'kzzTT', 'LXFmS', 'fYrMM', 'YHYrF', "e 🗿", "um pe", '30d', 'lxOBQ', "🚫 Lis", 'fdfc2', "❌ Tod", 'eEmoj', 'umCPn', 'FGZWy', "R HOL", 'EoowD', 'Risco', "? \n\n「", "po us", 'NCIA!', 'JUibY', "te Vi", 'Abpuh', 'lores', 'fYxYd', 'EeSYB', "a bot", "s*\n🥇 ", 'WvsmF', 'avali', "to?, ", 'LNZev', 'OeyZx', "Por m", 'bJnee', 'HsedG', 'Vocês', "𝐋𝐎𝐀𝐃 ", 'oesdo', 'nclui', 'QzJOu', 'JtKOo', "vra, ", 'VmhkU', "ces d", ", 5h ", 'BAIXO', "vido ", "m o u", "NTO E", " 𝐒𝐄𝐋𝐄", 'mwdAo', 'qfzIj', "ES: ", "😡️ ( O", " 📅\n┃ ", "📦\n┃ •", 'itame', "o.. O", 'jpYbH', 'ido', "a a e", 'svCsp', 'LcZuw', "rar p", "━╯\n\n🎲", " dada", 'ZDgpd', "imc 7", 'SOsZf', 'kedBC', " 📝 At", 'fWwlr', 'TblPg', " \n\n「 ", " em s", 'KsDTT', 'bAqjC', 'www.i', 'JTkHn', "e ped", 'XBUsg', "\n\n⏳ R", "al Me", " 𝐦𝐞 𝐝", 'ZxEst', 'ibida', 'QmQYI', 'sonal', "orno ", 'WCXgx', "00 Go", "⚠️ Voc", "io:\n\n", "res e", 'KUYZu', 'Fetch', 'ujaKy', 'oGQxv', 'YgvKh', 'uSYqb', 'AutQT', 'USSfg', 'TnPvj', 'nti', 'TVHNl', "`\n│└─", 'otdtm', 'NTOoF', 'antis', 'zcwsN', 'bOnpv', 'tiver', 'ficul', 'nqthA', "pais ", 'lnQjA', '𝐄𝐒𝐄𝐓𝐀', 'GvVVQ', 'AuKDE', 'rqSjj', 'CQkIi', " 1 AN", " / Br", 'peTrE', " RM_A", 'jpgol', 'guel', "impo ", 'ormaç', "om ma", 'HsVxK', 'ward_', 'optio', 'DzudS', "🔸 Ape", 'jIfDT', 'TCHal', "soa [", "ra 10", "po di", "as es", 'RcSNn', 'ardan', " demo", 'mlEys', 'art', "de Me", 'VERTÊ', "AND h", 'nlXCu', 'kdSdl', 'odPzk', 'remet', 'yhUxg', 'do1]/', 'acGhY', 'QeekZ', '=700&', "Olá A", '༺◈✼', 'xjeRF', 'gDdod', 'NJuol', "LE IF", 'RxTRo', " a im", 'ZXDcq', " | ", '748b6', 'LQlyr', " o ve", "000 ", ", 0)\n", "m @", "ite f", 'goria', "🔄 A m", "você ", "nte: ", 'GbXHf', "❌🕵️ Mo", "s sob", "ro de", 'apost', 'Métod', 'xKLbt', 'kUBxM', 'KovWK', 'PhrIn', 'tatus', "cê qu", 'cxyeR', 'Kliyl', 'gHjKE', 'io_id', "nsa a", 'MlEyU', 'YiqmK', "e int", 'iw/2)', 'examp', 'bqIFu', 'uZOuU', 'NsdzR', 'elpSX', 'rrzoP', 'ressã', "anhã ", 'gar:*', 'NÇÃO*', 'jsRmc', 'ySxpW', 'membr', 'e=651', "❌ Ope", 'auvwp', 'GsIPX', '(RP)', "ar di", 'QJvAw', "s o *", 'qPJZZ', 'Injqf', 'iNjGQ', 'nfaqb', 'NKREn', 'ScBrG', 'oHZJV', "E BAN", "𝐎 𝐃𝐀 ", 'gkfXy', 'iFwFp', 'HpIob', 'JBNYd', 'ojvIA', 'FtJxb', "s cha", 'ode', 'kvMtU', " 𝐃𝐈𝐆𝐈", "tm [o", 'a%26u', "o sem", "e car", 'imson', 'PdzRK', 'engas', "o máx", "os en", '(ões)', 'er.gi', "to bo", 'lar_p', "al` -", 'qhXDH', "or, N", " joga", 'RfheG', 'NYBiM', "co a ", " ..", '【✔】ʙᴀ', "or qu", "po] [", "nas a", 'mium*', 'ZDxhd', 'ZRJBe', 'RHpsm', 'sapp,', 'tvhoc', 'tiliz', "sta o", 'ZoPBH', "aça (", "*\n┃ 📋", 'fão:*', 'JHJPJ', "* já ", " 𝐕𝐈𝐓𝐀", 'ddQuv', "ico ✔️", 'OBANA', " dedi", 'lntDi', "ndo é", 'pqiVK', "┃ Nen", "já é ", "na o ", 'eSsWk', "s ace", "eto e", 'oYgke', 'palav', "😢 RES", 'aníac', 'utenç', "ANTI ", 'PKNjT', 'exemp', 'pfFNn', 'IOaLz', 'NLGFp', 'yFaqU', "s Rom", 'THQLK', 'aixas', 'Aritm', "á seu", 'cflbb', 'MnLxx', 'tece', "NG BO", '_link', "🔸 `to", '4eb51', " ⚔️", 'bfBYJ', "as nu", 'gDbxz', 'also', 'DEvuj', 'rmaze', "OT IN", "a, ho", 'AMAPB', "de e ", 'LNDXb', 'IDOdx', 'FileS', 'hmNii', 'tcKBE', 'tKYUQ', "f\nSta", 'da_es', " Volt", 'iado!', 'ITGqg', " hora", "bal. ", 'sVDXe', '[COMA', "ake (", "ço em", "ipar ", 'jxPxB', 'xZSVt', " 👑 da", 'qDRNY', "iste ", "er jo", 'didos', 'fExpy', 'YvRKF', 'pqHOY', "m opc", "SIM\" ", "Y dat", "───\n\n", 'VxVbn', "✅ Fig", 'RUPO*', 'vmzQn', 'SUAxp', 'mesti', 'dWaIu', 'mLZBx', 'KLKbt', "tato ", 'GnsJl', 'VdZWI', 'rJPbH', 'aYaCu', 'cNXVs', 'rZbar', "*\n\n❌ ", 'jynSD', 'rador', " dest", 'gdSUV', "ro: ", "u cor", "sta m", 'SkDfX', 'hos:*', " em j", 'MktHS', 'lapis', 'SjwbJ', 'ZDDyL', 'ati', 'Sbkjr', 'QyNkm', " Gado", 'AaaSd', 'dTwEp', " RESU", 'odas*', 'VbQop', 'lpaCQ', 'oCdgn', "r det", 'afdJP', "uer a", 'UEAR', "\n🎯 Co", 'eNJKj', 'gOROY', 'UGfzr', 'WHCzq', "📊 Cha", "CÊ PE", 'fewvf', 'gwnSJ', 'hVBCl', 'ostar', 'AvdAI', 'EVOWx', "ar:* ", 'CBefd', 'XKAOe', "\n- Tu", 'missõ', 'RIKNp', '𝐓𝐎́𝐑𝐈𝐎', 'MecHA', ": 'na", 'zwZwx', "mine ", 'CZlAC', 'Kxras', '━━━━╗', 'a:min', 'úsica', 'valia', 'WBwjt', "✅ Con", 'nexão', "old m", 'mpcaP', "t SET", '/floo', 'PVZrZ', 'ncela', 'zrDnJ', "• Ven", "to gl", " uii ", 'RADA*', 'ELL;t', 'ggyyl', 'NOiUk', ", Rem", 'retam', 'vra', "┃ tod", "\n┃\n┃ ", 'FvQVN', 'ivale', 'itLyw', 'WmDAD', 'fVJJf', 'xpqZv', 'XnNIL', "oi re", " um d", "🔴 *DO", "⏰ • V", 'ação.', 'ghmRN', 'Assoc', 'aJcYV', '════╝', 't.sty', 'CAIXA', 'QWmBZ', " DESA", 'XAUXw', "om 55", 'sGZlL', "r, di", 'sPctz', "📦 Pre", "ono n", "ma do", " Pelo", 'pp_', "s núm", 'acDGz', '://pl', 'Tesou', 'Ohuiq', 'zuqGY', " esti", "0\ntab", 'FSZPN', "m *!l", 'FVkmi', 'dGCrp', "e Ped", 'quiz', 'vtTXF', "a pel", 'wcYlG', "s nem", 'WDQjy', 'dUYoe', 'Tclay', 'BBVPi', 'wqMZY', 'KOYvn', 'jfIzb', 'KbRuC', " admg", 'AFwVG', '𝐀𝐂𝐇𝐀Ç', "nte e", 'Sltnv', 'JZAIu', "Cadê ", 'aETSb', "dio [", "i1\nNã", 'jdpYM', "dor. ", "ZAR L", 'DAÇÃO', 'jXcER', 'WfueA', 'mG414', 'eVOxj', 'lDECr', '_pht', 'VKtbF', "\n│ 📈 ", 'aTXri', " LEIT", "is pe", 'encon', 'vargp', 'ato', 'IasrV', "「 💝 R", 'shiga', 'prop=', 'VECdm', "\n   ⏱️", 'rTvvo', 'ltifu', 'dessa', 'MHjKA', 'XBkhM', 'nAfoA', 'kpDPO', 'ibtGK', 'nDXSG', 'Digit', "a 365", '🏳️‍🌈', "n, pa", "tes d", "roll ", "r sai", '𝐏𝐫𝐞𝐟𝐢', 'arcmd', 'width', "ias a", 'qpEkk', 'odo]', "o da ", 'AHMmN', 'undef', 'getAl', 'cvFVJ', "a o t", '19:00', " 10 u", 'FiCNN', "ir, t", "r, se", "GOS T", "ato c", " DE C", 'Adici', " Remo", 'CGakq', "e: *", "\n\n🗣️ 𝐍", 'IrmcX', 'VtSBk', 'sicas', " nazi", 'cido|', "ja en", 'nce', 'adas,', 'nBhrg', '0000/', 'YEBCc', 'NCgSm', "\n\nInf", 'ClzMa', '#main', 'cMfHo', 'estri', "ADO 💰", 'state', 'Hoje:', 'ntifa', "\n\n*O ", 'f468b', 'ZVtpT', 'HvdwJ', 'PIAKO', "mo, t", 'SNVSf', 'qpIRG', 'unes.', "az?*\n", 'ima_j', "A ❎*", 'atus,', 'VQQJP', ". ❱", 'cKfor', "nta o", " \n┃ p", 'sguic', 'MxQTg', "us. C", "já vo", 'Cndux', "a: Ap", 'EBLCz', 'kVHHA', 'WnDph', 'bJVke', " maio", 'tivo.', "𝐣𝐢: ", " *ALU", "do ⏰📦", 'VfWVL', 'XzCot', "não b", 'XFEAd', "* Dig", 'dHVPw', 'RADOR', "\" can", "s arg", 'rYdKX', 'kNQKa', "es pe", "❌ Arq", "pelo ", 'istem', 'xFExO', 'grupo', 'XWesU', "s mil", 'goCTu', 'zhgsD', 'rpala', 'BAKky', "ica e", 'fansV', "📊 *ES", "O!\n⚠️ ", "upo d", '1|2|0', 'Wpyqj', "🛡️ Com", 'NdkEe', 'getRe', ": #", "bo ho", 'eazts', 'hora', "te ht", 'togif', 'th1', 'qEzDG', 'vras', "ji da", 'msBHQ', 'FSKuj', 'IYEsi', 'dspbH', 'jrbQp', '_rati', 'BAier', 'hOcow', 'QDETQ', 'sNtMP', 'Ativo', 'bikBV', 'oxsav', 'IxkUw', 'HJIuk', "ste e", "SOM 」", "ão (m", 'emtlN', " espa", "T id_", "ar in", 'HIngy', "om\n┃ ", 'kewPq', 'YdlXc', 'ujIof', "do li", "sso o", 'VPVgu', " `adm", " adic", 'nVMCq', "E PRE", 'fmHeQ', "\nEsta", "r a s", "isam ", "los p", "tipv ", 'RWCfA', "o Ope", 'nTOnN', 'a0d9e', 'JOPgE', 'fc296', 'rWePo', 'CWrtk', 'aleDa', "idiu ", 'WeNWZ', 'FLeBq', 'VZV2i', "\n└ Ge", 'VSnIi', "o! Us", 'SÉRIE', " Temp", 'xSWpG', "mo ad", '/pt.a', ":\n┃ •", " 𝐁𝐈𝐒𝐓", " a co", 'YTVnL', "O des", 'eDelp', 'ttwPo', "a se ", "ng do", 'WRmVh', "\n❌ *C", 'WItSL', "to. T", "𝐚𝐫 𝐚𝐥", "ire p", 'ionbo', " GRUP", 'Dispo', '𝐎𝐑🔥', 'AFxGd', 'tHwhh', 'lDBuo', 'MHWpc', 'sente', " 90%", '.】🥂', "ÇÃO* ", "ão re", "ugir ", 'znhav', 'mpRvV', "OWN A", "🎲 *Es", 'qwRAG', 'xQOWU', 'ylflp', "e fic", "r 12h", 'qRSkI', 'activ', '_grup', 'XlYoQ', 'WMmmO', 'uPHwD', "ais a", "a:* U", 'knGiU', 'mMaOY', 'padra', "ica d", 'dpAyg', "a Exe", "odo s", 'zados', 'vuffH', " ESTE", 'UvnLH', "ivo s", " mate", 'am_au', 'yJNbF', 'JHJjw', 'ultos', "a fot", 'ades*', 'iYGzD', 'kESfw', "2h, 3", "va 🥴", 'agem(', "o ran", 'JFVar', "e ao ", 'qjETZ', "rar i", 'LqmjV', "ada. ", '.styl', 'nDreW', 'iomRD', 'eBNhE', 'gamo-', 'CkPYB', 'hPJru', 'SENTE', 'ROMÂN', 'qLjyG', 'shiel', 'UVEWU', 'wBhTH', ":\n• `", 'PPiXv', 'HuryY', 'Apena', 'hRgcO', 'MFtAE', "ero [", "lta o", 'BBEUa', 'CwKXk', 'njxEh', "não a", 'ário,', "│ 🎵 Á", 'menci', "moji ", 'ADOS*', "┃ • S", 'NudGo', 'boAlD', "ja ut", " chan", '110', " anim", 'DupXB', "angp\"", 'MJgup', 'RqAip', 'ttvsx', 'ZdKmp', "\n🎯 *S", 'YJHrS', 'PsESZ', "o qua", 'a7357', "Mó bu", "v\n- M", "ada q", 'vOtdF', 'POjtn', 'Sbjks', "e 5 c", 'rPUEh', 'temaM', 'AOOWt', 'uAQnn', '52199', 'delet', 'kEcpG', 'Anima', "em fa", 'UÁRIO', "rão r", '//vm.', 'vMtwh', "gar m", "┃\n┃ 4", 'AjCvn', 'vQWDI', "i Des", 'girlm', 'QBHdx', 'VpHAA', '#1f2c', 'spp', 'WgEeS', "t, se", 'ZxLjH', "s e d", 'FtrHV', 'array', 'ghaPL', '|2|1', "𝐭𝐨 𝐧𝐞", 'iUEhv', 'AVvRd', 'Papel', 'NbQUk', 'comen', 'GDnyO', 'pRyty', 'xZXIt', 'teio!', "ra es", 'eqfsf', "ova d", 'ZZcaN', 'adaso', " ser ", 'DOUMA', 'TAZWU', '://kw', 'UOTEn', " bot.", "um es", " do p", "\n┃ 📌 ", 'pzxIk', 'KOHWL', 'EFcda', ", ult", 'IAhBL', "💡 Par", 'zHRqt', "m Ope", " flam", "📝 *Ex", "ng: ", 'jgxue', 'GBqDD', 'WHaWT', "!\n\n💡 ", 'WKVzr', "ada.\n", 'Belle', 'tico', 'sbxsk', 'attp1', 'KBREg', 'tfBJq', 'zZJES', "er ti", 'IMaAB', 'fs/cg', "ino) ", "os me", "info ", 'NIojc', 'xjxVP', '_COMA', 'GUFpG', "i env", 'MNzhx', 'FtvrF', 'UqmBJ', "el en", 'ILIDA', "1 a ", 'LskCG', 'kerin', 'talhe', "to se", 'qaQZE', 'hXmVS', 'attp7', 'dpUcJ', 'gatór', "0`\n│└", 'dbKey', 's_amo', 'UIEjS', 'rro..', "* mes", 'UqUNM', "e mul", "ara d", 'FhXdv', 'ostos', "ém fa", "\n └ _", 'MjDgb', 'JpPcU', "btém ", 'hZlFe', 'rIidy', "ou se", "? \n\n ", 'DwzBN', "DE AL", "15, p", "ANÇA ", "Como ", "] [es", 'notic', 'rupo', "te, c", '15947', 'sIuqt', 'SIKJo', 'stros', 'PqvVh', 'xFvLO', 'CElAN', "POS N", "ido' ", 'JbCPF', "LTOU ", 'lGiCt', 'lUuHa', 'eTTfC', 'LowsK', "r lim", 'ultip', 'Urxsy', "iura ", 'kKoXR', 'LJXRm', " obte", 'zYkfx', 'RiOlu', "📺 *AD", 'evPOX', 'zehsj', 'SAL', "ld ", 'CsOxs', 'ONVvK', 'BucEY', "💰 @", 'GwTbH', 'PzJsg', 'tatos', 'NXifB', 'RQoHx', 'EGkFk', " de c", 'stJte', 'rMiVl', "ivo* ", 'nHVBt', 'moro', '[prêm', 'ycEvr', 'NSpNj', 'MEMES', 'ounuF', "┃\n┃ 5", 'oral', 'RHwsr', 'VftvA', 'bBlka', 'bKsko', 'untas', 'PRxLK', 'RvVga', 'geeAB', 'NYyWT', 'TIZAK', "x: ", 'WiBnA', 'Ações', 'OpVje', 'VKjzo', "ja\n- ", '?comm', "m ent", 'MJjNE', " novi", 'xZmgH', 'alxeJ', 'AZvHf', 'SISDX', "M lev", "o\n┃ e", 'sVmak', 'RSfpa', "gp, n", "\n🕹️ *N", "18 6", 'TKEsF', "os:\n•", 'eBola', 'LCjZa', 'caixa', 'hegao', 'ZmlsI', "in da", "ida d", 'mwJRC', 'daqzd', '11e55', 'UJXup', "ão nã", 'EXPAN', " •.\n【", "ks co", " têm ", "ar es", 'iPvti', 'LIsbn', 'YiuVI', 'readF', 'kxgqo', 'BEAUT', " Asse", 'WSxKd', 'eaoeg', 'RZByZ', "á na ", 'IfNgc', "└ Lua", "r\n- S", 'dSyti', 'fwdiH', "r\n┃ •", "za um", 'TCqaJ', 'bgYgi', "e enc", '|3|4|', 'rel-s', 'ZSWzc', "\n\n⭐ *", "ams: ", 'ey=Ke', 'pedin', 'upo:', 'KNlkz', "e est", 'hJOHa', "em Vi", "━╣\n┃ ", 'QPexU', 'sjTnv', "\n└ *T", "━*\n\n", 'KRPch', 'Lotus', "min'(", 'LZJlF', " o en", 'eLINh', 'rupo]', 'kjFzr', 'vCTLZ', "ltos ", 'tOdsg', 'marca', "us:* ", "obal ", 'fake,', 'NPGZI', 'GDlaf', "stá r", "🚫 *BL", 'Rmnjb', 'Tati', 'LHiSO', "✅ NEN", 'comum', 's_ati', "OLD* ", 'SMISS', "Uma l", 'menor', 'abduR', "nte n", 'NWBQf', 'pfSIx', 'nDYKB', 'terva', "m not", 'tLlhI', "ar ma", '=com.', "er tu", 'eJdBz', 'QCeJk', "e nav", "100.\n", "ata d", 'xhxTy', 'o1.jp', 'reduc', "ings\n", "s úni", 'axBQU', 'xjAEY', 'QNlkW', 'EXPgT', 'yeGig', '0MB.', '-menu', 'ssoai', " WHER", "eja p", 'CISAM', 'oquei', 'pção:', "ndo Q", 'aYEfI', 'icita', 'gif-t', "]~> ", " Sigm", 'REPEA', 'tGlNE', 'yoshi', 'heiro', 'EbhYB', '|31/1', 'tag', 'KateT', 'hine', "nti, ", "rch [", 'kxqop', " 🎯 Co", 'arlim', 'zhDQn', 'vgNAq', "y\n\n🔍 ", "𝐈𝐂𝐀𝐑 ", 'pfffx', '2799726jaZaFX', 'rPzQJ', " 1 &&", "p4 ", "\n*DAT", 'orreu', "só co", 'eSHiX', 'wLrES', "crie ", 'hbine', "RA OS", 'mais,', "𝐈𝐃𝐀 𝐑", "OS 2 ", 'GBqzj', 'SgSio', 'mUISe', '😈+😇', 'YQXqS', 'terio', ": 9 -", 'lojag', 'GFrbg', 'eZeLx', "e o q", 'lPFib', " e di", 'vm.ti', 'KKapB', " fora", " dia/", 'maint', 'eguid', "\ntira", "┃\n┃ V", '𝐕𝐄𝐑𝐈𝐅', 'AGmHm', "gem f", 'DETEC', 'tzigZ', "ADOR ", 'afios', 'bAdDy', 'lmdbn', 'coes_', 'durac', "rá 20", 'Bpetj', 'ars)!', " no m", "\n│ ▸ ", "em pa", "lo fo", 'fKlYT', 'gBgWO', "┃ 30 ", "ado d", ", voc", "o:\n┃\n", 'cargo', 'blue', 'ATIVA', " .mat", 'fTDWC', 'jNenh', "e há:", "o a A", 'sojQO', 'tvphp', 'flumi', 'sageT', 'usAHG', 'cKGhc', " XP ", 'meiro', "⏰ Age", "a lá.", "ar!*\n", 'COLUM', 'PNuGB', "oro →", 'EidXi', "ink p", 'ÓLATR', 'eos/', "🟢 *DO", "\nwa.m", 'ZxHYv', 'sNYIP', 'XVLKt', "er1 @", 'íquel', "❌ SIM", 'hHChl', "⏰ *LI", "iona ", "as ad", 'EXkSZ', 'JOTle', 'AOTbk', "po co", 'vRdXd', 'pKMOV', "o! 🤖", 'RRHcW', 'uelo:', 'LHcNj', 'NcQot', "lo: W", 'bobro', 'KrlNs', 'HMpaw', '/stic', " → Se", 'ef7b0', " do L", 'nJOfL', 'VckWs', "a ren", 'o/ck0', "s sol", '0e6ae', "tem 2", "D 」⊰━", 'ABYlg', 'ÉDIA.', 'DvgZT', 'pbtkL', 'wyCKF', 'MjZZi', "e ima", " What", 'ZOhEI', 'yebAX', 'mentM', 'wUzot', 'Duelo', 'ejCIo', "er ma", 'qmszD', "* _(", 'JZSWb', " eu r", 'rce-l', 'YBztU', 'DiwkC', 'ra.', "ji pa", "ra ev", "ar de", 'fGGQI', 'OSKYC', 'NiLWy', "┃ 11 ", "t par", 'BROvT', "eco e", "lie c", "a9 20", "as me", 'uwaqY', 'ofDdf', 'fotob', 'wsrSl', 'ratur', 'stóri', 'WrqoM', 'sanem', "ala d", "ada D", 'Passe', 'gMmPN', 'adas', 'eiman', 'oyXHJ', 'simi2', 'taSHE', 'TADO:', 'CojgM', '6|1|3', "pp di", 'YMKVQ', 'jPEZF', 'elTYW', 'UFKoJ', 'uNYWU', 'jtdgg', 'iKsky', 'Owhlu', ", a m", 'qiwYP', 'sRHUk', 'pRkTh', 'teStr', "😠 *QU", 'kOGLM', 'JDlUW', "RS PR", 'VBQZn', 'zeIwl', ". Qua", 'JRUvl', "UG] M", 'UTXIw', 'API', 'vr_cp', "s ign", 'dnszG', 'cSbPB', 'ECTED', 'iguas', 'hxpOZ', '_id', "* 📈\n\n", 'Ltnzu', 'wa.me', "r dis", 'FcSFP', 'ldDat', 'RGEPf', 'uqyjz', 'roENg', 'NYbAx', "e na ", 'ArRVL', "S GAY", 'custo', "l rem", 'wPLiJ', "r, ma", 'KWbGY', 'LtLRe', ", sta", "ium: ", '[num]', 'rWcuV', 'e1adi', " clas", "vel, ", 'hzjHU', 'gbot.', 'GDzpZ', "ja ti", ". voc", " Pers", 'aULXp', 'dade', 'rem', 'VezBg', 'pau', 'XMUGM', 'gs.', 'NiCpT', 'sg-au', 'cumen', "oji d", 'CIRCU', "📱 Pro", "na\"\n•", "im` -", 'DVERT', "‼️ -> ", 'Alugu', "E, CO", "\n✊ *R", 'NERAR', 'impo!', 'atent', "s\n\n🎧 ", 'MGsAp', "os ad", 'Uvyen', "o, in", 'qGTxo', " floo", " exag", "• 9 c", 'AGEND', 'hhguJ', 'KrSRb', 'MgqtA', 'nPrZL', " busc", '-_-_-', 'aVWCh', 'VADO', 'ZIuDi', 'zwBHs', ", por", 'oMenu', "╮\n┃ \n", 'EejwZ', 'IywHZ', 'hziOB', "r\n┃ 0", 'ndo2]', 'dkWni', "A SER", "dor a", "deja ", 'donod', 'stre', 'AyCeG', 'afVcb', 'giKlg', " 〕\n┃\n", "m mar", 'gphIx', 'NAzPL', 'DBhqX', 'zUouD', 'FcAfX', 'jwcwp', "m adm", 'passo', 'midor', 'so-ad', 'cRoRA', 'Messa', 'qSBCt', 'ykAyG', 'BKviO', "pos, ", 'fVFfw', 'AJYfe', '𝐈𝐍𝐃𝐀𝐃', 'ero]', 'CrkSL', 'TwaCB', 'RUsrC', '*Para', "rios ", 'WeEso', "é nos", 'mític', "o con", 'WazmV', "e = ?", "ngp W", "ite u", 'entos', 'getTe', 'osjnB', 'ocs', 'qkdnj', 'arina', "A LAT", 'packe', 'zOAzp', 'nesaD', "d, si", "nte u", 'nanat', " Role", 'puzaa', 'mtnNh', 'ggZxz', 'BsTcS', 'qvwYY', 'SKdrU', 'TbNdG', 'gameA', 'OQJdB', 'kjXdk', " ?, m", 'CWIJx', 'OWaJI', "Faça ", 'west&', 'cBiyM', " esta", '😏🔥', 'iHQDZ', 'nfirm', 'RaHWQ', "!\nPeç", 'NWIij', "eio, ", "s hen", "\n🔸 `", "me*: ", 'QBeAu', ") @", 'AMmIv', 'buquê', 'licad', "D: ", 'hEeyq', 'vDyoF', 'LPIST', 'viniy', 'vTECe', 'WckLB', "A api", 'uqDqM', "E id_", 'YiJNo', 'cbxmu', 'KNJKy', 'REPET', 'dpOpU', 'KFdoC', "os mu", 'Nzkgf', 'iktok', " 🎉 ━━", 'XvTbE', 'argum', 'CLBGL', "ests ", 'oGmKs', 'f4ab&', "nce d", 'LmPvV', 'oste.', 'cidad', '%20Te', 'DUYuD', 'OTahE', "ara s", "\n\nSe ", 'mfSKa', 'entWi', "m abr", 'kmiaO', "⊷\n│ 📊", "hr\n- ", 'MEREO', 'JuaxJ', 'cGGzW', "a men", 'KNZYD', 'mDvSE', 'KYtmN', 'eDxoE', " - GR", 'MJpIt', 'forme', 'AKnuV', 'rgalu', 'oppxO', 'DaBZM', 'HlyAP', 'seado', 'iqCcJ', '0.5*P', 'sgyiE', 'sKppa', "Ver s", "ê pod", 'Vmoej', "!!!*\n", 'anbFx', "te ex", 'AVYtK', 'neraç', 'nder_', "s tar", 'ihNaS', 'nizad', 'nnhfd', 'tomio', "\n• *T", 'ugFhJ', " 𝐂𝐀𝐌𝐈", 'IbPFq', 'Ejiyn', 'VOdhS', 'fqpii', 'Manua', 'BltHm', 'cYsnD', 'fTUKg', 'QveFq', "\n┃ 📁 ", 'UxOMt', 'tUtFh', 'eIjLF', "eos d", "ou m ", "de en", 'RQRTA', 'uufhZ', '://um', 'QVCeb', 'WwZNk', 'ZRrep', " - Te", 'gsQKS', 'cipan', 'YXDzp', 'ZFyvy', "e adv", 'rNBrQ', "g2 [t", 'onarg', 'YrOqU', 'Statu', "tamp ", 'ada:', 'CDEGZ', 'BmaHM', 'KmBwp', 'DCtIj', " Prim", 'YerKv', 'XnoNh', 'encer', 'blyai', 'OSS', "om es", " -vn ", " HH:m", "r míd", 'ebHmH', 'licat', 'fTEhX', 'RRPJc', 'mJXni', 'atlét', " text", "│ Dat", 'modo', " [índ", " ao g", 'VbDMz', "bot n", '𝐧𝐢𝐬𝐭𝐫', 'CqPuH', "oçar ", 'JqNND', 'obter', "┃ 📊 *", 'uVAGE', 'difer', " prêm", 'NÇÃO!', 'dmdYR', 'cmmmj', 'LXDRg', "os si", 'PAGAN', 'uxqty', '-pres', "ros A", "es al", 'totai', 'OMPAT', 'PIDOS', "┃ 🙏 C", 'gZADR', 'igar.', 'LTJBt', 'IjbDN', " alug", 'OVzri', '/rece', 'LUBHw', 'deKJC', 'NoPRt', "ia.\n┃", 'turIj', 'WBhsc', "se:\xA0v", 'frXKS', 'QyKOJ', " mens", 'KJUoN', "tá vu", "𝐮𝐠 𝐨𝐮", "r Ora", "o dev", "┃ 16 ", '/vm.t', 'QoTNU', 'Celes', 'lKzRx', 'YpEJG', 'po=2[', 'drcqh', '-canc', "tos\n•", 'aigTt', 'rjXjv', "do os", "LTA D", 'PFXge', 'NMMYH', "seus ", " A ca", "IF si", 'brado', "PI Si", 'SxFTG', "sta`\n", 'glGHV', 'oufox', "SE*: ", 'pKzMF', "5 - S", 'mbIqU', 'QWEln', "re us", 'tViQI', 'TNbZe', 'jMwic', "er TO", 'POzkA', 'hes:*', 'os_ab', 'ssim:', 'sourc', 'solid', 'inJUa', 'eHXUn', 'QLwWb', '*ALUG', "o, ex", 'fbHWw', 'Premi', " Bot ", '71cb9', 'WPdvj', 'BIyJz', 'irado', 'festa', 'eator', 'zCkPN', 'txtbo', 'ervid', "═══*\n", 'ribqY', 'PkQmj', " ♨️📛OU", 'Conta', "de ra", "o ✔️", 'gqpsP', 'RIOsd', " extr", 'dHwBy', 'Fniqz', 'QgXOS', "ma da", 'sMsPE', "own* ", 'YWgst', 'wjOvS', "nick ", 'KEtEr', "I 2 D", "tos (", 'GMscz', 'gkmbR', 'mmzha', 'IXHCm', 'qvkSS', "o em,", 'Pedfj', 'árias', 'bwMGb', 'RvoTL', 'NKjUf', 'bcElg', 'MIrHh', 'gUwZk', 'ZBPdq', 'oltar', "ot\n\n🔧", "📍 Esc", 'dOqop', " em m", 'NQnUz', 'EPEue', "ivos ", 'MÁTIC', 'ento:', " 💸\n┃\n", 'lmFak', 'uuoaL', " 𝐌𝐀𝐓𝐎", 'LcEpd', 'Golds', 'apel', 'rvCcN', 'unção', "Sem n", "stá p", "ntas ", 'fnExl', 'UsCyo', 'SgnrI', " *LIS", "uem e", 'hMKSg', 'GApMP', "r: at", 'DlTkm', "s ]\nD", 'lizme', 'tNdzo', "ra já", "list ", "ira h", 'AHsJW', 'NEGRA', "XP e ", 'upo..', '*Tota', 'zWHwF', 'e-tab', 'expRr', 'divis', " rápi", "per ", "do\n┃", 'gJHaP', 'rGVPQ', 'almen', "com u", 'eSvyM', 'yPeLW', "o alg", 'mykey', 'dAJNd', 'shado', 'ia!', "✼┉╝\n╰", " 📖 Co", 'culda', '*Víde', 'qdCKb', " marc", 'lNemK', '=55&t', "cê Se", 'rximv', "não f", 'WzBcy', 'mmand', 'LgdoX', "de jo", 'FBOEk', 'xVrLM', 'umOnl', "┃ • R", 'TH-BO', 'rinqu', 'qWdhv', 'bebad', 'BjNod', "🔊 ÁUD", 'fiado', "\n🔤 *C", 'dfngY', 'iOsVd', 'meses', "r:* ", 'YKVpe', 'IltpO', 'aGgmV', "s pes", 'ENvNP', 'qDRbf', 'TOqRH', 'vwHBq', 'ons', 'yEtON', '_url', "pras ", 'FFIbK', 'iTiUK', 'txrKM', 'engo', "│\n│ O", 'fLqgG', "ano?\n", 'WOgvU', "o 1 t", 'olheu', 'CQziX', "em an", 'dio2/', 'SzMjk', 'qiLUT', 'enden', 'MIDOR', "r con", 'hLILd', '[a][b', "só fu", 'WDOnH', 'oDlsw', 'RNora', 'SWbCg', 'BGqgB', "FROM ", 'endem', 'reakC', 'UiVxY', 'bReuQ', 'Nbvnv', 'ndo..', 'not_a', "o mar", "e, li", 'VENCE', " atra", 'RKqZw', 'PaeiU', 'wbzzh', "eu do", "ium p", "seu h", 'ameng', 'hLQzi', 'hIxAk', "o ≥ 0", "nas m", 'KtgyG', "k par", "o → É", "foi a", " ྀ⏝🌴 ", 'fbwCR', " inst", "ao nú", 'fredd', 'ect', 'WXcja', 'IaAJr', 'NylHZ', 'TEFXj', " nao_", 'DFiLr', 'KMkTL', 'dth=2', 'FWCkW', "ível ", 'xWJuA', 'mBzUN', 'LOXoC', 'FCZjw', "l ent", "✨ 𝐄𝐦𝐨", 'nmWnp', 'KYjTH', 'SAGEM', 'PleUr', 'toide', "g Glo", 'nAkxU', 'OOfwL', "𝐃𝐀𝐃𝐄 ", 'IXZHv', 'snBdN', "r atu", 'CgxTa', 'YYGvs', "📣 *Pr", "ioma ", "á inc", 'rtido', 'jjk', "URL i", "IA em", 'HFjcs', 'ifunn', 'wIEor', "🎡 Voc", 'UIntL', 'nual.', " A AC", 'yQPqI', "vo no", "ata e", 'choco', 'yBHaF', " dama", 'VokQD', "huma ", 'as)', "💑 *ST", "m sti", "┃ 10 ", 'uBZcE', 'JUnZC', 'gBUvw', 'nado)', 'GUbgs', "*A es", 'leató', 'Jecug', "┃\n┃ 🎲", 'JfXHz', 'AGENS', "/3 ad", 'aYsut', 'oIbGa', 'hPWeR', 'OUxwo', "s\"]", 'hVbnY', "o as ", '4daf4', 'DCGpf', 'bKirE', 'qUuqu', 'GgzTf', 'com/v', 'essen', "v3\nSt", 'aying', 'fNhhS', 'compa', 'traba', 'xyIss', 'skSkf', 'WjuTM', "e Usu", 'skeMM', '━━━━┫', 'lixo!', " gost", "r ope", 'kSRGM', 'hNlxD', "*🛡️ SI", 'tbody', 'ewWkj', '0%.', 'morte', 'NGJSb', 'BTYXG', "e inv", 'XlBYL', 'tempo', 'XqePx', ". Com", 'gDkMs', 'MdDsW', " FORT", '_dail', 'iciad', 'zuKVf', 'EGSbM', "icos\n", "cao [", "S:*\n🎁", 'BhvbP', 'BacTz', "\n💕 *C", 'ros', 'EVqqP', 'WGSsx', 'fVzqZ', 'hando', 'saída', 'YuoUv', " 3h|n", 'xCpJp', 'KiuvM', "je: ", "-120 ", 'ksuGT', 'QJzyO', 'a!*', "Logo ", 'DP3Lo', 'OjAga', '𝐈𝐒𝐓𝐑𝐎', '://ap', "m 552", "ria d", 'ALEAT', "DO BO", 'rsEbq', '╚════', 'ok.', 'HAvQk', 'ZsJxt', 'RWSyu', 'zZujr', 'AxJfh', 'lAEmi', "l par", 'o/FbY', 'IIKFn', 'ZFOyx', " / Ou", " - HH", "━╮\n┃\n", 'cXqeS', " Golp", 'adver', "\n│ 🎖️ ", 'FaxDz', " logs", "E*\n\n👮‍♂️", 'utqHC', 'álogo', 'QUfhg', 'onlyD', "rá tr", "rão e", 'SPANK', 'BvlGc', "p*\n", 'MfuxQ', 'CJlaM', 'ndone', " a pr", 'XQYmV', "pode ", "de em", "( ˶•̀ ", 'DAS2', 'traté', 'os:', 'NYTrJ', 'zGSHD', ": \nht", '(míni', 'oyLNs', "a o p", 'CiOAY', 'ate', 'nyzDd', 'TN6H/', 'opo:*', 'FVfOJ', 'MzLSS', " Toda", 'votaç', 'yqbOM', 'STYAD', 'pt-BR', 'mqtEr', '1|9|5', "✅ Pro", "cos a", 'cacha', 'uuLBJ', 'er-pa', "s\n┃ s", 'RAKI', 'HINAT', 'rmat=', "🎪 @", 'ombas', 'LVflE', "o.\n", 'vapdf', " 💸 VO", " Twit", 'own', '|4|2', " → po", 'kaeys', '/anot', 'Ylxtw', 'sApp.', 'lSvdA', "a.\n\nC", 'tion,', "R id_", 'rTmER', 'mDOkz', " em 7", 'VMPVe', 'luySr', 'lIDSe', 'HBTis', "ira t", "KISS ", 'xKLGD', "é uma", 'QNQHm', 'so(a)', "Dia*\n", "alva ", 'hZuXq', " Mest", "O*\n\n✅", 'ras)!', "\n*Arq", 'Repos', 'iBrKT', 'rIabk', 'nYaVA', 'sHtxj', 'tOsuh', 'wxIFN', 'acion', "Id = ", 'bVWbs', 'TxyoB', 'consu', '*Núme', " ausê", 'ando', "já re", "oce e", "SET c", 'llGwy', 'mabjA', 'teraç', 'termi', "dor d", "os mú", 'linkg', 'nJilF', 'natal', 'finid', 'WRBBT', 'antsU', "o pad", 'conds', "sa fo", 'Idjmz', "O ao ", 'eo.', 'sCdiT', 'ᴀᴋᴜ🧧【', 'riame', "ém em", " situ", " canc", "os\n\n", '|6|1|', 'tPQBG', "s, o ", 'TkdBe', 'oogle', 'SFmjQ', 'sGWZy', "uir o", 'QNUPI', 'kTWzF', 'yYdaP', 'WARNI', 'rdFit', 'xcSGW', 'copo', 'GRUPO', "\nPara", 'uhWGG', " \n├──", 'Base6', 'dele.', 'cJljc', "as = ", 'zLkkb', " pack", 'JDvGr', 'QlVov', 'CjYzO', 'WzZoc', "🤖 Não", '_ou_t', 'venda', "AS as", 'hdYMl', 'sbot', 'LKaJm', 'jqoAh', 'attp3', 'UyQXl', 'hfCaJ', 'dqGxI', "✅ *An", "e:* A", 'anham', 'bsCRs', "\n🏵️ Pa", 'C3%A3', 'GuVul', 'clean', 'JneFG', 'WeRcT', 'KpFee', 'kkefY', 'hance', 'zutpm', 'ktati', 'SCCML', 'gCByj', 'Uqbvr', "r fei", 'ORO', "a ape", 'KQDcG', 'AtbwB', 'HSyPg', "ro us", '࣭࣭࣭࣭ٜ', 'eQeVl', "TE 🎯\n", 'XLbCI', "os ao", 'mal.', 'Wjgux', "id = ", 'yTHNX', 'mites', 'paine', "o] [e", 'caça-', " Cafu", "dos P", 'XERGB', 'inist', "┃\n┃ M", 'nImJv', 'WCfGP', "na AP", 'owner', 'tica', 'OknAU', 'xjogo', 'dVtRe', 'GCRES', 'WyXnz', "s Ati", 'deixa', 'gif-g', "RO!*\n", 'Palav', 'ZPjtN', "Use g", 'TUfjq', 'jpbQe', 'ahjvl', 'aSuHy', 'DvTPN', 'KMcve', "ero :", 'ame_t', "ou 6h", 'tempM', 'ZmPXF', "var -", 'mvcJf', "/X, I", "se \"b", 'OtvCO', 'addEm', 'atica', 'WrAUL', 'YFfxY', "══╗\n┇", 'ZbeHe', 'gRUYu', "1% + ", " é ed", "s 10", '_audi', 'nWaJc', 'CRFnE', 'ViSlB', 'class', " soad", "\n\n☈ 💑", 'sBUNq', 'wHUKt', "l\n│ ▸", 'Mfrat', "ice] ", 'Kveyl', 'icado', 'utos.', "e Fox", "*📋 HI", "iva c", "O ppt", 'ength', 'Vital', 'HXQgP', 'vpyVY', 'bNncH', '╔════', 'vYYAN', "ao re", 'bat-s', "𝐵𝑂𝑇: ", 'amAxS', "par t", " no e", 'POlyi', 'RbUgO', 'tas', 'NbGXg', "to in", " ESTA", " quan", 'ysXla', "hat f", "e:* ", 'etzSo', 'CyRgi', 'etNFP', "ue fa", 'prwyc', "#, se", 'WCvCl', 'WGErP', ", igu", 'DHenI', "\n📈 *R", "var. ", "les, ", 'EcuNa', 'WNMXL', "na pr", 'UUrqb', " índi", "oa no", 'hctxk', 'DLgSS', 'q&st=', 'hgtNJ', 'BiZDS', 'gbHbn', 'pRmAD', '5&tex', 'kzwOI', "Só gr", 'st.fm', "údo A", "IXA M", 'JiVms', 'XlmBw', "o neg", 'UIYbT', 'EPWTf', 'tLmNs', 'HGSts', 'GPXGq', 'grave', 'ReBDf', 'wKLzX', "\n\n🔧 ", "ar bo", "ios c", 'rnyfS', " test", "*\n┃\n┃", "r sob", "𝐄𝐍𝐔 ", 'tionM', " - 🔒 ", "es av", 'VJLzs', 'VIouG', "ogo ", 'mojis', "eu nã", " ao f", 'kick', 'ilham', 'QSvNe', "🎨 *Ar", "oas p", "✅ Gru", "\n══╩═", 'forwh', "om ba", 'letra', 'ter_c', "SFW e", " a pe", 'iEDvG', 'UHPxG', ", mas", 'VSyJo', 'bIQPK', 'KPFtY', 'ção:*', "inua ", 'inkgp', 'PPuDJ', 'ingan', 'yLjTz', 'lqgMC', 'da_in', "io te", 'upos)', " Dado", 'tktNW', 'YtjZU', 'PfTwi', " - ✅ ", "\n📈 Le", "m nen", 'FCItI', "s nor", 'ZBonw', " repo", 'XgICt', 'cedor', "o!\n", "U! 😅\n", " madr", 'Ytwtp', "┃ 👋 S", 'requi', "am de", "r a r", "9 mon", "oi ap", 'auaRH', "𝐊 𝐓𝐀𝐓", 'bcalu', 'KBYPR', "│└─ ❌", '|2|0', " 𝐀𝐋𝐓𝐄", 'rísti', 'NVÁLI', "「 WAL", " *Nov", 'swing', 'gpzp/', 'pGtcz', 'rdcor', "RLs l", 'QITdp', '-pend', 'xZwwt', "cas S", 'line.', 'esgot', 'orca', 'xJerQ', 'LjthU', "ld de", 'fLIKJ', 'h__lg', 'DpNUI', "LETA ", 'ngrup', " ━━━╮", "│ ⚙️ C", 'ECuVg', "] Mar", " 💝 DO", 'GER', 'gZuES', 'opcWd', 'DLFzJ', "UM ER", "s últ", 'nqTOi', "\n│ ", "\n💡 Pa", 'svZTg', "ra, e", "rias ", 'fvYPQ', 'YSyUL', 'Ujwsc', 'Ucybu', '𝐈𝐄𝐋𝐋𝐎', "e !da", 'BHPxz', 'BfQQk', 'PpIms', 'kpWAX', 'versã', 'Rouba', 'sgEUB', 'rifiq', 'ogrup', ": GAN", 'RANDE', 'oMLVf', "á no ", 'uvoKH', "Bot I", 'ridad', 'mQHdN', 'koRze', '38470', 'djANY', 'selva', "✅ *EM", "\n➜ Ch", 'alpha', " - De", 'n3kr/', "ida p", 'webp', 'rbPlQ', 'TOKEN', 'LSsKu', 'mmQAO', 'oríst', 'JANXq', 'WtOth', 'qLyjm', "ão \n┃", 'orepo', "🌶️ PIC", 'RTEIO', 'Exceç', 'fzwHB', 'XWNIK', 'hBreO', 'ocida', 'CXbgv', 'PfCzA', 'Fucib', '𝐍𝐄𝐍𝐇𝐔', 'gizHG', 'eakCm', 'vital', 'WQnfC', "os ⋆\n", " mant", 'qOATf', 'pSzrB', "a a p", 'iYYbQ', 'JnQGx', 'lWIxA', 'gaGoy', 'xCVDM', "o 2 ", 'vZODd', "to: ", 'DYHDZ', 'fKmhW', 'o/5Wn', 'QQjkn', 'o._', "ra vi", 'eeJgt', 'niSsb', " 𝐀𝐓𝐈𝐕", '═▂▄▄▓', ".\n\n💡 ", 'o/100', 'wgwtJ', 'JEFdZ', "a mp3", 'gante', 'Ynrpg', 'BIECJ', " *𝐀𝐓𝐄", 'Pesqu', 'tabil', 'HgOWf', 'es/%2', 'oupId', 'zvFZO', "o.\n┃\n", "!\nCom", 'P.zip', 'PLLES', 'GOXsq', " Româ", 'tKUtg', "🇮 🇸 🇹", 'XvfWk', 'lgold', 'RESTR', 'TLnXG', '-vide', 'KagcG', 'IDMXP', 'user1', 'sHtJy', 'pgWiz', " comb", "ino. ", 'addgo', 'este!', 'mijMu', 'ZNaus', 'iuBdl', 'ELIDj', '█▄▄▄▄', 'queri', 'preco', 'rVRaw', 'JjXnw', 'ersis', "ro ao", 'DdKgV', 'SUmfA', 'get', 'GAVwv', "✥➤ @", 'ids=', 'xIBhh', '5e6e4', 'PjjxD', 'pGtcj', 'AqcES', " -y ", 'mençã', "Rank ", 'gif-y', 'sage', "a]\" -", 'PIlbV', '/...', 'tify.', "ste l", 'ijOgx', 'aBHYb', 'lFJWx', "do, a", "└─ 🔒 ", "so!*\n", "do nã", 'ehxIP', " toda", 'XEbof', 'ckmoH', 'yyGYQ', " *AÇÃ", 'fdjac', 'hdRFa', ",\n┃ a", 'mpra.', 'cEBkL', " *𝐉𝐎𝐆", 'SkqGQ', "ca\n• ", 'igemo', 'gUyhI', 'nkNWd', 'mplo.', "pra l", '.text', 'bqTHt', 'guiu.', '_namo', "al me", 'ELHO_', "o TEX", 'siDmD', 'gStat', 'Pro&t', 'artic', 'd93c4', '」━━━┓', 'Verde', 'qXsli', 'PV)', " CONC", 'Serif', 'chaca', 'OrXBV', 'IRIQG', 'Ative', 'CLYpL', 'tjhVe', " nsfw", "o vaz", 'CRaUS', 'EXRaZ', "ado\n", 'ertos', 'ipUZY', " há u", 'LUÍDA', 'VVZBA', 'cGbDc', 'WDySt', 'StDFx', "• g →", 'LcasR', 'hAZXa', "gem o", 'oDNoX', 'cloud', 'AVfBu', "ra de", 'vpWKW', 'OkCfz', "✔️ O r", 'dVPsN', 'UFldZ', "io]` ", 'awwzq', '10000', 'mgylQ', 'tebol', " pedi", 'xJgyK', 'kDuVO', "ito b", 'ZNOFF', " namo", 'eMuxw', 'ssíve', 'crian', '%20Da', "━⊱「 𝐓", 'ard', 'Miste', 'eJack', 'lSmuX', 'nome]', 'propa', 'PNZaS', 'GUHzI', 'DEMBf', 'FRDpc', " ADMI", "no te", 'BRYEU', 's://w', 'DAS1', 'usYTo', 'OGO', "o DES", "er bu", 'is!', 'XjvrJ', 'FsBeb', "edra ", 'NoViJ', 'bkrlH', "ição ", 'appli', 'omáti', 'sfiqJ', 'qzeWG', "│ 🔥 S", 'QOmUh', 'hours', "tem. ", 'DLJaR', 'expir', "sa é ", 'berda', "2. Se", 'Somen', 'cient', 'aIOBZ', "va a ", "s met", 'qacWK', 'yIZZR', "𝚂𝚃𝙰 𝙳", 'rDHDo', "e o g", " é go", "m pre", 'Uwfxv', 'IBRBo', 'ssões', 'nicia', "erá u", 'CjlxC', "ão do", 'azcSn', "5 ou ", "s:* D", '1.000', 'dBhqV', 'toUpp', 'DzVRr', 'DsVGA', "s seg", 'AApRX', 'Seman', 'lLsAF', 'GMORD', 'PLopl', 'XaeEq', 'rvati', 'linha', "lui d", 'BgtDr', 'eajio', 'nwkZX', "𝐃𝐈𝐔 🔥", 'aDYhP', 'tzrAm', " Reje", "mero ", 'hgDpK', 'XGdWd', 'topra', "😘 @", '╠════', 'PsBNp', 'AfFQT', "GAY F", 'IvPTR', " ping", "🤬 *NE", 'lpQza', 'AUTOR', "✅ (BA", 'calcu', 'reset', "os ge", "💼 Val", '10%.', "o Las", 'yuv42', " *COM", 'FcFZl', "a, pa", " 💰\n\n🎁", 'arcac', 'modif', "]:\n\n@", "e tem", 'LOUNo', 'NpZVH', 'ZtLjS', "❌ Cha", 'frrFT', '?url=', '𝐃𝐈𝐍𝐇𝐀', 'haCMm', 'go]', "os = ", 'LHfNW', ", mod", 'min', 'rgo:', 'autot', '23456', 'CARD', "da. C", 'vinda', 'dlgSd', 'jlljD', 'bqaex', 'IfjpR', "eu ID", "via u", 'p.sti', "á ati", "e don", 'ugada', " last", 'uXJtq', 'trand', 'uvCTB', 'uqDzf', "isa v", 'hot', 'ar)', 'lgETq', " O CO", 'FQwzG', 'mJSiu', 'viram', "ro!* ", 'igAvo', 'mTzWN', " subi", 'hSOSS', 'riosa', 'ZUNRK', 'YMFVP', 'QHQZO', 'upo.', 'ensoD', 'OIIII', 'baQJu', "ao da", "essa ", 'QTC_U', 'gUicz', 'CPlue', "ram e", 'zrJNT', 'mitsu', 'FFvMu', 'apple', '.weig', 'acity', 'lobal', 'do..', "o) @", 'BWGyf', "erro ", 'jmiFj', " *NOM", 'convi', 'GNYBw', 'cuxtV', "ence ", 'y_mp4', "r fil", '11999', 'HFUIq', 'VwgUV', 'DMGpy', 'dNGeX', 'ONAME', 'NwjxN', "po: ", 'iBdMM', "ce Pa", 'terac', "nk\nSt", 'SLeRY', 'estan', 'oSJeY', 'ganda', "\n│ 𖣘⃟ ", "ual p", 'pqdZl', "nará ", 'UsorR', 'mEZoI', '/FehG', 'LMUmV', 'ipo]`', "ção, ", 'nJMcz', 'wWRpw', 'gfmON', 'WrOmv', "el 3", "os li", "em 24", 'qsmWT', 'ifici', 'IcwTl', 'iSULU', "o Reg", 'inval', 'eYiyi', 'LFRKs', "am o ", " 💾 Li", 'mJeCq', "Para ", 'ecido', 'dade.', "rá ap", 'uAhuu', " os p", "do at", 'GpXEb', 'lugué', 'WhLXe', "ji]\n┃", "Do Cr", 'jeico', 'dQaSY', "io re", 'KNyAy', 'LOTUS', 'ingou', 'QvoFn', 'TJWyj', 'hTCRU', " de E", "aper ", 'Otwxt', '/reba', 'nDxmr', 'Strea', 'KCNqw', 'Uvncr', 'val-a', "✅ *Me", 'GWPqM', "A ALE", "2 ven", 'BSBeB', 'pUZGm', 'NZeAU', 'ADvTc', 'GKBjB', 'ZWTAd', "nção ", 'Ouvid', 'th2', 'UxrGK', 'VER!*', 'conta', " Rese", 'CUTAD', "a: Pe", "LD AD", 'JHcGC', 'nça', "\n┃ El", 'oGwpk', 'EdFOT', "🐱\nrem", 'drop-', 'saw', 'n/vnd', 'tLhYl', "algo ", 'wTfqf', 'efeit', 'WoHoH', "e [me", 'rfyVe', " | de", 'PMFxq', "O*\n\nS", 'zXdoP', "act p", 'teion', 'sJOLi', 'MQhzR', 'Aslgf', 'ma!', 'iZfkk', "om me", 'jfRtv', 'Ajust', 'ispie', " em: ", 'yicLq', 'o/123', 'WMgrH', 'rsear', 'bRDb9', 'suqgI', 'yWTmx', 'nome_', 'ifUsL', 'bela*', "⚠️ Vio", "at\n├─", ":\n\n🗑️ ", 'jVaJT', 'OUTRO', "rs SE", "o o b", "⚔️ Ser", 'SFjOn', 'SVyhe', "✅ Ren", "m, li", ", só ", "vo ou", 'ca/Sa', 'yBPNr', 'QuriD', 'Qbohk', 'UCHDg', '/Rute', "ue só", 'uKrsy', 'qXOEt', " brin", "no Ni", 'aJmgj', '.blur', "ias e", 'MOHyM', "?\n┃\n┃", 'join', "ta\n", 'lPnRU', "u)\n┃\n", "ar ao", 'eChgj', 'ersív', 'códig', 'KtMSU', '_sour', "de me", "ua po", 'NNpTc', 'ymfgP', 'SMkwZ', " PPT*", 'repo,', 'rank', "ite e", 'oJMbW', 'SsDeD', '_ofc', 'SAqPi', "lta e", 'anhã!', 'ncyCo', "tes r", 'XAHzX', 'ghZdp', '_docn', "egue ", "vo ZI", 'jQTvD', "E alu", 'GdpiK', 'IHMGQ', 'gVydL', "* Kin", 'kQkDf', '【✔】ᴍᴀ', 'campo', 'JpczM', 'IHTsQ', 'TvcRy', "ões s", 'xtMes', 'FOeNP', '𝐁𝐄𝐈𝐑𝐎', "ra re", 'gAEQM', 'catal', 'ortad', 'YqxlJ', 'EhXAF', "o: Vo", '01-01', 'IPGNN', 'HyOQc', "a últ", 'Twitt', 'HwTVo', 'srLwQ', "te \"p", 'emove', 'TmzdG', "o inc", 'terne', "de \"E", 'XbdlC', 'VWcEE', 'qdkUc', 'jmCiS', 'NDyBj', 'PnqPm', " (📝)", 'fNBSv', 'eatór', 'nhã:*', 'NAGI', "u ped", 'ZgERi', 'NygOS', 'UNT(*', "o! Es", "mo fi", "o e v", "a Emo", "YY)\n┃", "inar ", "upo.\n", 'HkpuJ', 'OgfYm', 'ctRQV', 'voSJF', 'Beija', 'Aceit', 'IMTrG', 'CdCbO', 'KQHKz', "r se ", 'dmin)', 'DICAS', 'NivgR', 'cacnW', " de L", "se co", "🔍 *Re", 'KqxEV', "do] o", 'hWaKn', 'bafsk', 'ni-ga', "01): ", 'o/pro', 'oiXJh', " @vip", "m núm", 'padrã', 'OBUBG', "ou 't", "lão é", "e ⏰🌟\n", 'RULgi', '/víde', "rte c", ". Fun", 'lao', 'ilpXn', 'UGbXb', 'jXmEv', " Mens", "ao al", 'dyGqk', "omo a"];
  _0x3841 = function () {
    return _0x3f27cf;
  };
  return _0x3841();
}
const _0x5c3b6b = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Cadê o link?"
};
const _0x5598be = {
  onlyDono: true
};
const _0x517bfc = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Cadê o número que você deseja pesquisar?"
};
const _0x408986 = {
  onlyGroups: true,
  nsfw: true
};
const _0x4948bc = {
  onlyGroups: true,
  modobrincadeira: true
};
const _0x1db3fc = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Por favor, insira a string no formato correto (exemplo: '74|1.72')."
};
const _0x2327b9 = {
  needArgs: true,
  minArgs: 0x1
};
function _0x2348cf(_0x26fb73, _0x167be6, _0x2df528, _0x3654af, _0x25113b) {
  return _0x1425(_0x3654af + 0x30f, _0x26fb73);
}
_0x2327b9.argsError = "Digite o nome da imagem que você quer buscar";
const _0x49b766 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x49c617 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x4d0358 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x37bc87 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x52f71e = {
  nsfw: true
};
const _0x5419e6 = {
  onlyDono: true,
  onlyGroups: true,
  onlyBotAdmin: true
};
const _0x14eba4 = {
  onlyDono: true
};
const _0x29fa24 = {
  onlyDono: true
};
const _0x369632 = {
  onlyGroups: true,
  onlyBotAdmin: true
};
const _0xbd8ab7 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa especificar se o intervalo será de 1h, 2h ou manual."
};
const _0x3e74b9 = {
  onlyGroups: true,
  onlyBotAdmin: true
};
const _0x362a38 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x44cecb = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x503271 = {
  onlyDono: true
};
const _0x18d76c = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x69a24 = {
  nsfw: true
};
const _0x22b7fd = {
  onlyGroups: true,
  nsfw: true
};
const _0x3e060e = {
  nsfw: true
};
const _0x437bfc = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Especifique uma categoria"
};
const _0x192b21 = {
  nsfw: true
};
const _0x353197 = {
  nsfw: true
};
const _0x5144ee = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Falta o nome do pack"
};
const _0x149002 = {
  nsfw: true
};
const _0x181539 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Falta o nome do pack"
};
const _0x4dd0f8 = {
  onlyDono: true
};
const _0x3a8bf0 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x355630 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x421bad = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "❌ Formato inválido. Use: Horário (ou Repetição)|Marcação|Mensagem|Data de Expiração (opcional)."
};
const _0x11c8b7 = {
  onlyDono: true
};
const _0x2c37b0 = {
  needArgs: true,
  minArgs: 0x2
};
const _0x569a65 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x222c26 = {
  onlyGroups: true
};
const _0x542836 = {
  onlyDono: false
};
const _0x3e72ed = {
  onlyDono: false
};
const _0x316c5f = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x430605 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Formato de hora inválido. Use o formato hora:minuto|hora:minuto.\nExemplo: 23:00|07:00\nPara múltiplos: 12:00|13:00,18:00|19:00"
};
const _0x1c6c15 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x1c86a6 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x46df95 = {
  onlyDono: true
};
const _0x445880 = {
  onlyDono: true
};
const _0x2cf589 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa especificar o ID do grupo"
};
const _0x352f23 = {
  onlyGroups: true
};
const _0x408106 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Marque alguém com @pessoa ou marque a mensagem de alguém para jogar cara ou coroa!"
};
const _0x3e5adf = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x2fa0bb = {
  onlyDono: true
};
const _0x1cd50c = {
  onlyDono: true
};
const _0x4c1304 = {
  onlyDono: true
};
const _0x1bf710 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x3d5428 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x26e724 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Marque a mensagem do usuário ou marque o @ dele para removê-lo do grupo."
};
const _0x2e5cf8 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x5c1850 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x36083b = {
  onlyGroups: true
};
const _0x4cbc38 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa especificar o número máximo para o sorteio. Exemplo: !sorteionumero 30¥5"
};
const _0x7dc07a = {
  onlyGroups: true
};
const _0x1bac23 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x3d8575 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Especifique a ação: a (abrir) ou f (fechar)"
};
const _0x486945 = {
  onlyGroups: true
};
const _0x1c674b = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x17c575 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x5a09b8 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x380b53 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0xe9be0d = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x9084f0 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x200a40 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o novo nome para o grupo"
};
const _0x7047f2 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0xb70597 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite a nova descrição para o grupo"
};
const _0x57d9f9 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x2df042 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x8dd19a = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o número do usuário que deseja recrutar para o grupo"
};
const _0x2a3480 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x33f2ab = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o título da anotação e o texto que deseja anotar separados por |"
};
const _0x162266 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x59aa87 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o título da anotação que deseja remover"
};
const _0x4ff9d5 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x288256 = {
  onlyDono: true
};
const _0xdb84a2 = {
  onlyDono: true
};
const _0x2b1b4d = {
  onlyDono: true,
  onlyGroups: true
};
const _0xecaba9 = {
  onlyDono: true
};
const _0x2181d0 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Insira a quantidade de figurinhas que deseja que eu envie"
};
const _0x4c1b5d = {
  onlyDono: true,
  onlyGroups: true
};
const _0xf0d9b7 = {
  onlyDono: true,
  onlyGroups: true
};
const _0x2d1f47 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Marque o usuário que deseja remover do contador"
};
const _0x44e261 = {
  onlyGroups: true
};
const _0x4184b3 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite a URL do arquivo que deseja baixar"
};
const _0x1759d4 = {
  onlyDono: true
};
const _0x21e172 = {
  onlyDono: true
};
const _0x2bc03f = {
  onlyDono: true
};
const _0x177cb2 = {
  needArgs: true,
  argsError: "Digite a mensagem que deseja definir"
};
const _0x56cffe = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o nome do signo que deseja consultar"
};
const _0x2ca5ab = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o nome da música que deseja buscar a letra"
};
const _0x10c314 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o nome do aplicativo que deseja pesquisar"
};
const _0x5eb461 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o link da Aptoide do aplicativo que deseja baixar"
};
const _0x48cdad = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o nome do aplicativo que deseja pesquisar"
};
const _0x3c2366 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o texto que deseja usar nas logos"
};
const _0x1c3648 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o nome do produto que deseja pesquisar"
};
const _0xc9f513 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o termo que deseja pesquisar"
};
const _0x5a20f2 = {
  onlyDono: true
};
const _0x2d01b8 = {
  onlyDono: true
};
const _0xcefef0 = {
  onlyDono: true
};
const _0x3c8010 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Faltando o link do mediafire para download do arquivo"
};
const _0x5d1c6d = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o CPF que deseja consultar"
};
const _0x6d41e8 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o CEP que deseja buscar informações"
};
const _0x427ce7 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o DDD que deseja consultar"
};
const _0x31b94e = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite a URL que deseja encurtar"
};
const _0x2c9c5b = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite a expressão matemática que deseja calcular"
};
const _0x18023f = {
  onlyDono: true
};
const _0x3dc151 = {
  onlyDono: true
};
const _0x45b138 = {
  onlyDono: true
};
const _0x3c3050 = {
  onlyDono: true
};
const _0x240d8a = {
  onlyDono: true
};
const _0x3f2ce3 = {
  onlyDono: true,
  onlyGroups: true
};
const _0x3b1b1c = {
  onlyGroups: true
};
const _0x43cd7e = {
  onlyDono: true
};
const _0x5a9047 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você deve visualizar o comando {p}listagp e olhar de qual o grupo quer sair, e veja a numeração dele"
};
const _0x2b3e08 = {
  onlyDono: true
};
const _0x3fbc9e = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x1b8b18 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x4962de = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o limite de mensagens para considerar um usuário inativo"
};
const _0x3b3928 = {
  onlyGroups: true,
  onlyDono: true
};
const _0x35d5be = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite a partir de quantas mensagens pra baixo você deseja remover (que não interaja no grupo)."
};
const _0x420ad4 = {
  onlyDono: true
};
const _0x1aa929 = {
  onlyDono: true
};
const _0x2671ed = {
  onlyDono: true
};
const _0x27d661 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Nenhum número fornecido."
};
const _0x36c314 = {
  onlyDono: true
};
const _0x3b8c5d = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o novo prefixo que deseja utilizar"
};
const _0x400886 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x2ddcab = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o novo nome para o grupo"
};
const _0x13634e = {
  onlyDono: true
};
const _0x13d37a = {
  onlyDono: true,
  onlyGroups: true
};
const _0x186582 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Marque a pessoa que você quer clonar\n\n*EXEMPLO:* clone @"
};
const _0x12de54 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyDono: true
};
const _0xdac606 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Cade o texto?"
};
const _0x28602c = {
  onlyDono: true
};
const _0x4cfd41 = {
  onlyGroups: true
};
const _0x44c976 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x20bfe1 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o que deseja colocar na tabela do grupo"
};
const _0x195c4a = {
  onlyGroups: true
};
const _0x475e17 = {
  onlyGroups: true
};
const _0x1a4998 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0xdf077a = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Formato incorreto, use: comando/quantidadeGold"
};
const _0x4454e9 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x46eb2d = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Especifique o comando que deseja remover da lista Gold"
};
const _0x42582b = {
  onlyDono: true
};
const _0x4b854e = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Especifique o(s) comando(s) que deseja adicionar à lista premium"
};
const _0x172cef = {
  onlyDono: true
};
const _0x9cfb77 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Especifique o comando que deseja remover da lista premium"
};
const _0x1d9a43 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x52b6f9 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x258027 = {
  onlyDono: true
};
const _0x48694a = {
  onlyDono: true
};
const _0x5134af = {
  onlyDono: true
};
const _0x298028 = {
  onlyDono: true
};
const _0x30606e = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o comando que deseja executar"
};
const _0x1c3bb4 = {
  onlyDono: true
};
const _0x12e237 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o código que deseja executar"
};
const _0x29f7bd = {
  onlyDono: true
};
const _0x8c41ca = {
  premium: true,
  admin: true,
  dono: true
};
const _0x3f1a4f = {
  needArgs: true,
  minArgs: 0x2,
  argsError: "Cade o texto?, digite algo Exemplo: !gtts PT Oi"
};
const _0x7c44f6 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Escreva sua avaliação"
};
const _0x30b00b = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Descreva o bug que encontrou"
};
const _0x10b084 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Escreva sua sugestão"
};
const _0x3e97db = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer um termo para pesquisar"
};
const _0x38823c = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer um termo para pesquisar"
};
const _0x4d9a05 = {
  onlyDono: true
};
const _0x124122 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer um termo para pesquisar"
};
const _0x45fc5c = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o comando corretamente"
};
const _0x5f38b7 = {
  onlyGroups: true
};
const _0x57a57d = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x1c24b4 = {
  onlyGroups: true,
  onlyDono: true
};
const _0x34bde2 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x4b857e = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0xb9c829 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x582fb9 = {
  onlyGroups: true
};
const _0x29377d = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Precisa digitar algo..."
};
const _0x26b46f = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer o link do Kwai"
};
const _0x292cc0 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer o link do iFunny"
};
const _0x7d09c6 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer o link do SoundCloud"
};
const _0x1653c7 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer o link do Spotify"
};
const _0x1458fb = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer o nome ou link do que deseja baixar"
};
const _0x38cc8d = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer o nome ou link do que deseja baixar"
};
const _0x3130ae = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer o nome ou link do que deseja baixar"
};
const _0x4d3a9b = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer um link ou nome do vídeo"
};
const _0x251406 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer um nome ou link da música"
};
const _0xecc572 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer o link do TikTok"
};
const _0x1a33bd = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer o link do TikTok"
};
const _0x46030d = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer o link do Facebook"
};
const _0x5a0c1c = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer o link do Facebook"
};
const _0x25b4c1 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer o link do Twitter"
};
const _0x396612 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer o link do Twitter"
};
const _0x2141ed = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer um link do Instagram"
};
const _0x4b29cd = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa fornecer um link do Instagram"
};
const _0x5ca549 = {
  onlyDono: true
};
const _0x507b86 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Texto onde?"
};
const _0x39020b = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa especificar um modelo de celular para buscar"
};
const _0x406c77 = {
  onlyDono: true
};
const _0x218c70 = {
  onlyDono: true
};
const _0x259963 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0xd00eed = {
  onlyDono: true
};
const _0x4bdd51 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x4432b2 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x55e020 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x54ffb8 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x2fa964 = {
  onlyGroups: true
};
const _0x2b4728 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x22d0c1 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o símbolo que deseja adicionar como prefixo"
};
const _0x36bc1e = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x202bc9 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o símbolo que deseja remover da lista de prefixos"
};
const _0x90f294 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x37bb0c = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x5daa48 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x1b4c30 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x523ba9 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "*Escreva a mensagem de boas-vindas ou saída*"
};
const _0x1ddbb9 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x4bf175 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "*Escreva a mensagem de remoção de estrangeiros*"
};
const _0xb4c96c = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x536c0e = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "*Escreva a mensagem de remoção de usuários que estiver na lista negra*"
};
const _0x5afd55 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x31432b = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "*Escreva a mensagem de remoção de quem enviar vídeos*"
};
const _0x575da5 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x3235d9 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "*Escreva a mensagem de remoção de quem enviar imagens*"
};
const _0x5acd8e = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x35a028 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "*Escreva a mensagem de remoção de quem enviar documentos*"
};
const _0x1716fc = {
  onlyDono: true
};
const _0x5cb4c8 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o token da API do OpenAI GPT"
};
const _0x44ee11 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite a descrição da imagem que deseja criar"
};
const _0x165064 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite uma pergunta ou pedido para o ChatGPT"
};
const _0x1bc892 = {
  onlyGroups: true
};
const _0x168094 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite uma mensagem para conversar com a Simi"
};
const _0x1c7849 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x39b9a3 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x528812 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
function _0x22126b(_0x257665, _0x2ce4c1, _0x56c37a, _0x3bb08f, _0x48790d) {
  return _0x1425(_0x2ce4c1 - 0x367, _0x48790d);
}
const _0x33f4c7 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x385027 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x854b63 = {
  onlyGroups: true,
  onlyDono: true
};
const _0x23580f = {
  onlyDono: true
};
const _0x4e4636 = {
  onlyGroups: true
};
const _0x27f5d9 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0xfdaf8d = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x30cd99 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite a quantidade de caracteres que deseja definir como limite"
};
const _0x4391fa = {
  onlyDono: true
};
const _0x2ecab6 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite a quantidade de caracteres que deseja definir como limite global"
};
const _0x1e2811 = {
  onlyGroups: true,
  onlyAdmins: true,
  onlyBotAdmin: true
};
const _0x36e24c = {
  onlyDono: true
};
const _0x1ed0dc = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o emoji e a plataforma separados por /"
};
const _0x383ac7 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite os dois emojis separados por +"
};
const _0x134440 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite um texto para a placa"
};
const _0x1d441a = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite um texto para criar o logo"
};
const _0x327ff0 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite algo para criar o logo"
};
const _0x14e4b0 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite algo para criar o logo"
};
const _0x2a23ee = {
  onlyDono: true
};
const _0x5adaa7 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Informe o diretório da pasta e o nome do arquivo"
};
const _0x295f16 = {};
function _0x1425(_0x33838e, _0x19eed9) {
  const _0x554416 = _0x3841();
  _0x1425 = function (_0x441526, _0x538dc1) {
    _0x441526 = _0x441526 - 478;
    let _0x3b60f4 = _0x554416[_0x441526];
    return _0x3b60f4;
  };
  return _0x1425(_0x33838e, _0x19eed9);
}
_0x295f16.onlyDono = true;
const _0x55d6bf = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Informe o diretório da pasta e o nome do arquivo"
};
const _0x4e3b12 = {
  onlyDono: true
};
const _0x268366 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Digite o texto para criar o sticker animado"
};
const _0x22a1f4 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Escreva um nome para eu enviar ele com letras modificadas"
};
const _0x1e9608 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x1b4c33 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Você precisa digitar da forma correta"
};
const _0x4c10c2 = {
  onlyGroups: true
};
const _0x300263 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0xb11a5a = {};
function _0x1429a3(_0x7f7289, _0x40fdc6, _0x24fbb5, _0x256b05, _0x41c451) {
  return _0x1425(_0x24fbb5 - 0x2a1, _0x40fdc6);
}
_0xb11a5a.modobrincadeira = true;
_0xb11a5a.onlyGroups = true;
const _0x32d2bd = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x547a01 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x554110 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x2ecce2 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x7be714 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x18c85b = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x903234 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x35dda7 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x59d105 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x24e15d = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x4179ae = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x3b7e5b = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x185061 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x5c10eb = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x1d9c72 = {
  onlyGroups: true,
  onlyAdmins: true
};
const _0x20928e = {
  onlyGroups: true
};
const _0x4236ad = {
  onlyGroups: true
};
const _0x1d79c3 = {
  onlyGroups: true
};
const _0x3552ae = {
  onlyGroups: true
};
const _0x42fc9 = {
  onlyGroups: true,
  modobrincadeira: true
};
const _0x5950f5 = {
  modobrincadeira: true,
  onlyGroups: true
};
const _0x4e1d8c = {
  onlyGroups: true
};
const _0x523304 = {
  modobrincadeira: true
};
const _0x1aa5d4 = {
  onlyDono: true
};
const _0x1e25d6 = {
  onlyDono: true
};
const _0x4f06d9 = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Marque o usuário que enviou o convite"
};
const _0x2f01e2 = {
  onlyDono: true
};
const _0x428e6c = {
  needArgs: true,
  minArgs: 0x1,
  argsError: "Insira um link de convite ao lado do comando."
};
const commands = [{
  'name': "abnada",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mostra o quanto você é gostoso",
  'longDescription': "Calcula aleatoriamente o seu nível de gostosura (masculino) em uma porcentagem de 0 a 110%.",
  'permissions': _0x186a98,
  'requirements': {},
  'execute': async ({
    conn: _0x3c328a,
    info: _0x13db0b,
    from: _0x3ed000,
    sender: _0x28b7cf,
    imggostoso: _0x218f39,
    reply: _0x233757
  }) => {
    _0x3c328a.sendMessage(_0x3ed000, {
      'text': "❰ @" + _0x28b7cf.split('@')[0] + " aguarde... ❱",
      'mentions': [_0x28b7cf]
    });
    return true;
  }
}, {
  'name': "ppt",
  'aliases': ["pedrapapeltesoura", "jokenpo"],
  'category': "diversao",
  'description': "Jogo clássico de Pedra, Papel ou Tesoura contra outro jogador",
  'longDescription': "Desafie outro membro do grupo para uma partida de Pedra, Papel ou Tesoura! O jogo é realizado com opções embaralhadas para maior imprevisibilidade. Sistema de apostas opcional: vencedor leva tudo! Uma única mensagem é editada durante todo o jogo.",
  'usage': "ppt @pessoa [valor]",
  'example': "ppt @joao\nppt @maria 25",
  'menu': "diversao",
  'menuSection': "Jogos",
  'permissions': _0x14c069,
  'requirements': {},
  'execute': async ({
    conn: _0x14038c,
    info: _0x36dc95,
    from: _0x4255dc,
    sender: _0x15ddc4,
    sender2: _0x5617f2,
    q: _0x483a4a,
    args: _0x16d9b2,
    isGroup: _0x597d0e,
    reply: _0x55e1eb,
    mention: _0x9f1119,
    BANCOP: _0x15d65f,
    dataGp: _0x426abc,
    goldSystem: _0x5643ab,
    configsGold: _0x283c51,
    EmojiBot: _0x4ede24,
    command: _0x340095,
    prefix: _0x4fac7e,
    gamesSystem: _0x3161ea,
    menc_os2: _0x4a6d26,
    menc_prt: _0x1aed15,
    botNumber: _0x2b9fde
  }) => {
    if (!_0x3161ea) {
      return _0x55e1eb("❌ Sistema de jogos não disponível. Contacte um administrador.");
    }
    if (!_0x426abc[0]?.["jogos"]) {
      return _0x55e1eb("❌ Este comando requer o sistema de jogos ativo.\nPeça para um administrador ativar com !jogos on");
    }
    if (!_0x4a6d26) {
      return _0x55e1eb("🎮 *PEDRA, PAPEL OU TESOURA* 🎮\n\n❌ *Você precisa marcar alguém para jogar!*\n\n🎯 *Como jogar:*\n• Marque alguém com @pessoa\n• Aguarde a pessoa aceitar o desafio\n• Escolham suas opções no privado\n• Descubram quem venceu!\n\n✊ *Regras:*\n• Pedra vence Tesoura\n• Papel vence Pedra  \n• Tesoura vence Papel\n\n💰 *Sistema de Apostas (Opcional):*\n• Vencedor leva tudo!\n• Sem apostas = jogo por diversão\n• Apostas requerem sistema gold ativo\n\n🎮 *Uso:* " + (_0x4fac7e + _0x340095) + " @pessoa [valor]\n📝 *Exemplo:* " + (_0x4fac7e + _0x340095) + " @joao\n💡 *Com aposta:* " + (_0x4fac7e + _0x340095) + " @maria 25\n\n🚫 *Não pode jogar contra bots ou você mesmo!*\n\n✨ *Novidade:* Uma única mensagem é editada durante todo o jogo!");
    }
    if (_0x4a6d26 === _0x15ddc4) {
      return _0x55e1eb("❌ Você não pode jogar contra você mesmo!");
    }
    if (_0x4a6d26 === _0x2b9fde) {
      return _0x55e1eb("❌ Não posso jogar PPT, sou apenas um bot! 🤖");
    }
    if (_0x3161ea.gameExists("ppt", _0x4255dc, _0x15ddc4)) {
      return _0x55e1eb("🎮 Você já tem um jogo de PPT ativo!\nUse \"desistir\" para cancelar o jogo atual.");
    }
    if (_0x3161ea.gameExists("ppt", _0x4255dc, _0x4a6d26)) {
      return _0x55e1eb("🎮 O jogador desafiado já tem um jogo ativo!\nAguarde ele terminar ou tente com outro jogador.");
    }
    let _0xf88ff0 = 0;
    const _0x350cee = _0x426abc[0]?.["sistemgold"];
    if (_0x16d9b2.length > 1 && _0x350cee) {
      const _0x21e870 = _0x16d9b2[_0x16d9b2.length - 1];
      if (!isNaN(_0x21e870) && parseInt(_0x21e870) > 0) {
        _0xf88ff0 = parseInt(_0x21e870);
        const _0x4503b1 = _0x5643ab.getBalance(_0x4255dc, _0x15ddc4);
        const _0x4108d8 = _0x5643ab.getBalance(_0x4255dc, _0x4a6d26);
        if (_0xf88ff0 < 10) {
          return _0x55e1eb("❌ Aposta mínima: 10 " + _0x283c51.emojis.gold);
        }
        if (_0x4503b1 < _0xf88ff0) {
          return _0x55e1eb("❌ Você não tem gold suficiente!\n💰 Seu saldo: " + _0x4503b1 + " " + _0x283c51.emojis.gold + "\n💸 Aposta: " + _0xf88ff0 + " " + _0x283c51.emojis.gold);
        }
        if (_0x4108d8 < _0xf88ff0) {
          return _0x55e1eb("❌ @" + _0x4a6d26.split('@')[0] + " não tem gold suficiente para essa aposta!\n💰 Saldo dele: " + _0x4108d8 + " " + _0x283c51.emojis.gold + "\n💸 Aposta: " + _0xf88ff0 + " " + _0x283c51.emojis.gold);
        }
      }
    }
    try {
      if (!_0x3161ea.initialized) {
        await _0x3161ea.ensureInitialized();
      }
      const _0x2b189f = {
        conn: _0x14038c,
        info: _0x36dc95,
        from: _0x4255dc,
        sender: _0x15ddc4,
        sender2: _0x5617f2,
        goldSystem: _0x5643ab,
        configsGold: _0x283c51,
        BANCOP: _0x15d65f,
        dataGp: _0x426abc,
        reply: _0x55e1eb,
        mention: _0x9f1119,
        EmojiBot: _0x4ede24
      };
      let _0xccd5aa = _0x3161ea.getRegisteredGame("ppt");
      if (!_0xccd5aa) {
        _0x3161ea.registerDefaultGames();
        _0xccd5aa = _0x3161ea.getRegisteredGame("ppt");
      }
      if (!_0xccd5aa) {
        return _0x55e1eb("❌ Sistema de jogos indisponível no momento. Tente novamente em alguns segundos.");
      }
      if (_0xf88ff0 > 0 && _0x350cee) {
        _0x5643ab.removeGold(_0x4255dc, _0x15ddc4, _0xf88ff0);
        _0x5643ab.removeGold(_0x4255dc, _0x4a6d26, _0xf88ff0);
      }
      const _0x4ec2d2 = await _0xccd5aa.createGame(_0x2b189f, _0x15ddc4, _0x4a6d26, _0xf88ff0);
      if (!_0x4ec2d2.success) {
        if (_0xf88ff0 > 0 && _0x350cee) {
          _0x5643ab.addGold(_0x4255dc, _0x15ddc4, _0xf88ff0);
          _0x5643ab.addGold(_0x4255dc, _0x4a6d26, _0xf88ff0);
        }
        return _0x55e1eb("❌ Erro ao criar jogo: " + _0x4ec2d2.message);
      }
      const _0x2f7fde = _0x4a6d26.split('@')[0];
      let _0x59ebd1 = "🎮 *DESAFIO PPT* 🎮\n\n🎯 @" + _0x2f7fde + ", você foi desafiado por @" + _0x5617f2 + " para uma partida de *Pedra, Papel ou Tesoura*!\n\n✊ *Regras:*\n• Pedra vence Tesoura\n• Papel vence Pedra\n• Tesoura vence Papel";
      if (_0xf88ff0 > 0) {
        _0x59ebd1 += "\n\n💰 *Aposta:* " + _0xf88ff0 + " " + _0x283c51.emojis.gold + " cada\n🏆 *Prêmio:* " + _0xf88ff0 * 2 + " " + _0x283c51.emojis.gold + " para o vencedor\n🤝 *Empate:* Apostas devolvidas";
      } else {
        _0x59ebd1 += "\n\n🎯 *Modo:* Jogo por diversão (sem apostas)";
      }
      _0x59ebd1 += "\n\n✅ *Para aceitar:* Digite \"aceitar\" ou \"aceito\"\n❌ *Para recusar:* Digite \"recusar\" ou \"recuso\"\n\n⏱️ *Você tem 30 segundos para decidir!*\n\n💡 *Esta mensagem será editada durante todo o jogo.*";
      const _0x46019f = {
        text: _0x59ebd1,
        mentions: [_0x15ddc4, _0x4a6d26]
      };
      const {
        key: _0x53d3db
      } = await _0x14038c.sendMessage(_0x4255dc, _0x46019f);
      const _0x236c52 = _0x4ec2d2.gameData;
      _0x236c52.messageKey = _0x53d3db;
      _0x3161ea.updateGame("ppt", _0x4255dc, _0x15ddc4, _0x236c52);
      await _0x3161ea.react(_0x4255dc, _0x53d3db, '⚔️');
      return true;
    } catch (_0x57cd5b) {
      console.error("❌ Erro no jogo PPT:", _0x57cd5b);
      if (_0xf88ff0 > 0 && _0x350cee) {
        _0x5643ab.addGold(_0x4255dc, _0x15ddc4, _0xf88ff0);
        _0x5643ab.addGold(_0x4255dc, _0x4a6d26, _0xf88ff0);
      }
      return _0x55e1eb("❌ Erro interno do jogo. Tente novamente mais tarde.");
    }
  }
}, {
  'name': ["kiss", "kissme", "ship", "shipme", "slap", "spank", "triggered", "delete", "jail", "wasted", "gay", "blur", "greyscale", "sepia", "invert", "clown", "batslap", "beautiful", "bobross", 'ad'],
  'aliases': ["beijar", "beijo", "kiss-me", "shipar", "ship-me", "shiparme", "tapa", "bater", "palmada", "nervoso", "puto", "trigger", "lixo", "lixeira", "deletar", "prisao", "cadeia", "preso", "morreu", "morte", "gta", "lgbt", "rainbow", "desfocar", 'pb', "pretoebranco", "sepia-filter", "inverter", "negativo", "palhaco", "bobao", "batman", "bat-slap", "lindo", "belo", "pintor", "arte", "anuncio", "propaganda"],
  'category': "diversao",
  'menu': "efeitos",
  'description': "Comando inteligente para todos os efeitos de imagem",
  'usage': "Vários usos dependendo do comando",
  'example': "kiss @user, ship @user1 @user2, gay @user, clown @user, etc.",
  'permissions': _0x4a9bad,
  'requirements': {},
  'execute': async ({
    reply: _0x1bc455,
    axios: _0x50116c,
    isGroup: _0x103b3c,
    sender: _0x59cdc9,
    sender2: _0x47acc3,
    conn: _0x227b0a,
    from: _0x4e5671,
    menc_os2: _0x59ddb0,
    menc_jid2: _0x2b250b,
    groupMembers: _0x3f9141,
    command: _0x2474ed,
    isQuotedMsg: _0x37eaaa,
    quotedMsg: _0x58fdf1
  }) => {
    try {
      const _0x2c1d79 = {
        tipo: "dual",
        endpoint: "kiss",
        emoji: '💋',
        titulo: "KISS",
        acao: "beijar",
        temMe: true,
        isGif: false,
        temPorcentagem: false,
        mensagens: ["💋 *Que beijo romântico!* ✨", "😘 *Beijo doce e carinhoso!* 💕", "💏 *Momento mágico capturado!* 🌟"],
        textoAcao: (_0x5dc9cb, _0x1d4a38) => "😘 @" + _0x5dc9cb + " 💋 @" + _0x1d4a38,
        textoMe: "🎲 O cupido escolheu...",
        textoAleatorio: "KISS ALEATÓRIO",
        textoNormal: "KISS TIME"
      };
      const _0x3ac082 = {
        tipo: "dual",
        endpoint: "ship",
        emoji: '💕',
        titulo: "SHIP",
        acao: "shipar",
        temMe: true,
        isGif: false,
        temPorcentagem: true,
        mensagens: {},
        textoAcao: (_0x45c1a1, _0x541e38, _0x2a8ff1) => "👫 @" + _0x45c1a1 + " ❤️ @" + _0x541e38 + "\n💖 Compatibilidade: " + _0x2a8ff1 + '%',
        textoMe: "🎲 O destino escolheu...",
        textoAleatorio: "SHIP ALEATÓRIO",
        textoNormal: "SHIP DETECTOR"
      };
      _0x3ac082.mensagens['90'] = {};
      _0x3ac082.mensagens['70'] = {};
      _0x3ac082.mensagens['50'] = {};
      _0x3ac082.mensagens['30'] = {};
      _0x3ac082.mensagens['0'] = {};
      _0x3ac082.mensagens['90'].me = "🔥 *CASAL PERFEITO!* O destino não mente! 💑";
      _0x3ac082.mensagens['90'].normal = "🔥 *CASAL PERFEITO!* Vocês foram feitos um para o outro! 💑";
      _0x3ac082.mensagens['70'].me = "😍 *MUITO COMPATÍVEIS!* O cupido acertou em cheio! ✨";
      _0x3ac082.mensagens['70'].normal = "😍 *MUITO COMPATÍVEIS!* Tem química entre vocês! ✨";
      _0x3ac082.mensagens['50'].me = "😊 *BOA COMPATIBILIDADE!* Pode ser o início de algo especial! 💕";
      _0x3ac082.mensagens['50'].normal = "😊 *BOA COMPATIBILIDADE!* Podem dar certo! 💕";
      _0x3ac082.mensagens['30'].me = "🤔 *COMPATIBILIDADE MÉDIA...* Talvez seja melhor conhecer melhor! 💭";
      _0x3ac082.mensagens['30'].normal = "🤔 *COMPATIBILIDADE MÉDIA...* Quem sabe com um pouquinho de esforço? 💭";
      _0x3ac082.mensagens['0'].me = "😅 *POUCA COMPATIBILIDADE...* O destino disse que é melhor serem amigos! 👥";
      _0x3ac082.mensagens['0'].normal = "😅 *POUCA COMPATIBILIDADE...* Melhor serem amigos! 👥";
      const _0x3809f9 = {
        tipo: "dual",
        endpoint: "slap",
        emoji: '👋',
        titulo: "SLAP",
        acao: "dar um tapa",
        temMe: false,
        isGif: false,
        temPorcentagem: false,
        mensagens: ["👋 *TAPA DADO!* 😤", "🖐️ *Que tapa doloroso!* 😵", "👋 *SLAP!* 💥"],
        textoAcao: (_0x2b14cf, _0x4ef685) => "🖐️ @" + _0x2b14cf + " deu um tapa em @" + _0x4ef685 + '!',
        textoNormal: "SLAP"
      };
      const _0x446b23 = {
        tipo: "dual",
        endpoint: "spank",
        emoji: '👋',
        titulo: "SPANK",
        acao: "dar uma palmada",
        temMe: false,
        isGif: false,
        temPorcentagem: false,
        mensagens: ["👋 *Que palmada!* 💥", "🖐️ *SPANK!* 😤", "👋 *Palmada dada!* 💢"],
        textoAcao: (_0x13bc5c, _0x4fc7dd) => "🖐️ @" + _0x13bc5c + " deu uma palmada em @" + _0x4fc7dd + '!',
        textoNormal: "SPANK"
      };
      const _0x13457c = {
        tipo: "dual",
        endpoint: "batslap",
        emoji: '🦇',
        titulo: "BATSLAP",
        acao: "dar um batslap",
        temMe: false,
        isGif: false,
        temPorcentagem: false,
        mensagens: ["🦇 *BATMAN JUSTICE!* 💥", "🦇 *Que tapa épico do Batman!* 💪", "🦇 *GOTHAM STYLE!* 🌃"],
        textoAcao: (_0x4862ef, _0x35f18a) => "💥 Batman (@" + _0x4862ef + ") deu um tapa em @" + _0x35f18a + '!',
        textoNormal: "BATSLAP"
      };
      const _0xdc1f75 = {
        tipo: "single",
        endpoint: "gay",
        emoji: "🏳️‍🌈",
        titulo: "GAY FILTER",
        acao: "aplicar filtro LGBT",
        isGif: false,
        mensagens: ["🏳️‍🌈 *PRIDE!* ✨", "🌈 *Love is Love!* 💕", "🏳️‍🌈 *Orgulho LGBT!* 🌈"],
        textoAcao: _0xf9026d => "🌈 @" + _0xf9026d + " com filtro pride!"
      };
      const _0x3e5a70 = {
        tipo: "single",
        endpoint: "triggered",
        emoji: '😡',
        titulo: "TRIGGERED",
        acao: "ficar triggered",
        isGif: true,
        mensagens: ["😡 *TRIGGERED!* 🔥", "🤬 *NERVOSINHO!* 😤", "😠 *QUE RAIVA!* 💢"],
        textoAcao: _0xa10675 => "🔥 @" + _0xa10675 + " está triggered!"
      };
      const _0x535b5e = {
        tipo: "single",
        endpoint: "delete",
        emoji: "🗑️",
        titulo: "DELETE",
        acao: "ser deletado",
        isGif: false,
        mensagens: ["🗑️ *DELETADO!* 🚮", "🗑️ *VAI PRO LIXO!* 😂", "🚮 *LIXEIRA CHEIA!* 🗑️"],
        textoAcao: _0x355354 => "🚮 @" + _0x355354 + " foi jogado no lixo!"
      };
      const _0xe8bd48 = {
        tipo: "single",
        endpoint: "jail",
        emoji: '🚨',
        titulo: "JAIL",
        acao: "ser preso",
        isGif: false,
        mensagens: ["🚨 *PRESO!* 👮‍♂️", "⛓️ *ATRÁS DAS GRADES!* 🔒", "🚔 *CADEIA NELE!* ⛓️"],
        textoAcao: _0x1e0183 => "⛓️ @" + _0x1e0183 + " foi preso!"
      };
      const _0xd5f143 = {
        tipo: "single",
        endpoint: "wasted",
        emoji: '💀',
        titulo: "WASTED",
        acao: "morrer",
        isGif: false,
        mensagens: ["💀 *WASTED!* ☠️", "☠️ *MORREU!* 💀", "🎮 *GAME OVER!* 💀"],
        textoAcao: _0x19e5ad => "☠️ @" + _0x19e5ad + " morreu!"
      };
      const _0x202e02 = {
        tipo: "single",
        endpoint: "blur",
        emoji: "🌫️",
        titulo: "BLUR",
        acao: "desfocar",
        isGif: false,
        mensagens: ["🌫️ *Desfocado!* 😵", "🌫️ *Blur effect!* ✨", "😵 *Tá meio embaçado!* 🌫️"],
        textoAcao: _0xaf517 => "🌫️ @" + _0xaf517 + " ficou desfocado!"
      };
      const _0x241202 = {
        tipo: "single",
        endpoint: "greyscale",
        emoji: '⚫',
        titulo: "GREYSCALE",
        acao: "ficar p&b",
        isGif: false,
        mensagens: ["⚫ *Preto e branco!* ⚪", "⚫ *Vintage mode!* 📷", "⚪ *Sem cores!* ⚫"],
        textoAcao: _0xfbfe1e => "⚫ @" + _0xfbfe1e + " ficou em preto e branco!"
      };
      const _0x5a5ef2 = {
        tipo: "single",
        endpoint: "sepia",
        emoji: '🟤',
        titulo: "SEPIA",
        acao: "aplicar sépia",
        isGif: false,
        mensagens: ["🟤 *Efeito sépia!* 📸", "🟤 *Vintage!* ✨", "📷 *Foto antiga!* 🟤"],
        textoAcao: _0x54bcad => "🟤 @" + _0x54bcad + " com efeito sépia!"
      };
      const _0x372cde = {
        tipo: "single",
        endpoint: "invert",
        emoji: '🔄',
        titulo: "INVERT",
        acao: "inverter cores",
        isGif: false,
        mensagens: ["🔄 *Cores invertidas!* 🎨", "🔄 *Negativo!* 📷", "🎨 *Efeito invertido!* 🔄"],
        textoAcao: _0x1c399f => "🔄 @" + _0x1c399f + " com cores invertidas!"
      };
      const _0x3fc833 = {
        tipo: "single",
        endpoint: "clown",
        emoji: '🤡',
        titulo: "CLOWN",
        acao: "virar palhaço",
        isGif: false,
        mensagens: ["🤡 *Virou palhaço!* 🎪", "🤡 *CLOWN MODE!* 🎭", "🤡 *Que palhaçada!* 😂"],
        textoAcao: _0xf7dc1f => "🎪 @" + _0xf7dc1f + " virou palhaço!"
      };
      const _0x16a724 = {
        tipo: "single",
        endpoint: "beautiful",
        emoji: '😍',
        titulo: "BEAUTIFUL",
        acao: "ser beautiful",
        isGif: false,
        mensagens: ["😍 *Que pessoa linda!* ✨", "🌟 *Beautiful!* 💖", "😍 *Lindeza pura!* 🥰"],
        textoAcao: _0x42550b => "✨ @" + _0x42550b + " é beautiful!"
      };
      const _0x1bb570 = {
        tipo: "single",
        endpoint: "bobross",
        emoji: '🎨',
        titulo: "BOB ROSS",
        acao: "virar arte",
        isGif: false,
        mensagens: ["🎨 *Arte do Bob Ross!* 🖌️", "🎨 *Happy little trees!* 🌳", "🖼️ *Obra de arte!* ✨"],
        textoAcao: _0x58577f => "🎨 @" + _0x58577f + " virou obra de arte!"
      };
      const _0x5a7d3e = {
        tipo: "single",
        endpoint: 'ad',
        emoji: '📺',
        titulo: 'AD',
        acao: "virar anúncio",
        isGif: false,
        mensagens: ["📺 *Virou anúncio!* 📢", "📣 *Propaganda top!* ⭐", "📺 *AD TIME!* 🎬"],
        textoAcao: _0x318ff8 => "📺 @" + _0x318ff8 + " virou anúncio!"
      };
      const _0x5f58dc = {
        kiss: _0x2c1d79,
        ship: _0x3ac082,
        slap: _0x3809f9,
        spank: _0x446b23,
        batslap: _0x13457c,
        gay: _0xdc1f75,
        triggered: _0x3e5a70,
        "delete": _0x535b5e,
        jail: _0xe8bd48,
        wasted: _0xd5f143,
        blur: _0x202e02,
        greyscale: _0x241202,
        sepia: _0x5a5ef2,
        invert: _0x372cde,
        clown: _0x3fc833,
        beautiful: _0x16a724,
        bobross: _0x1bb570,
        ad: _0x5a7d3e
      };
      const _0xbaa32 = _0x2474ed.replace('me', '').toLowerCase();
      const _0x232004 = _0x5f58dc[_0xbaa32];
      if (!_0x232004) {
        return _0x1bc455("❌ Comando não reconhecido!");
      }
      if (_0x232004.tipo === "dual") {
        const _0x5892a5 = _0x232004.temMe && _0x2474ed.includes('me');
        let _0x4e1de5;
        let _0x19c9a8;
        let _0x26a77d;
        let _0x1712f5;
        if (_0x5892a5) {
          if (!_0x3f9141 || _0x3f9141.length < 2) {
            return _0x1bc455("❌ Precisa ter pelo menos 2 pessoas no grupo para fazer o " + _0x232004.acao + '!');
          }
          const _0x4e4c45 = _0x3f9141.filter(_0x2d1999 => _0x2d1999.id !== _0x59cdc9 && !_0x2d1999.id.includes("bot") && _0x2d1999.id.includes("@s.whatsapp.net"));
          if (_0x4e4c45.length === 0) {
            return _0x1bc455("❌ Não há membros válidos no grupo para fazer o " + _0x232004.acao + '!');
          }
          _0x4e1de5 = _0x59cdc9;
          _0x19c9a8 = _0x4e4c45[Math.floor(Math.random() * _0x4e4c45.length)].id;
          _0x26a77d = _0x47acc3;
          _0x1712f5 = _0x19c9a8.split('@')[0];
        } else {
          if (!_0x2b250b || _0x2b250b.length === 0) {
            return _0x1bc455("❌ Você precisa marcar alguém para fazer o " + _0x232004.acao + "!\n\n📝 *Uso:* " + _0xbaa32 + " @pessoa ou " + _0xbaa32 + " @pessoa1 @pessoa2");
          }
          if (_0x2b250b.length === 1) {
            _0x4e1de5 = _0x59cdc9;
            _0x19c9a8 = _0x2b250b[0];
            _0x26a77d = _0x47acc3;
            _0x1712f5 = _0x19c9a8.split('@')[0];
          } else {
            if (_0x2b250b.length >= 2) {
              _0x4e1de5 = _0x2b250b[0];
              _0x19c9a8 = _0x2b250b[1];
              _0x26a77d = _0x4e1de5.split('@')[0];
              _0x1712f5 = _0x19c9a8.split('@')[0];
            } else {
              return _0x1bc455("❌ Marque 1 ou 2 pessoas para fazer o " + _0x232004.acao + '!');
            }
          }
        }
        let _0x4e9ced;
        let _0x2f330e;
        let _0x6d5a1c;
        if (_0x232004.temPorcentagem) {
          _0x2f330e = Math.floor(Math.random() * 101);
          _0x6d5a1c = _0x5892a5 ? (_0x2f330e >= 90 ? _0x232004.mensagens[90] : _0x2f330e >= 70 ? _0x232004.mensagens[70] : _0x2f330e >= 50 ? _0x232004.mensagens[50] : _0x2f330e >= 30 ? _0x232004.mensagens[30] : _0x232004.mensagens[0]).me : (_0x2f330e >= 90 ? _0x232004.mensagens[90] : _0x2f330e >= 70 ? _0x232004.mensagens[70] : _0x2f330e >= 50 ? _0x232004.mensagens[50] : _0x2f330e >= 30 ? _0x232004.mensagens[30] : _0x232004.mensagens[0]).normal;
          _0x4e9ced = _0x232004.emoji + " *" + (_0x5892a5 ? _0x232004.textoAleatorio : _0x232004.textoNormal) + "* " + _0x232004.emoji + "\n\n" + (_0x5892a5 ? _0x232004.textoMe + "\n" : '') + _0x232004.textoAcao(_0x26a77d, _0x1712f5, _0x2f330e) + "\n\n" + _0x6d5a1c;
        } else {
          _0x6d5a1c = _0x232004.mensagens[Math.floor(Math.random() * _0x232004.mensagens.length)];
          _0x4e9ced = _0x232004.emoji + " *" + (_0x5892a5 ? _0x232004.textoAleatorio : _0x232004.textoNormal) + "* " + _0x232004.emoji + "\n\n" + (_0x5892a5 ? _0x232004.textoMe + "\n" : '') + _0x232004.textoAcao(_0x26a77d, _0x1712f5) + "\n\n" + _0x6d5a1c;
        }
        try {
          const _0x10f377 = async _0x4056db => {
            try {
              return await _0x227b0a.profilePictureUrl(_0x4056db + "@c.us", "image");
            } catch {
              return "https://telegra.ph/file/077d0a8a2580d87115f85.jpg";
            }
          };
          const _0x2a295e = async _0x521057 => {
            const _0x1cb93e = {
              responseType: "arraybuffer",
              timeout: 0x3a98,
              headers: {}
            };
            _0x1cb93e.headers["User-Agent"] = "Mozilla/5.0";
            return Buffer.from((await _0x50116c.get(_0x521057, _0x1cb93e)).data);
          };
          const [_0x5f4d76, _0x2c11a3] = await Promise.all([_0x2a295e(await _0x10f377(_0x26a77d)), _0x2a295e(await _0x10f377(_0x1712f5))]);
          if (!_0x5f4d76?.["length"] || !_0x2c11a3?.["length"]) {
            throw new Error("Buffer inválido");
          }
          const _0x5e6c6a = {
            'avatar1': "data:image/jpeg;base64," + _0x5f4d76.toString("base64"),
            'avatar2': "data:image/jpeg;base64," + _0x2c11a3.toString("base64")
          };
          if (_0x232004.temPorcentagem) {
            _0x5e6c6a.porcentagem = _0x2f330e;
          }
          const _0x4bb444 = {
            "Content-Type": "application/json"
          };
          const _0x13dde1 = {
            headers: _0x4bb444,
            responseType: "arraybuffer",
            timeout: 0x7530
          };
          const _0x1574a8 = await _0x50116c.post("https://sungbot.vip/api/" + _0x232004.endpoint, _0x5e6c6a, _0x13dde1);
          const _0x3c71ca = Buffer.from(_0x1574a8.data);
          if (!_0x3c71ca?.["length"]) {
            throw new Error("Imagem vazia");
          }
          const _0x452a9e = {
            image: _0x3c71ca,
            caption: _0x4e9ced,
            mentions: [_0x4e1de5, _0x19c9a8]
          };
          await _0x227b0a.sendMessage(_0x4e5671, _0x452a9e);
        } catch (_0x2d0e47) {
          console.error("Erro ao gerar " + _0x232004.titulo + ':', _0x2d0e47);
          _0x4e9ced += "\n\n❌ Não foi possível gerar a imagem\n\n🔧 " + (_0x2d0e47.response?.["status"] ? "Erro " + _0x2d0e47.response.status + ": " + _0x2d0e47.response.statusText : _0x2d0e47.message);
          const _0x434a92 = {
            text: _0x4e9ced,
            mentions: [_0x4e1de5, _0x19c9a8]
          };
          _0x227b0a.sendMessage(_0x4e5671, _0x434a92);
        }
      } else {
        if (_0x232004.tipo === "single") {
          let _0x1605be;
          let _0x5347c4;
          if (_0x2b250b && _0x2b250b.length > 0) {
            _0x1605be = _0x2b250b[0];
            _0x5347c4 = _0x1605be.split('@')[0];
          } else if (_0x37eaaa) {
            _0x1605be = _0x58fdf1.sender;
            _0x5347c4 = _0x1605be.split('@')[0];
          } else {
            _0x1605be = _0x59cdc9;
            _0x5347c4 = _0x47acc3;
          }
          const _0xac80a5 = _0x232004.mensagens[Math.floor(Math.random() * _0x232004.mensagens.length)];
          let _0x4e9147 = _0x232004.emoji + " *" + _0x232004.titulo + "* " + _0x232004.emoji + "\n\n" + _0x232004.textoAcao(_0x5347c4) + "\n\n" + _0xac80a5;
          try {
            const _0x4be880 = async _0xc2bb10 => {
              try {
                return await _0x227b0a.profilePictureUrl(_0xc2bb10 + "@c.us", "image");
              } catch {
                return "https://telegra.ph/file/077d0a8a2580d87115f85.jpg";
              }
            };
            const _0x1bd610 = async _0xa7b594 => {
              const _0x385694 = {
                responseType: "arraybuffer",
                timeout: 0x3a98,
                headers: {}
              };
              _0x385694.headers["User-Agent"] = "Mozilla/5.0";
              return Buffer.from((await _0x50116c.get(_0xa7b594, _0x385694)).data);
            };
            const _0x3d102b = await _0x1bd610(await _0x4be880(_0x5347c4));
            if (!_0x3d102b?.["length"]) {
              throw new Error("Buffer inválido");
            }
            const _0x18f7fa = await _0x50116c.post("https://sungbot.vip/api/" + _0x232004.endpoint, {
              'avatar': "data:image/jpeg;base64," + _0x3d102b.toString("base64")
            }, {
              'headers': {
                'Content-Type': "application/json"
              },
              'responseType': "arraybuffer",
              'timeout': 0x7530
            });
            const _0x351f7e = Buffer.from(_0x18f7fa.data);
            if (!_0x351f7e?.["length"]) {
              throw new Error("Imagem vazia");
            }
            if (_0x232004.isGif) {
              const _0xbd5ad = _0x351f7e[0] === 71 && _0x351f7e[1] === 73 && _0x351f7e[2] === 70;
              if (_0xbd5ad) {
                const _0x4bf4ca = require('fs');
                const {
                  exec: _0x31576d
                } = require("child_process");
                const _0x109ef8 = '' + Math.floor(Math.random() * 10000) + Date.now() + ".gif";
                const _0x3708b3 = '' + Math.floor(Math.random() * 10000) + Date.now() + ".mp4";
                _0x4bf4ca.writeFileSync(_0x109ef8, _0x351f7e);
                _0x31576d("ffmpeg -stream_loop 2 -i " + _0x109ef8 + " -movflags faststart -c:v libx264 -b:v 2M -s 512x512 -pix_fmt yuv420p -profile:v high -y " + _0x3708b3, async _0x43ac2d => {
                  if (_0x43ac2d) {
                    try {
                      _0x4bf4ca.unlinkSync(_0x109ef8);
                    } catch {}
                    try {
                      _0x4bf4ca.unlinkSync(_0x3708b3);
                    } catch {}
                    const _0x29466e = {
                      video: _0x351f7e,
                      caption: _0x4e9147,
                      mentions: [_0x1605be],
                      gifPlayback: true
                    };
                    await _0x227b0a.sendMessage(_0x4e5671, _0x29466e);
                    return;
                  }
                  try {
                    const _0x2a4c8c = _0x4bf4ca.readFileSync(_0x3708b3);
                    const _0x310eea = {
                      video: _0x2a4c8c,
                      caption: _0x4e9147,
                      mentions: [_0x1605be],
                      gifPlayback: true
                    };
                    await _0x227b0a.sendMessage(_0x4e5671, _0x310eea);
                  } catch (_0x31a13e) {
                    const _0x1d6a9f = {
                      text: _0x4e9147 + "\n\n❌ Erro ao enviar: " + _0x31a13e.message,
                      mentions: [_0x1605be]
                    };
                    await _0x227b0a.sendMessage(_0x4e5671, _0x1d6a9f);
                  }
                  setTimeout(() => {
                    try {
                      _0x4bf4ca.unlinkSync(_0x109ef8);
                    } catch {}
                    try {
                      _0x4bf4ca.unlinkSync(_0x3708b3);
                    } catch {}
                  }, 3000);
                });
              } else {
                const _0x35f423 = {
                  image: _0x351f7e,
                  caption: _0x4e9147,
                  mentions: [_0x1605be]
                };
                await _0x227b0a.sendMessage(_0x4e5671, _0x35f423);
              }
            } else {
              const _0x2e605d = {
                image: _0x351f7e,
                caption: _0x4e9147,
                mentions: [_0x1605be]
              };
              await _0x227b0a.sendMessage(_0x4e5671, _0x2e605d);
            }
          } catch (_0x164e71) {
            console.error("Erro ao gerar " + _0x232004.titulo + ':', _0x164e71);
            _0x4e9147 += "\n\n❌ Não foi possível gerar a imagem\n\n🔧 " + (_0x164e71.response?.["status"] ? "Erro " + _0x164e71.response.status + ": " + _0x164e71.response.statusText : _0x164e71.message);
            const _0x18466c = {
              text: _0x4e9147,
              mentions: [_0x1605be]
            };
            _0x227b0a.sendMessage(_0x4e5671, _0x18466c);
          }
        }
      }
    } catch (_0x2cc832) {
      console.error("Erro no mega comando:", _0x2cc832);
      _0x1bc455("❌ Erro ao processar comando." + (_0x2cc832.response ? "\n\n❗ Erro " + _0x2cc832.response.status + ": " + (_0x2cc832.response.data?.["message"] || "Erro desconhecido") : "\n\n🔧 " + _0x2cc832.message));
    }
  }
}, {
  'name': "presente",
  'aliases': ["dar-presente"],
  'category': "diversao",
  'description': "Dar presente personalizado ao seu parceiro(a)",
  'usage': "presente [nome do presente]",
  'example': "presente xícara de chá",
  'permissions': _0x5aafd1,
  'requirements': {},
  'execute': async ({
    fs: _0x4524a3,
    path: _0x5427e0,
    q: _0x5e4880,
    reply: _0xf749cb,
    axios: _0x39c950,
    isGroup: _0x5c3d8a,
    sender: _0x185959,
    conn: _0x53b64e,
    from: _0x51aef0,
    prefix: _0x1a1a38
  }) => {
    try {
      if (!_0x5e4880?.["length"]) {
        return _0xf749cb("❌ Use: `" + _0x1a1a38 + "presente [nome]`\n\n💡 Exemplo: `" + _0x1a1a38 + "presente xícara de chá`");
      }
      const _0x3323e2 = (_0x3ec03a, _0x215f7c) => {
        if (!_0x4524a3.existsSync(_0x3ec03a)) {
          throw new Error(_0x215f7c + " não encontrado");
        }
        const _0x48d967 = _0x4524a3.readFileSync(_0x3ec03a, "utf8");
        if (!_0x48d967?.["trim"]()) {
          throw new Error(_0x215f7c + " vazio");
        }
        return JSON.parse(_0x48d967);
      };
      const _0x497901 = global.mykey;
      if (!_0x497901) {
        return _0xf749cb("❌ Chave não disponível. Reinicie o bot.");
      }
      const {
        botId: _0x47d130
      } = _0x3323e2(_0x5427e0.join(__dirname, "../../dados/nescessario.json"), "nescessario.json");
      const {
        token: _0x2055d7
      } = _0x3323e2(_0x5427e0.join(__dirname, "../../dados/org/json/credenciais.json"), "credenciais.json");
      if (!_0x47d130?.["trim"]() || !_0x2055d7?.["trim"]()) {
        return _0xf749cb("❌ Dados incompletos. Reinicie o bot.");
      }
      const {
        data: _0x68f8fc
      } = await _0x39c950.post("https://sungbot.vip/api/relacionamento", {
        'chave': _0x497901,
        'botId': _0x47d130,
        'token': _0x2055d7,
        'usuario': _0x185959,
        'acao': "status"
      }, {
        'headers': {
          'Content-Type': "application/json"
        },
        'timeout': 0x7530
      });
      if (!_0x68f8fc?.["sucesso"]) {
        return _0xf749cb("❌ Você precisa estar em um relacionamento!");
      }
      if (_0x5e4880.length < 2) {
        return _0xf749cb("❌ Nome muito curto!");
      }
      if (_0x5e4880.length > 100) {
        return _0xf749cb("❌ Nome muito longo (máx 100 chars)!");
      }
      const _0x4e1319 = {
        café: '☕',
        chá: '☕',
        flores: '💐',
        flor: '🌹',
        rosa: '🌹',
        buquê: '💐',
        chocolate: '🍫',
        doce: '🍭',
        bolo: '🧁',
        sorvete: '🍦',
        carta: '💌',
        bilhete: '💌',
        livro: '📚',
        anel: '💍',
        colar: '📿',
        perfume: '🌺',
        vela: "🕯️",
        urso: '🧸',
        pelúcia: '🧸',
        xícara: '☕',
        copo: '🥤',
        taça: '🥂',
        vinho: '🍷',
        presente: '🎁',
        surpresa: '🎁'
      };
      const _0x361918 = Object.entries(_0x4e1319).find(([_0x13920f]) => _0x5e4880.toLowerCase().includes(_0x13920f))?.[1] || '🎁';
      const _0x15829b = _0x68f8fc.relacionamento.parceiro + "@s.whatsapp.net";
      await _0x53b64e.sendMessage(_0x51aef0, {
        'text': _0x361918 + " @" + _0x185959.split('@')[0] + " deu \"" + _0x5e4880 + "\" para @" + _0x15829b.split('@')[0] + "!\n\n💝 Que gesto carinhoso! ✨",
        'mentions': [_0x185959, _0x15829b]
      });
    } catch (_0x931906) {
      console.error("Erro presente:", _0x931906);
      _0xf749cb(_0x931906.response ? "❌ Erro ao verificar relacionamento." : "❌ Erro ao dar presente.");
    }
  }
}, {
  'name': "rel-help",
  'aliases': ["rel-menu", "relacionamento-help", "rel-ajuda", "rel"],
  'category': "diversao",
  'description': "Menu completo do sistema de relacionamento expandido",
  'usage': "rel-help",
  'example': "rel-help",
  'permissions': _0x17dbf5,
  'requirements': {},
  'execute': async ({
    reply: _0x1b95d2,
    isGroup: _0x5e0b83,
    prefix: _0x472c91
  }) => {
    const _0x5eb9be = "🔥 *SUNG BOT - RELACIONAMENTO EXPANDIDO* 🔥\n*🏟️ APENAS PARA GRUPOS*\n\n💕 *COMANDOS PRINCIPAIS:*\n• `" + _0x472c91 + "rel-pedir @usuario` - Pedir em namoro\n• `" + _0x472c91 + "rel-aceitar` - Aceitar pedido recebido\n• `" + _0x472c91 + "rel-rejeitar` - Rejeitar pedido recebido\n• `" + _0x472c91 + "rel-cancelar` - Cancelar seu pedido pendente\n• `" + _0x472c91 + "rel-status` - Ver relacionamento + estatísticas\n• `" + _0x472c91 + "rel-terminar` - Terminar relacionamento\n• `" + _0x472c91 + "rel-pontos` - Ver seus pontos\n• `" + _0x472c91 + "rel-pedidos` - Ver pedidos enviados/recebidos\n\n🎭 *AÇÕES DIÁRIAS (EXPANDIDO):*\n• `" + _0x472c91 + "rel-acao` - Menu interativo com separação:\n└ 💕 *Ações Românticas:* beijar, abraçar, dançar, etc.\n└ 🔞 *Ações Íntimas (18+):* sexo, oral, nudes, etc.\n└ *47 ações totais* organizadas por fase do relacionamento\n└ Sistema de fases: Namoro → Noivado → Casamento → Lua de Mel → Casado\n\n🎁 *SISTEMA DE PRESENTES (EXPANDIDO):*\n• `" + _0x472c91 + "rel-presente` - Menu interativo com separação:\n└ 💝 *Presentes Românticos:* flores, chocolates, jóias, etc.\n└ 🔞 *Presentes Adultos (18+):* vibrador, algemas, lingerie, etc.\n└ *49 presentes totais* organizados por raridade\n└ Raridades: Comum → Raro → Épico → Lendário → Mítico\n└ *Custa pontos e ganha pontos de amor*\n\n💝 *PRESENTES PERSONALIZADOS (NOVO!):*\n• `" + _0x472c91 + "presente [nome]` - Dar presente personalizado\n└ Exemplo: `" + _0x472c91 + "presente xícara de chá` ☕\n└ Exemplo: `" + _0x472c91 + "presente buquê de margaridas` 💐\n└ Exemplo: `" + _0x472c91 + "presente chocolate quente` 🍫\n└ Exemplo: `" + _0x472c91 + "presente carta de amor` 💌\n└ *Totalmente gratuito - não gasta nem ganha pontos*\n└ *Qualquer presente que imaginar!*\n└ *Emoji automático baseado no nome*\n\n🔥 *FUNCIONALIDADES AVANÇADAS:*\n• *Sistema de Fases Desbloqueáveis:*\n└ Cada fase desbloqueia novas ações íntimas\n└ Namoro: sexting, preliminares básicas\n└ Noivado: nudes, banho junto, lingerie show\n└ Casamento: sexo completo, oral, brinquedos\n└ Lua de Mel: sexo selvagem, posições novas\n└ Casado: orgasmos múltiplos, conteúdo hardcore\n\n• *Multiplicadores de Pontos:*\n└ Weekend: +50% pontos (sábado/domingo)\n└ Ações íntimas: +20% pontos extras\n└ Fases avançadas: até +50% pontos\n└ Eventos especiais: até +100% pontos\n\n• *Eventos Especiais:*\n└ Dia dos Namorados (12/06): 2x pontos\n└ Natal (25/12): 1.5x pontos\n└ Ano Novo (01/01): 1.8x pontos\n└ Dia da Mulher (08/03): 1.5x pontos\n\n• *Estatísticas Detalhadas:*\n└ Ações íntimas realizadas\n└ Presentes dados/recebidos\n└ Dias de relacionamento\n└ Média de amor por dia\n└ Progresso para conquistas\n\n🏆 *CONQUISTAS EXPANDIDAS:*\n• *Básicas:* Primeiro Amor, Romântico, Apaixonado\n• *Avançadas:* Alma Gêmea, Amor Eterno, Aventureiro\n• *Íntimas:* Sexo Guru, Sedutor, Ninfomaníaco\n• *Especiais:* Kinky, Liberal, Swinger\n• *Colecionador:* Sex Toys Collector, Fetichista\n• *Poder:* Dominador, Submisso\n\n💡 *DIFERENÇAS ENTRE PRESENTES:*\n🎁 *Presentes do Sistema* (`" + _0x472c91 + "rel-presente`):\n└ Custam pontos pessoais\n└ Geram pontos de amor para o casal\n└ Presentes predefinidos com raridades\n└ Sistema de progressão e conquistas\n\n💝 *Presentes Personalizados* (`" + _0x472c91 + "presente [nome]`):\n└ Totalmente gratuitos\n└ Não afetam pontos nem progressão\n└ Liberdade total para criar qualquer presente\n└ Apenas para diversão e carinho\n\n⚠️ *IMPORTANTE:*\n• Conteúdo adulto apenas para maiores de 18 anos\n• Sistema com separação clara entre normal e adulto\n• Respeite os limites e consenso entre parceiros\n• Use com responsabilidade e diversão!\n\n🔄 *COMO FUNCIONA:*\n1️⃣ Use `" + _0x472c91 + "rel-pedir @usuario` para pedir namoro\n2️⃣ A pessoa usa `" + _0x472c91 + "rel-aceitar` ou `" + _0x472c91 + "rel-rejeitar`\n3️⃣ Se aceitar, vocês começam a namorar!\n4️⃣ Use `" + _0x472c91 + "rel-acao` para fazer ações e evoluir o relacionamento\n5️⃣ Use `" + _0x472c91 + "rel-presente` para dar presentes especiais (com pontos)\n6️⃣ Use `" + _0x472c91 + "presente [nome]` para dar qualquer presente grátis\n7️⃣ Evoluam juntos pelas fases e desbloqueiem conteúdo novo!\n\n🎯 *EXEMPLOS DE USO:*\n*Sistema de Relacionamento:*\n• `" + _0x472c91 + "rel-acao` → Escolher categoria → Selecionar ação\n• `" + _0x472c91 + "rel-presente` → Escolher categoria → Selecionar presente\n• `" + _0x472c91 + "rel-status` → Ver tudo sobre o relacionamento\n\n*Presentes Personalizados:*\n• `" + _0x472c91 + "presente carta de amor personalizada` 💌\n• `" + _0x472c91 + "presente xícara com nossa foto` ☕\n• `" + _0x472c91 + "presente buquê de girassóis` 🌻\n• `" + _0x472c91 + "presente chocolate belga importado` 🍫\n• `" + _0x472c91 + "presente anel de compromisso` 💍\n\n🔥 *O sistema de relacionamento mais completo e personalizável do WhatsApp!*\n\n*Divirta-se com responsabilidade!* 💕🔞";
    _0x1b95d2(_0x5eb9be);
  }
},, {
  'name': ["rel-pedir", "rel-cancelar"],
  'aliases': ["pedir-namoro", "namorar", "cancelar-pedido", "cancelar"],
  'category': "diversao",
  'description': "Pedir alguém em namoro ou cancelar pedido",
  'usage': "rel-pedir @usuario / rel-cancelar",
  'example': "rel-pedir @maria / rel-cancelar",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    fs: _0xc7b024,
    path: _0x1c59b5,
    args: _0x16bad4,
    reply: _0x308a0c,
    axios: _0x1b15fd,
    isGroup: _0xa878aa,
    sender: _0x1296f3,
    command: _0x1b45f5,
    prefix: _0x9cfe98,
    conn: _0x42d97b,
    from: _0x34c502
  }) => {
    try {
      if (!_0xa878aa) {
        return _0x308a0c("Este comando só pode ser usado em grupos");
      }
      const _0x30c474 = (_0x4ee89e, _0x58a981) => {
        if (!_0xc7b024.existsSync(_0x4ee89e)) {
          throw new Error(_0x58a981 + " não encontrado.");
        }
        const _0x30fde3 = _0xc7b024.readFileSync(_0x4ee89e, "utf8");
        if (!_0x30fde3?.["trim"]()) {
          throw new Error(_0x58a981 + " está vazio.");
        }
        return JSON.parse(_0x30fde3);
      };
      const _0x4e076b = global.mykey;
      if (!_0x4e076b) {
        return _0x308a0c("❌ Chave de autenticação não disponível. Reinicie o bot.");
      }
      const _0x2f558f = _0x30c474(_0x1c59b5.join(__dirname, "../../dados/nescessario.json"), "nescessario.json");
      const _0x53aa99 = _0x30c474(_0x1c59b5.join(__dirname, "../../dados/org/json/credenciais.json"), "credenciais.json");
      const {
        botId: _0x17ceb1
      } = _0x2f558f;
      const {
        token: _0x36cc2f
      } = _0x53aa99;
      if (!_0x17ceb1?.["trim"]() || !_0x36cc2f?.["trim"]()) {
        return _0x308a0c("❌ Dados incompletos:\n• BotId: " + (_0x17ceb1 ? '✅' : '❌') + "\n• Token: " + (_0x36cc2f ? '✅' : '❌') + "\n\nReinicie o bot.");
      }
      const _0x372cac = {
        chave: _0x4e076b,
        botId: _0x17ceb1,
        token: _0x36cc2f,
        usuario: _0x1296f3
      };
      if (_0x1b45f5.includes("pedir") || _0x1b45f5.includes("namorar")) {
        if (!_0x16bad4[0]) {
          return _0x308a0c("❌ Use: `" + _0x9cfe98 + "rel-pedir @usuario`");
        }
        let _0x5cc476 = _0x16bad4[0].replace('@', '');
        if (!_0x5cc476.includes("@s.whatsapp.net")) {
          _0x5cc476 = _0x5cc476 + "@s.whatsapp.net";
        }
        _0x372cac.acao = "pedir_namoro";
        _0x372cac.destinatario = _0x5cc476;
      } else if (_0x1b45f5.includes("cancelar")) {
        _0x372cac.acao = "cancelar_pedido";
      }
      const _0x48ee91 = await _0x1b15fd.post("http://sungbot.vip/api/relacionamento", _0x372cac, {
        'headers': {
          'Content-Type': "application/json"
        },
        'timeout': 0x7530
      });
      if (!_0x48ee91.data) {
        throw new Error("Resposta vazia da API");
      }
      const _0x1e6205 = _0x48ee91.data;
      if (!_0x1e6205.sucesso) {
        return _0x308a0c("❌ " + (_0x1e6205.motivo || "Erro desconhecido"));
      }
      if (_0x1b45f5.includes("pedir")) {
        const _0x24dbb5 = _0x372cac.destinatario;
        const _0x8033d7 = "💕 @" + _0x1296f3.split('@')[0] + " enviou um pedido de namoro para @" + _0x24dbb5.split('@')[0] + "!\n\n✨ @" + _0x24dbb5.split('@')[0] + " pode aceitar usando `" + _0x9cfe98 + "rel-aceitar` ou rejeitar com `" + _0x9cfe98 + "rel-rejeitar`";
        const _0x162199 = {
          text: _0x8033d7,
          mentions: [_0x1296f3, _0x24dbb5]
        };
        _0x42d97b.sendMessage(_0x34c502, _0x162199);
      } else {
        const _0x3ad722 = "❌ @" + _0x1296f3.split('@')[0] + " cancelou seu pedido de namoro";
        const _0x3baadb = {
          text: _0x3ad722,
          mentions: [_0x1296f3]
        };
        _0x42d97b.sendMessage(_0x34c502, _0x3baadb);
      }
    } catch (_0x55c314) {
      console.error("Erro no comando pedir/cancelar:", _0x55c314);
      let _0x44f63d = "❌ Erro no pedido de namoro.";
      if (_0x55c314.response) {
        const {
          status: _0x581407,
          data: _0x475928
        } = _0x55c314.response;
        _0x44f63d += "\n\n❗ Erro " + _0x581407 + ": " + (_0x475928?.["message"] || "Erro desconhecido");
      } else {
        _0x44f63d += "\n\n🔧 " + _0x55c314.message;
      }
      _0x308a0c(_0x44f63d);
    }
  }
}, {
  'name': ["rel-aceitar", "rel-rejeitar"],
  'aliases': ["aceitar-pedido", "aceitar-namoro", "aceitar", "rejeitar-pedido", "recusar-pedido", "rejeitar", "recusar"],
  'category': "diversao",
  'description': "Aceitar ou rejeitar pedido de namoro",
  'usage': "rel-aceitar / rel-rejeitar",
  'example': "rel-aceitar / rel-rejeitar",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    fs: _0x17c135,
    path: _0xc2aad9,
    reply: _0x3214d1,
    axios: _0x5c41b6,
    isGroup: _0x1685ba,
    sender: _0x2cbb91,
    command: _0x1cce6d,
    conn: _0xdeaaa3,
    from: _0x424b6e
  }) => {
    try {
      if (!_0x1685ba) {
        return _0x3214d1("Este comando só pode ser usado em grupos");
      }
      const _0x3aa8ba = (_0x4c816d, _0x1869a7) => {
        if (!_0x17c135.existsSync(_0x4c816d)) {
          throw new Error(_0x1869a7 + " não encontrado.");
        }
        const _0x2549cd = _0x17c135.readFileSync(_0x4c816d, "utf8");
        if (!_0x2549cd?.["trim"]()) {
          throw new Error(_0x1869a7 + " está vazio.");
        }
        return JSON.parse(_0x2549cd);
      };
      const _0x133981 = global.mykey;
      if (!_0x133981) {
        return _0x3214d1("❌ Chave de autenticação não disponível. Reinicie o bot.");
      }
      const _0x4d8305 = _0x3aa8ba(_0xc2aad9.join(__dirname, "../../dados/nescessario.json"), "nescessario.json");
      const _0x15b6f3 = _0x3aa8ba(_0xc2aad9.join(__dirname, "../../dados/org/json/credenciais.json"), "credenciais.json");
      const {
        botId: _0x24ccd1
      } = _0x4d8305;
      const {
        token: _0x4e231f
      } = _0x15b6f3;
      if (!_0x24ccd1?.["trim"]() || !_0x4e231f?.["trim"]()) {
        return _0x3214d1("❌ Dados incompletos:\n• BotId: " + (_0x24ccd1 ? '✅' : '❌') + "\n• Token: " + (_0x4e231f ? '✅' : '❌') + "\n\nReinicie o bot.");
      }
      let _0x535a26;
      if (_0x1cce6d.includes("aceitar")) {
        _0x535a26 = "sim";
      } else if (_0x1cce6d.includes("rejeitar") || _0x1cce6d.includes("recusar")) {
        _0x535a26 = "nao";
      }
      const _0x55f089 = {
        chave: _0x133981,
        botId: _0x24ccd1,
        token: _0x4e231f,
        usuario: _0x2cbb91,
        acao: "responder_pedido",
        resposta: _0x535a26
      };
      const _0x3dcbdc = await _0x5c41b6.post("http://sungbot.vip/api/relacionamento", _0x55f089, {
        'headers': {
          'Content-Type': "application/json"
        },
        'timeout': 0x7530
      });
      if (!_0x3dcbdc.data) {
        throw new Error("Resposta vazia da API");
      }
      const _0x5d4a7d = _0x3dcbdc.data;
      if (!_0x5d4a7d.sucesso) {
        return _0x3214d1("❌ " + (_0x5d4a7d.motivo || "Erro desconhecido"));
      }
      if (_0x535a26 === "sim") {
        const _0x5caa64 = "💝 @" + _0x2cbb91.split('@')[0] + " aceitou o pedido de namoro!\n🎉 Que comecem os festejos! Parabéns ao novo casal! 💕✨";
        const _0x266da4 = {
          text: _0x5caa64,
          mentions: [_0x2cbb91]
        };
        _0xdeaaa3.sendMessage(_0x424b6e, _0x266da4);
      } else {
        const _0x416f2 = "💔 @" + _0x2cbb91.split('@')[0] + " rejeitou o pedido de namoro";
        const _0x2e99a8 = {
          text: _0x416f2,
          mentions: [_0x2cbb91]
        };
        _0xdeaaa3.sendMessage(_0x424b6e, _0x2e99a8);
      }
    } catch (_0x22560d) {
      console.error("Erro no comando aceitar/rejeitar:", _0x22560d);
      let _0x386389 = "❌ Erro ao responder pedido.";
      if (_0x22560d.response) {
        const {
          status: _0x10df9c,
          data: _0x420635
        } = _0x22560d.response;
        _0x386389 += "\n\n❗ Erro " + _0x10df9c + ": " + (_0x420635?.["message"] || "Erro desconhecido");
      } else {
        _0x386389 += "\n\n🔧 " + _0x22560d.message;
      }
      _0x3214d1(_0x386389);
    }
  }
}, {
  'name': "rel-status",
  'aliases': ["meu-relacionamento", "namoro-status", "status"],
  'category': "diversao",
  'description': "Ver status do seu relacionamento com foto do casal e estatísticas",
  'usage': "rel-status",
  'example': "rel-status",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    fs: _0x5e65dc,
    path: _0x5546d9,
    reply: _0x3cc42b,
    axios: _0x4012f3,
    isGroup: _0x1c326c,
    sender: _0x4cd573,
    conn: _0x517c77,
    from: _0x202bbf
  }) => {
    try {
      const _0x101783 = (_0x458592, _0x39763c) => {
        if (!_0x5e65dc.existsSync(_0x458592)) {
          throw new Error(_0x39763c + " não encontrado.");
        }
        const _0x524149 = _0x5e65dc.readFileSync(_0x458592, "utf8");
        if (!_0x524149?.["trim"]()) {
          throw new Error(_0x39763c + " está vazio.");
        }
        return JSON.parse(_0x524149);
      };
      const _0x57a163 = global.mykey;
      if (!_0x57a163) {
        return _0x3cc42b("❌ Chave de autenticação não disponível. Reinicie o bot.");
      }
      const _0x4eb9ed = _0x101783(_0x5546d9.join(__dirname, "../../dados/nescessario.json"), "nescessario.json");
      const _0x1a72d5 = _0x101783(_0x5546d9.join(__dirname, "../../dados/org/json/credenciais.json"), "credenciais.json");
      const {
        botId: _0x23033a
      } = _0x4eb9ed;
      const {
        token: _0x3b2293
      } = _0x1a72d5;
      if (!_0x23033a?.["trim"]() || !_0x3b2293?.["trim"]()) {
        return _0x3cc42b("❌ Dados incompletos:\n• BotId: " + (_0x23033a ? '✅' : '❌') + "\n• Token: " + (_0x3b2293 ? '✅' : '❌') + "\n\nReinicie o bot.");
      }
      const _0x225847 = {
        chave: _0x57a163,
        botId: _0x23033a,
        token: _0x3b2293,
        usuario: _0x4cd573,
        acao: "status"
      };
      const _0x3e74f8 = await _0x4012f3.post("https://sungbot.vip/api/relacionamento", _0x225847, {
        'headers': {
          'Content-Type': "application/json"
        },
        'timeout': 0x7530
      });
      if (!_0x3e74f8.data) {
        throw new Error("Resposta vazia da API");
      }
      const _0x999580 = _0x3e74f8.data;
      if (!_0x999580.sucesso) {
        return _0x3cc42b("❌ " + (_0x999580.motivo || "Erro desconhecido"));
      }
      if (_0x999580.relacionamento) {
        const _0x39cfd3 = _0x999580.relacionamento;
        const _0x534fc7 = _0x39cfd3.parceiro + "@s.whatsapp.net";
        const _0x41ad00 = {
          chave: _0x57a163,
          botId: _0x23033a,
          token: _0x3b2293,
          usuario: _0x4cd573,
          acao: "minhas_stats"
        };
        let _0x5b68b1 = '';
        try {
          const _0x4e2fc2 = await _0x4012f3.post("https://sungbot.vip/api/relacionamento", _0x41ad00, {
            'headers': {
              'Content-Type': "application/json"
            },
            'timeout': 0x7530
          });
          if (_0x4e2fc2.data && _0x4e2fc2.data.sucesso) {
            _0x5b68b1 = "\n\n📊 *ESTATÍSTICAS:*\n" + (_0x4e2fc2.data.mensagem.split("📊 *SUAS ESTATÍSTICAS* 📊\n\n")[1] || "Dados não disponíveis");
          }
        } catch (_0x2cdf67) {
          console.log("Erro ao buscar stats:", _0x2cdf67.message);
        }
        let _0x4b7bfe = "💑 *STATUS DO RELACIONAMENTO* 💑\n\n";
        _0x4b7bfe += "👫 @" + _0x4cd573.split('@')[0] + " está namorando @" + _0x39cfd3.parceiro + "\n";
        _0x4b7bfe += "💕 Status: " + _0x39cfd3.nome_fase + " " + _0x39cfd3.emoji + "\n";
        _0x4b7bfe += "📅 Tempo juntos: " + _0x39cfd3.dias_juntos + " dias\n";
        _0x4b7bfe += "💖 Pontos de amor: " + _0x39cfd3.pontos_amor;
        if (_0x39cfd3.status_extra) {
          _0x4b7bfe += _0x39cfd3.status_extra;
        }
        if (_0x39cfd3.proxima_fase_info) {
          _0x4b7bfe += _0x39cfd3.proxima_fase_info;
        }
        if (_0x5b68b1) {
          _0x4b7bfe += _0x5b68b1;
        }
        try {
          let _0x4a64af;
          let _0x2a4e73;
          try {
            _0x4a64af = await _0x517c77.profilePictureUrl(_0x4cd573.split('@')[0] + "@c.us", "image");
          } catch {
            _0x4a64af = "https://telegra.ph/file/077d0a8a2580d87115f85.jpg";
          }
          try {
            _0x2a4e73 = await _0x517c77.profilePictureUrl(_0x39cfd3.parceiro + "@c.us", "image");
          } catch {
            _0x2a4e73 = "https://telegra.ph/file/077d0a8a2580d87115f85.jpg";
          }
          const _0x34650b = async _0x456ef7 => {
            const _0x4d9222 = {
              responseType: "arraybuffer",
              timeout: 0x3a98,
              headers: {}
            };
            _0x4d9222.headers["User-Agent"] = "Mozilla/5.0";
            const _0x23cb44 = await _0x4012f3.get(_0x456ef7, _0x4d9222);
            return Buffer.from(_0x23cb44.data);
          };
          const [_0x2ad8c6, _0x4b7479] = await Promise.all([_0x34650b(_0x4a64af), _0x34650b(_0x2a4e73)]);
          if (!_0x2ad8c6 || _0x2ad8c6.length === 0) {
            throw new Error("Buffer do avatar1 inválido");
          }
          if (!_0x4b7479 || _0x4b7479.length === 0) {
            throw new Error("Buffer do avatar2 inválido");
          }
          const _0x48fffd = _0x2ad8c6.toString("base64");
          const _0x1a2a97 = _0x4b7479.toString("base64");
          const _0x50ed77 = {
            avatar1: "data:image/jpeg;base64," + _0x48fffd,
            avatar2: "data:image/jpeg;base64," + _0x1a2a97,
            porcentagem: 0x64
          };
          const _0x42004b = await _0x4012f3.post("https://sungbot.vip/api/ship", _0x50ed77, {
            'headers': {
              'Content-Type': "application/json"
            },
            'responseType': "arraybuffer",
            'timeout': 0x7530
          });
          const _0x3fe29e = Buffer.from(_0x42004b.data);
          if (!_0x3fe29e || _0x3fe29e.length === 0) {
            throw new Error("Imagem de ship retornada vazia");
          }
          const _0x2ea1ba = {
            image: _0x3fe29e,
            caption: _0x4b7bfe,
            mentions: [_0x4cd573, _0x534fc7]
          };
          await _0x517c77.sendMessage(_0x202bbf, _0x2ea1ba);
        } catch (_0x4aae68) {
          console.error("Erro ao gerar ship:", _0x4aae68);
          _0x4b7bfe += "\n\n❌ Não foi possível gerar a foto do casal";
          if (_0x4aae68.response?.["status"] === 415) {
            _0x4b7bfe += "\n\n🔧 Erro técnico: A API não aceita o formato enviado";
          } else {
            if (_0x4aae68.response?.["status"]) {
              _0x4b7bfe += "\n\n🔧 Erro " + _0x4aae68.response.status + ": " + _0x4aae68.response.statusText;
            } else {
              _0x4b7bfe += "\n\n🔧 " + _0x4aae68.message;
            }
          }
          const _0x1107d9 = {
            text: _0x4b7bfe,
            mentions: [_0x4cd573, _0x534fc7]
          };
          _0x517c77.sendMessage(_0x202bbf, _0x1107d9);
        }
      } else {
        return _0x3cc42b("❌ Você não está em um relacionamento!");
      }
    } catch (_0xc59d1e) {
      console.error("Erro no comando rel-status:", _0xc59d1e);
      let _0x6ea1c3 = "❌ Erro ao verificar status.";
      if (_0xc59d1e.response) {
        const {
          status: _0x53154b,
          data: _0x2aa365
        } = _0xc59d1e.response;
        _0x6ea1c3 += "\n\n❗ Erro " + _0x53154b + ": " + (_0x2aa365?.["message"] || "Erro desconhecido");
      } else {
        _0x6ea1c3 += "\n\n🔧 " + _0xc59d1e.message;
      }
      _0x3cc42b(_0x6ea1c3);
    }
  }
}, {
  'name': "rel-terminar",
  'aliases': ["divorciar", "divorcio", "separar", "terminar"],
  'category': "diversao",
  'description': "Terminar relacionamento",
  'usage': "rel-terminar",
  'example': "rel-terminar",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    fs: _0x34df8e,
    path: _0x350309,
    reply: _0x39a719,
    axios: _0x1f67a6,
    isGroup: _0x7f7c22,
    sender: _0x50ee6f,
    conn: _0x39080e,
    from: _0x33e6fc
  }) => {
    try {
      if (!_0x7f7c22) {
        return _0x39a719("Este comando só pode ser usado em grupos");
      }
      const _0x54590e = (_0x3122fd, _0x50bc12) => {
        if (!_0x34df8e.existsSync(_0x3122fd)) {
          throw new Error(_0x50bc12 + " não encontrado.");
        }
        const _0xda3f0a = _0x34df8e.readFileSync(_0x3122fd, "utf8");
        if (!_0xda3f0a?.["trim"]()) {
          throw new Error(_0x50bc12 + " está vazio.");
        }
        return JSON.parse(_0xda3f0a);
      };
      const _0x43cc24 = global.mykey;
      if (!_0x43cc24) {
        return _0x39a719("❌ Chave de autenticação não disponível. Reinicie o bot.");
      }
      const _0x324a79 = _0x54590e(_0x350309.join(__dirname, "../../dados/nescessario.json"), "nescessario.json");
      const _0x1a6f6b = _0x54590e(_0x350309.join(__dirname, "../../dados/org/json/credenciais.json"), "credenciais.json");
      const {
        botId: _0x48160d
      } = _0x324a79;
      const {
        token: _0x5a2c34
      } = _0x1a6f6b;
      if (!_0x48160d?.["trim"]() || !_0x5a2c34?.["trim"]()) {
        return _0x39a719("❌ Dados incompletos:\n• BotId: " + (_0x48160d ? '✅' : '❌') + "\n• Token: " + (_0x5a2c34 ? '✅' : '❌') + "\n\nReinicie o bot.");
      }
      const _0x2696f0 = {
        chave: _0x43cc24,
        botId: _0x48160d,
        token: _0x5a2c34,
        usuario: _0x50ee6f,
        acao: "terminar"
      };
      const _0x5647df = await _0x1f67a6.post("http://sungbot.vip/api/relacionamento", _0x2696f0, {
        'headers': {
          'Content-Type': "application/json"
        },
        'timeout': 0x7530
      });
      if (!_0x5647df.data) {
        throw new Error("Resposta vazia da API");
      }
      const _0x3bd7d5 = _0x5647df.data;
      if (!_0x3bd7d5.sucesso) {
        return _0x39a719("❌ " + (_0x3bd7d5.motivo || "Erro desconhecido"));
      }
      const _0x20e21e = "💔 @" + _0x50ee6f.split('@')[0] + " terminou seu relacionamento";
      const _0x169a77 = {
        text: _0x20e21e,
        mentions: [_0x50ee6f]
      };
      _0x39080e.sendMessage(_0x33e6fc, _0x169a77);
    } catch (_0x2a57fc) {
      console.error("Erro no comando rel-terminar:", _0x2a57fc);
      let _0x208a26 = "❌ Erro ao terminar relacionamento.";
      if (_0x2a57fc.response) {
        const {
          status: _0x634ee6,
          data: _0x3f492b
        } = _0x2a57fc.response;
        _0x208a26 += "\n\n❗ Erro " + _0x634ee6 + ": " + (_0x3f492b?.["message"] || "Erro desconhecido");
      } else {
        _0x208a26 += "\n\n🔧 " + _0x2a57fc.message;
      }
      _0x39a719(_0x208a26);
    }
  }
}, {
  'name': "rel-pontos",
  'aliases': ["meus-pontos", "pontos-amor", "pontos"],
  'category': "diversao",
  'description': "Ver seus pontos de relacionamento",
  'usage': "rel-pontos",
  'example': "rel-pontos",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    fs: _0x415c87,
    path: _0x1ebd14,
    reply: _0xca86b8,
    axios: _0x13b1b9,
    isGroup: _0x137bd3,
    sender: _0x5bda92,
    prefix: _0x5a579a,
    conn: _0x5c0349,
    from: _0x49edab
  }) => {
    try {
      if (!_0x137bd3) {
        return _0xca86b8("Este comando só pode ser usado em grupos");
      }
      const _0xb54286 = (_0x28c063, _0x15529b) => {
        if (!_0x415c87.existsSync(_0x28c063)) {
          throw new Error(_0x15529b + " não encontrado.");
        }
        const _0x1ccc42 = _0x415c87.readFileSync(_0x28c063, "utf8");
        if (!_0x1ccc42?.["trim"]()) {
          throw new Error(_0x15529b + " está vazio.");
        }
        return JSON.parse(_0x1ccc42);
      };
      const _0x1e2924 = global.mykey;
      if (!_0x1e2924) {
        return _0xca86b8("❌ Chave de autenticação não disponível. Reinicie o bot.");
      }
      const _0x4c95f3 = _0xb54286(_0x1ebd14.join(__dirname, "../../dados/nescessario.json"), "nescessario.json");
      const _0x3da31a = _0xb54286(_0x1ebd14.join(__dirname, "../../dados/org/json/credenciais.json"), "credenciais.json");
      const {
        botId: _0x3b345e
      } = _0x4c95f3;
      const {
        token: _0x591bf4
      } = _0x3da31a;
      if (!_0x3b345e?.["trim"]() || !_0x591bf4?.["trim"]()) {
        return _0xca86b8("❌ Dados incompletos:\n• BotId: " + (_0x3b345e ? '✅' : '❌') + "\n• Token: " + (_0x591bf4 ? '✅' : '❌') + "\n\nReinicie o bot.");
      }
      const _0x5bbd13 = {
        chave: _0x1e2924,
        botId: _0x3b345e,
        token: _0x591bf4,
        usuario: _0x5bda92,
        acao: "pontos"
      };
      const _0x1069e0 = await _0x13b1b9.post("http://sungbot.vip/api/relacionamento", _0x5bbd13, {
        'headers': {
          'Content-Type': "application/json"
        },
        'timeout': 0x7530
      });
      if (!_0x1069e0.data) {
        throw new Error("Resposta vazia da API");
      }
      const _0x259da1 = _0x1069e0.data;
      if (!_0x259da1.sucesso) {
        return _0xca86b8("❌ " + (_0x259da1.motivo || "Erro desconhecido"));
      }
      const _0x253078 = "💰 @" + _0x5bda92.split('@')[0] + " possui " + _0x259da1.pontos + " pontos!\n\n💡 Use `" + _0x5a579a + "rel-acao` para fazer ações e ganhar mais pontos";
      const _0x5d36a3 = {
        text: _0x253078,
        mentions: [_0x5bda92]
      };
      _0x5c0349.sendMessage(_0x49edab, _0x5d36a3);
    } catch (_0x26e490) {
      console.error("Erro no comando rel-pontos:", _0x26e490);
      let _0x5ac454 = "❌ Erro ao verificar pontos.";
      if (_0x26e490.response) {
        const {
          status: _0x165fc3,
          data: _0x48a39
        } = _0x26e490.response;
        _0x5ac454 += "\n\n❗ Erro " + _0x165fc3 + ": " + (_0x48a39?.["message"] || "Erro desconhecido");
      } else {
        _0x5ac454 += "\n\n🔧 " + _0x26e490.message;
      }
      _0xca86b8(_0x5ac454);
    }
  }
}, {
  'name': "rel-pedidos",
  'aliases': ["verificar-pedidos", "meus-pedidos", "pedidos"],
  'category': "diversao",
  'description': "Ver pedidos enviados e recebidos",
  'usage': "rel-pedidos",
  'example': "rel-pedidos",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    fs: _0x46514c,
    path: _0x21cbf5,
    reply: _0x653541,
    axios: _0x21baf0,
    isGroup: _0x1d7b78,
    sender: _0x58e423,
    prefix: _0x430d28,
    conn: _0x160520,
    from: _0x5bf718
  }) => {
    try {
      if (!_0x1d7b78) {
        return _0x653541("Este comando só pode ser usado em grupos");
      }
      const _0x1c8e7d = (_0x122b52, _0x37f0f4) => {
        if (!_0x46514c.existsSync(_0x122b52)) {
          throw new Error(_0x37f0f4 + " não encontrado.");
        }
        const _0x12a632 = _0x46514c.readFileSync(_0x122b52, "utf8");
        if (!_0x12a632?.["trim"]()) {
          throw new Error(_0x37f0f4 + " está vazio.");
        }
        return JSON.parse(_0x12a632);
      };
      const _0xd14758 = global.mykey;
      if (!_0xd14758) {
        return _0x653541("❌ Chave de autenticação não disponível. Reinicie o bot.");
      }
      const _0x43b4ce = _0x1c8e7d(_0x21cbf5.join(__dirname, "../../dados/nescessario.json"), "nescessario.json");
      const _0x7c7df3 = _0x1c8e7d(_0x21cbf5.join(__dirname, "../../dados/org/json/credenciais.json"), "credenciais.json");
      const {
        botId: _0x1b9bdb
      } = _0x43b4ce;
      const {
        token: _0x74cbbb
      } = _0x7c7df3;
      if (!_0x1b9bdb?.["trim"]() || !_0x74cbbb?.["trim"]()) {
        return _0x653541("❌ Dados incompletos:\n• BotId: " + (_0x1b9bdb ? '✅' : '❌') + "\n• Token: " + (_0x74cbbb ? '✅' : '❌') + "\n\nReinicie o bot.");
      }
      const _0x2c0ed3 = {
        chave: _0xd14758,
        botId: _0x1b9bdb,
        token: _0x74cbbb,
        usuario: _0x58e423,
        acao: "verificar_pedidos"
      };
      const _0x2917df = await _0x21baf0.post("http://sungbot.vip/api/relacionamento", _0x2c0ed3, {
        'headers': {
          'Content-Type': "application/json"
        },
        'timeout': 0x7530
      });
      if (!_0x2917df.data) {
        throw new Error("Resposta vazia da API");
      }
      const _0xec8ae2 = _0x2917df.data;
      if (!_0xec8ae2.sucesso) {
        return _0x653541("❌ " + (_0xec8ae2.motivo || "Erro desconhecido"));
      }
      let _0x204d40 = _0xec8ae2.mensagem;
      if (_0x204d40.includes("aceitar") || _0x204d40.includes("rejeitar")) {
        _0x204d40 = _0x204d40.replace(/!rel-aceitar/g, _0x430d28 + "rel-aceitar");
        _0x204d40 = _0x204d40.replace(/!rel-rejeitar/g, _0x430d28 + "rel-rejeitar");
      }
      const _0x582c7a = "📋 @" + _0x58e423.split('@')[0] + " - Seus pedidos:\n\n" + _0x204d40;
      const _0xf4adec = {
        text: _0x582c7a,
        mentions: [_0x58e423]
      };
      _0x160520.sendMessage(_0x5bf718, _0xf4adec);
    } catch (_0x404a1e) {
      console.error("Erro no comando rel-pedidos:", _0x404a1e);
      let _0x7d5313 = "❌ Erro ao verificar pedidos.";
      if (_0x404a1e.response) {
        const {
          status: _0x5ed9ff,
          data: _0x2d4ee9
        } = _0x404a1e.response;
        _0x7d5313 += "\n\n❗ Erro " + _0x5ed9ff + ": " + (_0x2d4ee9?.["message"] || "Erro desconhecido");
      } else {
        _0x7d5313 += "\n\n🔧 " + _0x404a1e.message;
      }
      _0x653541(_0x7d5313);
    }
  }
}, {
  'name': "rel-presente",
  'aliases': ["dar-presente", "presente", "presentes", "loja"],
  'category': "diversao",
  'description': "Menu interativo de presentes",
  'longDescription': "Interface interativa para ver presentes disponíveis por categoria e dar presentes ao seu parceiro(a).",
  'usage': "rel-presente",
  'example': "rel-presente",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    fs: _0x6724e4,
    path: _0x480281,
    reply: _0x25b2fb,
    axios: _0xaafe60,
    isGroup: _0x3f5758,
    sender: _0x33819f,
    from: _0x2261f6,
    createChoiceMenu: _0x1965cb,
    prefix: _0x394c38,
    args: _0x97d859,
    conn: _0x45c8f7
  }) => {
    try {
      if (!_0x3f5758) {
        return _0x25b2fb("Este comando só pode ser usado em grupos");
      }
      const _0x3d5adc = (_0x2cccfd, _0x2920bc) => {
        if (!_0x6724e4.existsSync(_0x2cccfd)) {
          throw new Error(_0x2920bc + " não encontrado.");
        }
        const _0x38d583 = _0x6724e4.readFileSync(_0x2cccfd, "utf8");
        if (!_0x38d583?.["trim"]()) {
          throw new Error(_0x2920bc + " está vazio.");
        }
        return JSON.parse(_0x38d583);
      };
      const _0x42a3c0 = global.mykey;
      if (!_0x42a3c0) {
        return _0x25b2fb("❌ Chave de autenticação não disponível. Reinicie o bot.");
      }
      const _0x1d602d = _0x3d5adc(_0x480281.join(__dirname, "../../dados/nescessario.json"), "nescessario.json");
      const _0x351fb3 = _0x3d5adc(_0x480281.join(__dirname, "../../dados/org/json/credenciais.json"), "credenciais.json");
      const {
        botId: _0x32182f
      } = _0x1d602d;
      const {
        token: _0x3f27f0
      } = _0x351fb3;
      if (!_0x32182f?.["trim"]() || !_0x3f27f0?.["trim"]()) {
        return _0x25b2fb("❌ Dados incompletos:\n• BotId: " + (_0x32182f ? '✅' : '❌') + "\n• Token: " + (_0x3f27f0 ? '✅' : '❌') + "\n\nReinicie o bot.");
      }
      if (_0x97d859[0]) {
        return _0x455fe2(_0x97d859[0]);
      }
      const _0x3dcd11 = {
        chave: _0x42a3c0,
        botId: _0x32182f,
        token: _0x3f27f0,
        usuario: _0x33819f,
        acao: "presentes"
      };
      const _0x10275c = await _0xaafe60.post("http://sungbot.vip/api/relacionamento", _0x3dcd11, {
        'headers': {
          'Content-Type': "application/json"
        },
        'timeout': 0x7530
      });
      if (!_0x10275c.data) {
        throw new Error("Resposta vazia da API");
      }
      const _0x41261c = _0x10275c.data;
      if (!_0x41261c.sucesso) {
        return _0x25b2fb("❌ " + (_0x41261c.motivo || "Erro desconhecido"));
      }
      if (!_0x41261c.presentes || _0x41261c.presentes.length === 0) {
        return _0x25b2fb("❌ Nenhum presente disponível no momento.");
      }
      const _0x5a5fb5 = ["vibrador", "dildo", "plug_anal", "algemas", "chicote", "venda_olhos", "lingerie_fina", "fantasia_sexy", "gel_lubrificante", "preservativo_especial", "calinha_comestivel", "sex_machine", "swing_casal", "dungeon_privado", "stripper_particular", "club_swinger", "orgia_luxo", "sex_resort", "festa_liberal"];
      const _0x4afcfe = _0x41261c.presentes.filter(_0x277e4f => !_0x5a5fb5.includes(_0x277e4f.id));
      const _0x4da46b = _0x41261c.presentes.filter(_0xcefd63 => _0x5a5fb5.includes(_0xcefd63.id));
      const _0x260343 = {
        emoji: '⚪',
        itens: []
      };
      const _0x44f91b = {
        emoji: '🔵',
        itens: []
      };
      const _0x31db1c = {
        emoji: '🟣',
        itens: []
      };
      const _0x4f1fd2 = {
        emoji: '🟡',
        itens: []
      };
      const _0x5591f3 = {
        emoji: '🔴',
        itens: []
      };
      const _0x31ca6a = {
        comum: _0x260343,
        raro: _0x44f91b,
        épico: _0x31db1c,
        lendário: _0x4f1fd2,
        mítico: _0x5591f3
      };
      _0x4afcfe.forEach(_0x40a775 => {
        if (_0x31ca6a[_0x40a775.raridade]) {
          _0x31ca6a[_0x40a775.raridade].itens.push(_0x40a775);
        }
      });
      const _0x120c91 = {
        emoji: '🔵',
        itens: []
      };
      const _0x13766b = {
        emoji: '🟣',
        itens: []
      };
      const _0x453737 = {
        emoji: '🟡',
        itens: []
      };
      const _0xb9aa0e = {
        emoji: '🔴',
        itens: []
      };
      const _0x44b847 = {
        raro: _0x120c91,
        épico: _0x13766b,
        lendário: _0x453737,
        mítico: _0xb9aa0e
      };
      _0x4da46b.forEach(_0x35714b => {
        if (_0x44b847[_0x35714b.raridade]) {
          _0x44b847[_0x35714b.raridade].itens.push(_0x35714b);
        }
      });
      const _0x29b655 = {
        submenu: "normais"
      };
      const _0x246774 = {
        submenu: "adultos_menu"
      };
      const _0x3ac747 = {
        close: true,
        text: "✅ Menu fechado!",
        edit: true
      };
      const _0x270783 = {
        '1': _0x29b655,
        '2': _0x246774,
        '3': _0x3ac747
      };
      const _0x14aaac = {
        text: "\n╭━━━⊱「 🎁 LOJA DE PRESENTES 🎁 」⊰━━━╮\n┃\n┃ Escolha uma categoria:\n┃\n┃ 1 - 💝 Presentes Românticos\n┃ 2 - 🔞 Presentes Adultos (18+)\n┃ 3 - ❌ Cancelar\n┃\n╰━━━⊱「 🎁 PRESENTES 🎁 」⊰━━━╯\n\nDigite uma opção:",
        options: _0x270783
      };
      const _0x462282 = {
        principal: _0x14aaac
      };
      const _0x3d82c7 = {
        text: "\n╭━━━⊱「 💝 PRESENTES ROMÂNTICOS 💝 」⊰━━━╮\n┃\n┃ Escolha uma raridade:\n┃\n",
        options: {}
      };
      _0x462282.normais = _0x3d82c7;
      let _0x4964d9 = 1;
      Object.keys(_0x31ca6a).forEach(_0xc5c095 => {
        if (_0x31ca6a[_0xc5c095].itens.length > 0) {
          _0x462282.normais.text += "┃ " + _0x4964d9 + " - " + _0x31ca6a[_0xc5c095].emoji + " " + _0xc5c095.toUpperCase() + " (" + _0x31ca6a[_0xc5c095].itens.length + ")\n┃\n";
          const _0x8d83f9 = {
            submenu: "normal_" + _0xc5c095
          };
          _0x462282.normais.options[_0x4964d9.toString()] = _0x8d83f9;
          _0x462282["normal_" + _0xc5c095] = {
            'text': "\n╭━━━⊱「 " + _0x31ca6a[_0xc5c095].emoji + " " + _0xc5c095.toUpperCase() + " 」⊰━━━╮\n┃\n",
            'options': {}
          };
          let _0x2f77f9 = 1;
          _0x31ca6a[_0xc5c095].itens.forEach(_0x231e88 => {
            _0x462282["normal_" + _0xc5c095].text += "┃ " + _0x2f77f9 + " - " + _0x231e88.emoji + " " + _0x231e88.nome + "\n┃   💰 " + _0x231e88.custo_pontos + "pts → +" + _0x231e88.pontos_amor + "❤️\n┃\n";
            const _0x6adc9 = {
              text: "🎁 Dando " + _0x231e88.nome + " para seu parceiro(a)...",
              command: _0x394c38 + "rel-presente " + _0x231e88.id,
              edit: true
            };
            _0x462282["normal_" + _0xc5c095].options[_0x2f77f9.toString()] = _0x6adc9;
            _0x2f77f9++;
          });
          _0x462282["normal_" + _0xc5c095].text += "┃ 0 - Voltar\n┃\n╰━━━⊱「 " + _0x31ca6a[_0xc5c095].emoji + " " + _0xc5c095.toUpperCase() + " 」⊰━━━╯\n\nEscolha um presente:";
          const _0x1338c2 = {
            back: true
          };
          _0x462282["normal_" + _0xc5c095].options['0'] = _0x1338c2;
          _0x4964d9++;
        }
      });
      _0x462282.normais.text += "┃ 0 - Voltar\n┃\n╰━━━⊱「 💝 ROMÂNTICOS 💝 」⊰━━━╯\n\nDigite uma opção:";
      const _0x26e8fd = {
        back: true
      };
      _0x462282.normais.options['0'] = _0x26e8fd;
      const _0x58be5c = {
        text: "\n╭━━━⊱「 🔞 PRESENTES ADULTOS 🔞 」⊰━━━╮\n┃\n┃ ⚠️ CONTEÚDO PARA MAIORES DE 18 ANOS\n┃\n┃ Escolha uma raridade:\n┃\n",
        options: {}
      };
      _0x462282.adultos_menu = _0x58be5c;
      _0x4964d9 = 1;
      Object.keys(_0x44b847).forEach(_0x459a77 => {
        if (_0x44b847[_0x459a77].itens.length > 0) {
          _0x462282.adultos_menu.text += "┃ " + _0x4964d9 + " - " + _0x44b847[_0x459a77].emoji + " " + _0x459a77.toUpperCase() + " (" + _0x44b847[_0x459a77].itens.length + ")\n┃\n";
          const _0x184e85 = {
            submenu: "adulto_" + _0x459a77
          };
          _0x462282.adultos_menu.options[_0x4964d9.toString()] = _0x184e85;
          _0x462282["adulto_" + _0x459a77] = {
            'text': "\n╭━━━⊱「 " + _0x44b847[_0x459a77].emoji + " " + _0x459a77.toUpperCase() + " 🔞 」⊰━━━╮\n┃\n",
            'options': {}
          };
          let _0x3a5055 = 1;
          _0x44b847[_0x459a77].itens.forEach(_0x275ea4 => {
            _0x462282["adulto_" + _0x459a77].text += "┃ " + _0x3a5055 + " - " + _0x275ea4.emoji + " " + _0x275ea4.nome + "\n┃   💰 " + _0x275ea4.custo_pontos + "pts → +" + _0x275ea4.pontos_amor + "❤️\n┃\n";
            const _0x5dd711 = {
              text: "🎁 Dando " + _0x275ea4.nome + " para seu parceiro(a)...",
              command: _0x394c38 + "rel-presente " + _0x275ea4.id,
              edit: true
            };
            _0x462282["adulto_" + _0x459a77].options[_0x3a5055.toString()] = _0x5dd711;
            _0x3a5055++;
          });
          _0x462282["adulto_" + _0x459a77].text += "┃ 0 - Voltar\n┃\n╰━━━⊱「 " + _0x44b847[_0x459a77].emoji + " " + _0x459a77.toUpperCase() + " 🔞 」⊰━━━╯\n\nEscolha um presente:";
          const _0x365a77 = {
            back: true
          };
          _0x462282["adulto_" + _0x459a77].options['0'] = _0x365a77;
          _0x4964d9++;
        }
      });
      _0x462282.adultos_menu.text += "┃ 0 - Voltar\n┃\n╰━━━⊱「 🔞 ADULTOS 🔞 」⊰━━━╯\n\nDigite uma opção:";
      const _0x1960ff = {
        back: true
      };
      _0x462282.adultos_menu.options['0'] = _0x1960ff;
      async function _0x455fe2(_0x1291b7) {
        try {
          const _0x26a6a9 = {
            chave: _0x42a3c0,
            botId: _0x32182f,
            token: _0x3f27f0,
            usuario: _0x33819f,
            acao: "status"
          };
          const _0x2a2b6d = await _0xaafe60.post("http://sungbot.vip/api/relacionamento", _0x26a6a9, {
            'headers': {
              'Content-Type': "application/json"
            },
            'timeout': 0x7530
          });
          if (!_0x2a2b6d.data || !_0x2a2b6d.data.sucesso) {
            return _0x25b2fb("❌ Você precisa estar em um relacionamento para dar presentes");
          }
          const _0x44dfd8 = _0x2a2b6d.data.relacionamento.parceiro + "@s.whatsapp.net";
          const _0x1931c0 = {
            chave: _0x42a3c0,
            botId: _0x32182f,
            token: _0x3f27f0,
            usuario: _0x33819f,
            acao: "dar_presente",
            destinatario: _0x44dfd8,
            presente: _0x1291b7
          };
          const _0x4fafce = await _0xaafe60.post("http://sungbot.vip/api/relacionamento", _0x1931c0, {
            'headers': {
              'Content-Type': "application/json"
            },
            'timeout': 0x7530
          });
          if (!_0x4fafce.data) {
            throw new Error("Resposta vazia da API");
          }
          const _0x40c3ac = _0x4fafce.data;
          if (!_0x40c3ac.sucesso) {
            return _0x25b2fb("❌ " + (_0x40c3ac.motivo || "Erro desconhecido"));
          }
          const _0x1fd1f4 = "🎁 @" + _0x33819f.split('@')[0] + " " + _0x40c3ac.mensagem + "\n💰 Pontos restantes: " + _0x40c3ac.pontos_restantes;
          const _0x44ac2c = {
            text: _0x1fd1f4,
            mentions: [_0x33819f, _0x44dfd8]
          };
          return _0x45c8f7.sendMessage(_0x2261f6, _0x44ac2c);
        } catch (_0x2c9b85) {
          console.error("Erro ao dar presente:", _0x2c9b85);
          let _0x52d5eb = "❌ Erro ao dar presente.";
          if (_0x2c9b85.response) {
            const {
              status: _0x108103,
              data: _0x153834
            } = _0x2c9b85.response;
            _0x52d5eb += "\n\n❗ Erro " + _0x108103 + ": " + (_0x153834?.["message"] || "Erro desconhecido");
          } else {
            _0x52d5eb += "\n\n🔧 " + _0x2c9b85.message;
          }
          return _0x25b2fb(_0x52d5eb);
        }
      }
      await _0x1965cb(_0x2261f6, _0x33819f, _0x462282.principal.text, _0x462282.principal.options, {
        'menus': _0x462282,
        'history': ["principal"]
      });
      return true;
    } catch (_0x15a20b) {
      console.error("Erro no comando rel-presente:", _0x15a20b);
      let _0x124b56 = "❌ Erro ao carregar presentes.";
      if (_0x15a20b.response) {
        const {
          status: _0x33b331,
          data: _0x304021
        } = _0x15a20b.response;
        _0x124b56 += "\n\n❗ Erro " + _0x33b331 + ": " + (_0x304021?.["message"] || "Erro desconhecido");
      } else {
        _0x124b56 += "\n\n🔧 " + _0x15a20b.message;
      }
      _0x25b2fb(_0x124b56);
    }
  }
}, {
  'name': "rel-acao",
  'aliases': ["acao", "acoes"],
  'category': "diversao",
  'description': "Menu interativo de ações diárias",
  'longDescription': "Interface interativa para realizar ações diárias com seu parceiro(a) e ganhar pontos de relacionamento.",
  'usage': "rel-acao",
  'example': "rel-acao",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    fs: _0x486c07,
    path: _0x1ad6f7,
    args: _0x5522c1,
    reply: _0x5652d6,
    axios: _0x1f9b9a,
    isGroup: _0x3a1a24,
    sender: _0x89d47b,
    from: _0x243ac4,
    createChoiceMenu: _0x4dbbf7,
    prefix: _0x23183e,
    conn: _0x239ac9
  }) => {
    try {
      if (!_0x3a1a24) {
        return _0x5652d6("Este comando só pode ser usado em grupos");
      }
      const _0x26976f = {
        id: "beijar",
        nome: "Beijar",
        emoji: '😘',
        pontos: 0x3,
        limite: 0x5
      };
      const _0x5402b1 = {
        id: "abracar",
        nome: "Abraçar",
        emoji: '🤗',
        pontos: 0x2,
        limite: 0x8
      };
      const _0xb7a078 = {
        id: "elogiar",
        nome: "Elogiar",
        emoji: '😍',
        pontos: 0x2,
        limite: 0x6
      };
      const _0x30b980 = {
        id: "cafunar",
        nome: "Fazer Cafuné",
        emoji: '😌',
        pontos: 0x4,
        limite: 0x3
      };
      const _0x2808a1 = {
        id: "cozinhar",
        nome: "Cozinhar Juntos",
        emoji: "👨‍🍳",
        pontos: 0x5,
        limite: 0x2
      };
      const _0x3207c0 = {
        id: "dancar",
        nome: "Dançar",
        emoji: '💃',
        pontos: 0x4,
        limite: 0x3
      };
      const _0x90da8f = {
        id: "filme",
        nome: "Assistir Filme",
        emoji: '🎬',
        pontos: 0x3,
        limite: 0x2
      };
      const _0x1ee57b = {
        id: "passear",
        nome: "Passear",
        emoji: "🚶‍♂️",
        pontos: 0x3,
        limite: 0x4
      };
      const _0x30d5ad = {
        id: "conversar",
        nome: "Conversar",
        emoji: '💬',
        pontos: 0x1,
        limite: 0xa
      };
      const _0x48520e = {
        id: "surpresa",
        nome: "Fazer Surpresa",
        emoji: '🎁',
        pontos: 0x8,
        limite: 0x1
      };
      const _0x145e69 = [_0x26976f, _0x5402b1, _0xb7a078, _0x30b980, _0x2808a1, _0x3207c0, _0x90da8f, _0x1ee57b, _0x30d5ad, _0x48520e];
      const _0x98984 = {
        id: "sexting",
        nome: "Sexting",
        emoji: '📱',
        pontos: 0x8,
        limite: 0x3
      };
      const _0x1bf430 = {
        id: "nudes",
        nome: "Trocar Nudes",
        emoji: '📸',
        pontos: 0xa,
        limite: 0x2
      };
      const _0x668190 = {
        id: "banho_junto",
        nome: "Banho Romântico",
        emoji: '🛁',
        pontos: 0x8,
        limite: 0x1
      };
      const _0x455d68 = {
        id: "lingerie_show",
        nome: "Desfile Privado",
        emoji: '💃',
        pontos: 0x9,
        limite: 0x1
      };
      const _0x49bcbd = {
        id: "preliminares",
        nome: "Preliminares",
        emoji: '🫦',
        pontos: 0xc,
        limite: 0x2
      };
      const _0x1509b6 = {
        id: "momento_intimo",
        nome: "Momento Íntimo",
        emoji: '🔥',
        pontos: 0xa,
        limite: 0x1
      };
      const _0x5c6952 = {
        id: "sexo_romantico",
        nome: "Sexo Romântico",
        emoji: "❤️‍🔥",
        pontos: 0xf,
        limite: 0x1
      };
      const _0x4aad6e = {
        id: "sexo_selvagem",
        nome: "Sexo Selvagem",
        emoji: '🐆',
        pontos: 0x12,
        limite: 0x1
      };
      const _0xd6a2be = {
        id: "oral_prazer",
        nome: "Prazer Oral",
        emoji: '👄',
        pontos: 0x10,
        limite: 0x1
      };
      const _0x3f0cf2 = {
        id: "role_play",
        nome: "Role Play",
        emoji: '🎭',
        pontos: 0xe,
        limite: 0x1
      };
      const _0x3c2f18 = {
        id: "brinquedos",
        nome: "Usar Brinquedos",
        emoji: '🎲',
        pontos: 0x11,
        limite: 0x1
      };
      const _0x5dc579 = {
        id: "multiple_orgasms",
        nome: "Orgasmos Múltiplos",
        emoji: '🌋',
        pontos: 0x19,
        limite: 0x1
      };
      const _0x21b54f = [_0x98984, _0x1bf430, _0x668190, _0x455d68, _0x49bcbd, _0x1509b6, _0x5c6952, _0x4aad6e, _0xd6a2be, _0x3f0cf2, _0x3c2f18, _0x5dc579];
      if (_0x5522c1[0]) {
        return _0x56a7ea(_0x5522c1[0]);
      }
      const _0x5cc698 = {
        submenu: "romanticas"
      };
      const _0xb88f09 = {
        submenu: "adultas"
      };
      const _0x1a8bd3 = {
        close: true,
        text: "✅ Menu fechado!",
        edit: true
      };
      const _0x5a969e = {
        '1': _0x5cc698,
        '2': _0xb88f09,
        '3': _0x1a8bd3
      };
      const _0x29e0b0 = {
        text: "\n╭━━━⊱「 💕 AÇÕES DIÁRIAS 💕 」⊰━━━╮\n┃\n┃ Escolha uma categoria:\n┃\n┃ 1 - 💕 Ações Românticas\n┃ 2 - 🔞 Ações Íntimas (18+)\n┃ 3 - ❌ Cancelar\n┃\n╰━━━⊱「 💕 AÇÕES 💕 」⊰━━━╯\n\nDigite uma opção:",
        options: _0x5a969e
      };
      const _0x7cbfa2 = {
        principal: _0x29e0b0
      };
      const _0xe1f7da = {
        text: "\n╭━━━⊱「 💕 AÇÕES ROMÂNTICAS 💕 」⊰━━━╮\n┃\n┃ Escolha uma ação para fazer:\n┃\n",
        options: {}
      };
      _0x7cbfa2.romanticas = _0xe1f7da;
      _0x145e69.forEach((_0x120459, _0x3e7008) => {
        const _0x3a48a4 = (_0x3e7008 + 1).toString();
        _0x7cbfa2.romanticas.text += "┃ " + _0x3a48a4 + " - " + _0x120459.emoji + " " + _0x120459.nome + " (" + _0x120459.pontos + "pts, " + _0x120459.limite + "x/dia)\n┃\n";
        const _0x1536f2 = {
          text: _0x120459.emoji + " Realizando ação: " + _0x120459.nome + "...",
          command: _0x23183e + "rel-acao " + _0x120459.id,
          edit: true
        };
        _0x7cbfa2.romanticas.options[_0x3a48a4] = _0x1536f2;
      });
      _0x7cbfa2.romanticas.text += "┃ 0 - Voltar\n┃\n╰━━━⊱「 💕 ROMÂNTICAS 💕 」⊰━━━╯\n\nDigite uma opção:";
      const _0x1b9767 = {
        back: true
      };
      _0x7cbfa2.romanticas.options['0'] = _0x1b9767;
      const _0x88d23d = {
        text: "\n╭━━━⊱「 🔞 AÇÕES ÍNTIMAS 🔞 」⊰━━━╮\n┃\n┃ ⚠️ CONTEÚDO PARA MAIORES DE 18 ANOS\n┃\n┃ Escolha uma ação íntima:\n┃\n",
        options: {}
      };
      _0x7cbfa2.adultas = _0x88d23d;
      _0x21b54f.forEach((_0x43a3c8, _0x1098da) => {
        const _0x2213e8 = (_0x1098da + 1).toString();
        _0x7cbfa2.adultas.text += "┃ " + _0x2213e8 + " - " + _0x43a3c8.emoji + " " + _0x43a3c8.nome + " (" + _0x43a3c8.pontos + "pts, " + _0x43a3c8.limite + "x/dia)\n┃\n";
        const _0x455d05 = {
          text: _0x43a3c8.emoji + " Realizando ação: " + _0x43a3c8.nome + "...",
          command: _0x23183e + "rel-acao " + _0x43a3c8.id,
          edit: true
        };
        _0x7cbfa2.adultas.options[_0x2213e8] = _0x455d05;
      });
      _0x7cbfa2.adultas.text += "┃ 0 - Voltar\n┃\n╰━━━⊱「 🔞 ÍNTIMAS 🔞 」⊰━━━╯\n\nDigite uma opção:";
      const _0x4ef95b = {
        back: true
      };
      _0x7cbfa2.adultas.options['0'] = _0x4ef95b;
      async function _0x56a7ea(_0x52cc9c) {
        try {
          const _0x279890 = [..._0x145e69, ..._0x21b54f];
          const _0x244220 = _0x279890.map(_0x3642e9 => _0x3642e9.id);
          const _0x3e4d2b = _0x52cc9c.toLowerCase();
          if (!_0x244220.includes(_0x3e4d2b)) {
            return _0x5652d6("❌ Ação inválida: " + _0x52cc9c + "\nUse: `" + _0x23183e + "rel-acao` para ver ações disponíveis");
          }
          const _0x5ead3b = _0x279890.find(_0x34f752 => _0x34f752.id === _0x3e4d2b);
          const _0x5225a3 = _0x5ead3b ? _0x5ead3b.emoji : '💕';
          const _0x1953a4 = (_0x4a0554, _0x32a008) => {
            if (!_0x486c07.existsSync(_0x4a0554)) {
              throw new Error(_0x32a008 + " não encontrado.");
            }
            const _0x2aade7 = _0x486c07.readFileSync(_0x4a0554, "utf8");
            if (!_0x2aade7?.["trim"]()) {
              throw new Error(_0x32a008 + " está vazio.");
            }
            return JSON.parse(_0x2aade7);
          };
          const _0x2e10e7 = global.mykey;
          if (!_0x2e10e7) {
            return _0x5652d6("❌ Chave de autenticação não disponível. Reinicie o bot.");
          }
          const _0x31e2ea = _0x1953a4(_0x1ad6f7.join(__dirname, "../../dados/nescessario.json"), "nescessario.json");
          const _0x311abd = _0x1953a4(_0x1ad6f7.join(__dirname, "../../dados/org/json/credenciais.json"), "credenciais.json");
          const {
            botId: _0x3d756c
          } = _0x31e2ea;
          const {
            token: _0x3c56ee
          } = _0x311abd;
          if (!_0x3d756c?.["trim"]() || !_0x3c56ee?.["trim"]()) {
            return _0x5652d6("❌ Dados incompletos:\n• BotId: " + (_0x3d756c ? '✅' : '❌') + "\n• Token: " + (_0x3c56ee ? '✅' : '❌') + "\n\nReinicie o bot.");
          }
          const _0x136f25 = {
            chave: _0x2e10e7,
            botId: _0x3d756c,
            token: _0x3c56ee,
            usuario: _0x89d47b,
            acao: "acao_diaria",
            tipo_acao: _0x3e4d2b
          };
          const _0x8d8b18 = await _0x1f9b9a.post("http://sungbot.vip/api/relacionamento", _0x136f25, {
            'headers': {
              'Content-Type': "application/json"
            },
            'timeout': 0x7530
          });
          if (!_0x8d8b18.data) {
            throw new Error("Resposta vazia da API");
          }
          const _0x535a03 = _0x8d8b18.data;
          if (!_0x535a03.sucesso) {
            return _0x5652d6("❌ " + (_0x535a03.motivo || "Erro desconhecido"));
          }
          let _0x4bf957 = _0x5225a3 + " @" + _0x89d47b.split('@')[0] + " " + _0x535a03.mensagem + "\n";
          _0x4bf957 += "💰 +" + _0x535a03.pontos_ganhos + " pontos pessoais! (" + _0x535a03.realizadas + '/' + _0x535a03.limite + " hoje)";
          if (_0x535a03.pontos_amor !== undefined) {
            _0x4bf957 += "\n💖 Pontos de amor do casal: " + _0x535a03.pontos_amor;
          }
          const _0x3a7379 = {
            text: _0x4bf957,
            mentions: [_0x89d47b]
          };
          return _0x239ac9.sendMessage(_0x243ac4, _0x3a7379);
        } catch (_0x305be9) {
          console.error("Erro na ação diária:", _0x305be9);
          let _0xbc28ed = "❌ Erro na ação diária.";
          if (_0x305be9.response) {
            const {
              status: _0x3a1117,
              data: _0x5902f1
            } = _0x305be9.response;
            _0xbc28ed += "\n\n❗ Erro " + _0x3a1117 + ": " + (_0x5902f1?.["message"] || "Erro desconhecido");
          } else {
            _0xbc28ed += "\n\n🔧 " + _0x305be9.message;
          }
          return _0x5652d6(_0xbc28ed);
        }
      }
      await _0x4dbbf7(_0x243ac4, _0x89d47b, _0x7cbfa2.principal.text, _0x7cbfa2.principal.options, {
        'menus': _0x7cbfa2,
        'history': ["principal"]
      });
      return true;
    } catch (_0x5ddc79) {
      console.error("Erro no comando rel-acao:", _0x5ddc79);
      let _0xbcc789 = "❌ Erro ao carregar ações.";
      if (_0x5ddc79.response) {
        const {
          status: _0xea0d5c,
          data: _0x2551cf
        } = _0x5ddc79.response;
        _0xbcc789 += "\n\n❗ Erro " + _0xea0d5c + ": " + (_0x2551cf?.["message"] || "Erro desconhecido");
      } else {
        _0xbcc789 += "\n\n🔧 " + _0x5ddc79.message;
      }
      _0x5652d6(_0xbcc789);
    }
  }
}, {
  'name': "rankingjogosgold",
  'aliases': [],
  'category': "economia",
  'description': "Ver ranking de gold do grupo",
  'longDescription': "Visualize o ranking dos jogadores com mais gold no grupo, incluindo sua posição atual.",
  'usage': "ranking",
  'example': "ranking",
  'menu': "gold",
  'menuSection': "Informações",
  'permissions': _0x51262a,
  'requirements': {},
  'execute': async ({
    conn: _0x3c5120,
    info: _0x40f109,
    from: _0x41de5a,
    sender: _0x467c44,
    sender2: _0x47e686,
    q: _0x2fac32,
    args: _0x31ac85,
    isGroup: _0x651ef0,
    reply: _0x42d3b9,
    mention: _0x37e3a6,
    BANCOP: _0x5df26e,
    dataGp: _0x36b7ab,
    goldSystem: _0x3e11ed,
    configsGold: _0x345e61,
    EmojiBot: _0x43f9ed,
    command: _0x367fd3,
    prefix: _0x59783b,
    gamesSystem: _0x2d3aa5
  }) => {
    if (!_0x36b7ab[0]?.["sistemgold"]) {
      return _0x42d3b9("❌ Este comando só funciona com o sistema gold ativo.\nPeça para um administrador ativar com !sistemgold on");
    }
    try {
      const _0x3b09d2 = _0x3e11ed.getTopPlayers(_0x41de5a, 10);
      if (!_0x3b09d2 || _0x3b09d2.length === 0) {
        return _0x42d3b9("🏆 *RANKING DE GOLD* 🏆\n\n📊 Ainda não há ranking de jogadores neste grupo.\n💡 Jogue alguns jogos para aparecer aqui!\n\n🎮 *Jogos disponíveis:*\n• " + _0x59783b + "sequencia - Sequências matemáticas\n• " + _0x59783b + "emojis - Combine emojis\n• " + _0x59783b + "hora - Acerte horários\n• " + _0x59783b + "damas - Jogue com outros usuários\n• " + _0x59783b + "caixamisteriosa - Teste sua sorte");
      }
      let _0x2075d6 = "🏆 *RANKING DE GOLD* 🏆\n\n";
      for (let _0x990787 = 0; _0x990787 < _0x3b09d2.length; _0x990787++) {
        const _0x2aa77e = _0x3b09d2[_0x990787];
        const _0x466faf = _0x990787 === 0 ? '🥇' : _0x990787 === 1 ? '🥈' : _0x990787 === 2 ? '🥉' : _0x990787 + 1 + 'º';
        const _0x56cfad = _0x2aa77e.user_id.split('@')[0];
        _0x2075d6 += _0x466faf + " @" + _0x56cfad + " - " + _0x2aa77e.balance + " " + _0x345e61.emojis.gold + "\n";
      }
      const _0x3233de = _0x3e11ed.getUserPosition(_0x41de5a, _0x467c44);
      const _0x18e426 = _0x3e11ed.getBalance(_0x41de5a, _0x467c44);
      if (_0x3233de > 10) {
        _0x2075d6 += "\n📍 *Sua posição:* " + _0x3233de + "º lugar - " + _0x18e426 + " " + _0x345e61.emojis.gold;
      } else {
        _0x2075d6 += "\n💰 *Seu saldo atual:* " + _0x18e426 + " " + _0x345e61.emojis.gold;
      }
      _0x2075d6 += "\n\n🎮 *Jogue mais para subir no ranking!*";
      _0x37e3a6(_0x2075d6);
      return true;
    } catch (_0x4cab06) {
      console.error("❌ Erro ao buscar ranking:", _0x4cab06);
      return _0x42d3b9("❌ Erro ao buscar ranking. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "combinegold",
  'aliases': ["combineemojigold"],
  'category': "economia",
  'description': "Jogo de interpretar combinações de emojis",
  'longDescription': "Interprete o que as combinações de emojis representam juntos. Exemplo: 🍕🇮🇹 = Pizza Italiana. Acertos consecutivos geram combos de bônus!",
  'usage': "emojis <valor>",
  'example': "emojis 25\nemojis 50",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': _0x1604ec,
  'requirements': {},
  'execute': async ({
    conn: _0x14b96f,
    info: _0xb22104,
    from: _0x2bf085,
    sender: _0x507055,
    sender2: _0x230b41,
    q: _0x300088,
    args: _0xbb3c92,
    isGroup: _0x3281d0,
    reply: _0x276411,
    mention: _0x5ad400,
    BANCOP: _0x36caf9,
    dataGp: _0x1c9f83,
    goldSystem: _0x3b6198,
    configsGold: _0x3fe780,
    EmojiBot: _0x4f5a11,
    command: _0x12cc9e,
    prefix: _0x329b4b,
    gamesSystem: _0x264224
  }) => {
    if (!_0x264224) {
      return _0x276411("❌ Sistema de jogos não disponível. Contacte um administrador.");
    }
    if (!_0x1c9f83[0]?.["sistemgold"] && !_0x1c9f83[0]?.["jogos"]) {
      return _0x276411("❌ Este comando requer o sistema gold ou jogos ativo.\nPeça para um administrador ativar com !sistemgold on ou !jogos on");
    }
    if (_0x264224.gameExists("combine_emojis", _0x2bf085, _0x507055)) {
      return _0x276411("🧩 Você já tem um jogo de Combine Emojis ativo!\nDigite sua interpretação dos emojis ou \"desistir\".");
    }
    if (!_0x300088 || isNaN(_0x300088) || parseInt(_0x300088) <= 0) {
      return _0x276411("🧩 *COMBINE OS EMOJIS* 🧩\n\n🎯 *Como jogar:*\n• Interprete o que os emojis representam juntos\n• Várias respostas corretas são aceitas\n• Dificuldade aumenta a cada rodada\n• Acertos consecutivos = combo de bônus!\n⏰ • Você tem 45 segundos para cada resposta\n\n🧩 *Exemplos:*\n• 🍕🇮🇹 = \"pizza italiana\"\n• 🐱❤️ = \"gato carinhoso\"\n• 🌙⭐ = \"noite estrelada\"\n• 🦅🗽🇺🇸 = \"estatua da liberdade\"\n\n💰 *Recompensas:*\n• Base: 15 gold\n• Fácil: +0, Médio: +5, Difícil: +10, Expert: +20\n• Multiplicador: até 4x por acertos consecutivos\n\n🎮 *Uso:* " + (_0x329b4b + _0x12cc9e) + " <valor>\n📝 *Exemplo:* " + (_0x329b4b + _0x12cc9e) + " 25\n💡 *Mínimo:* 10 gold\n\n💭 *Dica:* Pense fora da caixa!");
    }
    const _0x367b33 = parseInt(_0x300088);
    const _0x168e5c = _0x3b6198.getBalance(_0x2bf085, _0x507055);
    if (_0x168e5c < _0x367b33) {
      return _0x276411("❌ Você não tem gold suficiente!\n💰 Seu saldo: " + _0x168e5c + " " + _0x3fe780.emojis.gold + "\n💸 Aposta: " + _0x367b33 + " " + _0x3fe780.emojis.gold);
    }
    if (_0x367b33 < 10) {
      return _0x276411("❌ Aposta mínima: 10 " + _0x3fe780.emojis.gold);
    }
    try {
      if (!_0x264224.initialized) {
        await _0x264224.ensureInitialized();
      }
      const _0x59801e = {
        conn: _0x14b96f,
        info: _0xb22104,
        from: _0x2bf085,
        sender: _0x507055,
        sender2: _0x230b41,
        goldSystem: _0x3b6198,
        configsGold: _0x3fe780,
        BANCOP: _0x36caf9,
        dataGp: _0x1c9f83,
        reply: _0x276411,
        mention: _0x5ad400,
        EmojiBot: _0x4f5a11
      };
      let _0x6fbfad = _0x264224.getRegisteredGame("combine_emojis");
      if (!_0x6fbfad) {
        _0x264224.registerDefaultGames();
        _0x6fbfad = _0x264224.getRegisteredGame("combine_emojis");
      }
      if (!_0x6fbfad) {
        return _0x276411("❌ Sistema de jogos indisponível no momento. Tente novamente em alguns segundos.");
      }
      _0x3b6198.removeGold(_0x2bf085, _0x507055, _0x367b33);
      const _0x5be668 = await _0x6fbfad.createGame(_0x59801e, _0x507055, _0x367b33);
      if (!_0x5be668.success) {
        _0x3b6198.addGold(_0x2bf085, _0x507055, _0x367b33);
        return _0x276411("❌ Erro ao criar jogo: " + _0x5be668.message);
      }
      const _0x497b78 = _0x5be668.gameData;
      const _0x25a504 = _0x497b78.currentCombination;
      const _0x16e78c = "🧩 *COMBINE OS EMOJIS* 🧩\n\n👤 *Jogador:* @" + _0x230b41 + "\n🎯 *Rodada:* 1\n📊 *Dificuldade:* " + _0x25a504.difficulty + "\n💰 *Aposta:* " + _0x367b33 + " " + _0x3fe780.emojis.gold + "\n🔥 *Acertos consecutivos:* 0\n✨ *Multiplicador:* 1.0x\n\n🧩 *Combine estes emojis:*\n" + _0x25a504.emojis + "\n\n❓ *O que estes emojis representam juntos?*\n⏱️ *Tempo:* 45 segundos\n\n💡 *Digite sua resposta ou \"desistir\" para sair*";
      _0x5ad400(_0x16e78c);
      return true;
    } catch (_0x2fc3ad) {
      console.error("❌ Erro no jogo Combine Emojis:", _0x2fc3ad);
      _0x3b6198.addGold(_0x2bf085, _0x507055, _0x367b33);
      return _0x276411("❌ Erro interno do jogo. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "sequenciagold",
  'aliases': ["seq", "sequence"],
  'category': "economia",
  'description': "Jogo de descobrir padrões matemáticos",
  'longDescription': "Descubra o próximo número em sequências matemáticas: Fibonacci, números primos, potências e mais. Acertos consecutivos ativam multiplicador de bônus!",
  'usage': "sequencia <valor>",
  'example': "sequencia 50\nsequencia 25",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': _0x2f6751,
  'requirements': {},
  'execute': async ({
    conn: _0x3a5ee6,
    info: _0x362074,
    from: _0x1b68a2,
    sender: _0x18cfd1,
    sender2: _0x4b9494,
    q: _0x520a90,
    args: _0xdcd849,
    isGroup: _0x2c5eff,
    reply: _0x362573,
    mention: _0x6759c8,
    BANCOP: _0x922585,
    dataGp: _0x3aace7,
    goldSystem: _0x450a03,
    configsGold: _0x20f781,
    EmojiBot: _0x1a1dec,
    command: _0x9e7fce,
    prefix: _0x220eff,
    gamesSystem: _0x224c23
  }) => {
    if (!_0x224c23) {
      return _0x362573("❌ Sistema de jogos não disponível. Contacte um administrador.");
    }
    if (!_0x3aace7[0]?.["sistemgold"] && !_0x3aace7[0]?.["jogos"]) {
      return _0x362573("❌ Este comando requer o sistema gold ou jogos ativo.\nPeça para um administrador ativar com !sistemgold on ou !jogos on");
    }
    if (_0x224c23.gameExists("sequencia_misteriosa", _0x1b68a2, _0x18cfd1)) {
      return _0x362573("🧠 Você já tem um jogo de Sequência Misteriosa ativo!\nDigite o próximo número da sequência ou \"desistir\".");
    }
    if (!_0x520a90 || isNaN(_0x520a90) || parseInt(_0x520a90) <= 0) {
      return _0x362573("🧠 *SEQUÊNCIA MISTERIOSA* 🧠\n\n🎯 *Como jogar:*\n• Descubra o padrão matemático\n• Digite o próximo número da sequência\n• Acertos consecutivos = multiplicador de bônus!\n• Dificuldade aumenta a cada 3 rodadas\n⏰ • Você tem 60 segundos para cada resposta\n\n🧮 *Tipos de sequência:*\n• Fácil: Aritmética, Geométrica\n• Médio: Fibonacci, Quadrados, Cubos\n• Difícil: Primos, Triangular, Potências\n• Expert: Factorial, Catalan, Lucas\n\n💰 *Recompensas:*\n• Base: 10 gold + 2 por rodada\n• Multiplicador: até 5x por acertos consecutivos\n• Quanto mais longe, mais gold!\n\n🎮 *Uso:* " + (_0x220eff + _0x9e7fce) + " <valor>\n📝 *Exemplo:* " + (_0x220eff + _0x9e7fce) + " 50\n💡 *Mínimo:* 10 gold\n\n🎲 *Estratégia:* Matemática é sua amiga!");
    }
    const _0x37c647 = parseInt(_0x520a90);
    const _0x2a912a = _0x450a03.getBalance(_0x1b68a2, _0x18cfd1);
    if (_0x2a912a < _0x37c647) {
      return _0x362573("❌ Você não tem gold suficiente!\n💰 Seu saldo: " + _0x2a912a + " " + _0x20f781.emojis.gold + "\n💸 Aposta: " + _0x37c647 + " " + _0x20f781.emojis.gold);
    }
    if (_0x37c647 < 10) {
      return _0x362573("❌ Aposta mínima: 10 " + _0x20f781.emojis.gold);
    }
    try {
      if (!_0x224c23.initialized) {
        await _0x224c23.ensureInitialized();
      }
      const _0x58518c = {
        conn: _0x3a5ee6,
        info: _0x362074,
        from: _0x1b68a2,
        sender: _0x18cfd1,
        sender2: _0x4b9494,
        goldSystem: _0x450a03,
        configsGold: _0x20f781,
        BANCOP: _0x922585,
        dataGp: _0x3aace7,
        reply: _0x362573,
        mention: _0x6759c8,
        EmojiBot: _0x1a1dec
      };
      let _0x16ebff = _0x224c23.getRegisteredGame("sequencia_misteriosa");
      if (!_0x16ebff) {
        _0x224c23.registerDefaultGames();
        _0x16ebff = _0x224c23.getRegisteredGame("sequencia_misteriosa");
      }
      if (!_0x16ebff) {
        return _0x362573("❌ Sistema de jogos indisponível no momento. Tente novamente em alguns segundos.");
      }
      _0x450a03.removeGold(_0x1b68a2, _0x18cfd1, _0x37c647);
      const _0x3047d0 = await _0x16ebff.createGame(_0x58518c, _0x18cfd1, _0x37c647);
      if (!_0x3047d0.success) {
        _0x450a03.addGold(_0x1b68a2, _0x18cfd1, _0x37c647);
        return _0x362573("❌ Erro ao criar jogo: " + _0x3047d0.message);
      }
      const _0x2e731c = _0x3047d0.gameData;
      const _0x1c3eea = _0x2e731c.currentSequence.sequence;
      const _0x468bf0 = "🧠 *SEQUÊNCIA MISTERIOSA* 🧠\n\n👤 *Jogador:* @" + _0x4b9494 + "\n🎯 *Rodada:* 1\n📊 *Dificuldade:* " + _0x2e731c.currentSequence.difficulty + "\n💰 *Aposta:* " + _0x37c647 + " " + _0x20f781.emojis.gold + "\n🔥 *Acertos consecutivos:* 0\n✨ *Multiplicador:* 1.0x\n\n🔢 *Sequência:*\n" + _0x1c3eea.join(" → ") + " → ?\n\n❓ *Qual é o próximo número?*\n⏱️ *Tempo:* 60 segundos\n\n💡 *Digite apenas o número ou \"desistir\" para sair*";
      _0x6759c8(_0x468bf0);
      return true;
    } catch (_0x46e2a7) {
      console.error("❌ Erro no jogo Sequência Misteriosa:", _0x46e2a7);
      _0x450a03.addGold(_0x1b68a2, _0x18cfd1, _0x37c647);
      return _0x362573("❌ Erro interno do jogo. Tente novamente mais tarde.");
    }
  }
}, {
  'name': ["eco", "repeat"],
  'aliases': ["test", "echo"],
  'category': "utilidade",
  'description': "Comando para testar argumentos",
  'longDescription': "Comando simples que repete exatamente o que você digitar. Usado para testar se os argumentos estão sendo capturados corretamente.",
  'usage': "teste <mensagem>",
  'example': "• teste olá mundo\n• eco esta é uma mensagem de teste\n• repeat 123 456 789",
  'menu': "utilidade",
  'menuSection': "Teste",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    q: _0x23b32c,
    sender2: _0x1a8285,
    prefix: _0x400b16,
    command: _0x3f47e1,
    reply: _0x2a4471
  }) => {
    if (!_0x23b32c || _0x23b32c.trim() === '') {
      return _0x2a4471("❌ *Uso incorreto!*\n\n📝 *Como usar:*\n`" + _0x400b16 + _0x3f47e1 + " <sua mensagem>`\n\n💡 *Exemplos:*\n• `" + _0x400b16 + _0x3f47e1 + " olá mundo`\n• `" + _0x400b16 + _0x3f47e1 + " teste com espaços`\n• `" + _0x400b16 + _0x3f47e1 + " 123 456 789`\n\n🎯 *Este comando repete exatamente o que você digitar*");
    }
    _0x2a4471("✅ *TESTE DE ARGUMENTOS*\n\n👤 *Usuário:* @" + _0x1a8285 + "\n🔤 *Comando usado:* " + _0x3f47e1 + "\n📝 *Argumentos capturados:*\n\n```\n\"" + _0x23b32c + "\"\n```\n\n📊 *Informações técnicas:*\n• *Tamanho:* " + _0x23b32c.length + " caracteres\n• *Palavras:* " + _0x23b32c.split(" ").length + "\n• *Primeiro argumento:* \"" + _0x23b32c.split(" ")[0] + "\"\n• *Último argumento:* \"" + _0x23b32c.split(" ").slice(-1)[0] + "\"\n\n🎯 *Status:* Argumentos capturados com sucesso!");
    return true;
  }
}, {
  'name': "damas",
  'aliases': ["damasgold", "checkers"],
  'category': "jogos",
  'description': "Inicia um jogo de damas contra outro membro",
  'longDescription': "Inicia um jogo de damas contra outro membro do grupo. Pode ser jogado sem apostas ou com apostas em gold (se o sistema estiver ativo).",
  'usage': "damas @usuário [valor_aposta]",
  'example': "damas @membro\ndamas @membro 100",
  'menu': "jogos",
  'menuSection': "Estratégia",
  'permissions': _0x22594e,
  'requirements': _0x21e120,
  'execute': async ({
    conn: _0x9813cb,
    info: _0xbf36df,
    from: _0x1a53fc,
    sender: _0x5355d5,
    sender2: _0x2168f6,
    menc_os2: _0x90a338,
    botNumber: _0x5ac7c8,
    dataGp: _0x221e7e,
    goldSystem: _0x208f4d,
    configsGold: _0x419509,
    isGroup: _0x3074bd,
    reply: _0x2b3a3c,
    mention: _0x2f4421,
    q: _0x2e6eed,
    args: _0x28801e,
    BANCOP: _0x443f2e,
    groupMembers: _0x38b25e,
    gamesSystem: _0x35ecda
  }) => {
    try {
      if (!_0x35ecda) {
        return _0x2b3a3c("❌ Sistema de jogos não disponível. Contacte um administrador.");
      }
      if (!_0x3074bd) {
        return _0x2b3a3c("❌ Este comando só funciona em grupos!");
      }
      if (!_0x90a338) {
        return _0x2b3a3c("❌ Marque alguém com @pessoa para desafiar!");
      }
      if (!_0x35ecda.initialized) {
        console.log("🔧 Inicializando gamesSystem...");
        await _0x35ecda.ensureInitialized();
      }
      if (_0x90a338 === _0x5355d5) {
        return _0x2b3a3c("❌ Você não pode jogar contra você mesmo!");
      }
      if (_0x90a338 === _0x5ac7c8) {
        return _0x2b3a3c("❌ Não posso jogar damas!");
      }
      if (_0x38b25e && Array.isArray(_0x38b25e)) {
        const _0x53b242 = _0x38b25e.some(_0x2c5520 => _0x2c5520.id === _0x90a338);
        if (!_0x53b242) {
          return _0x2b3a3c("❌ O usuário marcado não está neste grupo!");
        }
      }
      if (_0x90a338.includes(':') || _0x90a338.length < 10) {
        return _0x2b3a3c("❌ Não é possível jogar contra bots ou contas inválidas!");
      }
      const _0x224d72 = "lastDamasGame_" + _0x5355d5;
      const _0x2347fd = Date.now();
      const _0x15e7ac = global[_0x224d72] || 0;
      if (_0x2347fd - _0x15e7ac < 10000) {
        const _0x2f9aae = Math.ceil((10000 - (_0x2347fd - _0x15e7ac)) / 1000);
        return _0x2b3a3c("⏰ Aguarde " + _0x2f9aae + " segundos antes de criar outro jogo de damas!");
      }
      let _0x370ffd = 0;
      let _0x5393b3 = 0;
      if (_0x28801e[1]) {
        const _0x544441 = _0x28801e[1].replace(/[^\d]/g, '');
        _0x5393b3 = parseInt(_0x544441);
        if (isNaN(_0x5393b3) || _0x5393b3 < 0) {
          return _0x2b3a3c("❌ Valor da aposta deve ser um número válido!");
        }
        if (_0x5393b3 > 0 && _0x5393b3 < 1) {
          return _0x2b3a3c("❌ Se quiser apostar, o valor mínimo é 1 gold!");
        }
      }
      if (_0x5393b3 > 0) {
        if (!_0x221e7e[0]?.["sistemgold"]) {
          return _0x2b3a3c("❌ Para apostar gold, o sistema precisa estar ativo!\n💡 Use o comando sem valor para jogar sem apostas.");
        }
        _0x370ffd = _0x5393b3;
        const _0x1966d7 = _0x419509?.["limites"]?.["minAposta"] || 10;
        const _0x391706 = _0x419509?.["limites"]?.["maxAposta"] || 1000;
        if (_0x370ffd < _0x1966d7) {
          return _0x2b3a3c("❌ Aposta mínima: " + _0x1966d7 + " " + (_0x419509?.["emojis"]?.["gold"] || "gold"));
        }
        if (_0x370ffd > _0x391706) {
          return _0x2b3a3c("❌ Aposta máxima: " + _0x391706 + " " + (_0x419509?.["emojis"]?.["gold"] || "gold"));
        }
        const _0x479e83 = _0x208f4d.getBalance(_0x1a53fc, _0x5355d5);
        const _0x374f5f = _0x208f4d.getBalance(_0x1a53fc, _0x90a338);
        if (_0x479e83 < _0x370ffd) {
          return _0x2b3a3c("❌ Você precisa ter pelo menos " + _0x370ffd + " " + (_0x419509?.["emojis"]?.["gold"] || "gold") + " para esta aposta!\n💰 Seu saldo: " + _0x479e83 + " " + (_0x419509?.["emojis"]?.["gold"] || "gold"));
        }
        if (_0x374f5f < _0x370ffd) {
          return _0x2b3a3c("❌ @" + _0x90a338.split('@')[0] + " não tem " + (_0x419509?.["emojis"]?.["gold"] || "gold") + " suficiente para aceitar esta aposta!\n💰 Saldo dele: " + _0x374f5f + " / " + _0x370ffd + " " + (_0x419509?.["emojis"]?.["gold"] || "gold"));
        }
        _0x208f4d.removeGold(_0x1a53fc, _0x5355d5, _0x370ffd);
        _0x208f4d.removeGold(_0x1a53fc, _0x90a338, _0x370ffd);
      }
      const _0x4d30ba = {
        conn: _0x9813cb,
        info: _0xbf36df,
        from: _0x1a53fc,
        sender: _0x5355d5,
        sender2: _0x2168f6,
        goldSystem: _0x208f4d,
        configsGold: _0x419509,
        BANCOP: _0x443f2e,
        dataGp: _0x221e7e,
        reply: _0x2b3a3c,
        mention: _0x2f4421
      };
      let _0x20d949 = _0x35ecda.getRegisteredGame("damas");
      if (!_0x20d949) {
        console.log("⚠️ Damas não encontrado, tentando registrar...");
        _0x35ecda.registerDefaultGames();
        _0x20d949 = _0x35ecda.getRegisteredGame("damas");
      }
      if (!_0x20d949) {
        console.error("❌ Não foi possível obter handler do Damas");
        if (_0x370ffd > 0) {
          _0x208f4d.addGold(_0x1a53fc, _0x5355d5, _0x370ffd);
          _0x208f4d.addGold(_0x1a53fc, _0x90a338, _0x370ffd);
        }
        return _0x2b3a3c("❌ Sistema de jogos indisponível no momento. Tente novamente em alguns segundos.");
      }
      const _0x1f2bea = await _0x20d949.createGame(_0x4d30ba, _0x5355d5, _0x90a338, _0x370ffd);
      if (!_0x1f2bea.success) {
        if (_0x370ffd > 0) {
          _0x208f4d.addGold(_0x1a53fc, _0x5355d5, _0x370ffd);
          _0x208f4d.addGold(_0x1a53fc, _0x90a338, _0x370ffd);
        }
        if (_0x1f2bea.message.includes("jogo ativo")) {
          return _0x2b3a3c("❌ " + _0x1f2bea.message + "\n\n🛠️ *Soluções disponíveis:*\n• Use `statusdamas` para verificar jogos ativos\n• Um admin pode usar `resetdamas` para resetar\n• Aguarde o jogo atual terminar automaticamente");
        }
        return _0x2b3a3c("❌ Erro ao criar jogo: " + _0x1f2bea.message);
      }
      global[_0x224d72] = _0x2347fd;
      const _0x2bedcb = "🏁 *DESAFIO DE DAMAS* 🏁\n\n⚔️ *JOGADORES:*\n🔴 *Desafiante:* @" + _0x2168f6 + "\n🔵 *Desafiado:* @" + _0x90a338.split('@')[0] + "\n\n💰 *APOSTA:* " + (_0x370ffd > 0 ? _0x370ffd + " " + (_0x419509?.["emojis"]?.["gold"] || "gold") + " cada (total: " + _0x370ffd * 2 + ')' : "Jogo sem apostas") + "\n\n📋 *REGRAS:*\n• Tabuleiro 8x8 com 12 peças cada\n• 🔴 Vermelho (" + _0x2168f6 + ") vs 🔵 Azul (" + _0x90a338.split('@')[0] + ")\n• Peças viram 👑 damas na última linha\n• Capturas são obrigatórias\n• ⏰ 5 minutos por jogada\n\n⏳ *@" + _0x90a338.split('@')[0] + "*, você tem *60 segundos* para responder:\n\n✅ *Para aceitar:* aceitar, aceito, sim, s\n❌ *Para recusar:* recusar, recuso, não, n\n\n" + (_0x370ffd > 0 ? "💡 *Se recusar, o gold será devolvido automaticamente.*" : '');
      const _0x5c87a8 = {
        text: _0x2bedcb,
        mentions: [_0x5355d5, _0x90a338]
      };
      const {
        key: _0x4bcbf7
      } = await _0x9813cb.sendMessage(_0x1a53fc, _0x5c87a8);
      const _0x170c44 = _0x35ecda.getGame("damas", _0x1a53fc, _0x5355d5);
      if (_0x170c44) {
        _0x170c44.data.messageKey = _0x4bcbf7;
        _0x35ecda.updateGame("damas", _0x1a53fc, _0x5355d5, _0x170c44.data);
      }
      return true;
    } catch (_0x3dc007) {
      console.error("❌ Erro no comando damas:", _0x3dc007);
      return _0x2b3a3c("❌ Erro interno. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "statusdamas",
  'aliases': ["damasstatus"],
  'category': "jogos",
  'description': "Verifica status dos jogos de damas no grupo",
  'longDescription': "Mostra informações sobre jogos de damas ativos no grupo.",
  'usage': "statusdamas",
  'example': "statusdamas",
  'menu': "jogos",
  'menuSection': "Informações",
  'permissions': _0x1499fa,
  'execute': async ({
    conn: _0x449cab,
    from: _0x44fbaf,
    sender: _0x50130d,
    isGroup: _0x1132fb,
    reply: _0x3eb36f,
    BANCOP: _0x409273
  }) => {
    try {
      if (!_0x1132fb) {
        return _0x3eb36f("❌ Este comando só funciona em grupos!");
      }
      const _0xd6be9d = _0x409273.prepare("\nSELECT * FROM games_gold \nWHERE game_type = 'damas' AND group_id = ?\nORDER BY timestamp DESC\n").all(_0x44fbaf);
      if (_0xd6be9d.length === 0) {
        return _0x3eb36f("📊 *STATUS DE DAMAS* 📊\n\n🎮 *Nenhum jogo ativo no momento*\n✅ Sistema funcionando normalmente\n💡 Use: `damas @pessoa` para iniciar um jogo");
      }
      let _0x3c8f58 = "📊 *STATUS DE DAMAS* 📊\n\n";
      let _0x26fec8 = 0;
      let _0x4d85a1 = 0;
      let _0x772ae9 = 0;
      const _0x58a034 = Math.floor(Date.now() / 1000);
      for (const _0x3e15f2 of _0xd6be9d) {
        try {
          const _0x228861 = JSON.parse(_0x3e15f2.game_data);
          const _0x5cb8d0 = _0x58a034 - _0x3e15f2.timestamp;
          const _0xc124e3 = Math.floor(_0x5cb8d0 / 3600);
          const _0x1e5be9 = Math.floor(_0x5cb8d0 / 60);
          const _0x3fa664 = _0x228861.player1.split('@')[0];
          const _0x29774e = _0x228861.player2.split('@')[0];
          if (_0x228861.gameActive && _0x228861.accepted) {
            if (_0x5cb8d0 > 7200) {
              _0x772ae9++;
              _0x3c8f58 += "🚨 *Órfão:* " + _0x3fa664 + " vs " + _0x29774e + " (" + _0xc124e3 + "h)\n";
            } else {
              _0x26fec8++;
              _0x3c8f58 += "🎮 *Ativo:* " + _0x3fa664 + " vs " + _0x29774e + " (" + _0x1e5be9 + "min)\n";
            }
          } else {
            if (!_0x228861.accepted) {
              if (_0x5cb8d0 > 120) {
                _0x772ae9++;
                _0x3c8f58 += "⚠️ *Não aceito:* " + _0x3fa664 + " → " + _0x29774e + " (" + _0x1e5be9 + "min)\n";
              } else {
                _0x4d85a1++;
                _0x3c8f58 += "⏳ *Aguardando:* " + _0x3fa664 + " → " + _0x29774e + " (" + _0x1e5be9 + "min)\n";
              }
            } else {
              _0x772ae9++;
              _0x3c8f58 += "❓ *Estado estranho:* " + _0x3fa664 + " vs " + _0x29774e + "\n";
            }
          }
        } catch (_0x1cdf5f) {
          _0x772ae9++;
          _0x3c8f58 += "💥 *Dados corrompidos*\n";
        }
      }
      _0x3c8f58 += "\n📈 *RESUMO:*\n";
      _0x3c8f58 += "🎮 Jogos ativos: *" + _0x26fec8 + "*\n";
      _0x3c8f58 += "⏳ Aguardando resposta: *" + _0x4d85a1 + "*\n";
      _0x3c8f58 += "⚠️ Órfãos/problemas: *" + _0x772ae9 + "*\n";
      if (_0x772ae9 > 0) {
        _0x3c8f58 += "\n🛠️ *Há órfãos detectados!*\nUm admin pode usar: `resetdamas`";
      }
      const _0x306982 = {
        text: _0x3c8f58,
        mentions: [_0x50130d]
      };
      await _0x449cab.sendMessage(_0x44fbaf, _0x306982);
      return true;
    } catch (_0xb4af1a) {
      console.error("❌ Erro no statusdamas:", _0xb4af1a);
      return _0x3eb36f("❌ Erro interno. Tente novamente.");
    }
  }
}, {
  'name': "resetdamas",
  'aliases': ["limpadamas"],
  'category': "admin",
  'description': "Reset de emergência para jogos de damas órfãos",
  'longDescription': "Remove TODOS os jogos de damas órfãos do grupo. Use apenas em emergências quando há jogos travados.",
  'usage': "resetdamas",
  'example': "resetdamas",
  'menu': "admin",
  'menuSection': "Sistema",
  'permissions': _0x5adc0e,
  'execute': async ({
    conn: _0x2817c3,
    from: _0x36ca95,
    sender: _0x172bae,
    sender2: _0x4c024c,
    isGroup: _0x3b2f7e,
    reply: _0x4028c2,
    gamesSystem: _0x7e6713
  }) => {
    try {
      if (!_0x3b2f7e) {
        return _0x4028c2("❌ Este comando só funciona em grupos!");
      }
      if (!_0x7e6713) {
        return _0x4028c2("❌ Sistema de jogos não disponível. Contacte um administrador.");
      }
      const _0x66a28d = _0x7e6713.db.prepare("\nSELECT COUNT(*) as count FROM games_gold \nWHERE game_type = 'damas' AND group_id = ?\n").get(_0x36ca95);
      if (!_0x66a28d || _0x66a28d.count === 0) {
        return _0x4028c2("🧹 *RESET DE DAMAS* 🧹\n\n✅ *Nenhum jogo encontrado para limpar*\n🎮 Sistema já está limpo!");
      }
      const _0x4fc52d = _0x7e6713.forceCleanGroup(_0x36ca95);
      const _0x16b15c = "🚨 *RESET DE EMERGÊNCIA EXECUTADO* 🚨\n\n🧹 *LIMPEZA REALIZADA:*\n🗑️ *Jogos removidos:* " + _0x4fc52d.games + "\n⏰ *Timers limpos:* " + _0x4fc52d.timers + "\n\n✅ *Sistema de damas resetado com sucesso!*\n🎮 Todos podem criar novos jogos normalmente agora.\n\n👤 *Executado por:* @" + _0x4c024c + "\n🕐 *Horário:* " + new Date().toLocaleString("pt-BR") + "\n\n💡 *Nota:* Este comando só deve ser usado em emergências.";
      const _0x539393 = {
        text: _0x16b15c,
        mentions: [_0x172bae]
      };
      await _0x2817c3.sendMessage(_0x36ca95, _0x539393);
      console.log("🚨 [DAMAS] Reset executado por " + _0x4c024c + " no grupo " + _0x36ca95 + " - " + _0x4fc52d.games + " jogo(s) e " + _0x4fc52d.timers + " timer(s) removidos");
      return true;
    } catch (_0xa4e712) {
      console.error("❌ Erro no resetdamas:", _0xa4e712);
      return _0x4028c2("❌ Erro interno durante o reset. Tente novamente.");
    }
  }
}, {
  'name': "caixamisteriosagold",
  'aliases': ["caixagold"],
  'category': "economia",
  'description': "Jogo de sorte com 9 caixas misteriosas",
  'longDescription': "Aposte gold e escolha caixas numeradas. Cada caixa pode conter prêmios ou bombas. Você pode abrir todas as caixas seguras!",
  'usage': "caixamisteriosa <valor>",
  'example': "caixamisteriosa 50\ncaixamisteriosa 100",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': _0x54f32b,
  'requirements': {},
  'execute': async ({
    conn: _0x43616c,
    info: _0x2be164,
    from: _0x2b1e34,
    sender: _0x313b8f,
    sender2: _0x4946ce,
    q: _0x43cbcf,
    args: _0x3e6acf,
    isGroup: _0x284514,
    reply: _0x553107,
    mention: _0xe16bde,
    BANCOP: _0x5be406,
    dataGp: _0x5385a6,
    goldSystem: _0x4bfcaf,
    configsGold: _0x3235ee,
    EmojiBot: _0x221875,
    command: _0xd9b21,
    prefix: _0x398f81,
    gamesSystem: _0x18d1f3
  }) => {
    if (!_0x18d1f3) {
      return _0x553107("❌ Sistema de jogos não disponível. Contacte um administrador.");
    }
    if (!_0x5385a6[0]?.["sistemgold"]) {
      return _0x553107("❌ Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    const _0x413d18 = _0x4bfcaf.getChances(_0x2b1e34, _0x313b8f);
    const _0x2b8212 = _0x413d18?.["caixamisteriosa"] || 0;
    const _0x3aeb8c = _0x3235ee.chances?.["caixamisteriosa"] || 5;
    if (_0x2b8212 >= _0x3aeb8c) {
      return _0x553107("⏰ *LIMITE DIÁRIO ATINGIDO!*\n\n🎁 Você já jogou *" + _0x2b8212 + '/' + _0x3aeb8c + "* vezes hoje\n⭐ Limite diário: " + _0x3aeb8c + " partidas\n🔄 Reset automático: Todo dia às 00:00\n\n💡 Volte amanhã para jogar novamente!");
    }
    if (_0x18d1f3.gameExists("caixa_misteriosa", _0x2b1e34, _0x313b8f)) {
      return _0x553107("🎁 Você já tem um jogo de Caixa Misteriosa ativo!\nDigite um número (1-9), \"parar\" ou \"sair\".");
    }
    if (!_0x43cbcf || isNaN(_0x43cbcf) || parseInt(_0x43cbcf) <= 0) {
      return _0x553107("💰 *CAIXA MISTERIOSA* 💰\n\n🎁 *Como jogar:*\n• 9 caixas numeradas (1-9)\n• Cada caixa pode ter prêmios ou bombas 💣\n• Você pode abrir TODAS as caixas seguras\n• Pare quando quiser para guardar os prêmios!\n• Se pegar uma bomba, perde tudo\n⏰ • Você tem 60 segundos para CADA escolha!\n\n🎯 *Sistema inteligente:*\n• 1-5 bombas aleatórias por jogo\n• Menos bombas = mais caixas seguras\n• Mais bombas = prêmios maiores por caixa\n• Matemática justa: 9 - bombas = caixas disponíveis\n\n🎮 *Uso:* " + (_0x398f81 + _0xd9b21) + " <valor>\n📝 *Exemplo:* " + (_0x398f81 + _0xd9b21) + " 50\n💡 *Limite:* " + (_0x3235ee.limites?.["caixaMisteriosa"]?.["minAposta"] || 10) + " a " + (_0x3235ee.limites?.["caixaMisteriosa"]?.["maxAposta"] || 100) + " gold\n\n⭐ *Chances hoje:* " + _0x2b8212 + '/' + _0x3aeb8c);
    }
    const _0x5b79e2 = parseInt(_0x43cbcf);
    const _0x1fb60d = _0x4bfcaf.getBalance(_0x2b1e34, _0x313b8f);
    const _0x3510ef = _0x3235ee.limites?.["caixaMisteriosa"]?.["minAposta"] || _0x3235ee.caixamisteriosa?.["minAposta"] || _0x3235ee.limites?.["minAposta"] || 10;
    const _0x112c74 = _0x3235ee.limites?.["caixaMisteriosa"]?.["maxAposta"] || _0x3235ee.caixamisteriosa?.["maxAposta"] || _0x3235ee.limites?.["maxAposta"] || 100;
    if (_0x1fb60d < _0x5b79e2) {
      return _0x553107("❌ Você não tem gold suficiente!\n💰 Seu saldo: " + _0x1fb60d + " " + _0x3235ee.emojis.gold + "\n💸 Aposta: " + _0x5b79e2 + " " + _0x3235ee.emojis.gold);
    }
    if (_0x5b79e2 < _0x3510ef) {
      return _0x553107("❌ Aposta mínima: " + _0x3510ef + " " + _0x3235ee.emojis.gold);
    }
    if (_0x5b79e2 > _0x112c74) {
      return _0x553107("❌ Aposta máxima: " + _0x112c74 + " " + _0x3235ee.emojis.gold);
    }
    const _0x1e16a5 = _0x18d1f3.getRegisteredGame("caixa_misteriosa");
    if (_0x1e16a5 && _0x1e16a5.verificarCooldown(_0x2b1e34, _0x313b8f, _0x3235ee)) {
      return _0x553107("⏰ Aguarde " + (_0x3235ee.caixamisteriosa?.["tempo"]?.["cooldownMinutos"] || 2) + " minutos antes de jogar novamente!");
    }
    try {
      if (!_0x18d1f3.initialized) {
        console.log("🔧 Inicializando gamesSystem...");
        await _0x18d1f3.ensureInitialized();
      }
      const _0x64a572 = {
        conn: _0x43616c,
        info: _0x2be164,
        from: _0x2b1e34,
        sender: _0x313b8f,
        sender2: _0x4946ce,
        goldSystem: _0x4bfcaf,
        configsGold: _0x3235ee,
        BANCOP: _0x5be406,
        dataGp: _0x5385a6,
        reply: _0x553107,
        mention: _0xe16bde,
        EmojiBot: _0x221875
      };
      let _0x16ae84 = _0x18d1f3.getRegisteredGame("caixa_misteriosa");
      if (!_0x16ae84) {
        console.log("⚠️ BoxGold não encontrado, tentando registrar...");
        _0x18d1f3.registerDefaultGames();
        _0x16ae84 = _0x18d1f3.getRegisteredGame("caixa_misteriosa");
      }
      if (!_0x16ae84) {
        console.error("❌ Não foi possível obter handler da Caixa Misteriosa");
        return _0x553107("❌ Sistema de jogos indisponível no momento. Tente novamente em alguns segundos.");
      }
      const _0x1f4f49 = await _0x16ae84.createGame(_0x64a572, _0x5b79e2);
      if (!_0x1f4f49.success) {
        return _0x553107("❌ Erro ao criar jogo: " + _0x1f4f49.message);
      }
      const _0x48adb1 = {
        ..._0x413d18
      };
      _0x48adb1.caixamisteriosa = (_0x48adb1.caixamisteriosa || 0) + 1;
      _0x4bfcaf.updateChances(_0x2b1e34, _0x313b8f, _0x48adb1);
      const _0x2687cc = _0x16ae84.getDificuldadeInfo(_0x1f4f49.quantidadeBombas, _0x3235ee);
      const _0x3af70f = _0x1f4f49.temPremioRaro ? "🏆 *JACKPOT RARO* presente!" : "🎁 Prêmios normais";
      const {
        key: _0x35a717
      } = await _0x43616c.sendMessage(_0x2b1e34, {
        'text': "╭━━━━━━━━━━━━━━━━━╮\n┃ " + (_0x3235ee.emojis?.["caixamisteriosa"] || '🎁') + " *CAIXA MISTERIOSA* " + (_0x3235ee.emojis?.["caixamisteriosa"] || '🎁') + "\n╰━━━━━━━━━━━━━━━━━╯\n\n🎯 *Jogador:* @" + _0x4946ce + "\n💰 *Aposta:* " + _0x5b79e2 + " " + _0x3235ee.emojis.gold + "\n🎲 *Dificuldade:* " + _0x2687cc.texto + "\n📊 *" + _0x2687cc.lucro + "*\n💣 *Bombas:* " + _0x1f4f49.quantidadeBombas + "\n✅ *Caixas seguras:* " + _0x1f4f49.caixasSeguras + "\n🎰 *Especial:* " + _0x3af70f + "\n⏰ *Tempo por escolha:* " + _0x1f4f49.timeoutSeconds + " segundos\n⭐ *Chances restantes:* " + (_0x3aeb8c - (_0x2b8212 + 1)) + '/' + _0x3aeb8c + "\n💎 *Prêmios coletados:* 0 " + _0x3235ee.emojis.gold + "\n\n╭━ CAIXAS ━╮\n┃ 1️⃣2️⃣3️⃣\n┃ 4️⃣5️⃣6️⃣\n┃ 7️⃣8️⃣9️⃣\n╰━━━━━━━╯\n\n🎲 *Digite um número (1-9) para abrir uma caixa*\n⚠️ *Cuidado! Este jogo tem " + _0x1f4f49.quantidadeBombas + " bomba" + (_0x1f4f49.quantidadeBombas > 1 ? 's' : '') + "* 💣\n✨ *Você pode abrir TODAS as " + _0x1f4f49.caixasSeguras + " caixas seguras!*\n💰 *Digite \"parar\" para coletar prêmios*\n🚪 *Digite \"sair\" para cancelar*\n⏰ *Você tem " + _0x1f4f49.timeoutSeconds + " segundos para cada escolha!*\n\n💡 *Estratégia:* " + (_0x1f4f49.quantidadeBombas >= 4 ? "Risco alto = recompensa alta!" : "Mais bombas = prêmios maiores!"),
        'mentions': [_0x313b8f]
      });
      const _0x152ac5 = _0x18d1f3.getGame("caixa_misteriosa", _0x2b1e34, _0x313b8f);
      if (_0x152ac5) {
        _0x152ac5.data.messageKey = _0x35a717;
        _0x18d1f3.updateGame("caixa_misteriosa", _0x2b1e34, _0x313b8f, _0x152ac5.data);
      }
      return true;
    } catch (_0xae52a9) {
      console.error("❌ Erro no jogo Caixa Misteriosa:", _0xae52a9);
      return _0x553107("❌ Erro interno do jogo. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "proxjogo",
  'aliases': ["prox_jogo", "proximosjogos", "agenda"],
  'category': "futebol",
  'description': "⚽ Mostra os próximos jogos de um time",
  'longDescription': "Consulta a agenda de próximos jogos de qualquer time brasileiro. Mostra data, horário, adversário e competição.",
  'usage': "proxjogo [nome do time]",
  'example': "proxjogo São Paulo\nproxjogo corinthians\nproxjogo palmeiras",
  'menu': "menu",
  'menuSection': "Futebol",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    args: _0x39f5b3,
    reply: _0x37a084,
    axios: _0x59f2f1,
    cheerio: _0x39b8c9
  }) => {
    const _0x2f7cc5 = _0x39f5b3.join(" ");
    if (!_0x2f7cc5) {
      return _0x37a084("⚽ *PRÓXIMOS JOGOS* ⚽\n\n🎯 *Como usar:*\n`!proxjogo [nome do time]`\n\n💡 *Exemplos:*\n• `!proxjogo São Paulo`\n• `!proxjogo Corinthians`\n• `!proxjogo Flamengo`\n\n📋 *Times disponíveis:*\nTodos os times brasileiros das principais divisões");
    }
    try {
      const _0x43538d = {
        "são paulo": "sao-paulo",
        corinthians: "corinthians",
        palmeiras: "palmeiras",
        santos: "santos",
        "américa-mg": "america-mg",
        "atlético-mg": "atletico-mg",
        cruzeiro: "cruzeiro",
        flamengo: "flamengo",
        fluminense: "fluminense",
        botafogo: "botafogo",
        vasco: "vasco",
        internacional: "internacional",
        grêmio: "gremio"
      };
      const _0x208fe0 = _0x2f7cc5.toLowerCase();
      const _0x33db48 = _0x43538d[_0x208fe0] || _0x208fe0.replace(/\s+/g, '-');
      const _0x4ef3a2 = "https://www.placardefutebol.com.br/time/" + encodeURIComponent(_0x33db48) + "/proximos-jogos";
      const _0x5440c = await _0x59f2f1.get(_0x4ef3a2);
      const _0x296628 = _0x39b8c9.load(_0x5440c.data);
      const _0x5f3e75 = [];
      _0x296628("#main .match__lg_card").each((_0x9b5fc5, _0x32ffd8) => {
        if (_0x9b5fc5 >= 5) {
          return;
        }
        const _0x522a4f = _0x296628(_0x32ffd8).find(".match__lg_card--league").text().trim();
        const _0xf65410 = _0x296628(_0x32ffd8).find(".match__lg_card--datetime").text().trim().replace(/\s+/g, " ");
        const _0x5de7c9 = _0x296628(_0x32ffd8).find(".match__lg_card--ht-name").text().trim();
        const _0x29787b = _0x296628(_0x32ffd8).find(".match__lg_card--at-name").text().trim();
        if (_0x522a4f && _0x5de7c9 && _0x29787b) {
          const _0x170a01 = {
            liga: _0x522a4f,
            data: _0xf65410,
            timeCasa: _0x5de7c9,
            timeVisitante: _0x29787b
          };
          _0x5f3e75.push(_0x170a01);
        }
      });
      if (_0x5f3e75.length === 0) {
        return _0x37a084("❌ *Nenhum jogo encontrado para \"" + _0x2f7cc5 + "\"*\n\n💡 Verifique se o nome do time está correto");
      }
      let _0x328133 = "⚽ *PRÓXIMOS JOGOS - " + _0x2f7cc5.toUpperCase() + "* ⚽\n\n";
      _0x5f3e75.forEach((_0x21086d, _0x494a49) => {
        _0x328133 += "🏆 *" + _0x21086d.liga + "*\n";
        _0x328133 += "📅 " + (_0x21086d.data || "Data a confirmar") + "\n";
        _0x328133 += "🆚 " + _0x21086d.timeCasa + " ⚔️ " + _0x21086d.timeVisitante + "\n";
        if (_0x494a49 < _0x5f3e75.length - 1) {
          _0x328133 += "\n" + '─'.repeat(28) + "\n\n";
        }
      });
      _0x37a084(_0x328133);
    } catch (_0x3ecc86) {
      console.error("Erro em proxjogo:", _0x3ecc86);
      _0x37a084("❌ *Erro ao buscar jogos*\n\n🔧 Tente novamente em alguns instantes");
    }
  }
}, {
  'name': "tabelacamp",
  'aliases': ["brasileirao"],
  'category': "futebol",
  'description': "📊 Mostra a tabela do Campeonato Brasileiro",
  'longDescription': "Exibe a classificação atual do Brasileirão Série A com posições, times e pontuação.",
  'usage': "tabela [quantidade de posições]",
  'example': "tabela\ntabela 10\ntabela 4",
  'menu': "menu",
  'menuSection': "Futebol",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    args: _0x381e6c,
    reply: _0x2a0543,
    axios: _0x2afbe3,
    cheerio: _0x1bf348
  }) => {
    const _0x32a737 = parseInt(_0x381e6c[0]) || 10;
    if (_0x32a737 > 20 || _0x32a737 < 1) {
      return _0x2a0543("📊 *TABELA BRASILEIRÃO* 📊\n\n❌ Número inválido! Use entre 1 e 20 posições.\n\n💡 *Exemplo:* `!tabela 10` (mostra top 10)");
    }
    try {
      const _0x3acf06 = await _0x2afbe3.get("https://www.terra.com.br/esportes/futebol/brasileiro-serie-a/tabela/");
      const _0xb84fef = _0x1bf348.load(_0x3acf06.data);
      const _0x1333e6 = [];
      _0xb84fef("tbody tr").each((_0x18a6a4, _0x5d7af4) => {
        const _0x2f3f24 = _0xb84fef(_0x5d7af4).find(".position").text().trim();
        const _0x2d9a7c = _0xb84fef(_0x5d7af4).find(".team-name a").text().replace('>>', '').trim();
        const _0x3c933b = _0xb84fef(_0x5d7af4).find(".points").text().trim();
        if (_0x2f3f24 && _0x2d9a7c && _0x3c933b) {
          _0x1333e6.push({
            'posicao': parseInt(_0x2f3f24),
            'nomeTime': _0x2d9a7c,
            'pontos': parseInt(_0x3c933b)
          });
        }
      });
      if (_0x1333e6.length === 0) {
        return _0x2a0543("❌ *Erro ao carregar tabela*\n\n🔧 Tente novamente em alguns instantes");
      }
      _0x1333e6.sort((_0x4c43cb, _0x5ebb7a) => _0x4c43cb.posicao - _0x5ebb7a.posicao);
      let _0x2ba3ce = "🏆 *BRASILEIRÃO SÉRIE A* 🏆\n\n";
      for (let _0x101c50 = 0; _0x101c50 < Math.min(_0x32a737, _0x1333e6.length); _0x101c50++) {
        const _0x58c9b9 = _0x1333e6[_0x101c50];
        const _0x3e3d3d = _0x101c50 < 4 ? '🟢' : _0x101c50 < 6 ? '🔵' : _0x101c50 < 12 ? '⚪' : _0x101c50 >= 16 ? '🔴' : '🟡';
        const _0x13f41e = _0x58c9b9.nomeTime.length > 20 ? _0x58c9b9.nomeTime.substring(0, 18) + '..' : _0x58c9b9.nomeTime.padEnd(20);
        _0x2ba3ce += _0x3e3d3d + " *" + _0x58c9b9.posicao + "º* " + _0x13f41e + " *" + _0x58c9b9.pontos + "pts*\n";
      }
      _0x2ba3ce += "\n🟢 Libertadores  🔵 Sul-Americana\n🔴 Rebaixamento  ⚪ Meio de tabela";
      _0x2a0543(_0x2ba3ce);
    } catch (_0x9b4ff2) {
      console.error("Erro em tabela:", _0x9b4ff2);
      _0x2a0543("❌ *Erro ao buscar tabela*\n\n🔧 Tente novamente em alguns instantes");
    }
  }
}, {
  'name': "ultimosjogos",
  'aliases': ["ultimos", "resultados", "historico"],
  'category': "futebol",
  'description': "📈 Mostra os últimos resultados de um time",
  'longDescription': "Consulta os resultados dos últimos jogos disputados por qualquer time brasileiro.",
  'usage': "ultimosjogos [nome do time]",
  'example': "ultimosjogos São Paulo\nultimos flamengo",
  'menu': "menu",
  'menuSection': "Futebol",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    args: _0x34aa9b,
    reply: _0x10e7dd,
    axios: _0x5be409,
    cheerio: _0x1c5f7b
  }) => {
    const _0x45893b = _0x34aa9b.join(" ");
    if (!_0x45893b) {
      return _0x10e7dd("📈 *ÚLTIMOS JOGOS* 📈\n\n🎯 *Como usar:*\n`!ultimosjogos [nome do time]`\n\n💡 *Exemplos:*\n• `!ultimosjogos São Paulo`\n• `!ultimos Flamengo`\n• `!resultados Corinthians`");
    }
    try {
      const _0x4397df = {
        "são paulo": "sao-paulo",
        corinthians: "corinthians",
        palmeiras: "palmeiras",
        santos: "santos",
        "américa-mg": "america-mg",
        "atlético-mg": "atletico-mg",
        flamengo: "flamengo",
        fluminense: "fluminense",
        botafogo: "botafogo"
      };
      const _0xec9a79 = _0x45893b.toLowerCase();
      const _0xbcd150 = _0x4397df[_0xec9a79] || _0xec9a79.replace(/\s+/g, '-');
      const _0xd878ba = "https://www.placardefutebol.com.br/time/" + encodeURIComponent(_0xbcd150) + "/ultimos-jogos";
      const _0x3c7ebd = await _0x5be409.get(_0xd878ba);
      const _0x564e3d = _0x1c5f7b.load(_0x3c7ebd.data);
      const _0xb3db7d = [];
      _0x564e3d(".match__lg_card").each((_0x314f3e, _0x521657) => {
        if (_0x314f3e >= 5) {
          return;
        }
        const _0x3b44c4 = _0x564e3d(_0x521657).find(".match__lg_card--league").text().trim();
        const _0x497389 = _0x564e3d(_0x521657).find(".match__lg_card--ht-name.text").text().trim();
        const _0x11e7b6 = _0x564e3d(_0x521657).find(".match__lg_card--at-name.text").text().trim();
        const _0x211f3c = _0x564e3d(_0x521657).find(".match__lg_card--scoreboard b").toArray().map(_0x123659 => _0x564e3d(_0x123659).text().trim()).join(" - ");
        const _0x2aefa3 = _0x564e3d(_0x521657).find(".match__lg_card--date").text().trim();
        if (_0x3b44c4 && _0x497389 && _0x11e7b6) {
          const _0x392031 = {
            competicao: _0x3b44c4,
            timeCasa: _0x497389,
            timeFora: _0x11e7b6,
            placares: _0x211f3c,
            data: _0x2aefa3
          };
          _0xb3db7d.push(_0x392031);
        }
      });
      if (_0xb3db7d.length === 0) {
        return _0x10e7dd("❌ *Nenhum resultado encontrado para \"" + _0x45893b + "\"*\n\n💡 Verifique se o nome do time está correto");
      }
      let _0x29cdf2 = "📈 *ÚLTIMOS JOGOS - " + _0x45893b.toUpperCase() + "* 📈\n\n";
      _0xb3db7d.forEach((_0x243411, _0x5238da) => {
        _0x29cdf2 += "🏆 *" + _0x243411.competicao + "*\n";
        _0x29cdf2 += "⚔️ " + _0x243411.timeCasa + " vs " + _0x243411.timeFora + "\n";
        _0x29cdf2 += "⚽ Placar: *" + (_0x243411.placares || "N/A") + "*\n";
        _0x29cdf2 += "📅 " + (_0x243411.data || "Data não informada") + "\n";
        if (_0x5238da < _0xb3db7d.length - 1) {
          _0x29cdf2 += "\n" + '─'.repeat(28) + "\n\n";
        }
      });
      _0x10e7dd(_0x29cdf2);
    } catch (_0x40d7ce) {
      console.error("Erro em ultimosjogos:", _0x40d7ce);
      _0x10e7dd("❌ *Erro ao buscar resultados*\n\n🔧 Tente novamente em alguns instantes");
    }
  }
}, {
  'name': "placares",
  'aliases': ["jogoshoje", "aovivo", "resultados"],
  'category': "futebol",
  'description': "⚽ Mostra placares dos jogos em andamento",
  'longDescription': "Exibe os placares atualizados dos jogos de futebol que estão acontecendo no momento.",
  'usage': "placares",
  'example': "placares",
  'menu': "menu",
  'menuSection': "Futebol",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    reply: _0x3e9b4b,
    axios: _0x5d1dea,
    cheerio: _0x300cfb
  }) => {
    try {
      const _0x1ce382 = await _0x5d1dea.get("https://www.placardefutebol.com.br/");
      const _0x5835ed = _0x300cfb.load(_0x1ce382.data);
      const _0x507edd = [];
      _0x5835ed(".container.content.trending-box a").each((_0x39665d, _0x24fbf6) => {
        if (_0x39665d >= 8) {
          return;
        }
        const _0x39800d = _0x5835ed(_0x24fbf6).find(".match-card-league-name").text().trim();
        const _0x200d61 = _0x5835ed(_0x24fbf6).find(".team-name .text-right.team_link").text().trim();
        const _0x98c625 = _0x5835ed(_0x24fbf6).find(".team-name .text-left.team_link").text().trim();
        const _0x22a054 = _0x5835ed(_0x24fbf6).find(".match-score h4 span").eq(0).text().trim();
        const _0x3a8b41 = _0x5835ed(_0x24fbf6).find(".match-score h4 span").eq(1).text().trim();
        const _0x2a7fbf = _0x5835ed(_0x24fbf6).find(".status-name").text().trim();
        if (_0x39800d && _0x200d61 && _0x98c625) {
          _0x507edd.push({
            'competicao': _0x39800d,
            'timeCasa': _0x200d61,
            'timeFora': _0x98c625,
            'score1': _0x22a054 || '0',
            'score2': _0x3a8b41 || '0',
            'status': _0x2a7fbf
          });
        }
      });
      if (_0x507edd.length === 0) {
        return _0x3e9b4b("⚽ *PLACARES* ⚽\n\n❌ Nenhum jogo encontrado no momento\n\n🔄 Tente novamente mais tarde");
      }
      let _0x56ae6e = "⚽ *PLACARES EM TEMPO REAL* ⚽\n\n";
      _0x507edd.forEach((_0x278754, _0x6dc3ec) => {
        const _0x4245be = _0x278754.status.includes("Encerrado") ? '🏁' : _0x278754.status.includes("andamento") || _0x278754.status.includes("tempo") ? '🔴' : '⏰';
        _0x56ae6e += _0x4245be + " *" + _0x278754.competicao + "*\n";
        _0x56ae6e += "🏠 " + _0x278754.timeCasa + " *" + _0x278754.score1 + "*\n";
        _0x56ae6e += "✈️ " + _0x278754.timeFora + " *" + _0x278754.score2 + "*\n";
        _0x56ae6e += "📊 " + _0x278754.status + "\n";
        if (_0x6dc3ec < _0x507edd.length - 1) {
          _0x56ae6e += "\n" + '─'.repeat(28) + "\n\n";
        }
      });
      _0x56ae6e += "\n🔴 Ao vivo  🏁 Encerrado  ⏰ Agendado";
      _0x3e9b4b(_0x56ae6e);
    } catch (_0x232ea1) {
      console.error("Erro em placares:", _0x232ea1);
      _0x3e9b4b("❌ *Erro ao buscar placares*\n\n🔧 Tente novamente em alguns instantes");
    }
  }
}, {
  'name': "cooldowncmd",
  'aliases': ["limitarcmd", "cdcmd"],
  'category': "admin",
  'description': "⏰ Define tempo de espera entre usos de comandos",
  'longDescription': "Configure cooldowns para controlar a frequência de uso dos comandos. Previne spam e sobrecarga do bot.",
  'usage': "cooldowncmd [comando] [segundos] [tipo]",
  'example': "cooldowncmd play 60\ncooldowncmd music 30 grupo\ncooldowncmd ai lista",
  'menu': "admin",
  'menuSection': "Limitadores",
  'permissions': _0x3f136b,
  'requirements': {},
  'execute': async ({
    args: _0x3e0068,
    reply: _0x9fbd86,
    prefix: _0x57c3a6,
    BANCOP: _0x3c1bdc,
    ..._0x249262
  }) => {
    const {
      setCooldownComando: _0x36c72c,
      removeCooldownComando: _0x59afa6,
      listarLimitacoes: _0x558e78
    } = require("./commandsManager");
    const [_0xabf5e1, _0x2a2e6f, _0x411e25] = _0x3e0068;
    const _0xe8356b = {
      ..._0x249262
    };
    _0xe8356b.BANCOP = _0x3c1bdc;
    if (_0xabf5e1?.["toLowerCase"]() === "lista" || _0xabf5e1?.["toLowerCase"]() === "list") {
      return _0x9fbd86(_0x558e78("cooldown", _0xe8356b).mensagem);
    }
    if (!_0xabf5e1 || !_0x2a2e6f) {
      return _0x9fbd86("⏰ *SISTEMA DE COOLDOWN* ⏰\n\n🎯 *O que faz?*\nDefine tempo de espera entre usos de comandos\n\n🔧 *Como usar:*\n┌─ `" + _0x57c3a6 + "cooldowncmd [comando] [segundos]`\n├─ `" + _0x57c3a6 + "cooldowncmd [comando] [segundos] [tipo]`\n├─ `" + _0x57c3a6 + "cooldowncmd [comando] off`\n└─ `" + _0x57c3a6 + "cooldowncmd lista`\n\n⚙️ *Tipos de Cooldown:*\n🔸 `individual` - Cada usuário tem seu próprio tempo\n🔸 `grupo` - Todo o grupo espera quando alguém usa\n🔸 `global` - Cooldown em todo o bot (só dono)\n\n💡 *Exemplos Práticos:*\n┌─ `" + _0x57c3a6 + "cooldowncmd play 60`\n│└─ 🕐 Cada usuário espera 1min para usar play\n├─ `" + _0x57c3a6 + "cooldowncmd ytmp4 120 grupo`\n│└─ 🏢 Todo grupo espera 2min após alguém usar\n├─ `" + _0x57c3a6 + "cooldowncmd music off`\n│└─ ❌ Remove cooldown do comando music\n└─ `" + _0x57c3a6 + "cooldowncmd lista`\n └─ 📋 Mostra todos os cooldowns ativos\n\n⏱️ *Tempo:* 1 a 3600 segundos (máx 1 hora)");
    }
    if (_0x2a2e6f?.["toLowerCase"]() === "off" || _0x2a2e6f?.["toLowerCase"]() === "remover") {
      const _0x358d3c = {
        ..._0x249262
      };
      _0x358d3c.BANCOP = _0x3c1bdc;
      const _0x4d586f = _0x59afa6(_0xabf5e1, _0x411e25 || "individual", _0x358d3c);
      return _0x9fbd86((_0x4d586f.sucesso ? "✅ *COOLDOWN REMOVIDO!*" : "❌ *ERRO AO REMOVER!*") + "\n\n" + _0x4d586f.mensagem);
    }
    const _0x23ae73 = parseInt(_0x2a2e6f);
    if (isNaN(_0x23ae73) || _0x23ae73 < 1) {
      return _0x9fbd86("❌ *Tempo inválido!*\n\nO tempo deve ser um número maior que 0 segundos.\n\n💡 *Exemplo:* `" + _0x57c3a6 + "cooldowncmd play 30`");
    }
    if (_0x23ae73 > 3600) {
      return _0x9fbd86("❌ *Tempo muito alto!*\n\nMáximo permitido: 3600 segundos (1 hora).\n\n💡 *Sugestão:* Use um valor entre 5 e 300 segundos");
    }
    const _0x4e1f56 = _0x411e25?.["toLowerCase"]() || "individual";
    const _0x5100a1 = ["individual", "grupo", "global"];
    if (!_0x5100a1.includes(_0x4e1f56)) {
      return _0x9fbd86("❌ *Tipo inválido!*\n\n📚 *Tipos disponíveis:*\n🔸 `individual` (padrão)\n🔸 `grupo`\n🔸 `global` (só dono)");
    }
    const _0x44ae8f = {
      ..._0x249262
    };
    _0x44ae8f.BANCOP = _0x3c1bdc;
    const _0x12a969 = _0x36c72c(_0xabf5e1, _0x23ae73, _0x4e1f56, _0x44ae8f);
    if (!_0x12a969.sucesso) {
      return _0x9fbd86("❌ *FALHA NA CONFIGURAÇÃO!*\n\n" + _0x12a969.mensagem);
    }
    const _0x2cba97 = _0x4e1f56 === "individual" ? '👤' : _0x4e1f56 === "grupo" ? '👥' : '🌐';
    const _0x4e81a1 = _0x23ae73 < 60 ? _0x23ae73 + 's' : _0x23ae73 < 3600 ? Math.floor(_0x23ae73 / 60) + "m " + _0x23ae73 % 60 + 's' : Math.floor(_0x23ae73 / 3600) + 'h';
    return _0x9fbd86("✅ *COOLDOWN CONFIGURADO!*\n\n" + _0x12a969.mensagem + "\n\n📊 *Resumo da Configuração:*\n" + _0x2cba97 + " *Tipo:* " + _0x4e1f56 + "\n⏱️ *Tempo:* " + _0x4e81a1 + "\n🎯 *Comando:* `" + _0xabf5e1 + "`\n\n💡 Use `" + _0x57c3a6 + "verlimites cooldown` para ver todos os cooldowns");
  }
}, {
  'name': "restringircmd",
  'aliases': ["restricao", "limitcargo"],
  'category': "admin",
  'description': "🛡️ Restringe comandos por cargo (admin/dono)",
  'longDescription': "Define quem pode usar determinados comandos baseado no cargo no grupo.",
  'usage': "restringircmd [comando] [cargo]",
  'example': "restringircmd ban admin\nrestringircmd limpar dono\nrestringircmd lista",
  'menu': "admin",
  'menuSection': "Limitadores",
  'permissions': _0x1c503a,
  'requirements': {},
  'execute': async ({
    args: _0x5a89c3,
    reply: _0x1718e9,
    prefix: _0x1c7f25,
    BANCOP: _0x4e927a,
    SoDono: _0xe92409,
    ..._0x1f66d5
  }) => {
    const {
      restringirComandoCargo: _0x37b8eb,
      listarLimitacoes: _0x1ab26a
    } = require("./commandsManager");
    const [_0x1590f7, _0x584c2a] = _0x5a89c3;
    const _0x291459 = {
      ..._0x1f66d5
    };
    _0x291459.BANCOP = _0x4e927a;
    if (_0x1590f7?.["toLowerCase"]() === "lista" || _0x1590f7?.["toLowerCase"]() === "list") {
      return _0x1718e9(_0x1ab26a("cargo", _0x291459).mensagem);
    }
    if (!_0x1590f7) {
      return _0x1718e9("🛡️ *SISTEMA DE RESTRIÇÃO* 🛡️\n\n🎯 *O que faz?*\nRestringe comandos por cargo no grupo\n\n🔧 *Como usar:*\n┌─ `" + _0x1c7f25 + "restringircmd [comando] [cargo]`\n└─ `" + _0x1c7f25 + "restringircmd lista`\n\n👥 *Cargos Disponíveis:*\n🔸 `todos` - Qualquer pessoa pode usar (padrão)\n🔸 `admin` - Apenas administradores\n🔸 `dono` - Apenas dono do bot " + (_0xe92409 ? '✅' : '👑') + "\n🔸 `off` - Remove restrição\n\n💡 *Exemplos Práticos:*\n┌─ `" + _0x1c7f25 + "restringircmd ban admin`\n│└─ 👮 Só admins podem banir\n├─ `" + _0x1c7f25 + "restringircmd limpar dono`\n│└─ 👑 Só dono pode limpar chat\n├─ `" + _0x1c7f25 + "restringircmd music off`\n│└─ ✅ Remove restrição de música\n└─ `" + _0x1c7f25 + "restringircmd lista`\n └─ 📋 Mostra comandos restritos");
    }
    const _0x3b220d = _0x584c2a?.["toLowerCase"]() || "admin";
    const _0x3f134d = ["todos", "admin", "dono", "off"];
    if (!_0x3f134d.includes(_0x3b220d)) {
      return _0x1718e9("❌ *Cargo inválido!*\n\n📚 *Cargos disponíveis:*\n🔸 `todos` (padrão)\n🔸 `admin`\n🔸 `dono` " + (_0xe92409 ? '✅' : '👑') + "\n🔸 `off` (remover)");
    }
    if (_0x3b220d === "dono" && !_0xe92409) {
      return _0x1718e9("👑 *ACESSO NEGADO!*\n\n❌ Apenas o *dono do bot* pode restringir comandos para dono.\n\n💡 *Alternativa:* Use `" + _0x1c7f25 + "restringircmd " + _0x1590f7 + " admin`");
    }
    const _0x159406 = {
      ..._0x1f66d5
    };
    _0x159406.BANCOP = _0x4e927a;
    const _0x3a5a0f = _0x37b8eb(_0x1590f7, _0x3b220d, _0x159406);
    if (!_0x3a5a0f.sucesso) {
      return _0x1718e9("❌ *OPERAÇÃO FALHOU!*\n\n" + _0x3a5a0f.mensagem);
    }
    const _0x4ba181 = _0x3b220d === "off";
    const _0x2393a4 = _0x4ba181 ? '✅' : "🛡️";
    const _0x2dc384 = _0x4ba181 ? "RESTRIÇÃO REMOVIDA" : "COMANDO RESTRITO";
    const _0x598d04 = _0x3b220d === "admin" ? '👮' : _0x3b220d === "dono" ? '👑' : _0x4ba181 ? '🔓' : '👥';
    return _0x1718e9(_0x2393a4 + " *" + _0x2dc384 + "!*\n\n" + _0x3a5a0f.mensagem + "\n\n📊 *Resumo da Operação:*\n🎯 *Comando:* `" + _0x1590f7 + "`\n" + _0x598d04 + " *Cargo:* " + _0x3b220d + "\n\n💡 Use `" + _0x1c7f25 + "verlimites cargo` para ver todas as restrições");
  }
}, {
  'name': "bloquearcmd",
  'aliases': ["blockuser", "blockcmd"],
  'category': "admin",
  'description': "🚫 Bloqueia usuários específicos de comandos",
  'longDescription': "Impede usuários específicos de usar comandos ou aplica cooldown personalizado.",
  'usage': "bloquearcmd [@user] [comando] [acao] [tempo]",
  'example': "bloquearcmd @user music\nbloquearcmd @user tudo 60\nbloquearcmd lista",
  'menu': "admin",
  'menuSection': "Limitadores",
  'permissions': _0x1b7421,
  'requirements': {},
  'execute': async ({
    args: _0x1f036c,
    reply: _0x4567f3,
    prefix: _0xe1cb0e,
    BANCOP: _0x3382af,
    menc_os2: _0x5aa342,
    ..._0x8a1bb7
  }) => {
    const {
      bloquearUsuarioComando: _0x176d49,
      listarLimitacoes: _0x191dec
    } = require("./commandsManager");
    const _0x40bf4c = {
      ..._0x8a1bb7
    };
    _0x40bf4c.BANCOP = _0x3382af;
    if (_0x1f036c[0]?.["toLowerCase"]() === "lista" || _0x1f036c[0]?.["toLowerCase"]() === "list") {
      return _0x4567f3(_0x191dec("usuario", _0x40bf4c).mensagem);
    }
    if (!_0x5aa342) {
      return _0x4567f3("🚫 *BLOQUEIO DE USUÁRIO* 🚫\n\n🎯 *O que faz?*\nBloqueia usuários específicos de usar comandos\n\n🔧 *Como usar:*\n┌─ `" + _0xe1cb0e + "bloquearcmd [@user] [comando]`\n├─ `" + _0xe1cb0e + "bloquearcmd [@user] [comando] [tempo]`\n├─ `" + _0xe1cb0e + "bloquearcmd [@user] [comando] off`\n└─ `" + _0xe1cb0e + "bloquearcmd lista`\n\n⚙️ *Opções:*\n🔸 `tudo` - Bloqueia de todos os comandos\n🔸 `[tempo]` - Cooldown especial em segundos\n🔸 `off` - Remove bloqueio\n\n💡 *Exemplos Práticos:*\n┌─ `" + _0xe1cb0e + "bloquearcmd @user music`\n│└─ 🚫 Usuário não pode usar music\n├─ `" + _0xe1cb0e + "bloquearcmd @user play 120`\n│└─ ⏰ Usuário espera 2min entre usos\n├─ `" + _0xe1cb0e + "bloquearcmd @user tudo`\n│└─ 🔒 Usuário bloqueado de tudo\n└─ `" + _0xe1cb0e + "bloquearcmd @user music off`\n └─ ✅ Remove bloqueio do music");
    }
    const [_0x158fc7, _0x239764, _0x564d44] = _0x1f036c;
    if (!_0x158fc7) {
      return _0x4567f3("❌ *Comando obrigatório!*\n\n💡 Use: `" + _0xe1cb0e + "bloquearcmd @user [comando]`");
    }
    const _0xfd98ba = _0x5aa342[0];
    const _0x1922aa = _0x239764?.["toLowerCase"]() || "block";
    const _0x12d444 = _0x564d44 ? parseInt(_0x564d44) : 0;
    if (_0x12d444 && (isNaN(_0x12d444) || _0x12d444 < 1 || _0x12d444 > 3600)) {
      return _0x4567f3("❌ *Tempo inválido!*\n\nUse um valor entre 1 e 3600 segundos.");
    }
    const _0x3b4495 = {
      ..._0x8a1bb7
    };
    _0x3b4495.BANCOP = _0x3382af;
    const _0x26b044 = _0x176d49(_0xfd98ba, _0x158fc7, _0x1922aa, _0x12d444, _0x3b4495);
    if (!_0x26b044.sucesso) {
      return _0x4567f3("❌ *OPERAÇÃO FALHOU!*\n\n" + _0x26b044.mensagem);
    }
    const _0x40d9d2 = _0x1922aa === "off" ? '✅' : _0x12d444 > 0 ? '⏰' : '🚫';
    const _0x3ccde1 = _0x1922aa === "off" ? "BLOQUEIO REMOVIDO" : _0x12d444 > 0 ? "COOLDOWN APLICADO" : "USUÁRIO BLOQUEADO";
    return _0x4567f3(_0x40d9d2 + " *" + _0x3ccde1 + "!*\n\n" + _0x26b044.mensagem + "\n\n💡 Use `" + _0xe1cb0e + "verlimites usuario` para ver todos os bloqueios");
  }
}, {
  'name': "desativarcmd",
  'aliases': ["disablecmd", "offcmd"],
  'category': "admin",
  'description': "❌ Desativa comandos completamente",
  'longDescription': "Impede que comandos sejam usados por qualquer pessoa no grupo ou globalmente.",
  'usage': "desativarcmd [comando] [escopo]",
  'example': "desativarcmd nsfw\ndesativarcmd spam global\ndesativarcmd lista",
  'menu': "admin",
  'menuSection': "Limitadores",
  'permissions': _0x12f89d,
  'requirements': {},
  'execute': async ({
    args: _0xc19671,
    reply: _0x4e9d5d,
    prefix: _0x55acd1,
    BANCOP: _0x14169d,
    SoDono: _0x7465f0,
    ..._0xf158e4
  }) => {
    const {
      desativarComando: _0x1da90c,
      listarLimitacoes: _0x721463
    } = require("./commandsManager");
    const [_0x44c120, _0x3deb40] = _0xc19671;
    const _0xb618b1 = {
      ..._0xf158e4
    };
    _0xb618b1.BANCOP = _0x14169d;
    if (_0x44c120?.["toLowerCase"]() === "lista" || _0x44c120?.["toLowerCase"]() === "list") {
      return _0x4e9d5d(_0x721463("desativado", _0xb618b1).mensagem);
    }
    if (!_0x44c120) {
      return _0x4e9d5d("❌ *SISTEMA DE DESATIVAÇÃO* ❌\n\n🎯 *O que faz?*\nDesativa comandos para todas as pessoas\n\n🔧 *Como usar:*\n┌─ `" + _0x55acd1 + "desativarcmd [comando]`\n├─ `" + _0x55acd1 + "desativarcmd [comando] [escopo]`\n└─ `" + _0x55acd1 + "desativarcmd lista`\n\n🌍 *Escopos Disponíveis:*\n🔸 `grupo` - Desativa apenas neste grupo (padrão)\n🔸 `global` - Desativa em todo o bot " + (_0x7465f0 ? '✅' : "👑 (só dono)") + "\n🔸 `off` - Reativa o comando\n\n💡 *Exemplos Práticos:*\n┌─ `" + _0x55acd1 + "desativarcmd nsfw`\n│└─ 🔞 Desativa NSFW neste grupo\n├─ `" + _0x55acd1 + "desativarcmd spam global`\n│└─ 🌐 Desativa spam em todo o bot\n├─ `" + _0x55acd1 + "desativarcmd play off`\n│└─ ✅ Reativa comando de música\n└─ `" + _0x55acd1 + "desativarcmd lista`\n └─ 📋 Mostra comandos desativados\n\n⚠️ *Atenção:* Comandos essenciais não podem ser desativados");
    }
    const _0x5b585a = _0x3deb40?.["toLowerCase"]() || "grupo";
    const _0x248611 = ["grupo", "global", "off"];
    if (!_0x248611.includes(_0x5b585a)) {
      return _0x4e9d5d("❌ *Escopo inválido!*\n\n📚 *Escopos disponíveis:*\n🔸 `grupo` (padrão)\n🔸 `global` " + (_0x7465f0 ? '✅' : "👑 (só dono)") + "\n🔸 `off` (reativar)");
    }
    if (_0x5b585a === "global" && !_0x7465f0) {
      return _0x4e9d5d("👑 *ACESSO NEGADO!*\n\n❌ Apenas o *dono do bot* pode desativar comandos globalmente.\n\n💡 *Alternativa:* Use `" + _0x55acd1 + "desativarcmd " + _0x44c120 + "` para desativar apenas neste grupo.");
    }
    const _0x5590f0 = {
      ..._0xf158e4
    };
    _0x5590f0.BANCOP = _0x14169d;
    _0x5590f0.SoDono = _0x7465f0;
    const _0x4dab86 = _0x1da90c(_0x44c120, _0x5b585a, _0x5590f0);
    if (!_0x4dab86.sucesso) {
      return _0x4e9d5d("❌ *OPERAÇÃO FALHOU!*\n\n" + _0x4dab86.mensagem);
    }
    const _0x31244c = _0x5b585a === "off";
    const _0xda2504 = _0x31244c ? '✅' : '🚫';
    const _0x585fb6 = _0x31244c ? "COMANDO REATIVADO" : "COMANDO DESATIVADO";
    const _0x5449ba = _0x31244c ? "\n🎉 O comando `" + _0x44c120 + "` voltou a funcionar normalmente!" : "\n⚠️ Ninguém poderá usar `" + _0x44c120 + "` " + (_0x5b585a === "global" ? "em todo o bot" : "neste grupo") + " até ser reativado.";
    const _0x4dae53 = _0x5b585a === "global" ? '🌐' : _0x31244c ? '🔄' : '👥';
    return _0x4e9d5d(_0xda2504 + " *" + _0x585fb6 + "!*\n\n" + _0x4dab86.mensagem + _0x5449ba + "\n\n📊 *Resumo da Operação:*\n🎯 *Comando:* `" + _0x44c120 + "`\n" + _0x4dae53 + " *Escopo:* " + _0x5b585a + "\n\n💡 Use `" + _0x55acd1 + "verlimites desativado` para ver todos os comandos desativados");
  }
}, {
  'name': "liberarcmd",
  'aliases': ["whitelistcmd", "permitircmd", "excecaocmd"],
  'category': "admin",
  'description': "✅ Libera usuários para usar comandos restritos",
  'longDescription': "Adiciona usuários à whitelist para burlar restrições de cargo em comandos específicos ou todos os comandos.",
  'usage': "liberarcmd [@usuário] [comando|all|todos] [ação]",
  'example': "liberarcmd @vip music\nliberarcmd @dj all\nliberarcmd @vip todos off\nliberarcmd lista",
  'menu': "admin",
  'menuSection': "Limitadores",
  'permissions': _0x4e9eb4,
  'requirements': {},
  'execute': async ({
    args: _0x344d53,
    reply: _0x582a5c,
    prefix: _0x5b49f5,
    menc_os2: _0x3324ec,
    BANCOP: _0x5db647,
    ..._0x31ee9b
  }) => {
    const {
      liberarUsuarioComando: _0x349c3d,
      listarLimitacoes: _0x2b9733
    } = require("./commandsManager");
    const [_0x909c81, _0x51e2fe, _0x94b00f] = _0x344d53;
    if (_0x909c81?.["toLowerCase"]() === "lista" || _0x909c81?.["toLowerCase"]() === "list") {
      const _0x316a0c = {
        ..._0x31ee9b
      };
      _0x316a0c.BANCOP = _0x5db647;
      const _0x2d67f2 = _0x2b9733("whitelist", _0x316a0c);
      return _0x582a5c(_0x2d67f2.mensagem);
    }
    if (!_0x909c81 || !_0x51e2fe) {
      return _0x582a5c("✅ *SISTEMA DE WHITELIST* ✅\n\n🎯 *O que faz?*\nLibera usuários para usar *comandos específicos* ou *todos os comandos* mesmo com restrições\n\n🚨 *O QUE NÃO FAZ:*\n❌ NÃO transforma a pessoa em admin\n❌ NÃO dá poderes de administrador\n❌ NÃO eleva o cargo do usuário\n\n🔧 *Como usar:*\n" + ("┌─ `" + _0x5b49f5 + "liberarcmd @usuário [comando]`\n") + ("├─ `" + _0x5b49f5 + "liberarcmd @usuário all` (todos os comandos)\n") + ("├─ `" + _0x5b49f5 + "liberarcmd @usuário todos` (todos os comandos)\n") + ("├─ `" + _0x5b49f5 + "liberarcmd @usuário [comando] off`\n") + ("└─ `" + _0x5b49f5 + "liberarcmd lista`\n\n") + "⚙️ *Como Funciona:*\n" + "🔸 *Comando específico:* Libera APENAS o comando mencionado\n" + "🔸 *All/Todos:* Libera para usar qualquer comando normal\n" + "🔸 *SoAdm + Whitelist:* Quando SoAdm ativo, usuários na whitelist podem usar comandos\n" + "🔸 A pessoa continua sendo membro comum\n" + "🔸 NÃO libera comandos administrativos (só se for admin real)\n\n" + "💡 *Exemplos Práticos:*\n" + ("┌─ `" + _0x5b49f5 + "liberarcmd @vip music`\n") + "│└─ 🎵 @vip pode usar APENAS music\n" + ("├─ `" + _0x5b49f5 + "liberarcmd @dj all`\n") + "│└─ 🎧 @dj pode usar qualquer comando normal (não admin)\n" + ("├─ `" + _0x5b49f5 + "liberarcmd @vip todos off`\n") + "│└─ ❌ Remove todos os acessos de @vip\n" + "└─ *Com SoAdm ativo:* Usuários na whitelist podem usar comandos mesmo não sendo admin\n\n" + "🔍 *Resumo:*\n" + "📌 Whitelist específico = *Exceção para 1 comando*\n" + "📌 Whitelist geral = *Exceção para comandos normais*\n" + "📌 Admin = *Acesso total incluindo comandos administrativos*\n\n" + "💎 *Use quando:* Quer dar acesso sem promover a admin");
    }
    const _0x377894 = _0x3324ec || _0x909c81.replace(/[()@+]/g, '') + "@s.whatsapp.net";
    const _0x32ea72 = _0x377894.split('@')[0];
    const _0x4b12d8 = _0x94b00f?.["toLowerCase"]() || "add";
    let _0x2ca866 = _0x51e2fe;
    let _0x32067a = false;
    if (["all", "todos", '*'].includes(_0x51e2fe?.["toLowerCase"]())) {
      _0x2ca866 = '*';
      _0x32067a = true;
    }
    const _0x5be469 = {
      ..._0x31ee9b
    };
    _0x5be469.BANCOP = _0x5db647;
    const _0x36ae23 = _0x349c3d(_0x377894, _0x2ca866, _0x4b12d8, _0x5be469);
    const _0x299021 = _0x4b12d8 === "off" ? '❌' : '✅';
    const _0x75dc70 = _0x4b12d8 === "off" ? "REMOVIDO DA WHITELIST" : "ADICIONADO À WHITELIST";
    const _0x24f38d = _0x32067a ? "todos os comandos normais" : "comando " + _0x2ca866;
    return _0x582a5c(_0x299021 + " *" + _0x75dc70 + "!*\n\n" + _0x36ae23.mensagem + "\n\n📊 *Detalhes:*\n👤 Usuário: @" + _0x32ea72 + "\n🎯 Acesso: `" + _0x24f38d + "`\n💎 Status: " + (_0x4b12d8 === "off" ? "Exceção removida" : _0x32067a ? "Exceção geral criada" : "Exceção individual criada") + "\n\n" + (_0x32067a ? "🌟 *Acesso Geral:* Pode usar comandos normais mesmo com SoAdm ativo!\n" : '') + "⚠️ *Lembre-se:* Isto NÃO torna a pessoa admin!");
  }
}, {
  'name': "manutencaocmd",
  'aliases': ["maintenancecmd", "manucmd"],
  'category': "dono",
  'description': "🔧 Coloca comandos em modo manutenção",
  'longDescription': "Desativa comandos temporariamente com mensagem personalizada explicando o motivo.",
  'usage': "manutencaocmd [comando] [mensagem]",
  'example': "manutencaocmd ai \"API instável\"\nmanutencaocmd play off\nmanutencaocmd lista",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x5f0447,
  'requirements': {},
  'execute': async ({
    args: _0x151d97,
    reply: _0x577601,
    prefix: _0x507c45,
    q: _0x319f89,
    BANCOP: _0x3e55ac,
    ..._0x296019
  }) => {
    const {
      manutencaoComando: _0xf81b5b,
      listarLimitacoes: _0xf90bd8
    } = require("./commandsManager");
    const [_0x3c029f, ..._0x447f61] = _0x151d97;
    const _0x3c0ae0 = _0x447f61.join(" ") || _0x319f89.split(" ").slice(1).join(" ");
    if (_0x3c029f?.["toLowerCase"]() === "lista" || _0x3c029f?.["toLowerCase"]() === "list") {
      const _0x2cca3a = {
        ..._0x296019
      };
      _0x2cca3a.BANCOP = _0x3e55ac;
      const _0x262f9f = _0xf90bd8("manutencao", _0x2cca3a);
      return _0x577601(_0x262f9f.mensagem);
    }
    if (!_0x3c029f) {
      return _0x577601("🔧 *SISTEMA DE MANUTENÇÃO* 🔧\n\n🎯 *O que faz?*\nColoca comandos em modo manutenção temporário\n\n🔧 *Como usar:*\n" + ("┌─ `" + _0x507c45 + "manutencaocmd [comando] \"mensagem\"`\n") + ("├─ `" + _0x507c45 + "manutencaocmd [comando] off`\n") + ("└─ `" + _0x507c45 + "manutencaocmd lista`\n\n") + "⚙️ *Características:*\n" + "🔸 Desativa comando temporariamente\n" + "🔸 Mostra mensagem personalizada\n" + "🔸 Apenas dono pode usar\n" + "🔸 Aplica globalmente em todo o bot\n\n" + "💡 *Exemplos Práticos:*\n" + ("┌─ `" + _0x507c45 + "manutencaocmd ai \"API sendo atualizada\"`\n") + "│  └─ 🤖 Coloca IA em manutenção com aviso\n" + ("├─ `" + _0x507c45 + "manutencaocmd ytmp4 \"Servidor instável, volte em 1h\"`\n") + "│  └─ 📹 YouTube em manutenção com previsão\n" + ("├─ `" + _0x507c45 + "manutencaocmd play off`\n") + "│  └─ ✅ Remove música da manutenção\n" + ("└─ `" + _0x507c45 + "manutencaocmd lista`\n") + "   └─ 📋 Mostra comandos em manutenção\n\n" + "🔧 *Útil para:* Atualizações, problemas de API, instabilidades");
    }
    const _0x23bc17 = _0x3c0ae0 || "off";
    const _0x2c12da = {
      ..._0x296019
    };
    _0x2c12da.BANCOP = _0x3e55ac;
    const _0x1c6d12 = _0xf81b5b(_0x3c029f, _0x23bc17, _0x2c12da);
    const _0x32f5a4 = _0x23bc17 === "off" ? '✅' : '🔧';
    const _0x49f6fc = _0x23bc17 === "off" ? "COMANDO REATIVADO" : "MODO MANUTENÇÃO ATIVADO";
    return _0x577601(_0x32f5a4 + " *" + _0x49f6fc + "!*\n\n" + _0x1c6d12.mensagem + "\n\n📊 *Detalhes:*\n🎯 Comando: `" + _0x3c029f + "`\n" + (_0x23bc17 !== "off" ? "💬 Mensagem: \"" + _0x23bc17 + "\"" : "🔄 Status: Ativo novamente"));
  }
}, {
  'name': "verlimites",
  'aliases': ["limites", "limitacoes"],
  'category': "admin",
  'description': "📋 Painel completo de limitações ativas",
  'longDescription': "Exibe um painel organizado com todas as limitações configuradas no grupo ou globalmente.",
  'usage': "verlimites [filtro]",
  'example': "verlimites\nverlimites play\nverlimites cooldown\nverlimites global",
  'menu': "admin",
  'menuSection': "Limitadores",
  'permissions': _0x335e8f,
  'requirements': {},
  'execute': async ({
    args: _0x22d5ac,
    reply: _0x1ca7f7,
    prefix: _0x36f629,
    BANCOP: _0x178a67,
    ..._0x4f2f7a
  }) => {
    const {
      listarLimitacoes: _0x57b0bf
    } = require("./commandsManager");
    const _0x169338 = _0x22d5ac[0]?.["toLowerCase"]() || null;
    if (!_0x169338) {
      const _0x13db7 = {
        ..._0x4f2f7a
      };
      _0x13db7.BANCOP = _0x178a67;
      const _0x135094 = _0x57b0bf(null, _0x13db7);
      return _0x1ca7f7("📋 *PAINEL DE LIMITAÇÕES* 📋\n\n" + _0x135094.mensagem + "\n\n🔍 *Filtros disponíveis:*\n🔸 `" + _0x36f629 + "verlimites cooldown` - Só cooldowns\n🔸 `" + _0x36f629 + "verlimites cargo` - Só restrições\n🔸 `" + _0x36f629 + "verlimites usuario` - Só bloqueios\n🔸 `" + _0x36f629 + "verlimites whitelist` - Só liberações\n🔸 `" + _0x36f629 + "verlimites global` - Só globais");
    }
    const _0x49149e = {
      ..._0x4f2f7a
    };
    _0x49149e.BANCOP = _0x178a67;
    const _0x5772b2 = _0x57b0bf(_0x169338, _0x49149e);
    const _0x271146 = {
      cooldown: '⏰',
      cargo: "🛡️",
      usuario: '🚫',
      whitelist: '✅',
      global: '🌐',
      manutencao: '🔧',
      desativado: '❌'
    };
    const _0x431cdf = _0x271146[_0x169338] || '📋';
    return _0x1ca7f7(_0x431cdf + " *LIMITAÇÕES: " + _0x169338.toUpperCase() + "*\n\n" + _0x5772b2.mensagem);
  }
}, {
  'name': "infocmd",
  'aliases': ["cmdinfo", "detalhescmd"],
  'category': "admin",
  'description': "ℹ️ Análise completa de limitações de um comando",
  'longDescription': "Mostra informações detalhadas sobre todas as limitações que afetam um comando específico.",
  'usage': "infocmd [comando]",
  'example': "infocmd play\ninfocmd music\ninfocmd ban",
  'menu': "admin",
  'menuSection': "Limitadores",
  'permissions': _0x1b9673,
  'requirements': {},
  'execute': async ({
    args: _0x2ead2b,
    reply: _0x490250,
    prefix: _0x22b8e3,
    BANCOP: _0x5620c0,
    ..._0x3b00be
  }) => {
    const {
      infoComandoDetalhado: _0x4380e1
    } = require("./commandsManager");
    const _0x15b4b5 = _0x2ead2b[0]?.["toLowerCase"]();
    if (!_0x15b4b5) {
      return _0x490250("ℹ️ *ANÁLISE DE COMANDO* ℹ️\n\n🎯 *O que faz?*\nAnalisa todas as limitações de um comando\n\n🔧 *Como usar:*\n`" + _0x22b8e3 + "infocmd [comando]`\n\n💡 *Exemplo:*\n`" + _0x22b8e3 + "infocmd play`\n└─ 📊 Mostra todas as limitações do comando play\n\n🔍 *Informações mostradas:*\n🔸 Cooldowns ativos\n🔸 Restrições por cargo\n🔸 Usuários bloqueados\n🔸 Status de whitelist\n🔸 Modo manutenção\n🔸 Simulação por cargo");
    }
    const _0x48c485 = {
      ..._0x3b00be
    };
    _0x48c485.BANCOP = _0x5620c0;
    const _0x44e22a = _0x4380e1(_0x15b4b5, _0x48c485);
    return _0x490250("ℹ️ *ANÁLISE COMPLETA* ℹ️\n\n" + _0x44e22a.mensagem);
  }
}, {
  'name': "block",
  'aliases': ["banuser", "banir"],
  'category': "admin",
  'description': "👤 Sistema de banimento de usuários",
  'longDescription': "Bane usuários do bot impedindo uso de comandos. Admins podem banir no grupo, dono globalmente.",
  'usage': "block [@usuário] [escopo]",
  'example': "block @fulano\nblock @spam global\nblock lista",
  'menu': "admin",
  'menuSection': "Moderação",
  'permissions': _0x14efb1,
  'requirements': {},
  'execute': async ({
    args: _0x2519b4,
    from: _0x1caa2a,
    reply: _0x24c9f7,
    menc_os2: _0x151e0e,
    q: _0x2a0090,
    SNET: _0x24ca42,
    mention: _0x294803,
    conn: _0x56abd,
    BANCOP: _0x59b5b7,
    sender: _0x57d287,
    isGroup: _0x419f8f,
    SoDono: _0x1a2291,
    prefix: _0x14a19d,
    ..._0x2738e1
  }) => {
    const {
      toggleBanimento: _0x38b4d6,
      listarUsuariosBanidos: _0x3a35f0
    } = require("./commandsManager");
    if (_0x2519b4[0]?.["toLowerCase"]() === "lista" || _0x2519b4[0]?.["toLowerCase"]() === "list") {
      const _0x96b705 = _0x2519b4[1]?.["toLowerCase"]() === "global";
      let _0x357275;
      if (_0x96b705) {
        _0x357275 = _0x3a35f0(_0x59b5b7, "global");
      } else {
        if (_0x419f8f) {
          _0x357275 = _0x3a35f0(_0x59b5b7, "grupo", _0x1caa2a);
        } else {
          _0x357275 = _0x3a35f0(_0x59b5b7, "global");
        }
      }
      if (_0x357275.length === 0) {
        const _0xfb1ed5 = _0x96b705 ? " globais" : _0x419f8f ? " deste grupo" : " globais";
        return _0x24c9f7("✅ *LISTA LIMPA!*\n\nNão há usuários banidos" + _0xfb1ed5 + " no momento.");
      }
      let _0x2fda3d = "🚫 *USUÁRIOS BANIDOS*";
      if (_0x96b705) {
        _0x2fda3d += " (Global 🌐)";
      } else {
        if (_0x419f8f) {
          _0x2fda3d += " (Grupo 👥)";
        }
      }
      let _0x352aa9 = _0x2fda3d + "\n\n";
      const _0x18557b = [];
      _0x357275.forEach((_0x1f088b, _0x478cf3) => {
        const _0x1fb54f = _0x1f088b.motivo ? " - " + _0x1f088b.motivo : '';
        const _0x5eb1d1 = _0x1f088b.escopo === "global" ? '🌐' : '👥';
        _0x352aa9 += _0x478cf3 + 1 + ". " + _0x5eb1d1 + " @" + _0x1f088b.user_id.split('@')[0] + _0x1fb54f + "\n";
        _0x352aa9 += "   📅 " + _0x1f088b.banido_em + "\n\n";
        _0x18557b.push(_0x1f088b.user_id);
      });
      const _0x3749df = {
        text: _0x352aa9,
        mentions: _0x18557b
      };
      return _0x56abd.sendMessage(_0x1caa2a, _0x3749df);
    }
    const _0x8c5bb2 = _0x151e0e || (_0x2a0090.trim() ? _0x2a0090.replace(/[()+-/ @+/]/g, '') + _0x24ca42 : null);
    if (!_0x8c5bb2) {
      return _0x24c9f7("🚫 *SISTEMA DE BANIMENTO* 🚫\n\n🎯 *O que faz?*\nImpede usuários de usar comandos do bot\n\n🔧 *Como usar:*\n┌─ `" + _0x14a19d + "block @usuário` - Banir no grupo" + (!_0x419f8f ? " (ou global se PV)" : '') + "\n├─ `" + _0x14a19d + "block @usuário global` - Banir globalmente\n├─ `" + _0x14a19d + "block lista` - Ver banidos " + (_0x419f8f ? "do grupo" : "globais") + "\n└─ `" + _0x14a19d + "block lista global` - Ver banidos globais\n\n👑 *Permissões:*\n🔸 👮‍♂️ *Admins:* Banem no grupo atual\n🔸 👑 *Dono:* Bane globalmente\n\n⚙️ *Funcionamento:*\n🔸 Alterna automaticamente (bane/desbane)\n🔸 Use \"global\" para banir em todo o bot\n🔸 Banimento global tem prioridade\n🔸 Motivo opcional após o comando");
    }
    let _0x53b7b8 = "grupo";
    let _0x2c062f = '';
    const _0x12f8a9 = _0x2519b4.some(_0x1d2f62 => _0x1d2f62?.["toLowerCase"]() === "global");
    if (_0x12f8a9) {
      _0x53b7b8 = "global";
      _0x2c062f = _0x2519b4.slice(1).filter(_0x159414 => _0x159414?.["toLowerCase"]() !== "global").join(" ");
    } else {
      _0x2c062f = _0x2519b4.slice(1).join(" ");
    }
    if (!_0x419f8f) {
      _0x53b7b8 = "global";
    }
    if (_0x53b7b8 === "global" && !_0x1a2291) {
      return _0x24c9f7("👑 *PERMISSÃO NEGADA!*\n\n❌ Apenas o *dono* pode fazer banimentos globais.\n💡 Use sem \"global\" para banir apenas neste grupo.");
    }
    if (_0x53b7b8 === "grupo" && !_0x419f8f) {
      return _0x24c9f7("❌ *Erro!* Banimento por grupo só funciona em grupos.");
    }
    const _0xd360b9 = _0x53b7b8 === "grupo" ? _0x1caa2a : null;
    const _0x246469 = _0x38b4d6(_0x8c5bb2, _0x2c062f, _0x57d287, _0x59b5b7, _0x53b7b8, _0xd360b9);
    if (_0x246469.sucesso) {
      if (_0x56abd.updateBlockStatus) {
        const _0x421f21 = _0x246469.acao === "banned" ? "block" : "unblock";
        _0x56abd.updateBlockStatus(_0x8c5bb2, _0x421f21);
      }
      const _0x103426 = _0x53b7b8 === "global" ? '🌐' : '👥';
      _0x294803(_0x103426 + " *AÇÃO EXECUTADA!*\n\n" + _0x246469.mensagem);
    } else {
      _0x24c9f7("❌ *ERRO!*\n\n" + _0x246469.mensagem);
    }
    return true;
  }
}, {
  'name': "limparlimites",
  'aliases': ["clearlimits", "resetlimites"],
  'category': "admin",
  'description': "🧹 Remove todas as limitações do grupo",
  'longDescription': "Limpa todas as limitações configuradas no grupo atual. Requer confirmação para evitar acidentes.",
  'usage': "limparlimites confirmar",
  'example': "limparlimites confirmar",
  'menu': "admin",
  'menuSection': "Limitadores",
  'permissions': _0x50a596,
  'requirements': {},
  'execute': async ({
    args: _0x178123,
    reply: _0xcd5aa1,
    from: _0xa48eeb,
    BANCOP: _0x1e552c,
    SoDono: _0xd17989,
    prefix: _0x215af7
  }) => {
    if (_0x178123[0]?.["toLowerCase"]() !== "confirmar") {
      return _0xcd5aa1("🧹 *LIMPEZA DE LIMITAÇÕES* 🧹\n\n⚠️ *ATENÇÃO!* ⚠️\nEste comando remove *TODAS* as limitações:\n\n🗑️ *Será removido:*\n🔸 ⏰ Todos os cooldowns\n🔸 🛡️ Restrições por cargo\n🔸 🚫 Bloqueios de usuários\n🔸 ✅ Lista branca (whitelist)\n" + (_0xd17989 ? "🔸 🔧 Modo manutenção (global)\n" : '') + "\n\n✅ *Para confirmar:*\n`" + _0x215af7 + "limparlimites confirmar`\n\n💡 *Dica:* Use `" + _0x215af7 + "verlimites` para ver o que será removido");
    }
    try {
      let _0x40848 = 0;
      let _0x3746d9 = [];
      const _0xb1aff2 = _0x1e552c.prepare("SELECT COUNT(*) as total FROM controle_comandos WHERE grupo_id = ?").get(_0xa48eeb);
      if (_0xb1aff2.total > 0) {
        const _0x510753 = _0x1e552c.prepare("DELETE FROM controle_comandos WHERE grupo_id = ?").run(_0xa48eeb);
        _0x40848 += _0x510753.changes;
        _0x3746d9.push("👥 " + _0x510753.changes + " limitação(ões) do grupo");
      }
      if (_0xd17989) {
        const _0x456c2e = _0x1e552c.prepare("SELECT COUNT(*) as total FROM controle_comandos WHERE escopo = ?").get("global");
        if (_0x456c2e.total > 0) {
          const _0xd34ada = _0x1e552c.prepare("DELETE FROM controle_comandos WHERE escopo = ?").run("global");
          _0x40848 += _0xd34ada.changes;
          _0x3746d9.push("🌐 " + _0xd34ada.changes + " limitação(ões) globais");
        }
      }
      const _0x3d2c87 = Math.floor(Date.now() / 1000);
      const _0x573de0 = _0x1e552c.prepare("DELETE FROM cooldowns_ativos WHERE expira_em < ?").run(_0x3d2c87);
      if (_0x573de0.changes > 0) {
        _0x3746d9.push("🧹 " + _0x573de0.changes + " cooldown(s) expirado(s) limpos");
      }
      if (_0x40848 === 0) {
        return _0xcd5aa1("🧹 *LIMPEZA CONCLUÍDA!* 🧹\n\n✅ Nenhuma limitação encontrada para remover.\n\n🎉 O grupo já está com todos os comandos liberados!\n\n💡 *Dica:* Use `" + _0x215af7 + "verlimites` para confirmar");
      }
      const _0x490f12 = _0x3746d9.length > 0 ? "\n\n📋 *Detalhes:*\n" + _0x3746d9.map(_0x2bb90c => "• " + _0x2bb90c).join("\n") : '';
      return _0xcd5aa1("🧹 *LIMPEZA CONCLUÍDA!* 🧹\n\n✅ *" + _0x40848 + "* limitação(ões) removida(s) com sucesso!" + _0x490f12 + "\n\n🎉 Todos os comandos estão liberados!\n\n💡 *Dica:* Use `" + _0x215af7 + "verlimites` para confirmar que está tudo limpo");
    } catch (_0x3cdc6f) {
      console.error("Erro ao limpar limitações:", _0x3cdc6f);
      return _0xcd5aa1("❌ *ERRO INTERNO!*\n\nNão foi possível limpar as limitações.\nContate o desenvolvedor se o problema persistir.");
    }
  }
}, {
  'name': "transcrever",
  'aliases': ["transcricao", "transcribe"],
  'category': "ferramentas",
  'description': "Transcreve áudios e vídeos em texto",
  'longDescription': "Transcreve o conteúdo de áudios e vídeos usando inteligência artificial. Responda a uma mídia ou envie junto com o comando.",
  'usage': "transcrever (responda a um áudio/vídeo)",
  'example': "transcrever",
  'menu': "ferramentas",
  'menuSection': "IA e Processamento",
  'permissions': _0x248009,
  'requirements': {},
  'execute': async ({
    reply: _0x35d760,
    info: _0x11fb2a,
    isQuotedAudio: _0x37b7a3,
    isQuotedVideo: _0x2a8a89,
    isAudio: _0x3c5b91,
    isVideo: _0x4e7eff,
    quotedAudio: _0x122e81,
    quotedVideo: _0x15fa93,
    getFileBuffer: _0x694fa1,
    FormData: _0x582f4a,
    acessAPI: _0x31c3fe,
    Res_Aguarde: _0x306c68
  }) => {
    let _0x26a09c = null;
    let _0x2f69c2 = null;
    if (_0x37b7a3) {
      _0x26a09c = _0x122e81;
      _0x2f69c2 = "audio";
    } else {
      if (_0x2a8a89) {
        _0x26a09c = _0x15fa93;
        _0x2f69c2 = "video";
      } else {
        if (_0x3c5b91) {
          _0x26a09c = _0x11fb2a.message.audioMessage;
          _0x2f69c2 = "audio";
        } else {
          if (_0x4e7eff) {
            _0x26a09c = _0x11fb2a.message.videoMessage;
            _0x2f69c2 = "video";
          } else {
            return _0x35d760("╭━━━━━━━━━━━━━━━━━━━━━━━╮\n┃ ❌ 𝐍𝐄𝐍𝐇𝐔𝐌𝐀 𝐌Í𝐃𝐈𝐀! ❌\n┃\n┃ 🎤 Responda a um áudio ou\n┃ vídeo para transcrever!\n┃\n┃ 💡 Ou envie uma mídia junto\n┃ com o comando.\n┃\n┃ 📝 Exemplo: Responda a um\n┃ áudio e digite \"transcrever\"\n╰━━━━━━━━━━━━━━━━━━━━━━━╯");
          }
        }
      }
    }
    try {
      _0x35d760(_0x306c68);
      let _0xc20a92 = await _0x694fa1(_0x26a09c, _0x2f69c2);
      let _0x2edbc8 = Buffer.from(_0xc20a92, "base64");
      let _0x38e3ab = new _0x582f4a();
      _0x38e3ab.append("file", _0x2edbc8, {
        'filename': _0x2f69c2 === "audio" ? "audiofile" : "videofile",
        'contentType': _0x26a09c.mimetype
      });
      const _0x1447e2 = await fetch(_0x31c3fe.transcrever(), {
        'method': "POST",
        'body': _0x38e3ab
      });
      const _0x9bf574 = await _0x1447e2.json();
      if (_0x9bf574.texto && _0x9bf574.texto.trim()) {
        _0x35d760("╭━━━━━━━━━━━━━━━━━━━━━━━╮\n┃ 🎤 𝐓𝐑𝐀𝐍𝐒𝐂𝐑𝐈Ç𝐀̃𝐎 📝\n┃\n┃ 🤖 Processado por IA:\n╰━━━━━━━━━━━━━━━━━━━━━━━╯\n\n" + _0x9bf574.texto + "\n\n╭━━━━━━━━━━━━━━━━━━━━━━━╮\n┃ ✅ Transcrição concluída!\n╰━━━━━━━━━━━━━━━━━━━━━━━╯");
      } else {
        _0x35d760("╭━━━━━━━━━━━━━━━━━━━━━━━╮\n┃ ❌ 𝐄𝐑𝐑𝐎 𝐍𝐀 𝐓𝐑𝐀𝐍𝐒𝐂𝐑𝐈Ç𝐀̃𝐎\n┃\n┃ 🔇 Não foi possível\n┃ transcrever esta mídia.\n┃\n┃ 💡 Possíveis motivos:\n┃ • Áudio muito baixo\n┃ • Formato não suportado\n┃ • Erro no servidor\n┃\n┃ 🔄 Tente novamente ou use\n┃ uma mídia diferente.\n╰━━━━━━━━━━━━━━━━━━━━━━━╯");
      }
    } catch (_0x580b7d) {
      console.error("Erro na transcrição manual:", _0x580b7d);
      _0x35d760("╭━━━━━━━━━━━━━━━━━━━━━━━╮\n┃ ⚠️ 𝐄𝐑𝐑𝐎 𝐈𝐍𝐓𝐄𝐑𝐍𝐎 ⚠️\n┃\n┃ 🔧 Ocorreu um erro interno\n┃ durante a transcrição.\n┃\n┃ 🔄 Tente novamente em\n┃ alguns momentos.\n┃\n┃ 📞 Se persistir, contate\n┃ o administrador.\n╰━━━━━━━━━━━━━━━━━━━━━━━╯");
    }
    return true;
  }
}, {
  'name': "autotranscrever",
  'aliases': ["autotranscricao", "transcricaoauto"],
  'category': "admin",
  'description': "Ativa/desativa a transcrição automática de áudios e vídeos",
  'longDescription': "Quando ativado, o bot automaticamente transcreverá áudios e vídeos enviados no grupo usando inteligência artificial.",
  'usage': "autotranscrever",
  'example': "autotranscrever",
  'menu': "admin",
  'menuSection': "Automação",
  'permissions': _0x9da0b2,
  'requirements': {},
  'execute': async ({
    Os_Returns: _0x3bb37b,
    dataGp: _0x5543b7,
    setGp: _0x29c57e,
    reply: _0x6738ef
  }) => {
    if (_0x3bb37b(true, true, true)["true"]) {
      return _0x6738ef(_0x3bb37b(true, true, true).txt);
    }
    if (_0x5543b7[0].autotranscrever === undefined) {
      _0x5543b7[0].autotranscrever = false;
    }
    _0x5543b7[0].autotranscrever = !_0x5543b7[0].autotranscrever;
    _0x29c57e(_0x5543b7);
    if (_0x5543b7[0].autotranscrever) {
      _0x6738ef("╭━━━━━━━━━━━━━━━━━━━━━━━╮\n┃ 🎤 𝐀𝐔𝐓𝐎 𝐓𝐑𝐀𝐍𝐒𝐂𝐑𝐄𝐕𝐄𝐑 ✅\n┃\n┃ ✅ Ativado com sucesso!\n┃\n┃ 🔊 Áudios e vídeos enviados\n┃ serão automaticamente\n┃ transcritos!\n┃\n┃ 🤖 IA processará o conteúdo\n┃ e enviará o texto!\n┃\n┃ 💡 Use novamente para\n┃ desativar.\n╰━━━━━━━━━━━━━━━━━━━━━━━╯");
    } else {
      _0x6738ef("╭━━━━━━━━━━━━━━━━━━━━━━━╮\n┃ 🎤 𝐀𝐔𝐓𝐎 𝐓𝐑𝐀𝐍𝐒𝐂𝐑𝐄𝐕𝐄𝐑 ❌\n┃\n┃ ❌ Desativado com sucesso!\n┃\n┃ 🔇 Áudios e vídeos não serão\n┃ mais transcritos\n┃ automaticamente.\n┃\n┃ 💡 Use novamente para\n┃ ativar.\n╰━━━━━━━━━━━━━━━━━━━━━━━╯");
    }
    return true;
  }
}, {
  'name': "emojibot",
  'aliases': ["emojitema", "setemojibot"],
  'category': "dono",
  'description': "Altera o emoji do tema do bot",
  'longDescription': "Permite alterar o emoji que aparece nos menus e mensagens do bot. Use sem argumentos para ver o emoji atual.",
  'usage': "emojibot [emoji]",
  'example': "emojibot 🤖",
  'menu': "dono",
  'menuSection': "Configurações",
  'permissions': _0x1c11ab,
  'requirements': {},
  'execute': async ({
    args: _0x2bbd9e,
    q: _0x9bd6c6,
    reply: _0x30f16c,
    dataGp: _0x408919,
    isGroup: _0x520ca6,
    fs: _0x46734c,
    path: _0x516f4e
  }) => {
    const {
      temaManager: _0x1d181d
    } = require("./commandsManager");
    try {
      if (!_0x9bd6c6.trim()) {
        const _0x1afb56 = _0x1d181d.getTemaMenu(_0x408919, _0x520ca6);
        const _0x9ae523 = _0x1afb56.emoji || '❄️';
        return _0x30f16c("╭━━━━━━━━━━━━━━━━━━━━━━━╮\n┃ " + _0x9ae523 + " 𝐄𝐌𝐎𝐉𝐈 𝐀𝐓𝐔𝐀𝐋 " + _0x9ae523 + "\n┃\n┃ 🎨 Emoji atual do bot: " + _0x9ae523 + "\n┃\n┃ 💡 Para alterar use:\n┃ emojibot [novo emoji]\n┃\n┃ 📝 Exemplo: emojibot 🤖\n╰━━━━━━━━━━━━━━━━━━━━━━━╯");
      }
      const _0x126d53 = _0x9bd6c6.trim();
      if (_0x126d53.length > 4) {
        return _0x30f16c("❌ Por favor, use apenas um emoji válido.");
      }
      const _0xffcdb = _0x1d181d.getTemaMenu(_0x408919, _0x520ca6);
      const _0x4955f4 = _0x516f4e.join("./dados/temas/");
      const _0x297720 = _0x520ca6 && _0x408919?.[0]?.["TemaMenu"] || "padrao";
      const _0x1fd0e5 = '' + _0x4955f4 + _0x297720 + ".json";
      _0xffcdb.emoji = _0x126d53;
      await _0x46734c.writeFile(_0x1fd0e5, JSON.stringify(_0xffcdb, null, 2));
      _0x1d181d.temaCache?.["delete"]?.(_0x297720);
      _0x30f16c("╭━━━━━━━━━━━━━━━━━━━━━━━╮\n┃ ✅ 𝐄𝐌𝐎𝐉𝐈 𝐀𝐋𝐓𝐄𝐑𝐀𝐃𝐎! ✅\n┃\n┃ 🎨 Emoji alterado para: " + _0x126d53 + "\n┃\n┃ 🔄 A mudança será aplicada\n┃ nos próximos menus!\n┃\n┃ ✨ Tema: " + (_0xffcdb.nomeTema || _0x297720) + "\n╰━━━━━━━━━━━━━━━━━━━━━━━╯");
      return true;
    } catch (_0x4d3646) {
      console.error("Erro no comando emojibot:", _0x4d3646);
      _0x30f16c("❌ Erro ao alterar emoji do tema. Verifique os logs.");
      return false;
    }
  }
}, {
  'name': "remover-tabela",
  'aliases': ["drop-table", "delete-table", "reset-table"],
  'category': "SQL",
  'description': "Remove uma tabela para que seja recriada automaticamente",
  'longDescription': "Remove uma tabela específica do banco de dados para que o sistema a recrie automaticamente com a estrutura correta na próxima verificação.",
  'usage': "remover-tabela nome_da_tabela",
  'example': "remover-tabela mensagens_agendadas",
  'menu': "dono",
  'menuSection': "Banco de Dados",
  'permissions': _0x95ada4,
  'requirements': _0x18e6c8,
  'execute': async ({
    conn: _0x32e519,
    from: _0xdc85f3,
    BANCOP: _0x468a22,
    q: _0x115fcf,
    reply: _0x27b6e8
  }) => {
    try {
      const _0x2a45de = _0x115fcf.trim();
      const _0x93b1bd = _0x468a22.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name=?").get(_0x2a45de);
      if (!_0x93b1bd) {
        return _0x27b6e8("❌ *TABELA NÃO ENCONTRADA*\n\nA tabela \"" + _0x2a45de + "\" não existe no banco de dados.");
      }
      const _0x4f1959 = _0x468a22.prepare("SELECT COUNT(*) as total FROM " + _0x2a45de).get();
      const _0x2d08f6 = _0x4f1959 ? _0x4f1959.total : 0;
      _0x468a22.exec("DROP TABLE IF EXISTS " + _0x2a45de);
      const _0x23f788 = _0x468a22.prepare("SELECT name FROM sqlite_master WHERE type='table' AND name=?").get(_0x2a45de);
      if (_0x23f788) {
        return _0x27b6e8("❌ *ERRO AO REMOVER TABELA*\n\nA tabela \"" + _0x2a45de + "\" não pôde ser removida.");
      }
      return _0x27b6e8("✅ *TABELA REMOVIDA COM SUCESSO*\n\n📊 Tabela: " + _0x2a45de + "\n🗑️ Registros removidos: " + _0x2d08f6 + "\n\n⚠️ A tabela será recriada automaticamente na próxima verificação do sistema.");
    } catch (_0x4e6ee7) {
      console.error("Erro ao remover tabela:", _0x4e6ee7);
      return _0x27b6e8("❌ *ERRO AO REMOVER TABELA*\n\n⚠️ Detalhes: " + _0x4e6ee7.message);
    }
  }
}, {
  'name': "jackpotgold",
  'aliases': ["jackpot", "jpgold", "goldlottery"],
  'category': "economia",
  'description': "Aposte no jackpot para tentar ganhar um prêmio acumulado",
  'longDescription': "Faça uma aposta no jackpot e tenha a chance de ganhar todo o valor acumulado. Quanto maior a aposta, maior a chance de ganhar.",
  'usage': "jackpotgold [valor]",
  'example': "jackpotgold\njackpotgold 500",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': _0x518d54,
  'requirements': {},
  'execute': async ({
    conn: _0x3a47e9,
    info: _0x24cc0c,
    from: _0x4207ee,
    sender: _0x445d4c,
    args: _0x3992d6,
    q: _0x31665b,
    reply: _0x2800bf,
    createChoiceMenu: _0x58ebab,
    getUniqueKey: _0x2f788f,
    optionsBuffer: _0x47de6d,
    flushOptionsBuffer: _0x5430af,
    BANCOP: _0x75381c,
    dataGp: _0x483c08,
    prefix: _0x41cfc9,
    command: _0x20ed8f,
    goldSystem: _0x4f758f,
    configsGold: _0x2d7866
  }) => {
    if (_0x483c08[0]?.["sistemgold"] === 0) {
      return _0x2800bf("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    try {
      const _0x1a28d2 = _0x2f788f(_0x4207ee, _0x445d4c);
      if (_0x47de6d[_0x1a28d2]) {
        delete _0x47de6d[_0x1a28d2];
        _0x5430af();
      }
      const _0x231063 = (_0x4522fe, _0x2bedd5) => {
        let _0x3ce04c = 0;
        if (_0x4522fe === 50) {
          _0x3ce04c = 1;
        } else {
          if (_0x4522fe === 500) {
            _0x3ce04c = 3;
          } else {
            if (_0x4522fe === 5000) {
              _0x3ce04c = 5;
            }
          }
        }
        const _0x1626c0 = Math.floor(_0x2bedd5 / 1000) * 0.1;
        return _0x3ce04c + _0x1626c0;
      };
      const _0xd23c6b = _0x4f758f.getBalance(_0x4207ee, _0x445d4c);
      if (_0xd23c6b < 50) {
        return _0x2800bf("❌ Você precisa ter pelo menos 50 " + _0x2d7866.emojis.gold + " para jogar no Jackpot.");
      }
      const _0x258361 = {
        text: '🎰',
        key: _0x24cc0c.key
      };
      const _0x397a39 = {
        react: _0x258361
      };
      await _0x3a47e9.sendMessage(_0x4207ee, _0x397a39);
      if (_0x31665b.trim() && [50, 500, 5000].includes(parseInt(_0x31665b.trim()))) {
        const _0x81db45 = parseInt(_0x31665b.trim());
        if (_0xd23c6b < _0x81db45) {
          return _0x2800bf("❌ Você não tem " + _0x81db45 + " " + _0x2d7866.emojis.gold + " para apostar.");
        }
        let _0x3b1475 = await (_0x4f758f.getJackpot(_0x4207ee) || 0);
        const _0x40894a = _0x231063(_0x81db45, _0x3b1475);
        const _0x4aacb2 = Math.random() * 100;
        _0x4f758f.removeGold(_0x4207ee, _0x445d4c, _0x81db45);
        if (_0x4aacb2 <= _0x40894a) {
          const _0x3a9cd2 = _0x3b1475 + _0x81db45;
          _0x4f758f.addGold(_0x4207ee, _0x445d4c, _0x3a9cd2);
          _0x4f758f.updateJackpot(_0x4207ee, 0);
          const _0x309f39 = {
            text: '💰',
            key: _0x24cc0c.key
          };
          const _0x29c712 = {
            react: _0x309f39
          };
          await _0x3a47e9.sendMessage(_0x4207ee, _0x29c712);
          _0x2800bf("╭━━━ 🎰 JACKPOT GOLD 🎰 ━━━╮\n┃\n┃ 💥 JACKPOT! 💥\n┃\n┃ 🎊 PARABÉNS! 🎊\n┃\n┃ 🎯 Você apostou: " + _0x81db45 + " " + _0x2d7866.emojis.gold + "\n┃ 💰 Ganhou: " + _0x3a9cd2 + " " + _0x2d7866.emojis.gold + "\n┃\n┃ 📊 Chance de vitória: " + _0x40894a.toFixed(1) + "%\n┃ 🎮 Novo saldo: " + _0x4f758f.getBalance(_0x4207ee, _0x445d4c) + " " + _0x2d7866.emojis.gold + "\n┃\n┃ 🔄 O Jackpot foi zerado!\n╰━━━━━━━━━━━━━━━━━━━━━━╯");
        } else {
          const _0xd40e2e = _0x3b1475 + _0x81db45;
          _0x4f758f.updateJackpot(_0x4207ee, _0xd40e2e);
          const _0x572a9a = {
            text: '❌',
            key: _0x24cc0c.key
          };
          const _0x5adc8c = {
            react: _0x572a9a
          };
          await _0x3a47e9.sendMessage(_0x4207ee, _0x5adc8c);
          _0x2800bf("╭━━━ 🎰 JACKPOT GOLD 🎰 ━━━╮\n┃\n┃ ❌ VOCÊ PERDEU! ❌\n┃\n┃ 🎯 Sua aposta: " + _0x81db45 + " " + _0x2d7866.emojis.gold + "\n┃ 📊 Chance de vitória: " + _0x40894a.toFixed(1) + "%\n┃\n┃ 💰 Seu saldo: " + _0x4f758f.getBalance(_0x4207ee, _0x445d4c) + " " + _0x2d7866.emojis.gold + "\n┃\n┃ 🎰 Jackpot atual: " + _0xd40e2e + " " + _0x2d7866.emojis.gold + "\n┃ ⚡ Tente novamente!\n╰━━━━━━━━━━━━━━━━━━━━━━╯");
        }
        return;
      }
      const _0x45826b = await (_0x4f758f.getJackpot(_0x4207ee) || 0);
      const _0x50c174 = (Math.floor(_0x45826b / 1000) * 0.1).toFixed(1);
      const _0x24b823 = {
        command: _0x41cfc9 + "jackpotgold 50",
        edit: true
      };
      const _0x184788 = {
        command: _0x41cfc9 + "jackpotgold 500",
        edit: true
      };
      const _0xcde2bf = {
        command: _0x41cfc9 + "jackpotgold 5000",
        edit: true
      };
      const _0x433238 = {
        '1': _0x24b823,
        '2': _0x184788,
        '3': _0xcde2bf
      };
      const _0x3bf5b2 = {
        'principal': {
          'text': "🎰 JACKPOT GOLD 🎰\n\n💰 Prêmio Acumulado: " + _0x45826b + " " + _0x2d7866.emojis.gold + "\n📈 Bônus Atual: +" + _0x50c174 + "% em todas as apostas\n\nEscolha seu valor de aposta:\n\n1 - 50 " + _0x2d7866.emojis.gold + "\n➜ Chance de Ganhar: " + _0x231063(50, _0x45826b).toFixed(1) + "%\n➜ (1% + " + _0x50c174 + "% bônus)\n\n2 - 500 " + _0x2d7866.emojis.gold + "\n➜ Chance de Ganhar: " + _0x231063(500, _0x45826b).toFixed(1) + "%\n➜ (3% + " + _0x50c174 + "% bônus)\n\n3 - 5000 " + _0x2d7866.emojis.gold + "\n➜ Chance de Ganhar: " + _0x231063(5000, _0x45826b).toFixed(1) + "%\n➜ (5% + " + _0x50c174 + "% bônus)\n\n*DIGITE O NÚMERO DA OPÇÃO*\n\n⚠️ Se ganhar, você receberá TODO o valor acumulado no Jackpot!\n⚠️ Se perder, seu valor apostado será adicionado ao Jackpot.\n\n📊 A cada 1.000 " + _0x2d7866.emojis.gold + " acumulados no Jackpot, as chances aumentam em 0.1%!",
          'options': _0x433238
        }
      };
      await _0x58ebab(_0x4207ee, _0x445d4c, _0x3bf5b2.principal.text, _0x3bf5b2.principal.options, {
        'menus': _0x3bf5b2,
        'history': ["principal"]
      });
    } catch (_0x391bf2) {
      console.error("Erro no jackpot:", _0x391bf2);
      _0x2800bf("❌ Ocorreu um erro ao processar o jackpot. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "bolaogold",
  'aliases': ["bolao", "goldbolao", "bolãogold"],
  'category': "economia",
  'description': "Participe do bolão de gold do grupo",
  'longDescription': "Inicie ou participe de um bolão de gold, onde um dos participantes será sorteado para ganhar todo o valor acumulado.",
  'usage': "bolaogold [valor]",
  'example': "bolaogold 10",
  'menu': "gold",
  'menuSection': "Economia",
  'permissions': _0x40bf0c,
  'requirements': {},
  'execute': async ({
    conn: _0xdd0ff2,
    info: _0x211258,
    from: _0x211551,
    sender: _0x4ca352,
    args: _0x5179f5,
    reply: _0x10eaa7,
    mention: _0x2b93c9,
    BANCOP: _0x3e20dd,
    Os_Returns: _0x2d85ec,
    dataGp: _0x807846,
    prefix: _0x330b3c,
    command: _0x441a43,
    configsGold: _0x3d1858,
    goldSystem: _0x45e3d9
  }) => {
    if (_0x807846[0]?.["sistemgold"] === 0) {
      return _0x10eaa7("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    try {
      const _0x485bc4 = {
        text: '🎫',
        key: _0x211258.key
      };
      const _0x36860f = {
        react: _0x485bc4
      };
      await _0xdd0ff2.sendMessage(_0x211551, _0x36860f);
      const _0x234250 = () => {
        try {
          return _0x45e3d9.getBolao(_0x211551) || [];
        } catch (_0x26346f) {
          console.error("Erro ao ler bolão:", _0x26346f);
          return [];
        }
      };
      const _0x5b90f9 = _0x8e39c9 => {
        try {
          return _0x45e3d9.updateBolao(_0x211551, _0x8e39c9);
        } catch (_0x574d55) {
          console.error("Erro ao atualizar bolão:", _0x574d55);
          return false;
        }
      };
      let _0x1fe423 = await _0x234250();
      if (!_0x1fe423 || _0x1fe423.length === 0) {
        if (!_0x5179f5[0] || isNaN(_0x5179f5[0])) {
          return _0x10eaa7("❌ Para iniciar um bolão, informe o valor da aposta.\n\nExemplo: " + _0x330b3c + _0x441a43 + " 5\n\n⚠️ Não pode apostar mais de 100 no bolão.");
        }
        const _0x2205a8 = parseInt(_0x5179f5[0]);
        if (_0x2205a8 > 100) {
          return _0x10eaa7("❌ O valor máximo para apostar no bolão é 50 " + _0x3d1858.emojis.gold + ".\n\nExemplo: " + _0x330b3c + _0x441a43 + " 5");
        }
        if (_0x2205a8 <= 0) {
          return _0x10eaa7("❌ O valor da aposta deve ser maior que zero.\n\nExemplo: " + _0x330b3c + _0x441a43 + " 5");
        }
        const _0x7e61a = _0x45e3d9.getBalance(_0x211551, _0x4ca352);
        if (_0x7e61a < _0x2205a8) {
          return _0x10eaa7("❌ Você não tem " + _0x2205a8 + " " + _0x3d1858.emojis.gold + " para iniciar o bolão. Seu saldo: " + _0x7e61a + " " + _0x3d1858.emojis.gold);
        }
        _0x45e3d9.removeGold(_0x211551, _0x4ca352, _0x2205a8);
        _0x1fe423 = [{
          'id': _0x4ca352,
          'aposta': _0x2205a8,
          'timestamp': Date.now()
        }];
        _0x5b90f9(_0x1fe423);
        _0x2b93c9("╭━━━ 🎫 BOLÃO GOLD 🎫 ━━━╮\n┃\n┃ 🎲 BOLÃO INICIADO! 🎲\n┃\n┃ @" + _0x4ca352.split('@')[0] + " iniciou um bolão \n┃ com aposta de " + _0x2205a8 + " " + _0x3d1858.emojis.gold + "!\n┃\n┃ 👥 Participantes: 1/5\n┃ 💰 Valor acumulado: " + _0x2205a8 + " " + _0x3d1858.emojis.gold + "\n┃\n┃ ⏰ O quinto usuário a participar\n┃ acionará a roleta para sortear o\n┃ vencedor!\n┃\n┃ 💡 Para participar, digite:\n┃ " + _0x330b3c + _0x441a43 + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯");
      } else {
        const _0xdf7f68 = _0x1fe423[0]?.["timestamp"] || 0;
        const _0x55cb9a = (Date.now() - _0xdf7f68) / 3600000;
        if (_0x55cb9a > 24) {
          for (const _0x52fba0 of _0x1fe423) {
            try {
              _0x45e3d9.addGold(_0x211551, _0x52fba0.id, _0x52fba0.aposta);
              await _0xdd0ff2.sendMessage(_0x52fba0.id, {
                'text': "O bolão do grupo foi cancelado por inatividade. Seus " + _0x52fba0.aposta + " " + _0x3d1858.emojis.gold + " foram devolvidos ao seu saldo."
              })["catch"](() => {});
            } catch (_0x234ac7) {
              console.error("Erro ao devolver gold:", _0x234ac7);
            }
          }
          _0x5b90f9([]);
          return _0x10eaa7("O bolão anterior expirou após 24 horas e os valores foram devolvidos aos participantes. Por favor, inicie um novo bolão com " + _0x330b3c + _0x441a43 + " [valor].");
        }
        if (_0x1fe423.some(_0x1fc3a2 => _0x1fc3a2.id === _0x4ca352)) {
          return _0x10eaa7("❌ Você já está participando do bolão. Aguarde o quinto usuário participar para a roleta ser acionada.");
        }
        const _0x296968 = _0x1fe423[0].aposta;
        const _0x3b1ec4 = _0x45e3d9.getBalance(_0x211551, _0x4ca352);
        if (_0x3b1ec4 < _0x296968) {
          return _0x10eaa7("❌ Você não tem " + _0x296968 + " " + _0x3d1858.emojis.gold + " para participar do bolão. Seu saldo: " + _0x3b1ec4 + " " + _0x3d1858.emojis.gold);
        }
        _0x45e3d9.removeGold(_0x211551, _0x4ca352, _0x296968);
        _0x1fe423.push({
          'id': _0x4ca352,
          'aposta': _0x296968,
          'timestamp': Date.now()
        });
        _0x5b90f9(_0x1fe423);
        const _0x2142cb = _0x1fe423.length * _0x296968;
        let _0x238a83 = '';
        for (let _0x93932e = 0; _0x93932e < _0x1fe423.length; _0x93932e++) {
          _0x238a83 += "┃ " + (_0x93932e + 1) + ". @" + _0x1fe423[_0x93932e].id.split('@')[0] + "\n";
        }
        if (_0x1fe423.length < 5) {
          _0x2b93c9("╭━━━ 🎫 BOLÃO GOLD 🎫 ━━━╮\n┃\n┃ 🎲 NOVO PARTICIPANTE! 🎲\n┃\n┃ @" + _0x4ca352.split('@')[0] + " entrou no bolão!\n┃\n┃ 👥 Participantes: " + _0x1fe423.length + "/5\n┃ 💰 Valor acumulado: " + _0x2142cb + " " + _0x3d1858.emojis.gold + "\n┃\n┃ PARTICIPANTES:\n" + _0x238a83 + "┃\n┃ 💡 Para participar, digite:\n┃ " + _0x330b3c + _0x441a43 + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯");
        } else {
          const _0x2df1f5 = {
            text: '🎰',
            key: _0x211258.key
          };
          const _0x2b6d62 = {
            react: _0x2df1f5
          };
          await _0xdd0ff2.sendMessage(_0x211551, _0x2b6d62);
          _0x2b93c9("╭━━━ 🎫 BOLÃO GOLD 🎫 ━━━╮\n┃\n┃ 🎲 SORTEIO INICIADO! 🎲\n┃\n┃ @" + _0x4ca352.split('@')[0] + " foi o quinto\n┃ participante e acionou o sorteio!\n┃\n┃ 👥 Participantes: 5/5\n┃ 💰 Valor acumulado: " + _0x2142cb + " " + _0x3d1858.emojis.gold + "\n┃\n┃ 🎯 O vencedor será anunciado\n┃ em 5 segundos...\n╰━━━━━━━━━━━━━━━━━━━━━━╯");
          setTimeout(async () => {
            const _0x516104 = Math.floor(Math.random() * _0x1fe423.length);
            const _0x21f629 = _0x1fe423[_0x516104];
            const _0x42085c = await _0x234250();
            if (!_0x42085c || _0x42085c.length === 0) {
              return;
            }
            _0x45e3d9.addGold(_0x211551, _0x21f629.id, _0x2142cb);
            _0x2b93c9("╭━━━ 🎫 BOLÃO GOLD 🎫 ━━━╮\n┃\n┃ 🎉 TEMOS UM VENCEDOR! 🎉\n┃\n┃ 🏆 @" + _0x21f629.id.split('@')[0] + " ganhou\n┃ o bolão de " + _0x2142cb + " " + _0x3d1858.emojis.gold + "!\n┃\n┃ 👥 Total de participantes: 5\n┃ 💰 Novo saldo: " + _0x45e3d9.getBalance(_0x211551, _0x21f629.id) + " " + _0x3d1858.emojis.gold + "\n┃\n┃ 🙏 Obrigado a todos que\n┃ participaram!\n╰━━━━━━━━━━━━━━━━━━━━━━╯");
            _0x5b90f9([]);
          }, 5000);
        }
      }
    } catch (_0xb6c4df) {
      console.error("Erro no bolão de gold:", _0xb6c4df);
      _0x10eaa7("❌ Ocorreu um erro ao processar o bolão. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "lojagold",
  'aliases': ["goldshop", "lojagl", "goldstore"],
  'category': "economia",
  'description': "Loja para gastar seu gold",
  'longDescription': "Uma loja interativa onde você pode gastar seu gold para comprar itens e vantagens no bot.",
  'usage': "lojagold [codigo]",
  'example': "lojagold\nlojagold cachaca\nlojagold minerar",
  'menu': "gold",
  'menuSection': "Economia",
  'permissions': _0x597d28,
  'requirements': {},
  'execute': async ({
    conn: _0x2dee7e,
    info: _0x5bd563,
    from: _0x254e5d,
    sender: _0x140012,
    prefix: _0x3bac29,
    createChoiceMenu: _0x38937a,
    reply: _0x34c686,
    dataGp: _0x42017c,
    goldSystem: _0x546086,
    configsGold: _0x445873,
    q: _0x2816cb
  }) => {
    if (_0x42017c[0]?.["sistemgold"] === 0) {
      return _0x34c686("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    const _0x373034 = _0x546086.getBalance(_0x254e5d, _0x140012);
    const _0x31e6c3 = _0x546086.getUser(_0x254e5d, _0x140012);
    const _0x38428c = _0x31e6c3.chances || {};
    if (typeof _0x38428c.cachaca === "undefined") {
      _0x38428c.cachaca = 3;
      _0x546086.updateChances(_0x254e5d, _0x140012, _0x38428c);
    }
    if (typeof _0x38428c.comprasCachaca === "undefined") {
      _0x38428c.comprasCachaca = 0;
      _0x546086.updateChances(_0x254e5d, _0x140012, _0x38428c);
    }
    ["comprasMinerar", "comprasRoubar", "comprasAviator", "comprasRoleta", "comprasEscudo"].forEach(_0xd9b6d6 => {
      if (typeof _0x38428c[_0xd9b6d6] === "undefined") {
        _0x38428c[_0xd9b6d6] = 0;
        _0x546086.updateChances(_0x254e5d, _0x140012, _0x38428c);
      }
    });
    const _0x15a01d = {
      'cachaca': {
        'preco': 0x32,
        'nome': "Cachaça",
        'emoji': '🥃',
        'descricao': "Para usar com !enviarcachaca",
        'verificar': () => {
          if (_0x38428c.cachaca >= 3) {
            const _0x350902 = {
              sucesso: false,
              mensagem: "🥃 Você já tem o máximo de 3 cachaças disponíveis!"
            };
            return _0x350902;
          }
          const _0x917316 = {
            sucesso: false,
            mensagem: "❌ Você atingiu o limite de 5 compras de cachaça por dia! Volte amanhã para comprar mais."
          };
          if (_0x38428c.comprasCachaca >= 5) {
            return _0x917316;
          }
          const _0x1c01df = {
            sucesso: true
          };
          return _0x1c01df;
        },
        'processar': () => {
          _0x38428c.cachaca += 1;
          _0x38428c.comprasCachaca += 1;
          _0x546086.updateChances(_0x254e5d, _0x140012, _0x38428c);
        }
      },
      'minerar': {
        'preco': 0x50,
        'nome': "Recarga de Minerar",
        'emoji': '⛏️',
        'descricao': "Restaura 1 chance de minerar",
        'verificar': () => {
          const _0x3e5f01 = {
            sucesso: false,
            mensagem: "⛏️ Você já tem todas as suas chances de minerar disponíveis!"
          };
          if ((_0x38428c.ChanceG || 0) <= 0) {
            return _0x3e5f01;
          }
          const _0x47ee94 = {
            sucesso: false,
            mensagem: "❌ Você atingiu o limite de 2 compras de recargas de minerar por dia! Volte amanhã para comprar mais."
          };
          if (_0x38428c.comprasMinerar >= 2) {
            return _0x47ee94;
          }
          const _0x4204a0 = {
            sucesso: true
          };
          return _0x4204a0;
        },
        'processar': () => {
          _0x38428c.ChanceG = Math.max(0, (_0x38428c.ChanceG || 0) - 1);
          _0x38428c.comprasMinerar = (_0x38428c.comprasMinerar || 0) + 1;
          _0x546086.updateChances(_0x254e5d, _0x140012, _0x38428c);
        }
      },
      'roubar': {
        'preco': 0x64,
        'nome': "Recarga de Roubar",
        'emoji': '🥷',
        'descricao': "Restaura 1 chance de roubar",
        'verificar': () => {
          const _0x31412a = {
            sucesso: false,
            mensagem: "🥷 Você já tem todas as suas chances de roubo disponíveis!"
          };
          if ((_0x38428c.roubosDiarios || 0) <= 0) {
            return _0x31412a;
          }
          const _0x1dad51 = {
            sucesso: false,
            mensagem: "❌ Você atingiu o limite de 2 compras de recargas de roubo por dia! Volte amanhã para comprar mais."
          };
          if (_0x38428c.comprasRoubar >= 2) {
            return _0x1dad51;
          }
          const _0x46734 = {
            sucesso: true
          };
          return _0x46734;
        },
        'processar': () => {
          _0x38428c.roubosDiarios = Math.max(0, (_0x38428c.roubosDiarios || 0) - 1);
          _0x38428c.comprasRoubar = (_0x38428c.comprasRoubar || 0) + 1;
          _0x546086.updateChances(_0x254e5d, _0x140012, _0x38428c);
        }
      },
      'aviator': {
        'preco': 0x78,
        'nome': "Recarga de Aviator",
        'emoji': '✈️',
        'descricao': "Restaura 1 chance de aviator",
        'verificar': () => {
          const _0x1be2e8 = {
            sucesso: false,
            mensagem: "✈️ Você já tem todas as suas chances de aviator disponíveis!"
          };
          if ((_0x38428c.aviator || 0) <= 0) {
            return _0x1be2e8;
          }
          const _0x211c92 = {
            sucesso: false,
            mensagem: "❌ Você atingiu o limite de 2 compras de recargas de aviator por dia! Volte amanhã para comprar mais."
          };
          if (_0x38428c.comprasAviator >= 2) {
            return _0x211c92;
          }
          const _0x3e4f9f = {
            sucesso: true
          };
          return _0x3e4f9f;
        },
        'processar': () => {
          _0x38428c.aviator = Math.max(0, (_0x38428c.aviator || 0) - 1);
          _0x38428c.comprasAviator = (_0x38428c.comprasAviator || 0) + 1;
          _0x546086.updateChances(_0x254e5d, _0x140012, _0x38428c);
        }
      },
      'roleta': {
        'preco': 0x96,
        'nome': "Recarga de Roleta",
        'emoji': '🎡',
        'descricao': "Permite jogar roleta novamente",
        'verificar': () => {
          const _0xe2aaf8 = {
            sucesso: false,
            mensagem: "🎡 Você já tem sua chance de roleta disponível!"
          };
          if (!_0x38428c.roletadasorte) {
            return _0xe2aaf8;
          }
          const _0x3ad506 = {
            sucesso: false,
            mensagem: "❌ Você atingiu o limite de 1 compra de recarga de roleta por dia! Volte amanhã para comprar mais."
          };
          if (_0x38428c.comprasRoleta >= 1) {
            return _0x3ad506;
          }
          const _0x948074 = {
            sucesso: true
          };
          return _0x948074;
        },
        'processar': () => {
          _0x38428c.roletadasorte = false;
          _0x38428c.comprasRoleta = (_0x38428c.comprasRoleta || 0) + 1;
          _0x546086.updateChances(_0x254e5d, _0x140012, _0x38428c);
        }
      },
      'escudo': {
        'preco': 0xc8,
        'nome': "Escudo",
        'emoji': "🛡️",
        'descricao': "Proteção contra roubos por 12h",
        'verificar': () => {
          const _0xca66c2 = Array.isArray(_0x38428c.Escudo) && _0x38428c.Escudo.length > 0;
          const _0x3bbabf = {
            sucesso: false,
            mensagem: "🛡️ Você já tem um escudo ativo!"
          };
          if (_0xca66c2) {
            return _0x3bbabf;
          }
          const _0xc3761b = {
            sucesso: false,
            mensagem: "❌ Você atingiu o limite de 1 compra de escudo por dia! Volte amanhã para comprar mais."
          };
          if (_0x38428c.comprasEscudo >= 1) {
            return _0xc3761b;
          }
          const _0x38193a = {
            sucesso: true
          };
          return _0x38193a;
        },
        'processar': () => {
          const _0x354b4d = Date.now();
          const _0x3770d1 = {
            'active': true,
            'time': _0x354b4d + 43200000,
            'rn': 0x1
          };
          _0x38428c.Escudo = [_0x3770d1];
          _0x38428c.comprasEscudo = (_0x38428c.comprasEscudo || 0) + 1;
          _0x546086.updateChances(_0x254e5d, _0x140012, _0x38428c);
        }
      }
    };
    const _0x586b83 = _0x2816cb.trim();
    const _0x2d9ae0 = _0x15a01d[_0x586b83];
    if (_0x2d9ae0) {
      try {
        const _0x2ffd04 = {
          text: _0x2d9ae0.emoji,
          key: _0x5bd563.key
        };
        const _0x71384a = {
          react: _0x2ffd04
        };
        await _0x2dee7e.sendMessage(_0x254e5d, _0x71384a);
        const _0x45415b = _0x2d9ae0.verificar();
        if (!_0x45415b.sucesso) {
          return _0x34c686(_0x45415b.mensagem);
        }
        if (_0x373034 < _0x2d9ae0.preco) {
          return _0x34c686("❌ Você não tem " + _0x445873.emojis.gold + " suficiente! Precisa de " + _0x2d9ae0.preco + " " + _0x445873.emojis.gold + " para comprar 1 " + _0x2d9ae0.nome + '.');
        }
        _0x546086.removeGold(_0x254e5d, _0x140012, _0x2d9ae0.preco);
        _0x2d9ae0.processar();
        return true;
      } catch (_0x192ab8) {
        console.error("Erro ao comprar " + _0x586b83 + ':', _0x192ab8);
        return _0x34c686("❌ Ocorreu um erro ao processar a compra. Tente novamente mais tarde.");
      }
    }
    const _0x31c086 = {
      submenu: "cachaca"
    };
    const _0x4d26e = {
      submenu: "minerar"
    };
    const _0x48ee47 = {
      submenu: "roubar"
    };
    const _0x5e4550 = {
      submenu: "aviator"
    };
    const _0x20c686 = {
      submenu: "roleta"
    };
    const _0x2d43b0 = {
      submenu: "escudo"
    };
    const _0x34af4a = {
      close: true,
      text: "✅ Loja fechada com sucesso!",
      edit: true
    };
    const _0x18ce3d = {
      '1': _0x31c086,
      '2': _0x4d26e
    };
    _0x18ce3d['3'] = _0x48ee47;
    _0x18ce3d['4'] = _0x5e4550;
    _0x18ce3d['5'] = _0x20c686;
    _0x18ce3d['6'] = _0x2d43b0;
    _0x18ce3d['0'] = _0x34af4a;
    const _0x337fcb = {
      text: "╭━━━⊱「 LOJA GOLD 」⊰━━━╮\n┃\n┃ 💰 Seu saldo: " + _0x373034 + " " + _0x445873.emojis.gold + "\n┃\n┃ 1 - Cachaça 🥃\n┃ • Itens para enviar cachaça \n┃\n┃ 2 - Recarga de Minerar ⛏️\n┃ • Restaura 1 chance usada\n┃\n┃ 3 - Recarga de Roubar 🥷\n┃ • Restaura 1 chance usada\n┃\n┃ 4 - Recarga de Aviator ✈️\n┃ • Restaura 1 chance usada\n┃\n┃ 5 - Recarga de Roleta 🎡\n┃ • Permite jogar novamente\n┃\n┃ 6 - Escudo 🛡️\n┃ • Proteção contra roubos\n┃\n┃ 0 - Sair\n┃ • Encerra o menu\n┃\n╰━━━⊱「 𝐋𝐎𝐉𝐀 𝐆𝐎𝐋𝐃 」⊰━━━╯\n\nDigite uma opção:",
      options: _0x18ce3d
    };
    const _0x597dc7 = {
      text: "🥃 Compra Efetuada Com Sucesso ✅...",
      command: _0x3bac29 + "lojagold cachaca",
      edit: true
    };
    const _0x333610 = {
      submenu: "principal"
    };
    const _0x5d4827 = {
      '1': _0x597dc7,
      '0': _0x333610
    };
    const _0x3dd193 = {
      text: "╭━━━⊱「 COMPRAR CACHAÇA 」⊰━━━╮\n┃\n┃ 💰 Seu saldo: " + _0x373034 + " " + _0x445873.emojis.gold + "\n┃ 🍾 Cachaças disponíveis: " + _0x38428c.cachaca + "/3\n┃ 🛒 Compras hoje: " + (_0x38428c.comprasCachaca || 0) + "/5\n┃\n┃ 1 - Comprar 1 Cachaça (50 " + _0x445873.emojis.gold + ")\n┃ • Para usar com !enviarcachaca\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐂𝐀𝐂𝐇𝐀Ç𝐀 」⊰━━━╯\n\nDigite uma opção:",
      options: _0x5d4827
    };
    const _0x116abe = {
      text: "⛏️ Compra Efetuada Com Sucesso ✅...",
      command: _0x3bac29 + "lojagold minerar",
      edit: true
    };
    const _0x4c962c = {
      submenu: "principal"
    };
    const _0x435bc4 = {
      '1': _0x116abe,
      '0': _0x4c962c
    };
    const _0x51eebd = {
      text: "╭━━━⊱「 RECARGA DE MINERAR 」⊰━━━╮\n┃\n┃ 💰 Seu saldo: " + _0x373034 + " " + _0x445873.emojis.gold + "\n┃ ⛏️ Chances usadas: " + (_0x38428c.ChanceG || 0) + '/' + (_0x445873.chances.ChanceG || 3) + "\n┃ 🛒 Compras hoje: " + (_0x38428c.comprasMinerar || 0) + "/2\n┃\n┃ 1 - Comprar Recarga (80 " + _0x445873.emojis.gold + ")\n┃ • Restaura 1 chance de minerar\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐌𝐈𝐍𝐄𝐑𝐀𝐑 」⊰━━━╯\n\nDigite uma opção:",
      options: _0x435bc4
    };
    const _0x3224ed = {
      text: "🥷 Compra Efetuada Com Sucesso ✅...",
      command: _0x3bac29 + "lojagold roubar",
      edit: true
    };
    const _0x23590 = {
      submenu: "principal"
    };
    const _0x3ced97 = {
      '1': _0x3224ed,
      '0': _0x23590
    };
    const _0x299a3a = {
      text: "╭━━━⊱「 RECARGA DE ROUBAR 」⊰━━━╮\n┃\n┃ 💰 Seu saldo: " + _0x373034 + " " + _0x445873.emojis.gold + "\n┃ 🥷 Roubos feitos hoje: " + (_0x38428c.roubosDiarios || 0) + '/' + (_0x445873.chances.ChanceR || 5) + "\n┃ 🛒 Compras hoje: " + (_0x38428c.comprasRoubar || 0) + "/2\n┃\n┃ 1 - Comprar Recarga (100 " + _0x445873.emojis.gold + ")\n┃ • Restaura 1 chance de roubar\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐑𝐎𝐔𝐁𝐀𝐑 」⊰━━━╯\n\nDigite uma opção:",
      options: _0x3ced97
    };
    const _0xb2ca1b = {
      text: "✈️ Compra Efetuada Com Sucesso ✅...",
      command: _0x3bac29 + "lojagold aviator",
      edit: true
    };
    const _0x31fb2e = {
      submenu: "principal"
    };
    const _0x4176a2 = {
      '1': _0xb2ca1b,
      '0': _0x31fb2e
    };
    const _0x3dda45 = {
      text: "╭━━━⊱「 RECARGA DE AVIATOR 」⊰━━━╮\n┃\n┃ 💰 Seu saldo: " + _0x373034 + " " + _0x445873.emojis.gold + "\n┃ ✈️ Chances usadas: " + (_0x38428c.aviator || 0) + '/' + (_0x445873.chances.aviator || 3) + "\n┃ 🛒 Compras hoje: " + (_0x38428c.comprasAviator || 0) + "/2\n┃\n┃ 1 - Comprar Recarga (120 " + _0x445873.emojis.gold + ")\n┃ • Restaura 1 chance de aviator\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐀𝐕𝐈𝐀𝐓𝐎𝐑 」⊰━━━╯\n\nDigite uma opção:",
      options: _0x4176a2
    };
    const _0x259e44 = {
      text: "╭━━━⊱「 RECARGA DE ROLETA 」⊰━━━╮\n┃\n┃ 💰 Seu saldo: " + _0x373034 + " " + _0x445873.emojis.gold + "\n┃ 🎡 Status da roleta: " + (_0x38428c.roletadasorte ? "Já usada hoje" : "Disponível") + "\n┃ 🛒 Compras hoje: " + (_0x38428c.comprasRoleta || 0) + "/1\n┃\n┃ 1 - Comprar Recarga (150 " + _0x445873.emojis.gold + ")\n┃ • Permite jogar roleta novamente\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐑𝐎𝐋𝐄𝐓𝐀 」⊰━━━╯\n\nDigite uma opção:",
      options: {}
    };
    _0x259e44.options['1'] = {};
    _0x259e44.options['0'] = {};
    _0x259e44.options['1'].text = "🎡 Compra Efetuada Com Sucesso ✅...";
    _0x259e44.options['1'].command = _0x3bac29 + "lojagold roleta";
    _0x259e44.options['1'].edit = true;
    _0x259e44.options['0'].submenu = "principal";
    const _0x57c216 = {
      'text': "╭━━━⊱「 COMPRAR ESCUDO 」⊰━━━╮\n┃\n┃ 💰 Seu saldo: " + _0x373034 + " " + _0x445873.emojis.gold + "\n┃ 🛡️ Status do escudo: " + (Array.isArray(_0x38428c.Escudo) && _0x38428c.Escudo.length > 0 ? "Ativo" : "Inativo") + "\n┃ 🛒 Compras hoje: " + (_0x38428c.comprasEscudo || 0) + "/1\n┃\n┃ 1 - Comprar 1 Escudo (200 " + _0x445873.emojis.gold + ")\n┃ • Protege contra roubos por 12h\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐄𝐒𝐂𝐔𝐃𝐎 」⊰━━━╯\n\nDigite uma opção:",
      'options': {
        '1': {
          'text': "🛡️ Compra Efetuada Com Sucesso ✅...",
          'command': _0x3bac29 + "lojagold escudo",
          'edit': true
        },
        '0': {
          'submenu': "principal"
        }
      }
    };
    const _0x52bf6f = {
      principal: _0x337fcb,
      cachaca: _0x3dd193,
      minerar: _0x51eebd,
      roubar: _0x299a3a,
      aviator: _0x3dda45,
      roleta: _0x259e44,
      escudo: _0x57c216
    };
    const _0x1c9b3e = {
      text: '🛒',
      key: _0x5bd563.key
    };
    const _0x360856 = {
      react: _0x1c9b3e
    };
    await _0x2dee7e.sendMessage(_0x254e5d, _0x360856);
    await _0x38937a(_0x254e5d, _0x140012, _0x52bf6f.principal.text, _0x52bf6f.principal.options, {
      'menus': _0x52bf6f,
      'history': ["principal"]
    });
    return true;
  }
}, {
  'name': "enviarcachaca",
  'aliases': ["cachaca", "enviarcachaça", "cachaça"],
  'category': "economia",
  'description': "Envie cachaça para outro usuário e veja o que acontece",
  'longDescription': "Um jogo de sorte onde você envia cachaça para outro usuário e diferentes resultados podem ocorrer, podendo ganhar ou perder gold.",
  'usage': "enviarcachaca @usuário",
  'example': "enviarcachaca @usuario",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': _0x1af91f,
  'requirements': {},
  'execute': async ({
    conn: _0x10b6ae,
    info: _0x2f8a7d,
    from: _0x1fd820,
    sender: _0x2d5cb1,
    botNumber: _0x29fa49,
    menc_os2: _0x5004b2,
    reply: _0x2780ad,
    mention: _0x1914f6,
    BANCOP: _0x163c7a,
    dataGp: _0x13f45e,
    goldSystem: _0x32ef1f,
    configsGold: _0x4724c8
  }) => {
    if (_0x13f45e[0]?.["sistemgold"] === 0) {
      return _0x2780ad("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    if (!_0x5004b2) {
      return _0x2780ad("❌ Você deve marcar a mensagem do usuário com !enviarcachaca ou !enviarcachaca @usuario");
    }
    if (_0x5004b2 === _0x2d5cb1) {
      return _0x2780ad("❌ Não pode enviar cachaça para você mesmo, cabeção! 🤦‍♂️");
    }
    if (_0x5004b2 === _0x29fa49) {
      return _0x2780ad("❌ Eu não bebo! Sou um bot responsável. 🤖");
    }
    try {
      const _0x4b3234 = {
        text: '🥃',
        key: _0x2f8a7d.key
      };
      const _0x19d280 = {
        react: _0x4b3234
      };
      await _0x10b6ae.sendMessage(_0x1fd820, _0x19d280);
      const _0x458542 = _0x32ef1f.getUser(_0x1fd820, _0x2d5cb1);
      const _0x5607b0 = _0x458542.chances || {};
      if (typeof _0x5607b0.cachaca === "undefined") {
        _0x5607b0.cachaca = 3;
        _0x32ef1f.updateChances(_0x1fd820, _0x2d5cb1, _0x5607b0);
      }
      if (_0x5607b0.cachaca < 1) {
        return _0x2780ad("❌ Você não tem mais cachaça! Seu limite diário acabou. Volte amanhã para ter mais 3 cachaças.");
      }
      const _0x174c13 = _0x32ef1f.getBalance(_0x1fd820, _0x2d5cb1);
      const _0x102211 = _0x32ef1f.getBalance(_0x1fd820, _0x5004b2);
      if (_0x102211 <= 0) {
        return _0x2780ad("❌ " + _0x4724c8.emojis.gold + " Este usuário não tem nenhum Gold para você embebedar ele.");
      }
      if (_0x174c13 <= 0) {
        return _0x2780ad("❌ " + _0x4724c8.emojis.gold + " Você não tem nenhum Gold para tentar embebedar ele, como vai pegar o uber? 🤡 Ele mora longe.");
      }
      _0x5607b0.cachaca -= 1;
      _0x32ef1f.updateChances(_0x1fd820, _0x2d5cb1, _0x5607b0);
      const _0x4f1af3 = _0x32ef1f.getUser(_0x1fd820, _0x5004b2);
      const _0xcffbbf = _0x4f1af3.chances || {};
      if (Array.isArray(_0xcffbbf.Escudo) && _0xcffbbf.Escudo.length > 0) {
        const _0x434605 = _0xcffbbf.Escudo[0] || {};
        const _0x396683 = (_0x434605.rn || 1) + 1;
        if (Math.floor(Math.random() * _0x396683) === 1) {
          _0xcffbbf.Escudo = [];
          _0x32ef1f.updateChances(_0x1fd820, _0x5004b2, _0xcffbbf);
          _0x2780ad("🛡️ O usuário estava com escudo, mas você conseguiu quebrá-lo! Parabéns!");
        } else {
          return _0x2780ad("🛡️ O usuário está com escudo, e você não conseguiu quebrá-lo. Você não conseguiu nada, sinto muito.\n\nCachaças restantes: " + _0x5607b0.cachaca + '/3');
        }
      }
      const _0x809daf = Math.min(_0x174c13 > 500 ? Math.floor(Math.random() * 500) : Math.floor(Math.random() * _0x174c13), _0x174c13);
      const _0x2a1ad6 = Math.max(Math.min(_0x809daf, _0x174c13), Math.min(10, _0x174c13));
      const _0x403755 = Math.min(_0x102211 > 500 ? Math.floor(Math.random() * 500) : Math.floor(Math.random() * _0x102211), _0x102211);
      const _0x552093 = Math.max(Math.min(_0x403755, _0x102211), Math.min(10, _0x102211));
      const _0x3b40fd = Math.floor(Math.random() * 4);
      _0x2780ad("🥃 Enviando cachaça...");
      setTimeout(async () => {
        switch (_0x3b40fd) {
          case 0:
            const _0x402a33 = {
              text: '🙏',
              key: _0x2f8a7d.key
            };
            const _0xb3504e = {
              react: _0x402a33
            };
            await _0x10b6ae.sendMessage(_0x1fd820, _0xb3504e);
            _0x1914f6("\n╭━━━ 🥃 CACHAÇA 🥃 ━━━╮\n┃\n┃ 🙏 CRISTÃO DETECTED! 🙏\n┃\n┃ Eita, acho que o usuário @" + _0x5004b2.split('@')[0] + " é \n┃ cristão e não quis consumir nenhuma gota 🤷‍♂️\n┃\n┃ Você voltou andando para casa sem nada...\n┃\n┃ 💰 Seu saldo: " + _0x32ef1f.getBalance(_0x1fd820, _0x2d5cb1) + " " + _0x4724c8.emojis.gold + "\n┃ 🍾 Cachaças restantes: " + _0x5607b0.cachaca + "/3\n╰━━━━━━━━━━━━━━━━━━━━━╯");
            break;
          case 1:
            if (_0x2a1ad6 > 0) {
              _0x32ef1f.transferGold(_0x1fd820, _0x2d5cb1, _0x5004b2, _0x2a1ad6);
              const _0x5d135e = {
                text: '💸',
                key: _0x2f8a7d.key
              };
              const _0x28a809 = {
                react: _0x5d135e
              };
              await _0x10b6ae.sendMessage(_0x1fd820, _0x28a809);
              _0x1914f6("╭━━━ 🥃 CACHAÇA 🥃 ━━━╮\n┃\n┃ 🙅‍♂️ EX-ALCOÓLATRA ALERT! 🙅‍♂️\n┃\n┃ O usuário @" + _0x5004b2.split('@')[0] + " foi esperto!\n┃ \n┃ Ele era um ex-alcoólatra e jogou a \n┃ garrafa em você! Enquanto você corria, \n┃ perdeu " + _0x2a1ad6 + " " + _0x4724c8.emojis.gold + "\n┃\n┃ 💰 Seu saldo: " + _0x32ef1f.getBalance(_0x1fd820, _0x2d5cb1) + " " + _0x4724c8.emojis.gold + "\n┃ 🍾 Cachaças restantes: " + _0x5607b0.cachaca + "/3\n╰━━━━━━━━━━━━━━━━━━━━━╯");
            } else {
              const _0x30ba95 = {
                text: '🏃',
                key: _0x2f8a7d.key
              };
              const _0x120063 = {
                react: _0x30ba95
              };
              await _0x10b6ae.sendMessage(_0x1fd820, _0x120063);
              _0x1914f6("╭━━━ 🥃 CACHAÇA 🥃 ━━━╮\n┃\n┃ 🙅‍♂️ EX-ALCOÓLATRA ALERT! 🙅‍♂️\n┃\n┃ O usuário @" + _0x5004b2.split('@')[0] + " foi esperto!\n┃\n┃ Ele era um ex-alcoólatra e jogou a \n┃ garrafa em você! Você escapou sem \n┃ perder Gold, pois já estava quase falido.\n┃\n┃ 💰 Seu saldo: " + _0x32ef1f.getBalance(_0x1fd820, _0x2d5cb1) + " " + _0x4724c8.emojis.gold + "\n┃ 🍾 Cachaças restantes: " + _0x5607b0.cachaca + "/3\n╰━━━━━━━━━━━━━━━━━━━━━╯");
            }
            break;
          case 2:
            if (_0x552093 > 0) {
              _0x32ef1f.transferGold(_0x1fd820, _0x5004b2, _0x2d5cb1, _0x552093);
              const _0x4d36a8 = {
                text: '🤑',
                key: _0x2f8a7d.key
              };
              const _0x19048d = {
                react: _0x4d36a8
              };
              await _0x10b6ae.sendMessage(_0x1fd820, _0x19048d);
              _0x1914f6("╭━━━ 🥃 CACHAÇA 🥃 ━━━╮\n┃\n┃ 🍻 ALCOÓLATRA ENCONTRADO! 🍻\n┃\n┃ Eita! O usuário @" + _0x5004b2.split('@')[0] + " curte \n┃ uma cachaça 51 e acertou em cheio!\n┃\n┃ Ele consumiu bastante até que derrubou \n┃ " + _0x552093 + " " + _0x4724c8.emojis.gold + "! Parabéns! 🔥 \n┃\n┃ 💰 Seu saldo: " + _0x32ef1f.getBalance(_0x1fd820, _0x2d5cb1) + " " + _0x4724c8.emojis.gold + "\n┃ 🍾 Cachaças restantes: " + _0x5607b0.cachaca + "/3\n╰━━━━━━━━━━━━━━━━━━━━━╯");
            } else {
              const _0x38a1e8 = {
                text: '😔',
                key: _0x2f8a7d.key
              };
              const _0x4afa2a = {
                react: _0x38a1e8
              };
              await _0x10b6ae.sendMessage(_0x1fd820, _0x4afa2a);
              _0x1914f6("╭━━━ 🥃 CACHAÇA 🥃 ━━━╮\n┃\n┃ 🍻 ALCOÓLATRA ENCONTRADO! 🍻\n┃\n┃ Eita! O usuário @" + _0x5004b2.split('@')[0] + " curte \n┃ uma cachaça 51 e acertou em cheio!\n┃\n┃ Mas você não conseguiu pegar nenhum \n┃ Gold dele pois já estava quase falido.\n┃\n┃ 💰 Seu saldo: " + _0x32ef1f.getBalance(_0x1fd820, _0x2d5cb1) + " " + _0x4724c8.emojis.gold + "\n┃ 🍾 Cachaças restantes: " + _0x5607b0.cachaca + "/3\n╰━━━━━━━━━━━━━━━━━━━━━╯");
            }
            break;
          case 3:
            if (_0x2a1ad6 > 0) {
              _0x32ef1f.removeGold(_0x1fd820, _0x2d5cb1, _0x2a1ad6);
              const _0x39ebdd = {
                text: '👮',
                key: _0x2f8a7d.key
              };
              const _0x3e0bdc = {
                react: _0x39ebdd
              };
              await _0x10b6ae.sendMessage(_0x1fd820, _0x3e0bdc);
              _0x1914f6("╭━━━ 🥃 CACHAÇA 🥃 ━━━╮\n┃\n┃ 👮 POLÍCIA NA ÁREA! 👮\n┃\n┃ Eita! Você estava andando com a cachaça e,\n┃ quando foi enviar para @" + _0x5004b2.split('@')[0] + ",\n┃ a polícia passou perto e viu que você \n┃ estava prestes a cometer um crime!\n┃\n┃ A polícia pediu " + _0x2a1ad6 + " " + _0x4724c8.emojis.gold + " como \n┃ gorjeta em troca de não te prender.\n┃\n┃ 💰 Seu saldo: " + _0x32ef1f.getBalance(_0x1fd820, _0x2d5cb1) + " " + _0x4724c8.emojis.gold + "\n┃ 🍾 Cachaças restantes: " + _0x5607b0.cachaca + "/3\n╰━━━━━━━━━━━━━━━━━━━━━╯");
            } else {
              const _0x290a51 = {
                text: '😅',
                key: _0x2f8a7d.key
              };
              const _0x4659b9 = {
                react: _0x290a51
              };
              await _0x10b6ae.sendMessage(_0x1fd820, _0x4659b9);
              _0x1914f6("╭━━━ 🥃 CACHAÇA 🥃 ━━━╮\n┃\n┃ 👮 POLÍCIA NA ÁREA! 👮\n┃\n┃ Eita! Você estava andando com a cachaça e,\n┃ quando foi enviar para @" + _0x5004b2.split('@')[0] + ",\n┃ a polícia passou perto.\n┃\n┃ Por sorte, você estava tão pobre que \n┃ eles te deixaram ir embora.\n┃\n┃ 💰 Seu saldo: " + _0x32ef1f.getBalance(_0x1fd820, _0x2d5cb1) + " " + _0x4724c8.emojis.gold + "\n┃ 🍾 Cachaças restantes: " + _0x5607b0.cachaca + "/3\n╰━━━━━━━━━━━━━━━━━━━━━╯");
            }
            break;
          default:
            _0x32ef1f.addGold(_0x1fd820, _0x2d5cb1, 200);
            const _0x33800f = {
              text: '💰',
              key: _0x2f8a7d.key
            };
            const _0x5300e7 = {
              react: _0x33800f
            };
            await _0x10b6ae.sendMessage(_0x1fd820, _0x5300e7);
            _0x1914f6("╭━━━ 🥃 CACHAÇA 🥃 ━━━╮\n┃\n┃ 💰 SORTE GRANDE! 💰\n┃\n┃ No caminho de enviar a cachaça para \n┃ @" + _0x5004b2.split('@')[0] + ", você achou \n┃ 200 " + _0x4724c8.emojis.gold + "!\n┃\n┃ Então decidiu voltar para casa com \n┃ o que já conseguiu! Parabéns! 🎉\n┃\n┃ 💰 Seu saldo: " + _0x32ef1f.getBalance(_0x1fd820, _0x2d5cb1) + " " + _0x4724c8.emojis.gold + "\n┃ 🍾 Cachaças restantes: " + _0x5607b0.cachaca + "/3\n╰━━━━━━━━━━━━━━━━━━━━━╯");
            break;
        }
      }, 3000);
    } catch (_0x46aba1) {
      console.error("Erro no envio de cachaça:", _0x46aba1);
      _0x2780ad("❌ Ocorreu um erro ao processar o envio da cachaça. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "quiznumero",
  'aliases': ["quiznumerico", "quiznum", "numquiz"],
  'category': "economia",
  'description': "Jogo de adivinhação de números com recompensa de gold",
  'longDescription': "Um jogo onde você deve adivinhar um número entre 0 e 2 para ganhar gold. Você pode ganhar até 2 vezes por dia.",
  'usage': "quiznumero [número]",
  'example': "quiznumero 1",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': _0x278c35,
  'requirements': {},
  'execute': async ({
    conn: _0x4a42c8,
    info: _0x58be84,
    from: _0x17c8bf,
    sender: _0x2ff4d1,
    args: _0x2c446d,
    reply: _0x521b75,
    BANCOP: _0x4f1328,
    dataGp: _0x3c5ffd,
    prefix: _0x1df8c4,
    command: _0x3f2e7e,
    configsGold: _0x23cfcc,
    goldSystem: _0x209c38
  }) => {
    if (_0x3c5ffd[0]?.["sistemgold"] === 0) {
      return _0x521b75("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    try {
      if (!_0x2c446d[0]) {
        return _0x521b75("📊 QUIZ NUMÉRICO 📊\n\nEste comando funciona da seguinte forma: é uma brincadeira com números. Eu irei escolher um número entre 0, 1 e 2, e você tentará adivinhar qual é.\n\nPor exemplo: " + (_0x1df8c4 + _0x3f2e7e) + " 0\n\nSe você acertar o número que eu escolhi, você ganhará 20 Golds. Você pode ganhar até 2 vezes por dia, e o número que você digitou errado na primeira vez pode ser o que você irá acertar na segunda vez. Boa sorte! 😁");
      }
      const _0x7b5ccc = parseInt(_0x2c446d[0]);
      if (![0, 1, 2].includes(_0x7b5ccc)) {
        return _0x521b75("❌ Você deve escolher um número entre 0, 1 ou 2. Se o número que você escolher for o que eu escolhi, você ganhará 20 Golds.");
      }
      const _0x1710cd = _0x209c38.getUser(_0x17c8bf, _0x2ff4d1);
      const _0x4a640f = _0x1710cd.chances || {};
      let _0x3b9efd = _0x4a640f.quiz || [{
        'errou': 0x0,
        'acertou': 0x0,
        'numero': Math.floor(Math.random() * 3)
      }];
      if (_0x3b9efd[0] && typeof _0x3b9efd[0].numero === "undefined") {
        _0x3b9efd[0].numero = Math.floor(Math.random() * 3);
      }
      if (_0x3b9efd[0].errou >= 2) {
        return _0x521b75("❌ Você já errou 2 vezes hoje. Só amanhã poderá utilizar este comando novamente, sinto muito.");
      }
      if (_0x3b9efd[0].acertou >= 2) {
        return _0x521b75("✅ Você já acertou 2 vezes hoje. Só amanhã você poderá utilizar este comando novamente. Parabéns por seus acertos!");
      }
      const _0x1b94e1 = {
        text: '🎲',
        key: _0x58be84.key
      };
      const _0x1280c6 = {
        react: _0x1b94e1
      };
      await _0x4a42c8.sendMessage(_0x17c8bf, _0x1280c6);
      if (_0x7b5ccc !== _0x3b9efd[0].numero) {
        _0x3b9efd[0].errou += 1;
        _0x4a640f.quiz = _0x3b9efd;
        _0x209c38.updateChances(_0x17c8bf, _0x2ff4d1, _0x4a640f);
        const _0x2fd95c = {
          text: '❌',
          key: _0x58be84.key
        };
        const _0x9cff4d = {
          react: _0x2fd95c
        };
        await _0x4a42c8.sendMessage(_0x17c8bf, _0x9cff4d);
        _0x521b75("╭━━━ 🔢 QUIZ NUMÉRICO 🔢 ━━━╮\n┃\n┃ ❌ QUE PENA! VOCÊ ERROU!\n┃\n┃ 🎲 Seu palpite: " + _0x7b5ccc + "\n┃ 🔮 Número correto: " + _0x3b9efd[0].numero + "\n┃\n┃ 📊 Tentativas erradas: " + _0x3b9efd[0].errou + "/2\n┃ 🎯 Tentativas corretas: " + _0x3b9efd[0].acertou + "/2\n┃\n┃ 💡 Tente novamente!\n╰━━━━━━━━━━━━━━━━━━━━━━╯");
        _0x3b9efd[0].numero = Math.floor(Math.random() * 3);
        _0x4a640f.quiz = _0x3b9efd;
        _0x209c38.updateChances(_0x17c8bf, _0x2ff4d1, _0x4a640f);
      } else {
        await _0x209c38.addGold(_0x17c8bf, _0x2ff4d1, 20);
        _0x3b9efd[0].acertou += 1;
        _0x3b9efd[0].numero = Math.floor(Math.random() * 3);
        _0x4a640f.quiz = _0x3b9efd;
        _0x209c38.updateChances(_0x17c8bf, _0x2ff4d1, _0x4a640f);
        const _0x2307d4 = {
          text: '✅',
          key: _0x58be84.key
        };
        const _0x2120fa = {
          react: _0x2307d4
        };
        await _0x4a42c8.sendMessage(_0x17c8bf, _0x2120fa);
        _0x521b75("╭━━━ 🔢 QUIZ NUMÉRICO 🔢 ━━━╮\n┃\n┃ 🎉 PARABÉNS! VOCÊ ACERTOU! 🎉\n┃\n┃ 🎲 Seu palpite: " + _0x7b5ccc + "\n┃ 🎯 Número correto: " + _0x7b5ccc + "\n┃ 💰 Recompensa: +20 " + _0x23cfcc.emojis.gold + "\n┃\n┃ 📊 Tentativas erradas: " + _0x3b9efd[0].errou + "/2\n┃ 🎯 Tentativas corretas: " + _0x3b9efd[0].acertou + "/2\n┃\n┃ 💰 Saldo atual: " + _0x209c38.getBalance(_0x17c8bf, _0x2ff4d1) + " " + _0x23cfcc.emojis.gold + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯");
      }
    } catch (_0x2c3a23) {
      console.error("Erro no quiz número:", _0x2c3a23);
      _0x521b75("❌ Ocorreu um erro ao processar o quiz de número. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "doublegold",
  'aliases': ["doubleg", "dgold", "dobrargold"],
  'category': "economia",
  'description': "Jogo de apostas com cores (vermelho/preto/branco)",
  'longDescription': "Aposte gold em cores (vermelho, preto ou branco) e tente multiplicar seu investimento.",
  'usage': "doublegold [cor] [valor]",
  'example': "doublegold vermelho 50\ndoublegold preto 25\ndoublegold branco 10",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': _0x1f4bce,
  'requirements': {},
  'execute': async ({
    conn: _0x577a83,
    info: _0x1ad935,
    from: _0x4bfd63,
    sender: _0x5eb27c,
    args: _0x5ed64f,
    reply: _0x409e58,
    BANCOP: _0x46e806,
    Os_Returns: _0x1837aa,
    dataGp: _0x41e883,
    EmojiBot: _0x32dfee,
    goldSystem: _0x4da27a,
    configsGold: _0x344fc1
  }) => {
    if (_0x41e883[0]?.["sistemgold"] === 0) {
      return _0x409e58("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    if (!_0x5ed64f[0] || !_0x5ed64f[1]) {
      return _0x409e58("❌ Você deve informar a cor e o valor da aposta.\n\nCores disponíveis: Vermelho / Preto / Branco\nExemplo: !doublegold vermelho 50");
    }
    try {
      let _0x22c3c6 = _0x5ed64f[0].toLowerCase();
      const _0x5307ad = parseInt(_0x5ed64f[1]);
      if (!["vermelho", "preto", "branco"].includes(_0x22c3c6)) {
        return _0x409e58("❌ Cor inválida! Informe uma das seguintes cores: Vermelho / Preto / Branco");
      }
      if (isNaN(_0x5307ad) || _0x5307ad <= 0) {
        return _0x409e58("❌ Informe um valor de aposta válido maior que 0.");
      }
      const _0x7ed496 = _0x344fc1.limites.maxAposta || 50;
      if (_0x5307ad > _0x7ed496) {
        return _0x409e58("❌ O limite máximo de aposta é " + _0x7ed496 + " golds.");
      }
      const _0x2219f1 = _0x4da27a.getBalance(_0x4bfd63, _0x5eb27c);
      if (_0x2219f1 < _0x5307ad) {
        return _0x409e58("❌ Você não tem gold suficiente para jogar. Seu saldo: " + _0x2219f1 + " " + _0x344fc1.emojis.gold);
      }
      const _0x446132 = _0x4da27a.getUser(_0x4bfd63, _0x5eb27c);
      const _0x551957 = _0x446132.chances || {};
      if ((_0x551957.doubleg || 0) >= _0x344fc1.chances.doubleg) {
        return _0x409e58("❌ Você já jogou " + _0x551957.doubleg + '/' + _0x344fc1.chances.doubleg + " vezes hoje! Volte amanhã.");
      }
      const _0x254b43 = {
        text: '🎲',
        key: _0x1ad935.key
      };
      const _0x510c47 = {
        react: _0x254b43
      };
      await _0x577a83.sendMessage(_0x4bfd63, _0x510c47);
      _0x551957.doubleg = (_0x551957.doubleg || 0) + 1;
      _0x4da27a.updateChances(_0x4bfd63, _0x5eb27c, _0x551957);
      function _0x1c2192() {
        const _0x28b610 = Math.random() * 100;
        if (_0x28b610 < 7) {
          return '⚪';
        } else {
          if (_0x28b610 < 53.5) {
            return '🔴';
          } else {
            return '⚫';
          }
        }
      }
      const _0x568028 = {
        length: 0x7
      };
      let _0x55b492 = Array.from(_0x568028, _0x1c2192);
      let _0x4f19f6 = _0x55b492[3];
      _0x55b492[3] = '[' + _0x55b492[3] + ']';
      const _0x5b3563 = {
        branco: 0x5,
        vermelho: 0x2,
        preto: 0x2
      };
      const _0x4547f1 = {
        '⚪': "branco",
        '🔴': "vermelho",
        '⚫': "preto"
      };
      let _0x2d3cfb = _0x4547f1[_0x4f19f6];
      let _0x6e2e24 = _0x22c3c6 === _0x2d3cfb;
      await _0x409e58("🎰 Girando a roleta...");
      setTimeout(async () => {
        let _0x86c380;
        if (_0x6e2e24) {
          const _0x1bebfb = _0x5307ad * _0x5b3563[_0x22c3c6];
          _0x4da27a.addGold(_0x4bfd63, _0x5eb27c, _0x1bebfb);
          _0x86c380 = "╭━━━ 🎲 DOUBLE GOLD 🎲 ━━━╮\n┃\n┃ *" + _0x55b492.join(" ") + "*\n┃\n┃ 🎉 VOCÊ GANHOU! 🎉\n┃\n┃ 🎯 Cor apostada: " + _0x22c3c6 + "\n┃ 🎲 Resultado: " + _0x4f19f6 + " (" + _0x2d3cfb + ")\n┃ 💰 Ganho: " + _0x1bebfb + " " + _0x344fc1.emojis.gold + "\n┃ 💵 Multiplicador: " + _0x5b3563[_0x22c3c6] + "x\n┃\n┃ 💰 Saldo atual: " + _0x4da27a.getBalance(_0x4bfd63, _0x5eb27c) + " " + _0x344fc1.emojis.gold + "\n┃ 🎮 Jogadas restantes: " + (_0x344fc1.chances.doubleg - _0x551957.doubleg) + '/' + _0x344fc1.chances.doubleg + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
          const _0x28e9be = {
            text: '💰',
            key: _0x1ad935.key
          };
          const _0x511301 = {
            react: _0x28e9be
          };
          await _0x577a83.sendMessage(_0x4bfd63, _0x511301);
        } else {
          _0x4da27a.removeGold(_0x4bfd63, _0x5eb27c, _0x5307ad);
          _0x86c380 = "╭━━━ 🎲 DOUBLE GOLD 🎲 ━━━╮\n┃\n┃ *" + _0x55b492.join(" ") + "*\n┃\n┃ 💸 VOCÊ PERDEU! 💸\n┃\n┃ 🎯 Cor apostada: " + _0x22c3c6 + "\n┃ 🎲 Resultado: " + _0x4f19f6 + " (" + _0x2d3cfb + ")\n┃ 💸 Perda: " + _0x5307ad + " " + _0x344fc1.emojis.gold + "\n┃\n┃ 💰 Saldo atual: " + _0x4da27a.getBalance(_0x4bfd63, _0x5eb27c) + " " + _0x344fc1.emojis.gold + "\n┃ 🎮 Jogadas restantes: " + (_0x344fc1.chances.doubleg - _0x551957.doubleg) + '/' + _0x344fc1.chances.doubleg + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
          const _0x3f693b = {
            text: '💸',
            key: _0x1ad935.key
          };
          const _0x5c6389 = {
            react: _0x3f693b
          };
          await _0x577a83.sendMessage(_0x4bfd63, _0x5c6389);
        }
        _0x409e58(_0x86c380);
      }, 2000);
    } catch (_0x37c9c1) {
      console.error("Erro no double gold:", _0x37c9c1);
      _0x409e58("❌ Ocorreu um erro ao processar o double gold. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "rankgold",
  'aliases': ["topgold", "goldrank", "rankinggold", "topmoney"],
  'category': "economia",
  'description': "Exibe o ranking dos usuários com mais gold",
  'longDescription': "Mostra uma lista dos 10 usuários com maior quantidade de gold no grupo, incluindo informações adicionais.",
  'usage': "rankgold",
  'example': "rankgold",
  'menu': "gold",
  'menuSection': "Economia",
  'permissions': _0xfa0db2,
  'requirements': {},
  'execute': async ({
    conn: _0x440290,
    info: _0x24826c,
    from: _0x2f2c31,
    sender: _0x1be3cc,
    reply: _0x56a3d5,
    mention: _0x14b90c,
    lermais: _0x34d821,
    EmojiBot: _0x2a61c1,
    BANCOP: _0x2ea36a,
    dataGp: _0x269481,
    groupMembers: _0x60b1f1,
    configsGold: _0x141c79,
    goldSystem: _0x1a5c0a
  }) => {
    if (_0x269481[0]?.["sistemgold"] === 0) {
      return _0x56a3d5("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    try {
      const _0x406f24 = {
        text: '📊',
        key: _0x24826c.key
      };
      const _0x5a2f36 = {
        react: _0x406f24
      };
      await _0x440290.sendMessage(_0x2f2c31, _0x5a2f36);
      const _0xdfeeb6 = _0x1a5c0a.getRanking(_0x2f2c31, 100);
      if (!_0xdfeeb6 || _0xdfeeb6.length === 0) {
        return _0x56a3d5("❌ Não há usuários registrados no ranking.");
      }
      const _0x4bf921 = _0x60b1f1.map(_0x56ffd5 => _0x56ffd5.id);
      const _0xc85f5a = _0xdfeeb6.filter(_0x5d5646 => _0x4bf921.includes(_0x5d5646.user_id) && _0x5d5646.user_id !== _0x440290.user.id.split(':')[0] + "@s.whatsapp.net");
      if (_0xc85f5a.length === 0) {
        return _0x56a3d5("❌ Não há usuários ativos registrados no ranking.");
      }
      const _0x147549 = _0xc85f5a.reduce((_0x21762a, _0x4254b3) => _0x21762a + (_0x4254b3.gold || 0), 0);
      let _0x1f3a08 = "💰 RANKING DE GOLD DO GRUPO 💰\n" + _0x34d821 + "\n";
      _0x1f3a08 += "📊 Total em circulação: " + _0x147549 + " " + _0x141c79.emojis.gold + "\n\n";
      for (let _0x1ed539 = 0; _0x1ed539 < Math.min(_0xc85f5a.length, 10); _0x1ed539++) {
        const _0x3a92d9 = _0xc85f5a[_0x1ed539];
        if (!_0x3a92d9?.["user_id"]) {
          continue;
        }
        const _0x24578d = _0xc85f5a.reduce((_0x106aa9, _0x48f89a) => {
          if (!Array.isArray(_0x48f89a.chances?.["ChanceR"])) {
            return _0x106aa9;
          }
          return _0x106aa9 + _0x48f89a.chances.ChanceR.filter(_0x316271 => _0x316271 && typeof _0x316271 === "object" && _0x316271.id === _0x3a92d9.user_id).length;
        }, 0);
        const _0x22db08 = _0x3a92d9.chances?.["roubosDiarios"] || 0;
        const _0x35292c = _0x147549 > 0 ? ((_0x3a92d9.gold || 0) / _0x147549 * 100).toFixed(1) : 0;
        const _0x23885c = _0x1ed539 === 0 ? '🥇' : _0x1ed539 === 1 ? '🥈' : _0x1ed539 === 2 ? '🥉' : _0x1ed539 + 1 + 'º';
        _0x1f3a08 += "╭━━━━ " + _0x23885c + " POSIÇÃO " + _0x23885c + " ━━━━╮\n┃\n┃ 👤 @" + _0x3a92d9.user_id.split('@')[0] + "\n┃\n┃ 💰 Saldo: " + (_0x3a92d9.gold || 0) + " " + _0x141c79.emojis.gold + "\n┃ 📊 Percentual: " + _0x35292c + "% do total\n┃ 🔄 Roubos hoje: " + _0x22db08 + '/' + _0x141c79.chances.ChanceR + "\n┃ 🚨 Vezes roubado: " + _0x24578d + "\n┃\n╰━━━━━━━━━━━━━━━━━━━╯\n";
      }
      const _0x36fc85 = _0xc85f5a.findIndex(_0x29bdba => _0x29bdba.user_id === _0x1be3cc);
      if (_0x36fc85 >= 10) {
        const _0x5bf0e5 = _0xc85f5a[_0x36fc85];
        _0x1f3a08 += "\n\n👤 Sua posição: #" + (_0x36fc85 + 1) + " com " + (_0x5bf0e5.gold || 0) + " " + _0x141c79.emojis.gold;
      }
      _0x14b90c(_0x1f3a08);
    } catch (_0x597dcb) {
      console.error("Erro no rankgold:", _0x597dcb);
      _0x56a3d5("❌ Ocorreu um erro ao gerar o ranking de golds. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "zerar_gold",
  'aliases': ["zerarrankgold", "zerarrankgolds", "resetgold"],
  'category': "economia",
  'description': "Zera todos os golds do grupo (apenas dono)",
  'longDescription': "Comando exclusivo para o dono zerar completamente todos os golds dos usuários do grupo.",
  'usage': "zerar_gold",
  'example': "zerar_gold",
  'menu': "gold",
  'menuSection': "Dono",
  'permissions': _0x325a3e,
  'requirements': {},
  'execute': async ({
    conn: _0x125bea,
    info: _0x4beb72,
    from: _0x46d4ea,
    sender: _0x535517,
    reply: _0x2b6b93,
    mention: _0x26fdb6,
    BANCOP: _0x4f8479,
    dataGp: _0x52c51e
  }) => {
    if (_0x52c51e[0]?.["sistemgold"] === 0) {
      return _0x2b6b93("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    if (!global.goldResetConfirmation) {
      global.goldResetConfirmation = {};
    }
    try {
      if (global.goldResetConfirmation[_0x46d4ea]) {
        if (global.goldResetConfirmation[_0x46d4ea].sender === _0x535517) {
          return _0x2b6b93("⚠️ Já existe uma solicitação de reset pendente. Responda com \"CONFIRMAR\" ou \"SIM\" para confirmar ou \"CANCELAR\" ou \"NÃO\" para cancelar.");
        } else {
          return _0x2b6b93("⚠️ Já existe uma solicitação de reset pendente iniciada por outro administrador. Aguarde ou peça para cancelar.");
        }
      }
      global.goldResetConfirmation[_0x46d4ea] = {
        'sender': _0x535517,
        'timestamp': Date.now(),
        'confirmed': false
      };
      _0x2b6b93("⚠️ ATENÇÃO! ⚠️\n\nVocê está prestes a zerar TODO O GOLD do grupo.\nIsso irá remover TODOS os saldos e rankings.\nEsta ação NÃO pode ser desfeita!\n\nPara confirmar, responda esta mensagem com \"CONFIRMAR\" ou \"SIM\" nos próximos 30 segundos.\nPara cancelar, responda com \"CANCELAR\" ou \"NÃO\".");
      setTimeout(() => {
        const _0x11e936 = global.goldResetConfirmation[_0x46d4ea];
        if (_0x11e936 && !_0x11e936.confirmed) {
          delete global.goldResetConfirmation[_0x46d4ea];
          _0x2b6b93("⏱️ Tempo esgotado! O reset foi cancelado.");
        }
      }, 30000);
    } catch (_0x52c838) {
      console.error("Erro ao iniciar confirmação de reset gold:", _0x52c838);
      _0x2b6b93("❌ Ocorreu um erro ao iniciar o processo de reset. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "addgold",
  'aliases': ["adicionargold", "dargold", "goldadd", "tirargold", "removergold", "goldremove", "removegold"],
  'category': "economia",
  'description': "Adiciona ou remove gold de um usuário (apenas dono)",
  'longDescription': "Comando exclusivo para o dono adicionar ou remover uma quantidade específica de gold de um usuário.",
  'usage': "addgold @usuário/[quantidade] ou tirargold @usuário/[quantidade]",
  'example': "addgold @usuário/100\ntirargold /50 (marcando mensagem)",
  'menu': "gold",
  'menuSection': "Dono",
  'permissions': _0x441ba0,
  'requirements': {},
  'execute': async ({
    conn: _0x244dbe,
    info: _0x2a5970,
    from: _0x3754da,
    sender: _0x342c59,
    command: _0x47b655,
    q: _0x1c36e0,
    reply: _0x2f47c3,
    mention: _0x42b157,
    menc_os2: _0x15bdf0,
    BANCOP: _0x3b801c,
    dataGp: _0x37b158,
    goldSystem: _0x20b620,
    configsGold: _0x2118e9
  }) => {
    if (_0x37b158[0]?.["sistemgold"] === 0) {
      return _0x2f47c3("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    if (!_0x15bdf0) {
      return _0x2f47c3("❌ Você deve marcar a mensagem do usuário com " + _0x47b655 + " /100 ou " + _0x47b655 + " @usuário/100.\nExemplo: " + _0x47b655 + " @usuário/100");
    }
    const _0x3a7416 = ["addgold", "adicionargold", "dargold", "goldadd"].includes(_0x47b655);
    try {
      if (!_0x1c36e0.trim().includes('/')) {
        return _0x2f47c3("❌ Formato incorreto. Existem 2 formas:\n1. " + _0x47b655 + " /100 (marcando mensagem)\n2. " + _0x47b655 + " @usuário/100");
      }
      let [_0x129adf, _0x4dc195] = _0x1c36e0.trim().split('/');
      let _0x957100 = Number(_0x4dc195);
      if (!_0x957100 || isNaN(_0x957100) || _0x957100 <= 0) {
        return _0x2f47c3("❌ O valor deve ser um número positivo. Exemplo: " + _0x47b655 + " @usuário/100");
      }
      let _0xe30a49;
      if (_0x3a7416) {
        _0xe30a49 = _0x20b620.addGold(_0x3754da, _0x15bdf0, _0x957100);
        if (_0xe30a49) {
          const _0x330e17 = _0x20b620.getBalance(_0x3754da, _0x15bdf0);
          const _0x12ff72 = "\n╭━━━ 💰 GOLD ADICIONADO 💰 ━━━╮\n┃\n┃ ✅ OPERAÇÃO CONCLUÍDA!\n┃\n┃ 👤 Usuário: @" + _0x15bdf0.split('@')[0] + "\n┃ 💵 Recebeu: +" + _0x957100 + " " + _0x2118e9.emojis.gold + "\n┃\n┃ 💰 Novo saldo: " + _0x330e17 + " " + _0x2118e9.emojis.gold + "\n┃ 👑 Ação realizada pelo dono\n╰━━━━━━━━━━━━━━━━━━━━━━━╯";
          _0x42b157(_0x12ff72);
        }
      } else {
        const _0x201b97 = _0x20b620.getBalance(_0x3754da, _0x15bdf0);
        if (_0x201b97 < _0x957100) {
          return _0x2f47c3("❌ O usuário possui apenas " + _0x201b97 + " " + _0x2118e9.emojis.gold + ", não é possível remover " + _0x957100 + " " + _0x2118e9.emojis.gold + '.');
        }
        _0xe30a49 = _0x20b620.removeGold(_0x3754da, _0x15bdf0, _0x957100);
        if (_0xe30a49) {
          const _0x20a2a2 = _0x20b620.getBalance(_0x3754da, _0x15bdf0);
          const _0x4f9283 = "\n╭━━━ 💰 GOLD REMOVIDO 💰 ━━━╮\n┃\n┃ ✅ OPERAÇÃO CONCLUÍDA!\n┃\n┃ 👤 Usuário: @" + _0x15bdf0.split('@')[0] + "\n┃ 💸 Perdeu: -" + _0x957100 + " " + _0x2118e9.emojis.gold + "\n┃\n┃ 💰 Novo saldo: " + _0x20a2a2 + " " + _0x2118e9.emojis.gold + "\n┃ 👑 Ação realizada pelo dono\n╰━━━━━━━━━━━━━━━━━━━━━━━╯";
          _0x42b157(_0x4f9283);
        }
      }
      if (!_0xe30a49) {
        _0x2f47c3("❌ Ocorreu um erro ao " + (_0x3a7416 ? "adicionar" : "remover") + " os golds.");
      }
    } catch (_0x161163) {
      console.error("Erro ao " + (_0x3a7416 ? "adicionar" : "remover") + " golds:", _0x161163);
      _0x2f47c3("❌ Ocorreu um erro ao " + (_0x3a7416 ? "adicionar" : "remover") + " os golds. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "doargold",
  'aliases': ["doargolds", "golddar", "transferirgold"],
  'category': "economia",
  'description': "Doar gold para outro usuário",
  'longDescription': "Permite doar uma quantidade específica de gold para outro usuário do grupo.",
  'usage': "doargold @usuário/[quantidade]",
  'example': "doargold @usuário/100\ndoargold /50 (marcando mensagem)",
  'menu': "gold",
  'menuSection': "Economia",
  'permissions': _0x5e82e8,
  'requirements': {},
  'execute': async ({
    conn: _0x3bff3b,
    info: _0x554835,
    from: _0x3c5633,
    sender: _0x4903d,
    args: _0xcb74cb,
    q: _0x4f04d7,
    reply: _0x53db60,
    mention: _0xeb0a2a,
    menc_os2: _0x3c9bf2,
    BANCOP: _0x35ccec,
    dataGp: _0x58063c,
    botNumber: _0x3c12e9,
    configsGold: _0x1885b0,
    goldSystem: _0x48d678
  }) => {
    if (_0x58063c[0]?.["sistemgold"] === 0) {
      return _0x53db60("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    if (!_0x3c9bf2) {
      return _0x53db60("❌ Você deve marcar a mensagem do usuário com doargold /10 ou doargold @usuário/10.\nExemplo: doargold @usuário/100");
    }
    if (_0x3c9bf2 === _0x4903d) {
      return _0x53db60("❌ Você não pode doar Golds para si mesmo.");
    }
    if (_0x3c9bf2 === _0x3c12e9) {
      return _0x53db60("❌ Não pode doar para mim, eu já tenho gold infinito! 🤖");
    }
    try {
      let _0x1ac0cc = _0x4f04d7.trim().split('/');
      if (_0x1ac0cc.length < 2) {
        return _0x53db60("❌ Formato incorreto. Use: doargold @usuário/100 ou doargold /100 (marcando a mensagem).");
      }
      let _0x596755 = parseInt(_0x1ac0cc[_0x1ac0cc.length - 1]);
      if (isNaN(_0x596755) || _0x596755 <= 0) {
        return _0x53db60("❌ A quantidade deve ser um número positivo. Exemplo: doargold @usuário/100");
      }
      const _0x17a4ff = _0x48d678.getBalance(_0x3c5633, _0x4903d);
      if (_0x17a4ff < _0x596755) {
        return _0x53db60("❌ Você não tem " + _0x596755 + " " + _0x1885b0.emojis.gold + " para doar. Seu saldo atual: " + _0x17a4ff + " " + _0x1885b0.emojis.gold);
      }
      const _0x5bcd09 = {
        text: '💝',
        key: _0x554835.key
      };
      const _0x5475e9 = {
        react: _0x5bcd09
      };
      await _0x3bff3b.sendMessage(_0x3c5633, _0x5475e9);
      const _0x119d56 = _0x48d678.transferGold(_0x3c5633, _0x4903d, _0x3c9bf2, _0x596755);
      if (!_0x119d56) {
        return _0x53db60("❌ Não foi possível realizar a doação. Tente novamente.");
      }
      const _0x5249e5 = _0x48d678.getBalance(_0x3c5633, _0x4903d);
      const _0x4eac9c = _0x48d678.getBalance(_0x3c5633, _0x3c9bf2);
      const _0x5a02c9 = "\n╭━━━ 💝 DOAÇÃO GOLD 💝 ━━━╮\n┃\n┃ ✅ DOAÇÃO REALIZADA!\n┃\n┃ De: @" + _0x4903d.split('@')[0] + "\n┃ Para: @" + _0x3c9bf2.split('@')[0] + "\n┃ Valor: " + _0x596755 + " " + _0x1885b0.emojis.gold + "\n┃\n┃ 💰 Seu saldo atual: " + _0x5249e5 + " " + _0x1885b0.emojis.gold + "\n┃ 💰 Saldo do receptor: " + _0x4eac9c + " " + _0x1885b0.emojis.gold + "\n┃\n┃ 👏 Parabéns pela sua generosidade!\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
      _0xeb0a2a(_0x5a02c9);
    } catch (_0x533e4d) {
      console.error("Erro na doação de gold:", _0x533e4d);
      _0x53db60("❌ Ocorreu um erro ao processar a doação. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "sorteiogold",
  'aliases': ["sorteargold", "goldsorteio", "sortear"],
  'category': "economia",
  'description': "Realiza um sorteio de gold entre os membros do grupo",
  'longDescription': "Comando exclusivo para o dono realizar um sorteio de gold entre todos os membros do grupo que possuem gold.",
  'usage': "sorteiogold [valor]",
  'example': "sorteiogold 100",
  'menu': "gold",
  'menuSection': "Economia",
  'permissions': _0x359441,
  'requirements': {},
  'execute': async ({
    conn: _0x1bcaa9,
    info: _0x3c260d,
    from: _0x2cc53e,
    sender: _0x35473d,
    args: _0xb38537,
    reply: _0x429e4b,
    mention: _0x4a8356,
    BANCOP: _0x256fbc,
    dataGp: _0x19b2e2,
    groupMembers: _0x47da01,
    configsGold: _0x1807a7,
    goldSystem: _0x295088
  }) => {
    if (_0x19b2e2[0]?.["sistemgold"] === 0) {
      return _0x429e4b("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    if (!_0xb38537[0] || isNaN(_0xb38537[0])) {
      return _0x429e4b("❌ Digite apenas números para o valor do sorteio.");
    }
    try {
      const _0x5c603f = parseInt(_0xb38537[0]);
      if (_0x5c603f <= 0) {
        return _0x429e4b("❌ O valor do sorteio deve ser maior que zero.");
      }
      const _0xc79f26 = _0x295088.getRanking(_0x2cc53e, 100);
      if (!_0xc79f26 || _0xc79f26.length === 0) {
        return _0x429e4b("❌ Não há usuários registrados para participar do sorteio.");
      }
      const _0x14fa2a = _0x47da01.map(_0x4fc5ef => _0x4fc5ef.id);
      const _0x4a419a = _0xc79f26.filter(_0x2f0f2c => _0x14fa2a.includes(_0x2f0f2c.user_id) && _0x2f0f2c.user_id !== _0x1bcaa9.user.id.split(':')[0] + "@s.whatsapp.net");
      if (_0x4a419a.length === 0) {
        return _0x429e4b("❌ Não há usuários elegíveis para o sorteio.");
      }
      const _0x5b6112 = _0x4a419a[Math.floor(Math.random() * _0x4a419a.length)];
      _0x295088.addGold(_0x2cc53e, _0x5b6112.user_id, _0x5c603f);
      _0x429e4b("🎲 Realizando sorteio de " + _0x5c603f + " " + _0x1807a7.emojis.gold + "...");
      setTimeout(() => {
        _0x429e4b("🎮 Girando a roleta de sorteio...");
      }, 2000);
      setTimeout(() => {
        const _0x38c4ad = "\n╭━━━ 🎉 SORTEIO GOLD 🎉 ━━━╮\n┃\n┃ 🏆 VENCEDOR DO SORTEIO!\n┃\n┃ 👤 Participante: @" + _0x5b6112.user_id.split('@')[0] + "\n┃ 💰 Prêmio: " + _0x5c603f + " " + _0x1807a7.emojis.gold + "\n┃\n┃ 🎊 Parabéns ao ganhador! 🎊\n┃ 💼 Novo saldo: " + _0x295088.getBalance(_0x2cc53e, _0x5b6112.user_id) + " " + _0x1807a7.emojis.gold + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
        _0x4a8356(_0x38c4ad);
      }, 4000);
    } catch (_0x1548b7) {
      console.error("Erro no sorteio de gold:", _0x1548b7);
      _0x429e4b("❌ Ocorreu um erro ao processar o sorteio. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "minerar_gold",
  'aliases': ["minerar_golds", "minerargold", "minerargolds", "minerar"],
  'category': "economia",
  'description': "Minerar gold para aumentar seu saldo",
  'longDescription': "Permite minerar gold até 3 vezes por dia, com chance de encontrar ou não.",
  'usage': "minerar_gold",
  'example': "minerar_gold",
  'menu': "gold",
  'menuSection': "Economia",
  'permissions': _0x6e4958,
  'requirements': {},
  'execute': async ({
    conn: _0x156741,
    prefix: _0x53bb92,
    info: _0x37b11e,
    from: _0x34f339,
    sender: _0x1267b1,
    reply: _0x4510da,
    mention: _0x1b28ba,
    BANCOP: _0x3b66f4,
    dataGp: _0x299c17,
    configsGold: _0x519094,
    goldSystem: _0x136ac5
  }) => {
    if (_0x299c17[0]?.["sistemgold"] === 0) {
      return _0x4510da("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com " + _0x53bb92 + "sistemgold");
    }
    try {
      const _0xe0d82f = _0x136ac5.getUser(_0x34f339, _0x1267b1);
      const _0x262b8e = _0xe0d82f.chances || {};
      if ((_0x262b8e.ChanceG || 0) >= _0x519094.chances.ChanceG) {
        return _0x4510da("❌ Você já usou todas as " + _0x519094.chances.ChanceG + " chances de mineração hoje! Volte amanhã.");
      }
      const _0x212013 = {
        text: '⛏️',
        key: _0x37b11e.key
      };
      const _0x3a9581 = {
        react: _0x212013
      };
      await _0x156741.sendMessage(_0x34f339, _0x3a9581);
      _0x262b8e.ChanceG = (_0x262b8e.ChanceG || 0) + 1;
      _0x136ac5.updateChances(_0x34f339, _0x1267b1, _0x262b8e);
      const _0x54b41f = Math.random() >= 0.5;
      setTimeout(async () => {
        if (_0x54b41f) {
          let _0x57ef33 = Math.floor(Math.random() * 50) + 1;
          if (Math.random() < 0.1) {
            const _0x32ad6d = Math.random() * 1 + 2;
            _0x57ef33 = Math.floor(_0x57ef33 * _0x32ad6d);
            _0x136ac5.addGold(_0x34f339, _0x1267b1, _0x57ef33);
            const _0x5dceaf = "\n╭━━━ ⛏️ MINERAÇÃO ⛏️ ━━━╮\n┃\n┃ 💎 VEIO RICO ENCONTRADO! 💎\n┃\n┃ @" + _0x1267b1.split('@')[0] + " encontrou um veio\n┃ rico de gold e minerou " + _0x57ef33 + " " + _0x519094.emojis.gold + "!\n┃\n┃ 💰 Saldo atual: " + _0x136ac5.getBalance(_0x34f339, _0x1267b1) + " " + _0x519094.emojis.gold + "\n┃ 🔄 Minerações restantes: " + (_0x519094.chances.ChanceG - _0x262b8e.ChanceG) + '/' + _0x519094.chances.ChanceG + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
            const _0x42b890 = {
              text: '💎',
              key: _0x37b11e.key
            };
            const _0x2ed1a4 = {
              react: _0x42b890
            };
            await _0x156741.sendMessage(_0x34f339, _0x2ed1a4);
            _0x1b28ba(_0x5dceaf);
          } else {
            _0x136ac5.addGold(_0x34f339, _0x1267b1, _0x57ef33);
            const _0x3d48be = "\n╭━━━ ⛏️ MINERAÇÃO ⛏️ ━━━╮\n┃\n┃ ✅ MINERAÇÃO BEM-SUCEDIDA!\n┃\n┃ @" + _0x1267b1.split('@')[0] + " minerou com\n┃ sucesso " + _0x57ef33 + " " + _0x519094.emojis.gold + "!\n┃\n┃ 💰 Saldo atual: " + _0x136ac5.getBalance(_0x34f339, _0x1267b1) + " " + _0x519094.emojis.gold + "\n┃ 🔄 Minerações restantes: " + (_0x519094.chances.ChanceG - _0x262b8e.ChanceG) + '/' + _0x519094.chances.ChanceG + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
            const _0x12a431 = {
              text: '✅',
              key: _0x37b11e.key
            };
            const _0xc3d1a5 = {
              react: _0x12a431
            };
            await _0x156741.sendMessage(_0x34f339, _0xc3d1a5);
            _0x1b28ba(_0x3d48be);
          }
        } else {
          const _0x24b235 = "\n╭━━━ ⛏️ MINERAÇÃO ⛏️ ━━━╮\n┃\n┃ ❌ MINERAÇÃO SEM SUCESSO\n┃\n┃ @" + _0x1267b1.split('@')[0] + " não encontrou\n┃ nenhum gold nessa mineração.\n┃\n┃ 💰 Saldo atual: " + _0x136ac5.getBalance(_0x34f339, _0x1267b1) + " " + _0x519094.emojis.gold + "\n┃ 🔄 Minerações restantes: " + (_0x519094.chances.ChanceG - _0x262b8e.ChanceG) + '/' + _0x519094.chances.ChanceG + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
          const _0x50d62d = {
            text: '❌',
            key: _0x37b11e.key
          };
          const _0x1811ca = {
            react: _0x50d62d
          };
          await _0x156741.sendMessage(_0x34f339, _0x1811ca);
          _0x1b28ba(_0x24b235);
        }
      }, 2000);
    } catch (_0x3c83e6) {
      console.error("Erro na mineração de gold:", _0x3c83e6);
      _0x4510da("❌ Ocorreu um erro ao processar a mineração. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "roletadasorte",
  'aliases': ["roletads", "roletagold", "roulette"],
  'category': "economia",
  'description': "Gire a roleta da sorte para ganhar ou perder gold",
  'longDescription': "Gire a roleta da sorte uma vez por dia e tenha a chance de ganhar ou perder gold aleatoriamente.",
  'usage': "roletadasorte",
  'example': "roletadasorte",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': _0x4dab4c,
  'requirements': {},
  'execute': async ({
    conn: _0x31a303,
    info: _0x52e37c,
    from: _0x24bf48,
    sender: _0x448817,
    reply: _0x3f6d49,
    mention: _0x269f64,
    mentionSm: _0x2fb2d9,
    BANCOP: _0x53b6fa,
    dataGp: _0x1ad66e,
    configsGold: _0x56b689,
    goldSystem: _0x3c70bc
  }) => {
    if (_0x1ad66e[0]?.["sistemgold"] === 0) {
      return _0x3f6d49("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    try {
      const _0x5e2e75 = _0x3c70bc.getUser(_0x24bf48, _0x448817);
      const _0xf04b90 = _0x5e2e75.chances || {};
      if (_0xf04b90.roletadasorte) {
        return _0x3f6d49("❌ Você já usou a roleta da sorte hoje. Volte amanhã para uma nova chance!");
      }
      const _0x48912e = _0x3c70bc.getBalance(_0x24bf48, _0x448817);
      if (_0x48912e < 25) {
        return _0x3f6d49("❌ Você precisa ter pelo menos 25 golds para usar a roleta da sorte. Seu saldo atual: " + _0x48912e + " golds.");
      }
      _0xf04b90.roletadasorte = true;
      _0x3c70bc.updateChances(_0x24bf48, _0x448817, _0xf04b90);
      const _0x2668d8 = _0x3c70bc.getRanking(_0x24bf48, 100);
      let _0xb6be63 = _0x2668d8.filter(_0x208231 => _0x208231.user_id !== _0x448817 && _0x208231.gold > 0 && _0x208231.user_id.includes("@s.whatsapp.net"));
      if (_0xb6be63.length === 0) {
        return _0x3f6d49("❌ Não há outros usuários elegíveis para a roleta. Todos precisam ter algum gold para participar.");
      }
      const _0x3be1d3 = _0xb6be63[Math.floor(Math.random() * _0xb6be63.length)];
      _0x2fb2d9("🎯 ROLETA DA SORTE 🎯\n\nIrei girar a roleta e um usuário do sistema gold vai ter o azar ou a sorte. Você (@" + _0x448817.split('@')[0] + ") pode ganhar ou perder golds. Girando a roleta em 5 segundos...");
      setTimeout(() => {
        _0x3f6d49("🎲 Roleta girando...");
      }, 5000);
      setTimeout(() => {
        _0x3f6d49("👀 Humm... Quem vai ter sorte ou azar? A tensão aumenta...");
      }, 7000);
      setTimeout(async () => {
        const _0x2b38aa = Math.floor(Math.random() * 3);
        const _0x372000 = Math.floor(_0x48912e * (Math.random() * 0.3 + 0.1));
        const _0x5c4ee0 = Math.floor(_0x3be1d3.gold * (Math.random() * 0.3 + 0.1));
        let _0x5b8b94 = '';
        if (_0x2b38aa === 1) {
          _0x3c70bc.transferGold(_0x24bf48, _0x448817, _0x3be1d3.user_id, _0x372000);
          _0x5b8b94 = "\n╭━━━ 🎡 ROLETA DA SORTE 🎡 ━━━╮\n┃\n┃ 😢 RESULTADO: AZAR! 😢\n┃\n┃ @" + _0x448817.split('@')[0] + " teve azar na roleta\n┃ e perdeu " + _0x372000 + " golds para\n┃ @" + _0x3be1d3.user_id.split('@')[0] + ".\n┃\n┃ 💰 Seu saldo atual: " + _0x3c70bc.getBalance(_0x24bf48, _0x448817) + " golds\n┃ 🗓️ Próxima roleta: Amanhã\n╰━━━━━━━━━━━━━━━━━━━━━━━━╯";
        } else {
          if (_0x2b38aa === 2) {
            _0x3c70bc.transferGold(_0x24bf48, _0x3be1d3.user_id, _0x448817, _0x5c4ee0);
            _0x5b8b94 = "\n╭━━━ 🎡 ROLETA DA SORTE 🎡 ━━━╮\n┃\n┃ 🎉 RESULTADO: SORTE! 🎉\n┃\n┃ @" + _0x448817.split('@')[0] + " teve sorte na roleta\n┃ e ganhou " + _0x5c4ee0 + " golds de\n┃ @" + _0x3be1d3.user_id.split('@')[0] + ".\n┃\n┃ 💰 Seu saldo atual: " + _0x3c70bc.getBalance(_0x24bf48, _0x448817) + " golds\n┃ 🗓️ Próxima roleta: Amanhã\n╰━━━━━━━━━━━━━━━━━━━━━━━━╯";
          } else {
            _0x5b8b94 = "\n╭━━━ 🎡 ROLETA DA SORTE 🎡 ━━━╮\n┃\n┃ 😐 RESULTADO: NEUTRO 😐\n┃\n┃ @" + _0x448817.split('@')[0] + " girou a roleta,\n┃ mas nada aconteceu desta vez.\n┃ Tente novamente amanhã!\n┃\n┃ 💰 Seu saldo atual: " + _0x3c70bc.getBalance(_0x24bf48, _0x448817) + " golds\n┃ 🗓️ Próxima roleta: Amanhã\n╰━━━━━━━━━━━━━━━━━━━━━━━━╯";
          }
        }
        _0x269f64(_0x5b8b94);
      }, 10000);
    } catch (_0x47aa89) {
      console.error("Erro na roleta da sorte:", _0x47aa89);
      _0x3f6d49("❌ Ocorreu um erro ao processar a roleta da sorte. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "aviatorgold",
  'aliases': ["aviator", "plane", "planegold"],
  'category': "economia",
  'description': "Jogue o Aviator e aumente seu gold",
  'longDescription': "Aposte no jogo Aviator e veja quão alto o avião pode voar antes de cair, multiplicando seu investimento.",
  'usage': "aviatorgold [quantidade]",
  'example': "aviatorgold 100",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': _0xe0956d,
  'requirements': {},
  'execute': async ({
    conn: _0x55093d,
    info: _0x50a5ed,
    from: _0x11fdb7,
    sender: _0x1eda47,
    args: _0x105aeb,
    reply: _0x5a8f0f,
    BANCOP: _0x6cefd3,
    dataGp: _0x479871,
    configsGold: _0x1ed6c7,
    goldSystem: _0x32a635
  }) => {
    if (_0x479871[0]?.["sistemgold"] === 0) {
      return _0x5a8f0f("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    if (!_0x105aeb[0] || isNaN(_0x105aeb[0])) {
      return _0x5a8f0f("❌ Por favor, forneça uma quantidade válida para apostar no Aviator.\nExemplo: !aviatorgold 100");
    }
    try {
      const _0x561ca5 = _0x32a635.getUser(_0x11fdb7, _0x1eda47);
      const _0x1d4d9f = _0x561ca5.chances || {};
      if ((_0x1d4d9f.aviator || 0) >= _0x1ed6c7.chances.aviator) {
        return _0x5a8f0f("❌ Você já jogou " + _0x1d4d9f.aviator + '/' + _0x1ed6c7.chances.aviator + " vezes no Aviator hoje! Volte amanhã.");
      }
      const _0x446a2d = parseInt(_0x105aeb[0]);
      if (_0x446a2d < _0x1ed6c7.limites.minAposta) {
        return _0x5a8f0f("❌ A aposta mínima é de " + _0x1ed6c7.limites.minAposta + " golds.");
      }
      if (_0x446a2d > _0x1ed6c7.limites.maxAposta) {
        return _0x5a8f0f("❌ A aposta máxima é de " + _0x1ed6c7.limites.maxAposta + " golds.");
      }
      const _0x375f35 = _0x32a635.getBalance(_0x11fdb7, _0x1eda47);
      if (_0x375f35 < _0x446a2d) {
        return _0x5a8f0f("❌ Você não tem golds suficientes para essa aposta. Saldo atual: " + _0x375f35 + " golds.");
      }
      _0x1d4d9f.aviator = (_0x1d4d9f.aviator || 0) + 1;
      _0x32a635.updateChances(_0x11fdb7, _0x1eda47, _0x1d4d9f);
      _0x32a635.removeGold(_0x11fdb7, _0x1eda47, _0x446a2d);
      const _0x5a78de = {
        text: '🚀',
        key: _0x50a5ed.key
      };
      const _0x1babc5 = {
        react: _0x5a78de
      };
      await _0x55093d.sendMessage(_0x11fdb7, _0x1babc5);
      await _0x5a8f0f("🚀 O avião está decolando... Vamos ver quão alto ele vai!");
      setTimeout(async () => {
        const _0x12aef2 = Math.random();
        let _0x399bf8;
        if (_0x12aef2 < 0.5) {
          _0x399bf8 = 1 + _0x12aef2 * 0.5;
        } else {
          if (_0x12aef2 < 0.8) {
            _0x399bf8 = 1.5 + (_0x12aef2 - 0.5) * 3.3333333333333335;
          } else {
            if (_0x12aef2 < 0.95) {
              _0x399bf8 = 2.5 + (_0x12aef2 - 0.8) * 16.666666666666668;
            } else {
              _0x399bf8 = 5 + (_0x12aef2 - 0.95) * 100;
            }
          }
        }
        _0x399bf8 = Math.round(_0x399bf8 * 100) / 100;
        const _0x21bfae = Math.random() < 0.1;
        if (_0x21bfae) {
          const _0x2016f3 = {
            text: '💥',
            key: _0x50a5ed.key
          };
          const _0x460056 = {
            react: _0x2016f3
          };
          await _0x55093d.sendMessage(_0x11fdb7, _0x460056);
          const _0x4537b2 = "\n╭━━━ ✈️ AVIATOR GOLD ✈️ ━━━╮\n┃\n┃ 💥 O avião caiu! 💥\n┃\n┃ Multiplicador: 0.0x\n┃ Apostado: " + _0x446a2d + " golds\n┃ Resultado: Perdeu " + _0x446a2d + " golds\n┃\n┃ 💰 Saldo atual: " + _0x32a635.getBalance(_0x11fdb7, _0x1eda47) + " golds\n┃ 🎮 Jogadas restantes: " + (_0x1ed6c7.chances.aviator - _0x1d4d9f.aviator) + '/' + _0x1ed6c7.chances.aviator + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
          _0x5a8f0f(_0x4537b2);
        } else {
          const _0x23ac39 = Math.floor(_0x446a2d * _0x399bf8);
          const _0x361404 = _0x23ac39 - _0x446a2d;
          _0x32a635.addGold(_0x11fdb7, _0x1eda47, _0x23ac39);
          const _0x35acde = {
            text: '💰',
            key: _0x50a5ed.key
          };
          const _0x21918e = {
            react: _0x35acde
          };
          await _0x55093d.sendMessage(_0x11fdb7, _0x21918e);
          const _0x32db21 = "\n╭━━━ ✈️ AVIATOR GOLD ✈️ ━━━╮\n┃\n┃ 🛫 O avião voou alto! 🛫\n┃\n┃ Multiplicador: " + _0x399bf8 + "x\n┃ Apostado: " + _0x446a2d + " golds\n┃ Ganhos: +" + _0x361404 + " golds\n┃\n┃ 💰 Saldo atual: " + _0x32a635.getBalance(_0x11fdb7, _0x1eda47) + " golds\n┃ 🎮 Jogadas restantes: " + (_0x1ed6c7.chances.aviator - _0x1d4d9f.aviator) + '/' + _0x1ed6c7.chances.aviator + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
          _0x5a8f0f(_0x32db21);
        }
      }, 3000);
    } catch (_0x2a4862) {
      console.error("Erro no aviator:", _0x2a4862);
      _0x5a8f0f("❌ Ocorreu um erro ao processar o Aviator. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "cassino",
  'aliases': ["casino", "caça-níquel"],
  'category': "economia",
  'description': "Jogue no cassino e tente a sorte para ganhar gold",
  'longDescription': "Jogue no caça-níquel do cassino e tenha a chance de multiplicar seus golds. Combine símbolos para ganhar prêmios.",
  'usage': "cassino",
  'example': "cassino",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': _0x41c729,
  'requirements': {},
  'execute': async ({
    conn: _0x36df84,
    info: _0x58766d,
    from: _0x21b5e0,
    sender: _0x46aec2,
    reply: _0x3d1c23,
    BANCOP: _0x37b072,
    dataGp: _0x5d0d9d,
    configsGold: _0x25e89e,
    goldSystem: _0x5ea663
  }) => {
    if (_0x5d0d9d[0]?.["sistemgold"] === 0) {
      return _0x3d1c23("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    try {
      const _0x5ac083 = _0x5ea663.getUser(_0x21b5e0, _0x46aec2);
      const _0x21c50f = _0x5ac083.chances || {};
      if ((_0x21c50f.cassino || 0) >= _0x25e89e.chances.cassino) {
        return _0x3d1c23("❌ Você já jogou " + _0x21c50f.cassino + '/' + _0x25e89e.chances.cassino + " vezes no cassino hoje! Volte amanhã.");
      }
      const _0x562563 = _0x5ea663.getBalance(_0x21b5e0, _0x46aec2);
      const _0xe1add2 = _0x25e89e.limites.minCassino || 50;
      if (_0x562563 < _0xe1add2) {
        return _0x3d1c23("❌ Você precisa ter pelo menos " + _0xe1add2 + " golds para jogar no cassino. Seu saldo atual: " + _0x562563 + " golds.");
      }
      _0x21c50f.cassino = (_0x21c50f.cassino || 0) + 1;
      _0x5ea663.updateChances(_0x21b5e0, _0x46aec2, _0x21c50f);
      const _0x3af23d = ['🍎', '🍊', '🍋', '🍒', '🍇', '💰', '💎', "7️⃣", '🎰'];
      const _0x125a5c = [];
      for (let _0x53a806 = 0; _0x53a806 < 9; _0x53a806++) {
        _0x125a5c.push(_0x3af23d[Math.floor(Math.random() * _0x3af23d.length)]);
      }
      const _0x27f69d = () => {
        const _0x3fd490 = [[_0x125a5c[0], _0x125a5c[1], _0x125a5c[2]], [_0x125a5c[3], _0x125a5c[4], _0x125a5c[5]], [_0x125a5c[6], _0x125a5c[7], _0x125a5c[8]]];
        const _0x341af8 = [[_0x125a5c[0], _0x125a5c[3], _0x125a5c[6]], [_0x125a5c[1], _0x125a5c[4], _0x125a5c[7]], [_0x125a5c[2], _0x125a5c[5], _0x125a5c[8]]];
        const _0xca8f1e = [[_0x125a5c[0], _0x125a5c[4], _0x125a5c[8]], [_0x125a5c[2], _0x125a5c[4], _0x125a5c[6]]];
        const _0x3ee2f4 = [..._0x3fd490, ..._0x341af8, ..._0xca8f1e];
        const _0x195abf = _0x3ee2f4.filter(_0x179452 => _0x179452[0] === _0x179452[1] && _0x179452[1] === _0x179452[2]);
        if (_0x195abf.length > 0) {
          let _0x541820 = 0;
          _0x195abf.forEach(_0x805b10 => {
            const _0x1aeb2f = _0x805b10[0];
            let _0x256e34 = 0;
            switch (_0x1aeb2f) {
              case '🍎':
              case '🍊':
              case '🍋':
                _0x256e34 = 1.5;
                break;
              case '🍒':
              case '🍇':
                _0x256e34 = 2;
                break;
              case '💰':
                _0x256e34 = 3;
                break;
              case '💎':
                _0x256e34 = 4;
                break;
              case "7️⃣":
                _0x256e34 = 5;
                break;
              case '🎰':
                _0x256e34 = 7;
                break;
            }
            _0x541820 += _0x256e34;
          });
          if (_0x195abf.length > 1) {
            _0x541820 *= 1.2;
          }
          const _0x273230 = Math.floor(_0xe1add2 * _0x541820);
          _0x5ea663.addGold(_0x21b5e0, _0x46aec2, _0x273230);
          const _0x31b59f = {
            win: true,
            lines: _0x195abf.length,
            amount: _0x273230,
            message: "🎉 VOCÊ GANHOU! " + _0x273230 + " golds foram adicionados à sua conta."
          };
          return _0x31b59f;
        }
        _0x5ea663.removeGold(_0x21b5e0, _0x46aec2, _0xe1add2);
        const _0x58e5c5 = {
          win: false,
          lines: 0x0,
          amount: _0xe1add2,
          message: "😢 Você perdeu " + _0xe1add2 + " golds. Tente novamente!"
        };
        return _0x58e5c5;
      };
      const _0x2a125f = _0x27f69d();
      const _0x2155a5 = "\n╭━━━ 🎰 CASSINO GOLD 🎰 ━━━╮\n┃\n┃" + _0x125a5c[0] + '|' + _0x125a5c[1] + '|' + _0x125a5c[2] + "\n┃ ───────────────\n┃" + _0x125a5c[3] + '|' + _0x125a5c[4] + '|' + _0x125a5c[5] + "\n┃ ───────────────\n┃" + _0x125a5c[6] + '|' + _0x125a5c[7] + '|' + _0x125a5c[8] + "\n┃\n┃" + (_0x2a125f.win ? "🎊 PARABÉNS! 🎊" : "❌ PERDEU! ❌") + "\n┃" + _0x2a125f.message + "\n┃\n┃💰 Saldo atual: " + _0x5ea663.getBalance(_0x21b5e0, _0x46aec2) + " golds\n┃🎮 Jogadas restantes: " + (_0x25e89e.chances.cassino - _0x21c50f.cassino) + '/' + _0x25e89e.chances.cassino + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
      _0x3d1c23(_0x2155a5);
    } catch (_0x24db5d) {
      console.error("Erro no cassino:", _0x24db5d);
      _0x3d1c23("❌ Ocorreu um erro ao processar o cassino. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "apostargold",
  'aliases': ["apostar", "bet", "goldbet"],
  'category': "economia",
  'description': "Apostar gold para tentar ganhar mais",
  'longDescription': "Aposte seus golds com chance de multiplicar seu investimento ou perder tudo",
  'usage': "apostargold [valor]",
  'example': "apostargold 50",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': _0x580e6c,
  'requirements': {},
  'execute': async ({
    conn: _0x384fa2,
    info: _0x95ec21,
    from: _0x9c32a4,
    sender: _0x2ee7ad,
    args: _0x4e33b4,
    reply: _0x27dea7,
    prefix: _0x197469,
    BANCOP: _0x3d27c1,
    dataGp: _0x53f5b4,
    configsGold: _0x184295,
    goldSystem: _0x15ebd8
  }) => {
    if (_0x53f5b4[0]?.["sistemgold"] === 0) {
      return _0x27dea7("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    if (!_0x4e33b4[0]) {
      return _0x27dea7("❌ Você precisa informar um valor para apostar!\nExemplo: " + _0x197469 + "apostargold 50");
    }
    const _0x9047b = parseInt(_0x4e33b4[0]);
    if (isNaN(_0x9047b) || _0x9047b <= 0) {
      return _0x27dea7("❌ O valor da aposta deve ser um número positivo!\nExemplo: " + _0x197469 + "apostargold 50");
    }
    try {
      const _0x176d97 = _0x15ebd8.getUser(_0x9c32a4, _0x2ee7ad);
      const _0x59f487 = _0x176d97.chances || {};
      if ((_0x59f487.ChanceAp || 0) >= _0x184295.chances.ChanceAp) {
        return _0x27dea7("❌ Você já apostou " + _0x59f487.ChanceAp + '/' + _0x184295.chances.ChanceAp + " vezes hoje! Volte amanhã.");
      }
      if (_0x9047b < _0x184295.limites.minAposta) {
        return _0x27dea7("❌ O valor mínimo para apostar é " + _0x184295.limites.minAposta + " Golds.");
      }
      if (_0x9047b > _0x184295.limites.maxAposta) {
        return _0x27dea7("❌ O valor máximo para apostar é " + _0x184295.limites.maxAposta + " Golds.");
      }
      const _0x4f27eb = _0x15ebd8.getBalance(_0x9c32a4, _0x2ee7ad);
      if (_0x4f27eb < _0x9047b) {
        return _0x27dea7("❌ Você não tem Gold suficiente para esta aposta. Seu saldo: " + _0x4f27eb + " Golds.");
      }
      _0x59f487.ChanceAp = (_0x59f487.ChanceAp || 0) + 1;
      _0x15ebd8.updateChances(_0x9c32a4, _0x2ee7ad, _0x59f487);
      const _0x370705 = Math.floor(Math.random() * 4);
      function _0x4aa707(_0x465755, _0x362bee, _0x397ae5, _0x1b8430, _0x18275b, _0x542a16) {
        switch (_0x465755) {
          case 0:
            _0x397ae5.removeGold(_0x1b8430, _0x18275b, _0x362bee);
            return "\n╭━━━ 🎲 APOSTA GOLD 🎲 ━━━╮\n┃\n┃ " + _0x542a16.emojis.lose + " RESULTADO: PERDEU!\n┃\n┃ Você perdeu " + _0x362bee + " Golds na aposta.\n┃ Mais sorte na próxima vez!\n┃\n┃ 💰 Saldo atual: " + _0x397ae5.getBalance(_0x1b8430, _0x18275b) + " Golds\n┃ 🎮 Apostas restantes: " + (_0x542a16.chances.ChanceAp - (_0x397ae5.getUser(_0x1b8430, _0x18275b).chances.ChanceAp || 0)) + '/' + _0x542a16.chances.ChanceAp + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
          case 1:
            const _0x10baa6 = Math.random() * (_0x542a16.recompensas.ganhoAposta.max - _0x542a16.recompensas.ganhoAposta.min) + _0x542a16.recompensas.ganhoAposta.min;
            const _0x3e12bb = Math.floor(_0x362bee * _0x10baa6);
            _0x397ae5.addGold(_0x1b8430, _0x18275b, _0x3e12bb);
            return "\n╭━━━ 🎲 APOSTA GOLD 🎲 ━━━╮\n┃\n┃ " + _0x542a16.emojis.win + " RESULTADO: GANHOU!\n┃\n┃ Parabéns! Você ganhou " + _0x3e12bb + " Golds\n┃ (" + Math.floor(_0x10baa6 * 100) + "% de retorno)!\n┃\n┃ 💰 Saldo atual: " + _0x397ae5.getBalance(_0x1b8430, _0x18275b) + " Golds\n┃ 🎮 Apostas restantes: " + (_0x542a16.chances.ChanceAp - (_0x397ae5.getUser(_0x1b8430, _0x18275b).chances.ChanceAp || 0)) + '/' + _0x542a16.chances.ChanceAp + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
          case 2:
            const _0x3bb6f0 = Math.floor(_0x362bee / 2);
            _0x397ae5.removeGold(_0x1b8430, _0x18275b, _0x3bb6f0);
            return "\n╭━━━ 🎲 APOSTA GOLD 🎲 ━━━╮\n┃\n┃ " + _0x542a16.emojis.win + _0x542a16.emojis.lose + " RESULTADO: MISTO!\n┃\n┃ Você perdeu metade da sua aposta:\n┃ " + _0x3bb6f0 + " Golds.\n┃\n┃ 💰 Saldo atual: " + _0x397ae5.getBalance(_0x1b8430, _0x18275b) + " Golds\n┃ 🎮 Apostas restantes: " + (_0x542a16.chances.ChanceAp - (_0x397ae5.getUser(_0x1b8430, _0x18275b).chances.ChanceAp || 0)) + '/' + _0x542a16.chances.ChanceAp + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
          case 3:
            return "\n╭━━━ 🎲 APOSTA GOLD 🎲 ━━━╮\n┃\n┃ 😐 RESULTADO: NEUTRO\n┃\n┃ Você nem ganhou nem perdeu.\n┃ Pelo menos manteve seus " + _0x362bee + " Golds.\n┃\n┃ 💰 Saldo atual: " + _0x397ae5.getBalance(_0x1b8430, _0x18275b) + " Golds\n┃ 🎮 Apostas restantes: " + (_0x542a16.chances.ChanceAp - (_0x397ae5.getUser(_0x1b8430, _0x18275b).chances.ChanceAp || 0)) + '/' + _0x542a16.chances.ChanceAp + "\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
        }
      }
      const _0x168275 = _0x4aa707(_0x370705, _0x9047b, _0x15ebd8, _0x9c32a4, _0x2ee7ad, _0x184295);
      return _0x27dea7(_0x168275);
    } catch (_0x39213f) {
      console.error("Erro ao processar aposta:", _0x39213f);
      return _0x27dea7("❌ Ocorreu um erro ao processar sua aposta. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "gold",
  'aliases': ["perfilgold", "goldperfil", "statusgold", "goldstatus"],
  'category': "economia",
  'description': "Exibe seu saldo e status no sistema gold",
  'longDescription': "Exibe informações detalhadas sobre o seu perfil no sistema gold, incluindo saldo, estatísticas e histórico de atividades.",
  'usage': "gold [@usuário]",
  'example': "gold\ngold @usuario",
  'menu': "gold",
  'menuSection': "Economia",
  'permissions': _0x4a20fe,
  'requirements': {},
  'execute': async ({
    conn: _0x4fc20a,
    info: _0xa71f0f,
    from: _0x405779,
    sender: _0x5657ab,
    menc_os2: _0x2a23a0,
    lermais: _0x55cdc5,
    EmojiBot: _0x3b612a,
    pushname: _0x35a840,
    reply: _0x25981f,
    mention: _0x458711,
    BANCOP: _0x52e8ef,
    dataGp: _0x70d3e7,
    countMessage: _0x56f705,
    configsGold: _0x5f5638,
    goldSystem: _0x493b2b
  }) => {
    if (_0x70d3e7[0]?.["sistemgold"] === 0) {
      return _0x25981f("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    const _0x37c269 = _0x2a23a0 || _0x5657ab;
    try {
      const _0x119449 = _0x493b2b.getUser(_0x405779, _0x37c269);
      const _0x2c7073 = _0x119449.gold || 0;
      const _0x24c0bc = _0x5f5638.emojis.gold;
      const _0x346aef = _0x493b2b.getRanking(_0x405779, 100);
      const _0x579505 = _0x346aef.findIndex(_0x5b34ac => _0x5b34ac.user_id === _0x37c269) + 1;
      const _0x47340a = _0x346aef.reduce((_0x594605, _0x5b4472) => _0x594605 + (_0x5b4472.gold || 0), 0);
      const _0xea8756 = _0x47340a > 0 ? (_0x2c7073 / _0x47340a * 100).toFixed(1) : 0;
      const _0x286b8b = async () => {
        try {
          const _0xb0d9ea = _0x56f705.find(_0x43751b => _0x43751b.groupId === _0x405779);
          if (!_0xb0d9ea) {
            return _0x35a840;
          }
          const _0x3f1c3b = JSON.parse(_0xb0d9ea.numbers || '[]');
          const _0x652817 = _0x3f1c3b.find(_0x169c5d => _0x169c5d.id === _0x37c269);
          return _0x652817 ? _0x652817.nick || _0x35a840 : _0x35a840;
        } catch (_0x20a062) {
          console.error("Erro ao buscar nome do usuário:", _0x20a062);
          return _0x35a840;
        }
      };
      const _0x4397cb = _0x119449.chances || {};
      const _0x43f9c3 = {
        errou: 0x0,
        acertou: 0x0
      };
      const _0x1a1dcd = _0x4397cb.quiz?.[0] || _0x43f9c3;
      const _0x586d65 = (() => {
        const _0x4a4d3d = {
          total: 0x0,
          lista: ''
        };
        if (!Array.isArray(_0x4397cb.ChanceR)) {
          return _0x4a4d3d;
        }
        const _0x38fc71 = _0x4397cb.ChanceR.filter(_0x2b4d4e => _0x2b4d4e && _0x2b4d4e.quantidade > 0);
        let _0x22379c = '';
        for (const _0x3c6f7f of _0x38fc71) {
          const _0x2f5f28 = Date.now() - (_0x3c6f7f.timestamp || 0);
          const _0x16efc6 = Math.max(0, 24 - Math.floor(_0x2f5f28 / 3600000));
          _0x22379c += "┃ • @" + _0x3c6f7f.id.split('@')[0] + " - " + _0x3c6f7f.quantidade + " " + _0x24c0bc + "\n";
          _0x22379c += "┃ " + _0x16efc6 + "h restante" + (_0x16efc6 !== 1 ? 's' : '') + " para vingança\n";
        }
        const _0x283428 = {
          total: _0x38fc71.length,
          lista: _0x22379c
        };
        return _0x283428;
      })();
      const _0x554291 = (_0x5a8c39, _0x2af619, _0x508282 = 10) => {
        if (_0x2af619 <= 0) {
          return '▱'.repeat(_0x508282);
        }
        const _0x45d53c = Math.min(Math.floor(_0x5a8c39 / _0x2af619 * _0x508282), _0x508282);
        return '▰'.repeat(_0x45d53c) + '▱'.repeat(_0x508282 - _0x45d53c);
      };
      const _0x10cd4e = {
        name: "Minerar",
        current: _0x4397cb.ChanceG || 0,
        max: _0x5f5638.chances.ChanceG,
        emoji: '⛏️'
      };
      const _0x22fc08 = {
        name: "Roubar",
        current: _0x4397cb.roubosDiarios || 0,
        max: _0x5f5638.chances.ChanceR,
        emoji: '💰'
      };
      const _0xb6b407 = {
        name: "Apostar",
        current: _0x4397cb.ChanceAp || 0,
        max: _0x5f5638.chances.ChanceAp,
        emoji: '🎲'
      };
      const _0xc13785 = {
        name: "Cassino",
        current: _0x4397cb.cassino || 0,
        max: _0x5f5638.chances.cassino,
        emoji: '🎰'
      };
      const _0x559b58 = {
        name: "Aviator",
        current: _0x4397cb.aviator || 0,
        max: _0x5f5638.chances.aviator,
        emoji: '✈️'
      };
      const _0x3b8dcf = {
        name: "Roleta",
        current: _0x4397cb.roletadasorte ? 1 : 0,
        max: 0x1,
        emoji: '🎡'
      };
      const _0x3771ca = {
        name: "Double",
        current: _0x4397cb.doubleg || 0,
        max: _0x5f5638.chances.doubleg,
        emoji: '🎯'
      };
      const _0x69dee6 = {
        name: "Caixa Misteriosa",
        current: _0x4397cb.caixamisteriosa || 0,
        max: _0x5f5638.chances.caixamisteriosa || 5,
        emoji: '🎁'
      };
      const _0x2508ac = {
        name: "Quiz",
        current: (_0x1a1dcd.acertou || 0) + "✓ " + (_0x1a1dcd.errou || 0) + '✗',
        max: 0x2,
        emoji: '🤔',
        customFormat: true
      };
      const _0x33b4c3 = [_0x10cd4e, _0x22fc08, _0xb6b407, _0xc13785, _0x559b58, _0x3b8dcf, _0x3771ca, _0x69dee6, _0x2508ac, {
        'name': "Cachaça",
        'current': 3 - (_0x4397cb.cachaca || 0),
        'max': 0x3,
        'emoji': '🍺'
      }];
      const _0x325461 = _0x33b4c3.map(_0x5f55be => {
        if (_0x5f55be.customFormat) {
          return "┃ " + _0x5f55be.emoji + " " + _0x5f55be.name + ": " + _0x5f55be.current + " (Máx: " + _0x5f55be.max + ")\n┃ " + _0x554291(parseInt(_0x5f55be.current.split('✓')[0]) || 0, _0x5f55be.max);
        } else {
          const _0x397061 = _0x554291(_0x5f55be.current, _0x5f55be.max);
          return "┃ " + _0x5f55be.emoji + " " + _0x5f55be.name + ": " + _0x5f55be.current + '/' + _0x5f55be.max + "\n┃ " + _0x397061;
        }
      }).join("\n");
      const _0x3d583 = await _0x286b8b();
      const _0x26188c = Array.isArray(_0x4397cb.Escudo) && _0x4397cb.Escudo.length > 0 ? _0x5f5638.emojis.shield + " Ativo" : "❌ Desativado";
      const _0x3c8981 = Array.isArray(_0x119449.emp_G) && _0x119449.emp_G.length > 0 ? '@' + _0x119449.emp_G[0]?.['id']["split"]('@')[0] + " (" + (_0x119449.emp_G[0]?.["Golds"] || 0) + " " + _0x24c0bc + ')' : "Nenhuma";
      const _0x555327 = ["╭─━━━━━━━━━━━━━━━━━─╮", "┃ 🧾 PERFIL ECONÔMICO", "┃ " + _0x3b612a + " Usuário: " + _0x3d583, "╰─━━━━━━━━━━━━━━━━━─╯", '' + _0x55cdc5, "╭─━━━━━ SALDO ━━━━━─╮", "┃ " + _0x24c0bc + " Gold: " + _0x2c7073.toLocaleString(), "┃ 📊 Posição: #" + _0x579505 + " no grupo", "┃ 📈 Percentual: " + _0xea8756 + "% do total", "┃ 🛡️ Escudo: " + _0x26188c, "┃ 💸 Dívidas: " + _0x3c8981, "╰─━━━━━━━━━━━━━━━━━─╯", '', "╭─━━━ ATIVIDADES ━━━─╮", _0x325461, "╰─━━━━━━━━━━━━━━━━━─╯"];
      if (_0x586d65.total > 0) {
        _0x555327.push('', "╭─━━ ROUBADORES ━━─╮", "┃ 📝 Total: " + _0x586d65.total + " usuários", _0x586d65.lista, "┃ 💡 Use: !vinganca @usuario", "╰─━━━━━━━━━━━━━━━━━─╯");
      }
      _0x458711(_0x555327.join("\n"));
    } catch (_0x28428d) {
      console.error("Erro ao obter perfil gold:", _0x28428d);
      return _0x25981f("❌ Ocorreu um erro ao obter seu perfil. Tente novamente mais tarde.");
    }
  }
}, {
  'name': "emojigold",
  'aliases': ["emojisgold"],
  'category': "gold",
  'description': "Ativa ou desativa o sistema de jogo EmojiGold",
  'longDescription': "Este comando ativa ou desativa o mini-game EmojiGold no grupo. Quando ativado, a cada hora será enviada uma palavra e os usuários devem enviar o emoji correspondente. O primeiro a acertar ganha 25 Golds e 1 ponto. No final do dia, os cinco melhores ganham recompensas adicionais.",
  'usage': "emojigold",
  'example': "emojigold",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': _0x1683b2,
  'requirements': {},
  'execute': async ({
    dataGp: _0x3af58a,
    setGp: _0x1ae1ea,
    reply: _0x3b1982,
    path: _0x2cfa00,
    fs: _0x4bdc94,
    BANCOP: _0x3c3b42,
    from: _0x5b4e4c,
    prefix: _0x11e5e2
  }) => {
    if (!_0x3af58a[0].sistemgold) {
      return _0x3b1982("❌ O sistema Gold precisa estar ativado para usar o EmojiGold!\nAtive primeiro com " + _0x11e5e2 + "ativargold");
    }
    const _0x1f4767 = _0x3af58a[0].emojigold;
    _0x3af58a[0].emojigold = !_0x1f4767;
    _0x1ae1ea(_0x3af58a);
    if (_0x3af58a[0].emojigold) {
      const _0x32fb24 = _0x2cfa00.join(__dirname, "../../dados/org/json/emojis.json");
      if (!_0x4bdc94.existsSync(_0x32fb24)) {
        const _0x4a690b = {
          Sol: '☀️',
          Lua: '🌙',
          Coração: '❤️',
          Estrela: '⭐'
        };
        const _0x342bd8 = {
          emojis: _0x4a690b
        };
        _0x4bdc94.writeFileSync(_0x32fb24, JSON.stringify([_0x342bd8], null, 2));
      }
      const _0x52c90a = require("./sgld.js");
      const _0x590688 = new _0x52c90a(_0x3c3b42);
      const _0x3f5bb2 = _0x590688.getEmojiGoldData(_0x5b4e4c);
      if (!_0x3f5bb2) {
        _0x590688.initEmojiGoldData(_0x5b4e4c);
      }
      return _0x3b1982("✅ *EMOJIGOLD ATIVADO!* 🎮 🎯 🎪\n\n📱 *Como funciona:*\n- A cada hora será enviada uma palavra-desafio\n- Envie o emoji correspondente à palavra\n- Primeiro a acertar ganha *25 Golds* 💰 e *1 ponto* ⭐\n- Use " + _0x11e5e2 + "mencgold para receber notificações\n\n🏆 *Ranking diário (TOP 5):*\n- 🥇 1º lugar: +200 Golds\n- 🥈 2º lugar: +150 Golds\n- 🥉 3º lugar: +100 Golds\n- 🏅 4º lugar: +50 Golds\n- 🏅 5º lugar: +25 Golds\n\n🎲 Divirta-se competindo e ganhe Golds extras! 🎉");
    } else {
      return _0x3b1982("❌ *EMOJIGOLD DESATIVADO* ⏸️ 🛑\n\nO mini-game EmojiGold foi desativado neste grupo.\nOs rankings não serão mais enviados e nenhum desafio de emoji será gerado.\n\n💡 Para reativar o sistema a qualquer momento, use " + _0x11e5e2 + "emojigold novamente.");
    }
  }
}, {
  'name': ["mencgold", "desmencgold"],
  'aliases': ["mencionargold", "desmencionargold"],
  'category': "gold",
  'description': "Adiciona ou remove você da lista de menções do EmojiGold",
  'longDescription': "Com este comando você pode adicionar ou remover seu nome da lista de usuários que serão mencionados quando um novo desafio de EmojiGold for enviado no grupo.",
  'usage': "mencgold / desmencgold",
  'example': "mencgold",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': _0x1018fa,
  'requirements': {},
  'execute': async ({
    command: _0x577bcd,
    dataGp: _0x383f69,
    reply: _0x434ef8,
    from: _0x3d43ab,
    sender: _0x777a25,
    BANCOP: _0x520e77,
    prefix: _0x23297f
  }) => {
    if (!_0x383f69[0].sistemgold === 1 || !_0x383f69[0].emojigold) {
      return _0x434ef8("❌ O sistema EmojiGold não está ativado neste grupo!\nPeça para um administrador ativar com " + _0x23297f + "emojigold");
    }
    const _0xf31627 = _0x577bcd === "desmencgold" || _0x577bcd === "desmencionargold";
    const _0x382969 = require("./sgld.js");
    const _0x8ab04b = new _0x382969(_0x520e77);
    if (_0xf31627) {
      const _0x2f41bb = _0x8ab04b.removeEmojiGoldMention(_0x3d43ab, _0x777a25);
      if (_0x2f41bb.success) {
        return _0x434ef8("✅ " + _0x2f41bb.message);
      } else {
        return _0x434ef8("❌ " + _0x2f41bb.message);
      }
    } else {
      const _0x1d1539 = _0x8ab04b.addEmojiGoldMention(_0x3d43ab, _0x777a25);
      if (_0x1d1539.success) {
        return _0x434ef8("✅ " + _0x1d1539.message + "\n\nVocê receberá notificações quando novos desafios de emoji forem enviados!");
      } else {
        return _0x434ef8("❌ " + _0x1d1539.message);
      }
    }
  }
}, {
  'name': ["addemojigold", "removeemojigold"],
  'aliases': '',
  'category': "dono",
  'description': "Adiciona ou remove emojis do sistema EmojiGold",
  'longDescription': "Comando para administrar os emojis disponíveis no sistema EmojiGold. Apenas o dono do bot pode usar.",
  'usage': "addemoji palavra, emoji / removeemoji palavra",
  'example': "addemoji Gato, 🐱\nremoveemoji Gato",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x5197b4,
  'requirements': {},
  'execute': async ({
    command: _0x503296,
    q: _0x17f055,
    reply: _0x59d995,
    path: _0x45026d,
    fs: _0x29270f,
    prefix: _0x42b5f5
  }) => {
    const _0x5d3369 = _0x503296 === "removeemojigold";
    if (_0x5d3369) {
      if (!_0x17f055) {
        return _0x59d995("❌ Formato incorreto! Use: " + _0x42b5f5 + "removeemoji palavra\nExemplo: " + _0x42b5f5 + "removeemoji Gato");
      }
      const _0x3bdc8f = _0x45026d.join(__dirname, "../../dados/org/json/emojis.json");
      let _0x435c19;
      try {
        if (!_0x29270f.existsSync(_0x3bdc8f)) {
          return _0x59d995("❌ Arquivo de emojis não encontrado!");
        }
        _0x435c19 = JSON.parse(_0x29270f.readFileSync(_0x3bdc8f, "utf8"));
        if (!_0x435c19[0].emojis) {
          return _0x59d995("❌ Nenhum emoji cadastrado!");
        }
        if (!_0x435c19[0].emojis[_0x17f055]) {
          return _0x59d995("❌ A palavra \"" + _0x17f055 + "\" não está cadastrada!");
        }
        delete _0x435c19[0].emojis[_0x17f055];
        _0x29270f.writeFileSync(_0x3bdc8f, JSON.stringify(_0x435c19, null, 2));
        return _0x59d995("✅ Emoji da palavra \"" + _0x17f055 + "\" removido com sucesso!");
      } catch (_0x263630) {
        console.error("Erro ao remover emoji:", _0x263630);
        return _0x59d995("❌ Erro ao remover emoji: " + _0x263630.message);
      }
    } else {
      if (!_0x17f055.includes(',')) {
        return _0x59d995("❌ Formato incorreto! Use: " + _0x42b5f5 + "addemoji palavra, emoji\nExemplo: " + _0x42b5f5 + "addemoji Gato, 🐱");
      }
      const [_0x12c20a, _0x25bec8] = _0x17f055.split(',').map(_0x158ca7 => _0x158ca7.trim());
      if (!_0x12c20a || !_0x25bec8) {
        return _0x59d995("❌ Formato incorreto! Use: " + _0x42b5f5 + "addemoji palavra, emoji\nExemplo: " + _0x42b5f5 + "addemoji Gato, 🐱");
      }
      const _0x56b77e = /(\p{Emoji})/u;
      if (!_0x56b77e.test(_0x25bec8)) {
        return _0x59d995("❌ O valor \"" + _0x25bec8 + "\" não parece ser um emoji válido!");
      }
      const _0xb38197 = _0x45026d.join(__dirname, "../../dados/org/json/emojis.json");
      let _0x230e14;
      try {
        if (_0x29270f.existsSync(_0xb38197)) {
          _0x230e14 = JSON.parse(_0x29270f.readFileSync(_0xb38197, "utf8"));
        } else {
          const _0x50a8a6 = {
            emojis: {}
          };
          _0x230e14 = [_0x50a8a6];
        }
        if (!_0x230e14[0].emojis) {
          _0x230e14[0].emojis = {};
        }
        _0x230e14[0].emojis[_0x12c20a] = _0x25bec8;
        _0x29270f.writeFileSync(_0xb38197, JSON.stringify(_0x230e14, null, 2));
        return _0x59d995("✅ Emoji adicionado com sucesso!\nPalavra: " + _0x12c20a + "\nEmoji: " + _0x25bec8);
      } catch (_0x11f2b7) {
        console.error("Erro ao adicionar emoji:", _0x11f2b7);
        return _0x59d995("❌ Erro ao adicionar emoji: " + _0x11f2b7.message);
      }
    }
  }
}, {
  'name': ["rankemojigold", "emojisgoldlista"],
  'aliases': ["emojislist", "rankingemoji"],
  'category': "gold",
  'description': "Mostra a lista de emojis ou o ranking do EmojiGold",
  'longDescription': "Comando para visualizar a lista de emojis disponíveis ou o ranking atual de jogadores do EmojiGold do grupo.",
  'usage': "listemojis / rankemojigold",
  'example': "listemojis",
  'menu': "gold",
  'menuSection': "Jogos",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    command: _0x1006dd,
    dataGp: _0xe885a5,
    reply: _0x201e43,
    from: _0x231f9f,
    conn: _0x14d833,
    path: _0x25a262,
    fs: _0x711c30,
    BANCOP: _0xed795e,
    SoDono: _0x4e9b5b,
    isGroupAdmins: _0x5dd229,
    isGroup: _0x4c8dcb,
    Res_SoAdm: _0x32bf41,
    Res_SoDono: _0x4e88ca,
    Res_SoGrupo: _0x1598f1,
    prefix: _0x2d6e97,
    moment: _0x596b2b
  }) => {
    const _0x44520d = ["rankemojigold", "rankingemoji"].includes(_0x1006dd);
    if (_0x44520d) {
      if (!_0x4c8dcb) {
        return _0x201e43(_0x1598f1 || "❌ Comando apenas para grupos!");
      }
      if (!_0xe885a5?.[0]?.["sistemgold"] || !_0xe885a5?.[0]?.["emojigold"]) {
        return _0x201e43("❌ O sistema EmojiGold não está ativado neste grupo!\nPeça para um administrador ativar com " + (_0x2d6e97 || '!') + "emojigold");
      }
      try {
        const _0xbf3443 = require("./sgld.js");
        const _0x486e4d = new _0xbf3443(_0xed795e);
        const _0x28a047 = _0x486e4d.getEmojiGoldData(_0x231f9f);
        if (!_0x28a047?.["usuarios"]) {
          return _0x201e43("❌ Não há dados de ranking disponíveis!");
        }
        const _0x1fe0ba = (Array.isArray(_0x28a047.usuarios) ? _0x28a047.usuarios : []).filter(_0x94e77f => _0x94e77f?.["pontos"] > 0).sort((_0x232f08, _0x590ca7) => _0x590ca7.pontos - _0x232f08.pontos);
        if (!_0x1fe0ba.length) {
          return _0x201e43("❌ Não há jogadores com pontos registrados!");
        }
        const _0x39b84c = _0x596b2b().tz("America/Sao_Paulo");
        const _0x17ace6 = _0x39b84c.format("YYYY-MM-DD");
        const _0x501daf = _0x28a047.LastReset === _0x17ace6;
        const _0x587ee8 = _0x19b5c9 => {
          const _0xe89b8b = _0x19b5c9.diff(_0x39b84c);
          return Math.floor(_0xe89b8b / 3600000) + "h " + Math.floor(_0xe89b8b % 3600000 / 60000) + "min";
        };
        let _0x3b29f8 = _0x39b84c.clone().add(1, "minute");
        if (_0x28a047.emojiData?.["Data"]) {
          const _0x3e04bb = _0x596b2b(_0x28a047.emojiData.Data + 3600000);
          if (_0x3e04bb.isAfter(_0x39b84c)) {
            _0x3b29f8 = _0x3e04bb;
          }
        }
        let _0x478c87;
        try {
          _0x478c87 = require(_0x25a262.join(__dirname, "../../dados/org/js/configsgold.js"))?.["emojiGold"]?.["horariosReset"] || [21];
        } catch {
          _0x478c87 = [21];
        }
        let _0xf0f59e = _0x39b84c.clone().hour(_0x478c87[0]).startOf("hour");
        if (_0xf0f59e.isBefore(_0x39b84c) || _0x501daf) {
          _0xf0f59e.add(1, "day");
        }
        const _0x40546c = "⏰ *Próximos Eventos:*\n🎯 Próximo emoji: " + _0x587ee8(_0x3b29f8) + "\n🏆 Próximo ranking: " + _0x587ee8(_0xf0f59e);
        const _0x191e20 = ['🥇', '🥈', '🥉'];
        const _0x249f5d = _0x1fe0ba.map((_0x552ccd, _0x2cd2ef) => (_0x191e20[_0x2cd2ef] || _0x2cd2ef + 1 + '.') + " @" + _0x552ccd.id.split('@')[0] + " - *" + _0x552ccd.pontos + " pontos*").join("\n");
        const _0x13ef67 = _0x501daf ? "🏆 *RANKING EMOJIGOLD* 🏆\n\n✅ *Ranking de hoje já enviado!*\n\n🎯 *Pontuação atual para amanhã:*\n" + (_0x249f5d || "Ninguém pontuou ainda hoje") + "\n\n🎁 *Próxima premiação:*\n" + "🥇 1º: +200 Golds\n🥈 2º: +150 Golds\n🥉 3º: +100 Golds\n🏅 4º: +50 Golds\n🏅 5º: +25 Golds" + "\n\n" + _0x40546c + "\n\n🎮 Continue jogando para garantir sua posição!\n💡 Use " + (_0x2d6e97 || '!') + "mencgold para notificações!" : "🏆 *RANKING EMOJIGOLD* 🏆\n\n" + _0x249f5d + "\n\n🎁 *Premiação diária:*\n" + "🥇 1º: +200 Golds\n🥈 2º: +150 Golds\n🥉 3º: +100 Golds\n🏅 4º: +50 Golds\n🏅 5º: +25 Golds" + "\n\n" + _0x40546c + "\n\n💡 Use " + (_0x2d6e97 || '!') + "mencgold para notificações!";
        await _0x14d833.sendMessage(_0x231f9f, {
          'text': _0x13ef67,
          'mentions': _0x1fe0ba.map(_0x1a82c3 => _0x1a82c3.id)
        });
        return true;
      } catch (_0x4eeabf) {
        console.error("Erro ao obter ranking:", _0x4eeabf);
        return _0x201e43("❌ Erro ao processar ranking: " + (_0x4eeabf?.["message"] || "Erro desconhecido"));
      }
    } else {
      if (!_0x4e9b5b && !_0x5dd229) {
        return _0x201e43(_0x4c8dcb ? _0x32bf41 || "❌ Apenas administradores!" : _0x4e88ca || "❌ Apenas o dono!");
      }
      try {
        const _0x28ca56 = _0x25a262.join(__dirname, "../../dados/org/json/emojis.json");
        if (!_0x711c30.existsSync(_0x28ca56)) {
          return _0x201e43("❌ Arquivo de emojis não encontrado!");
        }
        const _0x48ee30 = JSON.parse(_0x711c30.readFileSync(_0x28ca56, "utf8"));
        const _0x514f4a = _0x48ee30?.[0]?.["emojis"];
        if (!_0x514f4a || !Object.keys(_0x514f4a).length) {
          return _0x201e43("❌ Nenhum emoji cadastrado!");
        }
        const _0x49bb14 = Object.entries(_0x514f4a);
        let _0x1bed73 = "🔍 *EMOJIS CADASTRADOS* 🔍\n\n";
        for (let _0x188569 = 0; _0x188569 < _0x49bb14.length; _0x188569++) {
          const [_0x44041c, _0x4006bd] = _0x49bb14[_0x188569];
          _0x1bed73 += _0x188569 + 1 + ". *" + _0x44041c + "*: " + _0x4006bd + "\n";
          if ((_0x188569 + 1) % 50 === 0 && _0x188569 < _0x49bb14.length - 1) {
            const _0x3fdee4 = {
              text: _0x1bed73
            };
            await _0x14d833.sendMessage(_0x231f9f, _0x3fdee4);
            _0x1bed73 = '';
          }
        }
        if (_0x1bed73.trim()) {
          return _0x201e43(_0x1bed73);
        }
        return true;
      } catch (_0x5bf4c7) {
        console.error("Erro ao listar emojis:", _0x5bf4c7);
        return _0x201e43("❌ Erro ao listar emojis: " + (_0x5bf4c7?.["message"] || "Erro desconhecido"));
      }
    }
  }
}, {
  'name': ["roubargold", "vingancagold"],
  'aliases': ["roubar", "assaltar", "stealg", "vinganca", "revenge"],
  'category': "economia",
  'description': "Roubar gold ou se vingar de outros usuários",
  'longDescription': "Permite roubar gold de outros usuários do grupo ou vingar-se de quem te roubou, com chances variadas de sucesso.",
  'usage': "roubargold @usuário\nvingancagold @usuário",
  'example': "roubargold @usuario\nvingancagold @usuario",
  'menu': "gold",
  'menuSection': "Economia",
  'permissions': _0x14f38a,
  'requirements': {},
  'execute': async ({
    conn: _0x50acd9,
    info: _0x10e79c,
    from: _0x124108,
    sender: _0xfa8174,
    command: _0x293517,
    menc_os2: _0x3dd9ac,
    reply: _0x12e8c3,
    mention: _0x155a32,
    BANCOP: _0x49db31,
    dataGp: _0x3457af,
    configsGold: _0x2ebee3,
    goldSystem: _0x1b7769
  }) => {
    if (_0x3457af[0]?.["sistemgold"] === 0) {
      return _0x12e8c3("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com !sistemgold on");
    }
    const _0x22dcbe = ["roubargold", "roubar", "assaltar", "stealg"].includes(_0x293517);
    const _0xec9448 = ["vingancagold", "vinganca", "revenge"].includes(_0x293517);
    if (!_0x3dd9ac) {
      return _0x12e8c3("❌ Você precisa marcar alguém para " + (_0x22dcbe ? "roubar" : "se vingar") + "!\nExemplo: !" + _0x293517 + " @usuario");
    }
    try {
      const _0x583a05 = _0x1b7769.getUser(_0x124108, _0xfa8174);
      const _0x5f271d = _0x583a05.chances;
      if (_0x22dcbe) {
        if (_0x3dd9ac === _0xfa8174) {
          return _0x12e8c3("❌ Você não pode roubar a si mesmo...");
        }
        if (_0x3dd9ac === _0x50acd9.user.id.split(':')[0] + "@s.whatsapp.net") {
          return _0x12e8c3("❌ Você não pode me roubar, tenho segurança máxima 😎");
        }
        if ((_0x5f271d.roubosDiarios || 0) >= _0x2ebee3.chances.ChanceR) {
          return _0x12e8c3("❌ Você já usou todas as " + _0x2ebee3.chances.ChanceR + " chances de roubo hoje! Volte amanhã.");
        }
        const _0x3f4455 = _0x1b7769.getBalance(_0x124108, _0x3dd9ac);
        if (_0x3f4455 <= 0) {
          return _0x12e8c3("❌ Este usuário não tem nenhum Gold para você roubar.");
        }
        const _0x3c6995 = _0x1b7769.getUser(_0x124108, _0x3dd9ac);
        const _0x3b229e = _0x3c6995.chances;
        if (Array.isArray(_0x3b229e.Escudo) && _0x3b229e.Escudo.length > 0) {
          const _0x2d8b42 = Math.random() < _0x2ebee3.roubo.chanceQuebrarEscudo;
          _0x5f271d.roubosDiarios = (_0x5f271d.roubosDiarios || 0) + 1;
          _0x1b7769.updateChances(_0x124108, _0xfa8174, _0x5f271d);
          if (_0x2d8b42) {
            _0x3b229e.Escudo = [];
            _0x1b7769.updateChances(_0x124108, _0x3dd9ac, _0x3b229e);
            return _0x155a32(_0x2ebee3.emojis.shield + " O usuário @" + _0x3dd9ac.split('@')[0] + " estava protegido por um escudo, mas você conseguiu quebrá-lo! Agora ele está vulnerável.");
          } else {
            return _0x155a32(_0x2ebee3.emojis.shield + " O usuário @" + _0x3dd9ac.split('@')[0] + " está protegido por um escudo e você não conseguiu quebrá-lo.");
          }
        }
        const _0x31c69f = Math.random() * 100;
        const _0x45c472 = _0x2ebee3.roubo.chanceBaseDeExito;
        _0x5f271d.roubosDiarios = (_0x5f271d.roubosDiarios || 0) + 1;
        _0x1b7769.updateChances(_0x124108, _0xfa8174, _0x5f271d);
        if (_0x31c69f <= _0x45c472) {
          const _0x5d9d48 = Math.random() * 0.29 + 0.01;
          const _0x450872 = Math.floor(_0x3f4455 * _0x5d9d48);
          const _0xf3d27b = Math.min(_0x450872, _0x2ebee3.limites.maxRoubo);
          _0x1b7769.transferGold(_0x124108, _0x3dd9ac, _0xfa8174, _0xf3d27b);
          if (!Array.isArray(_0x3b229e.ChanceR)) {
            _0x3b229e.ChanceR = [];
          }
          _0x3b229e.ChanceR.push({
            'id': _0xfa8174,
            'timestamp': Date.now(),
            'quantidade': _0xf3d27b
          });
          _0x1b7769.updateChances(_0x124108, _0x3dd9ac, _0x3b229e);
          return _0x155a32(_0x2ebee3.emojis.steal + " @" + _0xfa8174.split('@')[0] + " roubou " + _0xf3d27b + " Golds de @" + _0x3dd9ac.split('@')[0] + "! " + _0x2ebee3.emojis.win + "\n\nA vítima pode usar !vinganca para se vingar.");
        } else {
          const _0x47dec7 = Math.random() * 100;
          if (_0x47dec7 <= 50) {
            const _0x1766f4 = _0x1b7769.getBalance(_0x124108, _0xfa8174);
            const _0xc7f172 = Math.random() * (_0x2ebee3.roubo.perdaFalhada.max - _0x2ebee3.roubo.perdaFalhada.min) / 100 + _0x2ebee3.roubo.perdaFalhada.min / 100;
            const _0x4aee83 = Math.floor(_0x1766f4 * _0xc7f172);
            if (_0x4aee83 > 0) {
              _0x1b7769.transferGold(_0x124108, _0xfa8174, _0x3dd9ac, _0x4aee83);
              return _0x155a32(_0x2ebee3.emojis.lose + " @" + _0xfa8174.split('@')[0] + " tentou roubar @" + _0x3dd9ac.split('@')[0] + " mas falhou! Foi pego e perdeu " + _0x4aee83 + " Golds para sua vítima.");
            }
          }
          return _0x155a32(_0x2ebee3.emojis.lose + " @" + _0xfa8174.split('@')[0] + " tentou roubar @" + _0x3dd9ac.split('@')[0] + " mas falhou! Por sorte, conseguiu fugir sem perder nada.");
        }
      } else {
        if (_0xec9448) {
          if (!Array.isArray(_0x5f271d.ChanceR) || _0x5f271d.ChanceR.length === 0) {
            return _0x12e8c3("❌ Você não tem ninguém para se vingar. Ninguém roubou você recentemente!");
          }
          const _0x4e5c38 = _0x5f271d.ChanceR.find(_0x4e0be3 => _0x4e0be3.id === _0x3dd9ac);
          if (!_0x4e5c38) {
            return _0x12e8c3("❌ Esta pessoa não roubou você recentemente!");
          }
          const _0x4f5ebc = _0x2ebee3.vinganca.tempoLimite || 86400000;
          if (Date.now() - _0x4e5c38.timestamp > _0x4f5ebc) {
            _0x5f271d.ChanceR = _0x5f271d.ChanceR.filter(_0x265528 => _0x265528.id !== _0x3dd9ac);
            _0x1b7769.updateChances(_0x124108, _0xfa8174, _0x5f271d);
            return _0x12e8c3("❌ O tempo limite para vingança expirou (24 horas)!");
          }
          const _0x1f3c05 = _0x1b7769.getBalance(_0x124108, _0x3dd9ac);
          if (_0x1f3c05 <= 0) {
            return _0x12e8c3("❌ Este usuário não tem nenhum Gold para você recuperar.");
          }
          const _0x57f5a8 = _0x1b7769.getUser(_0x124108, _0x3dd9ac);
          const _0xd2e132 = _0x57f5a8.chances;
          let _0x231c09 = false;
          if (Array.isArray(_0xd2e132.Escudo) && _0xd2e132.Escudo.length > 0) {
            const _0x467f48 = _0x2ebee3.vinganca.chanceQuebrarEscudo || 50;
            _0x231c09 = Math.random() * 100 <= _0x467f48;
            if (_0x231c09) {
              _0xd2e132.Escudo = [];
              _0x1b7769.updateChances(_0x124108, _0x3dd9ac, _0xd2e132);
            } else {
              return _0x155a32(_0x2ebee3.emojis.shield + " O usuário @" + _0x3dd9ac.split('@')[0] + " estava protegido por um escudo. Sua vingança foi poderosa, mas não conseguiu quebrá-lo desta vez!");
            }
          }
          const _0x58f69b = Math.random() * 100;
          const _0x2c7802 = _0x2ebee3.vinganca.chanceBase || 50;
          if (_0x58f69b <= _0x2c7802) {
            const _0x351616 = _0x4e5c38.quantidade;
            const _0x3f896b = _0x2ebee3.vinganca.multiplicadorMin || 1;
            const _0x21bb69 = _0x2ebee3.vinganca.multiplicadorMax || 2;
            const _0x2bb7f8 = Math.random() * (_0x21bb69 - _0x3f896b) + _0x3f896b;
            const _0x14ad9d = Math.floor(_0x351616 * _0x2bb7f8);
            const _0xd66118 = Math.min(_0x14ad9d, _0x1f3c05);
            _0x1b7769.transferGold(_0x124108, _0x3dd9ac, _0xfa8174, _0xd66118);
            _0x5f271d.ChanceR = _0x5f271d.ChanceR.filter(_0x265bd6 => _0x265bd6.id !== _0x3dd9ac);
            _0x1b7769.updateChances(_0x124108, _0xfa8174, _0x5f271d);
            let _0xfd094e = "⚔️ VINGANÇA CONCLUÍDA! 💢\n\n";
            _0xfd094e += "👤 @" + _0xfa8174.split('@')[0] + " se vingou de @" + _0x3dd9ac.split('@')[0] + "!\n";
            _0xfd094e += "💰 Valor recuperado: " + _0x351616 + " " + _0x2ebee3.emojis.gold + "\n";
            _0xfd094e += "🎯 Multiplicador de vingança: " + _0x2bb7f8.toFixed(1) + "x\n";
            if (_0xd66118 > _0x351616) {
              _0xfd094e += "💥 Bônus conquistado: " + (_0xd66118 - _0x351616) + " " + _0x2ebee3.emojis.gold + "\n";
            }
            _0xfd094e += "💼 Valor total: " + _0xd66118 + " " + _0x2ebee3.emojis.gold;
            if (_0x231c09) {
              _0xfd094e += "\n\n" + _0x2ebee3.emojis.shield + " Escudo inimigo foi destruído na vingança!";
            }
            return _0x155a32(_0xfd094e);
          } else {
            const _0x20e2e8 = _0x1b7769.getBalance(_0x124108, _0xfa8174);
            const _0x2b28ed = Math.random() * 100;
            if (_0x2b28ed <= (_0x2ebee3.vinganca.chancePunicao || 20)) {
              const _0xf6bfe9 = (_0x2ebee3.vinganca.perdaFalha || 0.2) / 100;
              const _0x227ec3 = Math.floor(_0x20e2e8 * _0xf6bfe9);
              if (_0x227ec3 > 0) {
                _0x1b7769.transferGold(_0x124108, _0xfa8174, _0x3dd9ac, _0x227ec3);
                let _0x497c2e = _0x2ebee3.emojis.lose + " VINGANÇA FALHOU! 💔\n\n";
                _0x497c2e += '@' + _0xfa8174.split('@')[0] + " tentou se vingar de @" + _0x3dd9ac.split('@')[0] + ", mas falhou miseravelmente!\n";
                _0x497c2e += "💸 Perdeu " + _0x227ec3 + " " + _0x2ebee3.emojis.gold + " no processo.\n";
                _0x497c2e += "🤡 Que vergonha...";
                if (_0x231c09) {
                  _0x497c2e += "\n\n" + _0x2ebee3.emojis.shield + " Pelo menos conseguiu quebrar o escudo do inimigo!";
                }
                return _0x155a32(_0x497c2e);
              }
            }
            let _0xd2609e = _0x2ebee3.emojis.lose + " VINGANÇA FALHOU! 😅\n\n";
            _0xd2609e += '@' + _0xfa8174.split('@')[0] + " tentou se vingar de @" + _0x3dd9ac.split('@')[0] + ", mas não conseguiu.\n";
            _0xd2609e += "🏃‍♂️ Por sorte, conseguiu fugir sem perder nada!";
            if (_0x231c09) {
              _0xd2609e += "\n\n" + _0x2ebee3.emojis.shield + " Pelo menos conseguiu quebrar o escudo do inimigo!";
            }
            return _0x155a32(_0xd2609e);
          }
        }
      }
    } catch (_0x37c490) {
      console.error("Erro ao processar " + (_0x22dcbe ? "roubo" : "vingança") + ':', _0x37c490);
      return _0x12e8c3("❌ Ocorreu um erro ao processar o " + (_0x22dcbe ? "roubo" : "vingança") + ". Tente novamente mais tarde.");
    }
  }
}, {
  'name': "addxp",
  'aliases': ["tirarxp", "removexp"],
  'category': "admin",
  'description': "Adiciona ou remove XP de um usuário",
  'longDescription': "Permite que administradores adicionem ou removam XP de um usuário específico no sistema de leveling.",
  'usage': "addxp @usuário quantidade ou tirarxp @usuário quantidade",
  'example': "addxp @usuario 100",
  'menu': "leveling",
  'menuSection': "Configurações de Grupo",
  'permissions': _0x394d4a,
  'requirements': {},
  'execute': async ({
    conn: _0x183ed0,
    info: _0x7a9d37,
    from: _0x537529,
    command: _0x2e4ad3,
    menc_os2: _0x21b983,
    q: _0x3bcc85,
    args: _0x41bf98,
    reply: _0x1b0fb6,
    BANCOP: _0x110c64,
    levelSystem: _0x22df72
  }) => {
    try {
      _0x22df72.init(_0x110c64);
      const _0x5055c0 = await _0x22df72.isLevelingEnabled(_0x537529);
      if (!_0x5055c0) {
        return _0x1b0fb6("❌ O sistema de leveling não está ativo neste grupo.\n\nUm administrador pode ativá-lo com o comando *!leveling*");
      }
      const _0xa5509c = _0x2e4ad3 === "addxp";
      const _0x3994ae = _0xa5509c ? "adicionar" : "remover";
      if (!_0x21b983) {
        return _0x1b0fb6("❌ Erro: Você precisa mencionar um usuário para " + _0x3994ae + " XP.\nExemplo: !" + _0x2e4ad3 + " @usuário 100");
      }
      const _0xd8b0b6 = parseInt(_0x41bf98[_0x41bf98.length - 1]);
      if (isNaN(_0xd8b0b6) || _0xd8b0b6 <= 0) {
        return _0x1b0fb6("❌ Erro: Você precisa especificar uma quantidade válida de XP.\nExemplo: !" + _0x2e4ad3 + " @usuário 100");
      }
      if (_0xd8b0b6 > 10000) {
        return _0x1b0fb6("⚠️ Por segurança, o limite máximo por operação é de 10000 XP.");
      }
      let _0x3f2f0a;
      if (_0xa5509c) {
        _0x3f2f0a = await _0x22df72.addXpToUser(_0x537529, _0x21b983, _0xd8b0b6);
      } else {
        _0x3f2f0a = await _0x22df72.removeXpFromUser(_0x537529, _0x21b983, _0xd8b0b6);
      }
      if (!_0x3f2f0a.success) {
        return _0x1b0fb6("❌ Erro ao " + _0x3994ae + " XP: " + _0x3f2f0a.message);
      }
      const _0x3b491f = _0x3f2f0a.userData;
      return _0x1b0fb6("✅ Operação realizada com sucesso!\n\n📊 *Detalhes da operação:*\n👤 Usuário: @" + _0x21b983.split('@')[0] + "\n" + (_0xa5509c ? '➕' : '➖') + " XP " + (_0xa5509c ? "adicionado" : "removido") + ": " + _0xd8b0b6 + "\n📈 Level atual: " + _0x3b491f.level + "\n🏵️ Patente: " + _0x3b491f.patente + "\n⭐ XP atual: " + _0x3b491f.xp + '/' + _0x22df72.calculateRequiredXP(_0x3b491f.level) + "\n📚 XP total: " + _0x3b491f.totalXp);
    } catch (_0x1aba4c) {
      console.error("[COMANDO XP MOD]", _0x1aba4c);
      return _0x1b0fb6("❌ Ocorreu um erro ao processar o comando.");
    }
  }
}, {
  'name': "ranklevelgxp",
  'aliases': ["toplevelgxp", "rankingglobalxp", "topxpg"],
  'category': "social",
  'description': "Exibe o ranking global de level",
  'longDescription': "Mostra o ranking dos usuários com maior XP e level em todos os grupos, exibindo os 10 usuários mais ativos globalmente.",
  'usage': "ranklevelg",
  'example': "ranklevelg",
  'menu': "leveling",
  'menuSection': "Diversão & Social",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x5e0f96,
    info: _0x2629da,
    from: _0x143322,
    BANCOP: _0x522045,
    reply: _0x16fb7a,
    levelSystem: _0x25ae81
  }) => {
    try {
      _0x25ae81.init(_0x522045);
      const _0x130c46 = await _0x25ae81.getGlobalRanking(10);
      if (!_0x130c46.success) {
        return _0x16fb7a("❌ " + _0x130c46.message);
      }
      if (_0x130c46.users.length === 0) {
        return _0x16fb7a("❌ Ainda não há dados de ranking global. Continue interagindo em grupos para ganhar XP!");
      }
      let _0x2c3140 = "┌───────────────⊷\n│ 𖣘⃟ RANKING GLOBAL DE LEVEL 𖣘⃟\n│ ⋆ Top " + _0x130c46.users.length + " Usuários ⋆\n└───────────────⊷\n";
      for (let _0x57271d = 0; _0x57271d < _0x130c46.users.length; _0x57271d++) {
        const _0x3cbc4e = _0x130c46.users[_0x57271d];
        const _0x4137cf = ['👑', '🥈', '🥉'];
        const _0x59b2b2 = _0x57271d < 3 ? _0x4137cf[_0x57271d] : '';
        _0x2c3140 += "╭──────────\n│" + (_0x57271d + 1) + "º : @" + _0x3cbc4e.userId.split('@')[0] + " " + _0x59b2b2 + "\n├──────────\n│ 📈 Level: " + _0x3cbc4e.level + "\n│ 📊 XP Total: " + _0x3cbc4e.totalXp.toLocaleString() + "\n│ 📨 Msgs: " + (_0x3cbc4e.dailyMessages + _0x3cbc4e.weeklyMessages) + "\n│ 👥 Grupos Ativos: " + _0x3cbc4e.groupCount + "\n╰──────────\n";
      }
      _0x2c3140 += "└──────────────⊷\n𖣘⃟ Ranking Global de Todos os Grupos";
      await _0x5e0f96.sendMessage(_0x143322, {
        'text': _0x2c3140,
        'mentions': _0x130c46.users.map(_0x58cf8d => _0x58cf8d.userId)
      });
      return true;
    } catch (_0x254522) {
      console.error("[COMANDO RANKLEVELG]", _0x254522);
      return _0x16fb7a("❌ Ocorreu um erro ao processar o comando.");
    }
  }
}, {
  'name': "daily",
  'aliases': ["dailyxp", "recompensa", "reward"],
  'category': "social",
  'description': "Resgata sua recompensa diária de XP e Gold",
  'longDescription': "Resgata sua recompensa diária de XP e Gold uma vez por dia. Mantenha uma sequência diária para aumentar suas recompensas!",
  'usage': "daily",
  'example': "daily",
  'menu': ["leveling", "gold"],
  'menuSection': "recompensa",
  'permissions': _0x31af3d,
  'requirements': {},
  'execute': async ({
    conn: _0xa0c2d4,
    info: _0x14286b,
    from: _0x379880,
    sender: _0x5ad04a,
    NomeDoBot: _0x20106c,
    BANCOP: _0x3f74ed,
    reply: _0x32aca5,
    levelSystem: _0x1529a6,
    goldSystem: _0x56ac69,
    configsGold: _0xc3a86e,
    dataGp: _0x5b2b4f,
    moment: _0x4a9912
  }) => {
    try {
      _0x1529a6.init(_0x3f74ed);
      const _0x17652d = _0x5b2b4f?.[0]?.["level"];
      const _0x1df06c = _0x5b2b4f?.[0]?.["sistemgold"] === 1;
      if (!_0x17652d && !_0x1df06c) {
        return _0x32aca5("❌ Nenhum sistema de recompensas está ativo neste grupo.\n\nUm administrador pode ativar o sistema de leveling com *!leveling* ou o sistema de gold com *!sgold*");
      }
      const _0x391df9 = () => {
        try {
          _0x3f74ed.prepare("SELECT lastdailycmdlevel FROM leveling LIMIT 1").get();
        } catch (_0x5ee4de) {
          _0x3f74ed.prepare("ALTER TABLE leveling ADD COLUMN lastdailycmdlevel TEXT DEFAULT '01/01/2025'").run();
        }
        try {
          _0x3f74ed.prepare("SELECT dailyStreakCmd FROM leveling LIMIT 1").get();
        } catch (_0x3d870a) {
          _0x3f74ed.prepare("ALTER TABLE leveling ADD COLUMN dailyStreakCmd INTEGER DEFAULT 0").run();
        }
      };
      _0x391df9();
      const _0x5ef7d1 = _0x4a9912().format("YYYY-MM-DD");
      const _0x292ac0 = _0x4a9912().subtract(1, "days").format("YYYY-MM-DD");
      let _0x29038c = [];
      let _0x948a09 = null;
      let _0x261e0f = null;
      const _0x478ae2 = _0x50ff7b => {
        const _0xf272e1 = _0x50ff7b > 1 ? (_0x50ff7b - 1) * 0.1 : 0;
        return 1 + Math.min(_0xf272e1, 0.7);
      };
      if (_0x17652d) {
        let _0x3647e8 = _0x3f74ed.prepare("SELECT * FROM leveling WHERE groupId = ? AND userId = ?").get(_0x379880, _0x5ad04a);
        if (!_0x3647e8) {
          const _0x40381c = new Date().toISOString();
          _0x3f74ed.prepare("INSERT INTO leveling (\ngroupId, userId, xp, level, totalXp, dailyMessages, weeklyMessages, streakDays,\nlastMessageTime, lastResetDaily, lastResetWeekly, dailyRewardGiven, theme, \nlastdailycmdlevel, dailyStreakCmd\n) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").run(_0x379880, _0x5ad04a, 0, 1, 0, 0, 0, 0, _0x40381c, _0x40381c, _0x40381c, "01/01/2025", "militar", "01/01/2025", 0);
          _0x3647e8 = _0x3f74ed.prepare("SELECT * FROM leveling WHERE groupId = ? AND userId = ?").get(_0x379880, _0x5ad04a);
        }
        if (_0x3647e8.lastdailycmdlevel === _0x5ef7d1) {
          const _0x50fa1e = {
            success: false,
            message: "Você já resgatou sua recompensa de XP hoje"
          };
          _0x948a09 = _0x50fa1e;
        } else {
          let _0x371c9a = _0x3647e8.dailyStreakCmd || 0;
          if (_0x3647e8.lastdailycmdlevel !== _0x292ac0 && _0x3647e8.lastdailycmdlevel !== "01/01/2025") {
            _0x371c9a = 0;
          }
          _0x371c9a++;
          const _0x32035d = _0x478ae2(_0x371c9a);
          const _0x1d556f = Math.floor(Math.random() * 101) + 100;
          const _0x42d2d6 = Math.floor(_0x1d556f * _0x32035d);
          _0x3f74ed.prepare("UPDATE leveling \nSET xp = xp + ?, totalXp = totalXp + ?, lastdailycmdlevel = ?, dailyStreakCmd = ?\nWHERE groupId = ? AND userId = ?").run(_0x42d2d6, _0x42d2d6, _0x5ef7d1, _0x371c9a, _0x379880, _0x5ad04a);
          _0x948a09 = {
            'success': true,
            'xpGained': _0x42d2d6,
            'oldTotalXp': _0x3647e8.totalXp,
            'newTotalXp': _0x3647e8.totalXp + _0x42d2d6,
            'newStreak': _0x371c9a,
            'multiplier': _0x32035d
          };
          _0x29038c.push(_0x42d2d6 + " XP");
        }
      }
      if (_0x1df06c) {
        const _0xa2bfff = _0x56ac69.getUser(_0x379880, _0x5ad04a);
        if (!_0xa2bfff.chances.lastdailycmdgold) {
          _0xa2bfff.chances.lastdailycmdgold = "2025-01-01";
        }
        if (!_0xa2bfff.chances.dailyStreakGold) {
          _0xa2bfff.chances.dailyStreakGold = 0;
        }
        if (_0xa2bfff.chances.lastdailycmdgold === _0x5ef7d1) {
          const _0x147bbd = {
            success: false,
            message: "Você já resgatou sua recompensa de Gold hoje"
          };
          _0x261e0f = _0x147bbd;
        } else {
          let _0x55d8bd = _0xa2bfff.chances.dailyStreakGold || 0;
          if (_0xa2bfff.chances.lastdailycmdgold !== _0x292ac0 && _0xa2bfff.chances.lastdailycmdgold !== "2025-01-01") {
            _0x55d8bd = 0;
          }
          _0x55d8bd++;
          const _0xffa6a6 = _0x478ae2(_0x55d8bd);
          const _0x22aa34 = _0xc3a86e.recompensas.diaria * 2;
          const _0x42ec82 = Math.floor(Math.random() * _0x22aa34) + 1;
          const _0x4ebe4f = Math.floor(_0x42ec82 * _0xffa6a6);
          const _0x1b41bf = _0x56ac69.getBalance(_0x379880, _0x5ad04a);
          _0x56ac69.addGold(_0x379880, _0x5ad04a, _0x4ebe4f);
          const _0x2483ec = {
            ..._0xa2bfff.chances
          };
          _0x2483ec.lastdailycmdgold = _0x5ef7d1;
          _0x2483ec.dailyStreakGold = _0x55d8bd;
          _0x3f74ed.prepare("UPDATE gold_users SET chances = ? WHERE grupo_id = ? AND user_id = ?").run(JSON.stringify(_0x2483ec), _0x379880, _0x5ad04a);
          const _0x53ef3d = _0x56ac69.getBalance(_0x379880, _0x5ad04a);
          const _0xf85522 = {
            success: true,
            goldGained: _0x4ebe4f,
            oldGold: _0x1b41bf,
            newGold: _0x53ef3d,
            newStreak: _0x55d8bd,
            multiplier: _0xffa6a6
          };
          _0x261e0f = _0xf85522;
          _0x29038c.push(_0x4ebe4f + " Gold");
        }
      }
      if (_0x29038c.length === 0) {
        return _0x32aca5("⏰ Você já resgatou todas as recompensas disponíveis hoje!\n\nVolte amanhã para mais recompensas.");
      }
      let _0x88036 = "┌──────────────────⊷\n│ 𖣘⃟ DAILY REWARD 𖣘⃟\n│ ⋆ Recompensa Diária ⋆\n├──────────────────⊷\n│ " + _0x20106c + " \n├──────────────────⊷\n│ 👤 Usuário: @" + _0x5ad04a.split('@')[0] + "\n";
      if (_0x948a09?.["success"]) {
        _0x88036 += "│ 🔮 XP Recebido: " + _0x948a09.xpGained + "\n│ 🧿 Total XP: " + _0x948a09.oldTotalXp + " ➜ " + _0x948a09.newTotalXp + "\n│ 🔥 Bônus Streak: " + (_0x948a09.multiplier * 100 - 100).toFixed(0) + "%\n│ 📅 Streak: " + _0x948a09.newStreak + " dias\n";
      }
      if (_0x261e0f?.["success"]) {
        _0x88036 += "│ 💰 Gold Recebido: " + _0x261e0f.goldGained + " " + _0xc3a86e.emojis.gold + "\n│ 💎 Total Gold: " + _0x261e0f.oldGold + " ➜ " + _0x261e0f.newGold + " " + _0xc3a86e.emojis.gold + "\n│ 🔥 Bônus Streak: " + (_0x261e0f.multiplier * 100 - 100).toFixed(0) + "%\n│ 📅 Streak: " + _0x261e0f.newStreak + " dias\n";
      }
      _0x88036 += "├───────────────────⊷\n│ 𖣘⃟ Volte amanhã para mais!\n└───────────────────⊷";
      const _0xeb051e = {
        text: _0x88036,
        mentions: [_0x5ad04a]
      };
      await _0xa0c2d4.sendMessage(_0x379880, _0xeb051e);
      return true;
    } catch (_0x221941) {
      console.error("[COMANDO DAILY]", _0x221941);
      return _0x32aca5("❌ Ocorreu um erro ao processar o comando.");
    }
  }
}, {
  'name': "ranklevel",
  'aliases': ["rankingxp", "topxp", "toprankxp"],
  'category': "social",
  'description': "Exibe o ranking de level do grupo",
  'longDescription': "Mostra o ranking dos usuários com maior XP e level no grupo, exibindo os 10 membros mais ativos.",
  'usage': "ranklevel",
  'example': "ranklevel",
  'menu': "leveling",
  'menuSection': "Diversão & Social",
  'permissions': _0x1789ff,
  'requirements': {},
  'execute': async ({
    conn: _0x3b6c12,
    info: _0x473b19,
    from: _0x3ff506,
    BANCOP: _0x16e461,
    reply: _0x30bc99,
    levelSystem: _0x3fe42f
  }) => {
    try {
      _0x3fe42f.init(_0x16e461);
      const _0x4b28ce = await _0x3fe42f.isLevelingEnabled(_0x3ff506);
      if (!_0x4b28ce) {
        return _0x30bc99("❌ O sistema de leveling não está ativo neste grupo.\n\nUm administrador pode ativá-lo com o comando *!leveling*");
      }
      const _0x3d3254 = await _0x3fe42f.getGroupRanking(_0x3ff506, 10);
      if (!_0x3d3254.success) {
        return _0x30bc99("❌ " + _0x3d3254.message);
      }
      if (_0x3d3254.users.length === 0) {
        return _0x30bc99("❌ Ainda não há dados de ranking neste grupo. Continue interagindo para ganhar XP!");
      }
      let _0x2a0b55 = "┌───────────────⊷\n│ 𖣘⃟ RANK DE LEVEL & PATENTES 𖣘⃟\n│ ⋆ Top " + _0x3d3254.users.length + " do Grupo ⋆\n└───────────────⊷\n";
      for (let _0x359e9f = 0; _0x359e9f < _0x3d3254.users.length; _0x359e9f++) {
        const _0x4b61c7 = _0x3d3254.users[_0x359e9f];
        const _0x46a5f1 = ['👑', '🥈', '🥉'];
        const _0x3ac63e = _0x359e9f < 3 ? _0x46a5f1[_0x359e9f] : '';
        _0x2a0b55 += "╭──────────\n│" + (_0x359e9f + 1) + "º : @" + _0x4b61c7.userId.split('@')[0] + " " + _0x3ac63e + "\n├──────────\n│ 📈 Level: " + _0x4b61c7.level + "\n│ 🏵️ Patente: " + _0x4b61c7.patente + "\n│ 📊 XP Total: " + _0x4b61c7.totalXp.toLocaleString() + "\n│ 📨 Msgs Hoje: " + _0x4b61c7.dailyMessages + "\n│ 📩 Msgs Semana: " + _0x4b61c7.weeklyMessages + "\n╰──────────\n";
      }
      _0x2a0b55 += "└──────────────⊷\n𖣘⃟ Use !daily para receber XP diário";
      await _0x3b6c12.sendMessage(_0x3ff506, {
        'text': _0x2a0b55,
        'mentions': _0x3d3254.users.map(_0x409bcd => _0x409bcd.userId)
      });
      return true;
    } catch (_0x118092) {
      console.error("[COMANDO RANKLEVEL]", _0x118092);
      return _0x30bc99("❌ Ocorreu um erro ao processar o comando.");
    }
  }
}, {
  'name': "perfillevel",
  'aliases': ["patente", "xpinfo", "level"],
  'category': "social",
  'description': "Mostra seu perfil no sistema de leveling",
  'longDescription': "Exibe informações detalhadas sobre seu perfil no sistema de leveling, incluindo nível, patente, XP, e posição nos rankings.",
  'usage': "perfil [@usuário]",
  'example': "perfil @usuario",
  'menu': "leveling",
  'menuSection': "Diversão & Social",
  'permissions': _0x2c5f0c,
  'requirements': {},
  'execute': async ({
    conn: _0x48131e,
    info: _0x19a2e9,
    from: _0xc4c029,
    sender: _0x1f0bd7,
    menc_os2: _0x3ba160,
    lermais: _0x4e7981,
    BANCOP: _0x2508f7,
    reply: _0x403a99,
    levelSystem: _0x3f47c6
  }) => {
    try {
      _0x3f47c6.init(_0x2508f7);
      const _0x160593 = await _0x3f47c6.isLevelingEnabled(_0xc4c029);
      if (!_0x160593) {
        return _0x403a99("❌ O sistema de leveling não está ativo neste grupo.\n\nUm administrador pode ativá-lo com o comando *!leveling*");
      }
      const _0x1dc2cd = _0x3ba160 || _0x1f0bd7;
      const _0x5b7421 = _0x1dc2cd.split('@')[0];
      const _0x563f5b = await _0x3f47c6.getProfileInfo(_0xc4c029, _0x1dc2cd);
      if (!_0x563f5b.success) {
        return _0x403a99("❌ " + _0x563f5b.message);
      }
      const _0x3e7362 = _0x563f5b.userData;
      const _0x50885c = "┌──────────────────⊷\n│ 𖣘⃟ PERFIL LEVEL 𖣘⃟\n│ ⋆ Informações Detalhadas ⋆\n├──────────────────⊷\n│ " + _0x4e7981 + "\n├──────────────────⊷\n│ 👤 Usuário: @" + _0x5b7421 + "\n├──────────────────⊷\n│ 📊 Progresso Atual\n│ ▸ Level: " + _0x3e7362.level + "\n│ ▸ Patente: " + _0x3e7362.patente + "\n│ ▸ XP: " + _0x3e7362.xp.toLocaleString() + '/' + _0x3e7362.nextLevelXP.toLocaleString() + "\n│ ▸ Progresso: " + _0x3e7362.progress + "%\n│ ▸ " + _0x3e7362.progressBar + "\n├──────────────────⊷\n│ 📈 Atividade\n│ ▸ Msgs Hoje: " + _0x3e7362.dailyMessages + "\n│ ▸ Msgs Semana: " + _0x3e7362.weeklyMessages + "\n│ ▸ XP Total: " + _0x3e7362.totalXp.toLocaleString() + "\n├──────────────────⊷\n│ 🏆 Rankings\n│ ▸ Rank Diário: " + _0x3e7362.dailyRank + "\n│ ▸ Rank Semanal: " + _0x3e7362.weeklyRank + "\n│ ▸ Streak: " + _0x3e7362.streakDays + " dias\n│ ▸ Bônus: +" + _0x3e7362.streakBonus + "%\n├───────────────────⊷\n│ 𖣘⃟ Use !daily para receber XP diário\n└───────────────────⊷";
      const _0x5a0c0b = {
        text: _0x50885c,
        mentions: [_0x1dc2cd]
      };
      await _0x48131e.sendMessage(_0xc4c029, _0x5a0c0b);
      return true;
    } catch (_0x1cd77d) {
      console.error("[COMANDO PERFIL]", _0x1cd77d);
      return _0x403a99("❌ Ocorreu um erro ao processar o comando.");
    }
  }
}, {
  'name': "leveltemas",
  'aliases': ["temas", "leveltema", "temaslevel"],
  'category': "admin",
  'description': "Configura temas de patentes do sistema de leveling",
  'longDescription': "Menu interativo para escolher e configurar diferentes temas de patentes (militar, corporativo, medieval, etc.) para o sistema de leveling do grupo.",
  'usage': "leveltemas [tema]",
  'example': "leveltemas\nleveltemas militar\nleveltemas corporativo",
  'menu': "leveling",
  'menuSection': "Configuração",
  'permissions': _0x4035b2,
  'requirements': {},
  'execute': async ({
    q: _0x4c2de1,
    from: _0x426ab5,
    dataGp: _0x5bb46c,
    setGp: _0x4fd09b,
    prefix: _0x5ddbec,
    createChoiceMenu: _0x4fb572,
    reply: _0x55e3c5,
    levelSystem: _0x820047,
    BANCOP: _0x1b8389,
    sender: _0x3afe9d
  }) => {
    if (!_0x820047) {
      return _0x55e3c5("❌ Sistema de leveling não está disponível!");
    }
    _0x820047.init(_0x1b8389);
    const _0x4c4b17 = await _0x820047.isLevelingEnabled(_0x426ab5);
    if (!_0x4c4b17) {
      return _0x55e3c5("❌ O sistema de leveling não está ativo neste grupo!\n\n💡 Use o comando `modos leveling` para ativar primeiro.");
    }
    const _0x55d21b = _0x820047.getAvailableThemes();
    if (!_0x55d21b.success) {
      return _0x55e3c5("❌ Erro ao carregar temas de patentes.");
    }
    const _0x566a9c = _0x55d21b.themes;
    const _0x4e1216 = _0x4c2de1.trim()?.["toLowerCase"]();
    if (_0x4e1216) {
      const _0x3e5f67 = _0x566a9c.find(_0x5e0d3a => _0x5e0d3a.id.toLowerCase() === _0x4e1216 || _0x5e0d3a.name.toLowerCase().includes(_0x4e1216));
      if (_0x3e5f67) {
        const _0x294190 = await _0x820047.setGroupTheme(_0x426ab5, _0x3e5f67.id);
        if (_0x294190.success) {
          return _0x55e3c5("✅ Tema alterado para *" + _0x3e5f67.name + "*!\n\n🏵️ Exemplo de patente: " + _0x3e5f67.example);
        } else {
          return _0x55e3c5("❌ Erro ao alterar tema: " + _0x294190.message);
        }
      } else {
        const _0x1bc883 = _0x566a9c.map(_0x39bc82 => _0x39bc82.id).join(", ");
        return _0x55e3c5("❌ Tema não encontrado!\n\n📋 *Temas disponíveis:* " + _0x1bc883);
      }
    }
    let _0x4fd831;
    try {
      _0x4fd831 = await _0x820047.getCurrentTheme(_0x426ab5);
    } catch (_0x12db06) {
      _0x4fd831 = "militar";
    }
    const _0xce361 = _0x566a9c.find(_0x2fbcd6 => _0x2fbcd6.id === _0x4fd831);
    const _0x1223f3 = _0xce361?.["name"] || "Militar";
    let _0xe52df3 = "╭━━━⊱「 TEMAS DE PATENTES 」⊰━━━╮\n┃ \n┃ 🏵️ *TEMA ATUAL:* " + _0x1223f3 + "\n┃ \n┃ 🎯 *TEMAS DISPONÍVEIS:*\n┃";
    const _0x49ab29 = {};
    _0x566a9c.forEach((_0x316413, _0x37dab8) => {
      const _0x4e009c = _0x37dab8 + 1;
      const _0x254daf = _0x316413.id === _0x4fd831;
      const _0x28f42c = _0x254daf ? " ✓" : '';
      _0xe52df3 += "\n┃ " + _0x4e009c + " - " + _0x316413.name + _0x28f42c + "\n┃ • Exemplo: " + _0x316413.example;
      if (!_0x254daf) {
        const _0x3236cc = {
          text: "✅ Tema alterado para *" + _0x316413.name + "*!\n\n🏵️ Exemplo de patente: " + _0x316413.example,
          command: _0x5ddbec + "leveltemas " + _0x316413.id,
          edit: true
        };
        _0x49ab29[_0x4e009c.toString()] = _0x3236cc;
      } else {
        const _0x241100 = {
          text: "ℹ️ O tema *" + _0x316413.name + "* já está ativo neste grupo!",
          command: _0x5ddbec + "leveltemas " + _0x316413.id,
          edit: true
        };
        _0x49ab29[_0x4e009c.toString()] = _0x241100;
      }
    });
    _0xe52df3 += "\n┃\n┃ 0 - Cancelar\n╰━━━⊱「 𝐓𝐄𝐌𝐀𝐒 」⊰━━━╯\n\nDigite uma opção:";
    const _0x44b02a = {
      close: true
    };
    _0x44b02a.text = "✅ Configuração cancelada!";
    _0x44b02a.edit = true;
    _0x49ab29['0'] = _0x44b02a;
    const _0x355801 = {
      text: _0xe52df3
    };
    _0x355801.options = _0x49ab29;
    const _0x2f8381 = {
      principal: _0x355801
    };
    await _0x4fb572(_0x426ab5, _0x3afe9d, _0x2f8381.principal.text, _0x2f8381.principal.options, {
      'menus': _0x2f8381,
      'history': ["principal"]
    });
    return true;
  }
}, {
  'name': "resetlevel",
  'aliases': ["resetleveling", "resetxp"],
  'category': "hidden",
  'description': "Reseta os dados de leveling do grupo",
  'longDescription': "Apaga todos os dados de leveling do grupo atual, incluindo níveis, XP e patentes de todos os membros.",
  'usage': "resetlevel",
  'example': "resetlevel",
  'menu': "leveling",
  'menuSection': "Dono",
  'permissions': _0x3af42c,
  'requirements': {},
  'execute': async ({
    conn: _0x85a2ae,
    info: _0x27fd25,
    from: _0x33ed57,
    reply: _0x18fc35,
    BANCOP: _0x20eb3f,
    levelSystem: _0xd56577
  }) => {
    try {
      _0xd56577.init(_0x20eb3f);
      const _0x42bb34 = await _0xd56577.isLevelingEnabled(_0x33ed57);
      if (!_0x42bb34) {
        return _0x18fc35("❌ O sistema de leveling não está ativo neste grupo.");
      }
      const _0x3e3f16 = await _0xd56577.resetGroupLeveling(_0x33ed57);
      if (_0x3e3f16.success) {
        return _0x18fc35("✅ Todos os dados de leveling do grupo foram resetados com sucesso. O progresso de XP, níveis e patentes de todos os membros foi apagado.");
      } else {
        return _0x18fc35("❌ Erro ao resetar dados: " + _0x3e3f16.message);
      }
    } catch (_0x3f7439) {
      console.error("[COMANDO RESETLEVEL]", _0x3f7439);
      return _0x18fc35("❌ Ocorreu um erro ao processar o comando.");
    }
  }
}, {
  'name': "listanti",
  'aliases': ["listaanti", "antilist"],
  'category': "administracao",
  'description': "Lista todas as configurações anti do grupo",
  'longDescription': "Mostra o status atual de todos os recursos anti do grupo",
  'usage': "listanti",
  'example': "listanti",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x2a855d,
  'execute': async ({
    reply: _0x5692ee,
    isGroup: _0x218a0c,
    from: _0x35b20c,
    dataGp: _0x14f120
  }) => {
    if (!Array.isArray(_0x14f120) || _0x14f120.length === 0) {
      return _0x5692ee("Erro ao obter dados do grupo.");
    }
    const _0x399da5 = {
      nome: "IMAGEM",
      emoji: "🖼️"
    };
    const _0x551d47 = {
      nome: "VÍDEO",
      emoji: '🎥'
    };
    const _0x34f0c1 = {
      nome: "ÁUDIO",
      emoji: '🎧'
    };
    const _0x31a4cc = {
      nome: "STICKER",
      emoji: '🧊'
    };
    const _0x47e55a = {
      nome: "DOCUMENTO",
      emoji: '📄'
    };
    const _0x22c96a = {
      nome: "CONTATO",
      emoji: '📞'
    };
    const _0x1066d4 = {
      nome: "LOCALIZAÇÃO",
      emoji: '📍'
    };
    const _0x4b43c0 = {
      nome: "CATÁLOGO",
      emoji: "🛍️"
    };
    const _0x1d2ec0 = {
      nome: "LINK DE GRUPO",
      emoji: '🔗'
    };
    const _0x36c2bf = {
      nome: "LINK GERAL",
      emoji: '🌐'
    };
    const _0x36a935 = {
      nome: "MARCAÇÃO",
      emoji: '📣'
    };
    const _0x3c782c = {
      nome: "PAGAMENTO",
      emoji: '💸'
    };
    const _0x31c712 = {
      nome: "INTERATIVO",
      emoji: '🧩'
    };
    const _0x2ba5e6 = {
      nome: "NÚMERO FAKE",
      emoji: '🌐'
    };
    const _0x3cad2a = {
      nome: "ANTI ROUBO",
      emoji: '🔒'
    };
    const _0x55c7d4 = {
      nome: "CHAMADAS GRUPO",
      emoji: '📞'
    };
    const _0x3572ea = {
      antiimg: _0x399da5,
      antivideo: _0x551d47,
      antiaudio: _0x34f0c1,
      antisticker: _0x31a4cc,
      antidoc: _0x47e55a,
      antictt: _0x22c96a,
      antiloc: _0x1066d4,
      anticatalogo: _0x4b43c0,
      antilinkgp: _0x1d2ec0,
      antilinkhard: _0x36c2bf,
      antimention: _0x36a935,
      antipayment: _0x3c782c,
      antiinteractive: _0x31c712,
      antifake: _0x2ba5e6,
      antiroubo: _0x3cad2a,
      anticallgp: _0x55c7d4
    };
    const _0x57409e = ["❌ Desativado", "⛔ Apagar e banir", "🗑️ Somente apagar", "⚠️ Advertência (3x)"];
    let _0x1a8451 = "╭〔 *CONFIGURAÇÕES DE PROTEÇÃO* 〕\n┃\n";
    for (const [_0x382a23, _0x52c6cf] of Object.entries(_0x3572ea)) {
      if (_0x382a23 === "antifake" || _0x382a23 === "antiroubo" || _0x382a23 === "anticallgp") {
        const _0x190836 = _0x14f120[0][_0x382a23] ? "✅ Ativado" : "❌ Desativado";
        _0x1a8451 += "┃ " + _0x52c6cf.emoji + " *" + _0x52c6cf.nome + "*: " + _0x190836 + "\n";
        continue;
      }
      const _0x475284 = Number(_0x14f120[0][_0x382a23]) || 0;
      const _0x144972 = _0x57409e[_0x475284];
      _0x1a8451 += "┃ " + _0x52c6cf.emoji + " *" + _0x52c6cf.nome + "*: " + _0x144972 + "\n";
    }
    if (_0x14f120[0]?.["antipalavrao"]) {
      const _0x9dffa1 = _0x14f120[0].antipalavrao.modo || 0;
      const _0x563861 = _0x14f120[0].antipalavrao.palavras?.["length"] || 0;
      const _0x15ffac = _0x57409e[_0x9dffa1];
      _0x1a8451 += "┃ 🤬 *PALAVRÃO*: " + _0x15ffac + "\n";
      if (_0x9dffa1 > 0 && _0x563861 > 0) {
        _0x1a8451 += "┃└ *Palavras cadastradas*: " + _0x563861 + "\n";
      }
    } else {
      _0x1a8451 += "┃ 🤬 *PALAVRÃO*: ❌ Desativado\n";
    }
    if (_0x14f120[0]?.["limitec"]?.["active"]) {
      _0x1a8451 += "┃\n┃ ✏️ *Limite de caracteres*: " + _0x14f120[0].limitec.quantidade + "\n";
    }
    if (_0x14f120[0]?.["diasInatividade"] > 0) {
      _0x1a8451 += "┃ ⏰ *INATIVOS*: ✅ Ativado (" + _0x14f120[0].diasInatividade + " dias)\n";
    } else {
      _0x1a8451 += "┃ ⏰ *INATIVOS*: ❌ Desativado\n";
    }
    const _0x272ba6 = Array.isArray(_0x14f120[0].advertencias) ? _0x14f120[0].advertencias.length : 0;
    _0x1a8451 += "┃\n┃ ⚠️ *Total de advertências*: " + _0x272ba6 + "\n";
    _0x1a8451 += "┃\n╰━━━━━━━━━━━━━━━━━━━━━━╯";
    _0x5692ee(_0x1a8451);
    return true;
  }
}, {
  'name': "advertir",
  'aliases': ["advertencia", "adverter"],
  'category': "admin",
  'description': "Adverte um membro do grupo",
  'longDescription': "Sistema de advertências para membros do grupo. Após 3 advertências, o membro será removido automaticamente.",
  'usage': "advertir @usuario",
  'example': "advertir @user123",
  'menu': "admin",
  'menuSection': "Moderação",
  'permissions': _0x38b168,
  'requirements': {},
  'execute': async ({
    conn: _0x266b53,
    info: _0x8fc715,
    from: _0x50f172,
    menc_os2: _0x37d38d,
    botNumber: _0x22fd79,
    nmrdn: _0x2d2d34,
    groupAdmins: _0x1e1960,
    groupMembers: _0x3ce205,
    dataGp: _0x4b6e06,
    setGp: _0x36ff27,
    mentions: _0x5638fe,
    reply: _0x4d03c7
  }) => {
    const _0x4f8926 = {
      _0x22fd79: "Não pode advertir o próprio bot...",
      _0x2d2d34: "Não pode advertir o próprio dono do bot"
    };
    let _0x531ae1 = _0x4f8926[_0x37d38d];
    if (_0x531ae1) {
      return _0x4d03c7(_0x531ae1);
    }
    if (_0x1e1960.includes(_0x37d38d)) {
      return _0x4d03c7("Não pode advertir ADMS..");
    }
    if (!_0x3ce205.some(_0x49c800 => _0x49c800.id === _0x37d38d)) {
      return _0x4d03c7("Não tem como advertir um usuário que não se encontra mais no grupo..");
    }
    if (!Array.isArray(_0x4b6e06[0].advertencias)) {
      _0x4b6e06[0].advertencias = [];
    }
    let _0x4e6244 = _0x4b6e06[0].advertencias.find(_0x3543f1 => _0x3543f1.id === _0x37d38d);
    if (!_0x4e6244) {
      const _0x3d5ed5 = {
        id: _0x37d38d,
        count: 0x0
      };
      _0x4e6244 = _0x3d5ed5;
      _0x4b6e06[0].advertencias.push(_0x4e6244);
    }
    _0x4e6244.count++;
    await _0x36ff27(_0x4b6e06);
    let _0x413662 = async () => {
      if (_0x4e6244.count < 3) {
        const _0x400441 = "Opa: @" + _0x37d38d.split('@')[0] + " você foi advertido " + _0x4e6244.count + "/3, tome cuidado, com 3 advertências, você será removido...";
        await _0x5638fe(_0x400441, [_0x37d38d]);
        return;
      }
      await _0x266b53.sendMessage(_0x50f172, {
        'text': "Adeus usuário @" + _0x37d38d.split('@')[0] + ", você completou 3 advertências 😪, fale com quem o baniu para ter noção de o que ocorreu..",
        'mentions': [_0x37d38d]
      });
      await _0x266b53.groupParticipantsUpdate(_0x50f172, [_0x37d38d], "remove");
      _0x4b6e06[0].advertencias = _0x4b6e06[0].advertencias.filter(_0x42777b => _0x42777b.id !== _0x37d38d);
      await _0x36ff27(_0x4b6e06);
    };
    setTimeout(_0x413662, 1000);
    return true;
  }
}, {
  'name': "checkwarnings",
  'aliases': ["veradv", "veradvertencias"],
  'category': "administracao",
  'description': "Verifica as advertências de um usuário",
  'longDescription': "Mostra quantas advertências um usuário possui no grupo",
  'usage': "checkwarnings @usuário",
  'example': "checkwarnings @usuario",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x3130ee,
  'execute': async ({
    args: _0x1d3166,
    reply: _0x12a408,
    isGroup: _0x360232,
    from: _0x55da43,
    dataGp: _0x4f1a56,
    menc_os2: _0x52ea65
  }) => {
    if (!_0x52ea65) {
      return _0x12a408("Por favor, mencione um usuário ou informe o número para verificar as advertências.");
    }
    if (!Array.isArray(_0x4f1a56[0].advertencias)) {
      _0x4f1a56[0].advertencias = [];
    }
    const _0xb2738f = _0x4f1a56[0].advertencias.find(_0xf04a7a => _0xf04a7a.id === _0x52ea65);
    if (!_0xb2738f || _0xb2738f.count === 0) {
      return _0x12a408("Este usuário não possui advertências.");
    }
    _0x12a408("O usuário possui " + _0xb2738f.count + "/3 advertências.");
    return true;
  }
}, {
  'name': "listaadv",
  'aliases': ["listaadvertencias", "advlist"],
  'category': "administracao",
  'description': "Mostra a lista de advertências do grupo",
  'longDescription': "Exibe uma lista completa com todos os usuários advertidos e suas respectivas quantidades de advertências",
  'usage': "listaadv",
  'example': "listaadv",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x4efbf7,
  'execute': async ({
    reply: _0x84c34b,
    dataGp: _0xb38870,
    conn: _0x405f47,
    from: _0x3dd4d6
  }) => {
    if (!Array.isArray(_0xb38870[0].advertencias) || _0xb38870[0].advertencias.length === 0) {
      return _0x84c34b("🔎 Não há advertências registradas neste grupo.");
    }
    const _0x293c9 = [..._0xb38870[0].advertencias].sort((_0xc42407, _0x4d0663) => _0x4d0663.count - _0xc42407.count);
    let _0x330bae = "╭━━━⊱「 📝 𝐀𝐃𝐕𝐄𝐑𝐓𝐄̂𝐍𝐂𝐈𝐀𝐒 」⊰━━━╮\n┃\n";
    const _0x25b4de = [];
    for (const _0x1c2f22 of _0x293c9) {
      const _0x4c882c = _0x1c2f22.id.split('@')[0];
      _0x330bae += "┃ • @" + _0x4c882c + ": " + _0x1c2f22.count + "/3 advertências\n";
      _0x25b4de.push(_0x1c2f22.id);
    }
    _0x330bae += "┃\n╰━━━⊱「 𝐓𝐎𝐓𝐀𝐋: " + _0x293c9.length + " 」⊰━━━╯";
    const _0x5dd4f7 = {
      text: _0x330bae
    };
    _0x5dd4f7.mentions = _0x25b4de;
    await _0x405f47.sendMessage(_0x3dd4d6, _0x5dd4f7);
    return true;
  }
}, {
  'name': "removewarnings",
  'aliases': ["removeradv", "removeradvertencias"],
  'category': "administracao",
  'description': "Remove as advertências de um usuário",
  'longDescription': "Apaga todas as advertências de um usuário específico no grupo",
  'usage': "removewarnings @usuário",
  'example': "removewarnings @usuario",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x4b1673,
  'execute': async ({
    args: _0x251cfa,
    reply: _0x535fb5,
    isGroup: _0x2b536a,
    from: _0x5ce06c,
    dataGp: _0x196f76,
    setGp: _0x31def8,
    menc_os2: _0x4c10fc
  }) => {
    if (!_0x4c10fc) {
      return _0x535fb5("Por favor, mencione um usuário ou informe o número para remover as advertências.");
    }
    if (!Array.isArray(_0x196f76[0].advertencias)) {
      _0x196f76[0].advertencias = [];
      return _0x535fb5("Este usuário não possui advertências.");
    }
    const _0x4bf4af = _0x196f76[0].advertencias.findIndex(_0x78a38a => _0x78a38a.id === _0x4c10fc);
    if (_0x4bf4af === -1) {
      return _0x535fb5("Este usuário não possui advertências.");
    }
    _0x196f76[0].advertencias.splice(_0x4bf4af, 1);
    await _0x31def8(_0x196f76);
    _0x535fb5("✅ Advertências do usuário removidas com sucesso!");
    return true;
  }
}, {
  'name': "clearwarnings",
  'aliases': ["limparadv", "limparwarnings"],
  'category': "administracao",
  'description': "Limpa todas as advertências do grupo",
  'longDescription': "Remove todas as advertências registradas no grupo",
  'usage': "clearwarnings",
  'example': "clearwarnings",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x1c7030,
  'execute': async ({
    reply: _0x4e9dff,
    isGroup: _0x68ae45,
    from: _0x1d732a,
    dataGp: _0x33ea9a,
    setGp: _0x13d43d
  }) => {
    if (!Array.isArray(_0x33ea9a[0].advertencias) || _0x33ea9a[0].advertencias.length === 0) {
      return _0x4e9dff("O grupo não possui advertências registradas.");
    }
    _0x33ea9a[0].advertencias = [];
    await _0x13d43d(_0x33ea9a);
    _0x4e9dff("✅ Todas as advertências foram removidas com sucesso!");
    return true;
  }
}, {
  'name': "setlimitec",
  'aliases': ["configlimitec"],
  'category': "administracao",
  'description': "Configura o limite de caracteres",
  'longDescription': "Ativa, desativa ou configura o limite de caracteres por mensagem no grupo",
  'usage': "setlimitec [on/off/número]",
  'example': "setlimitec on\nsetlimitec 1000",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x1c330f,
  'execute': async ({
    args: _0x302a5a,
    reply: _0x397da4,
    isGroup: _0x4e0df8,
    from: _0x3991cb,
    dataGp: _0x1d740b,
    setGp: _0x1caacf
  }) => {
    if (!_0x4e0df8) {
      return _0x397da4("Este comando só pode ser usado em grupos");
    }
    if (_0x302a5a.length < 1) {
      return _0x397da4("Uso correto: setlimitec [on/off] ou setlimitec [número]");
    }
    const _0x4f0623 = _0x302a5a[0].toLowerCase();
    if (!_0x1d740b[0].hasOwnProperty("limitec")) {
      const _0xd517f = {
        active: false,
        quantidade: 0xfa0
      };
      _0x1d740b[0].limitec = _0xd517f;
    } else {
      if (!_0x1d740b[0].limitec.hasOwnProperty("quantidade")) {
        _0x1d740b[0].limitec.quantidade = 4000;
      }
    }
    if (_0x4f0623 === 'on' || _0x4f0623 === "ativar") {
      _0x1d740b[0].limitec.active = true;
      await _0x1caacf(_0x1d740b);
      return _0x397da4("✅ Limite de caracteres ATIVADO com limite de " + _0x1d740b[0].limitec.quantidade + " caracteres");
    }
    if (_0x4f0623 === "off" || _0x4f0623 === "desativar") {
      _0x1d740b[0].limitec.active = false;
      await _0x1caacf(_0x1d740b);
      return _0x397da4("✅ Limite de caracteres DESATIVADO");
    }
    const _0x14ccd9 = parseInt(_0x4f0623);
    if (isNaN(_0x14ccd9) || _0x14ccd9 < 10) {
      return _0x397da4("Por favor, informe um valor válido maior que 10 para o limite de caracteres.");
    }
    _0x1d740b[0].limitec.quantidade = _0x14ccd9;
    _0x1d740b[0].limitec.active = true;
    await _0x1caacf(_0x1d740b);
    _0x397da4("✅ Limite de caracteres definido para " + _0x14ccd9 + " caracteres e ATIVADO");
    return true;
  }
}, {
  'name': "setmsg",
  'aliases': ["configmsg"],
  'category': "administracao",
  'description': "Configura mensagens dos recursos anti",
  'longDescription': "Configura as mensagens exibidas para os recursos anti",
  'usage': "setmsg [tipo] [mensagem]",
  'example': "setmsg img Mensagem proibida!",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x51815a,
  'execute': async ({
    args: _0x1e3b0d,
    q: _0x5ef27e,
    reply: _0x5bd3f0,
    isGroup: _0xcabf20,
    from: _0x4ae6a1,
    dataGp: _0x2939fb,
    setGp: _0x201881
  }) => {
    if (_0x1e3b0d.length < 1) {
      return _0x5bd3f0("Uso correto: setmsg [tipo] [mensagem]");
    }
    const _0x54fb58 = _0x1e3b0d[0].toLowerCase();
    let _0xb661e5 = _0x1e3b0d.length > 1 ? _0x5ef27e.slice(_0x54fb58.length).trim() : '0';
    const _0x58173a = {
      img: "legenda_imagem",
      imagem: "legenda_imagem",
      video: "legenda_video",
      vídeo: "legenda_video",
      audio: "legenda_audio",
      áudio: "legenda_audio",
      sticker: "legenda_sticker",
      figurinha: "legenda_sticker",
      doc: "legenda_documento",
      documento: "legenda_documento",
      ctt: "legenda_contato",
      contato: "legenda_contato",
      loc: "legenda_localizacao",
      localização: "legenda_localizacao",
      catalogo: "legenda_catalogo",
      catálogo: "legenda_catalogo",
      mention: "legenda_mencao",
      marcação: "legenda_mencao",
      payment: "legenda_pagamento",
      pagamento: "legenda_pagamento",
      interactive: "legenda_interativo",
      interativo: "legenda_interativo"
    };
    const _0x301bae = _0x58173a[_0x54fb58];
    if (!_0x301bae) {
      return _0x5bd3f0("Tipo inválido. Tipos disponíveis: img, video, audio, sticker, doc, ctt, loc, catalogo, mention, payment, interactive");
    }
    _0x2939fb[0][_0x301bae] = _0xb661e5;
    await _0x201881(_0x2939fb);
    if (_0xb661e5 === '0') {
      _0x5bd3f0("✅ Mensagem de anti " + _0x54fb58 + " restaurada para o padrão");
    } else {
      _0x5bd3f0("✅ Mensagem de anti " + _0x54fb58 + " configurada para: \"" + _0xb661e5 + "\"");
    }
    return true;
  }
}, {
  'name': "links",
  'aliases': ["listlinks", "listlink", "gruposlinks"],
  'category': "dono",
  'description': "Lista os links de grupos recolhidos",
  'longDescription': "Lista todos os links de grupos do WhatsApp que foram recolhidos pelo bot automaticamente, mostrando detalhes como data e origem.",
  'usage': "links [quantidade]",
  'example': "links\nlinks 10",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x1659e7,
  'requirements': {},
  'execute': async ({
    conn: _0x5bce72,
    info: _0x3402aa,
    args: _0x4ce08e,
    from: _0x53f8de,
    SoDono: _0x24219c,
    reply: _0xa70cc8,
    Res_SoDono: _0x51d443,
    BANCOP: _0xbfd21c
  }) => {
    if (!_0x24219c) {
      return _0xa70cc8(_0x51d443);
    }
    try {
      const _0x20ce10 = parseInt(_0x4ce08e[0]) || 15;
      const _0x18ecb9 = _0xbfd21c.prepare("\nSELECT * FROM links_recolhidos \nORDER BY data_recolhimento DESC\nLIMIT ?\n").all(_0x20ce10);
      if (_0x18ecb9.length === 0) {
        return _0xa70cc8("Não há links recolhidos armazenados.");
      }
      let _0x1d598c = "*LINKS DE GRUPOS RECOLHIDOS*\n";
      _0x1d598c += "Total armazenado: " + _0xbfd21c.prepare("SELECT COUNT(*) as total FROM links_recolhidos").get().total + "\n";
      _0x1d598c += "Exibindo: " + _0x18ecb9.length + "\n\n";
      for (let _0x40f4fc = 0; _0x40f4fc < _0x18ecb9.length; _0x40f4fc++) {
        const _0x445bb2 = _0x18ecb9[_0x40f4fc];
        const _0x380a2b = new Date(_0x445bb2.data_recolhimento * 1000).toLocaleString("pt-BR");
        _0x1d598c += "┌─⊷ *LINK " + (_0x40f4fc + 1) + "* ⊶\n";
        _0x1d598c += "│ ID: " + _0x445bb2.id + "\n";
        _0x1d598c += "│ " + _0x445bb2.link + "\n";
        if (_0x445bb2.grupo_id) {
          _0x1d598c += "│ Grupo: " + _0x445bb2.grupo_id.split('@')[0] + "\n";
        }
        if (_0x445bb2.user_id) {
          _0x1d598c += "│ Enviado por: @" + _0x445bb2.user_id.split('@')[0] + "\n";
        }
        _0x1d598c += "│ Data: " + _0x380a2b + "\n";
        _0x1d598c += "└───────────────\n\n";
      }
      const _0x4db563 = _0x18ecb9.filter(_0x54b893 => _0x54b893.user_id).map(_0x4afc00 => _0x4afc00.user_id);
      const _0x3a19ce = {
        quoted: _0x3402aa
      };
      _0x5bce72.sendMessage(_0x53f8de, {
        'text': _0x1d598c,
        'mentions': _0x4db563.length > 0 ? _0x4db563 : undefined
      }, _0x3a19ce);
    } catch (_0x47a970) {
      console.error("Erro ao listar links:", _0x47a970);
      return _0xa70cc8("Erro ao processar a solicitação: " + _0x47a970.message);
    }
  }
}, {
  'name': "recolherlink",
  'aliases': [],
  'category': "dono",
  'description': "Ativa/desativa o sistema de recolher links",
  'longDescription': "Ativa ou desativa o sistema que recolhe automaticamente links de grupos do WhatsApp enviados em qualquer chat.",
  'usage': "recolherlink",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x3d54c7,
  'requirements': {},
  'execute': async ({
    conn: _0x57025a,
    info: _0x3b66f1,
    from: _0x286811,
    prefix: _0x4aefc1,
    SoDono: _0x38122f,
    reply: _0x703149,
    Res_SoDono: _0x27b9e4,
    nescessario: _0x3edf10,
    setNes: _0x216830
  }) => {
    if (!_0x38122f) {
      return _0x703149(_0x27b9e4);
    }
    _0x3edf10.isRecolherLink = !_0x3edf10.isRecolherLink;
    _0x216830(_0x3edf10);
    _0x703149(_0x3edf10.isRecolherLink ? "Sistema de recolher links foi ativado. Os links serão armazenados e você pode visualizá-los com " + _0x4aefc1 + "links. Para limpar todos os links, use " + _0x4aefc1 + "zerarlinks" : "Sistema de recolher links foi desativado.");
  }
}, {
  'name': "recolherlinkgp",
  'aliases': [],
  'category': "dono",
  'description': "Ativa/desativa o sistema de recolher links no grupo atual",
  'longDescription': "Ativa ou desativa o sistema que recolhe automaticamente links de grupos do WhatsApp enviados no grupo atual.",
  'usage': "recolherlinkgp",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x5b48e2,
  'requirements': _0x513946,
  'execute': async ({
    conn: _0x4fe94f,
    info: _0x1d33cd,
    from: _0x7f3171,
    prefix: _0x53781d,
    SoDono: _0x177b55,
    reply: _0x3d7eef,
    Res_SoDono: _0x351ea5,
    dataGp: _0x1ca661,
    setGp: _0x16c141
  }) => {
    if (!_0x177b55) {
      return _0x3d7eef(_0x351ea5);
    }
    _0x1ca661[0].recolherlinkgp = !_0x1ca661[0].recolherlinkgp;
    _0x16c141(_0x1ca661);
    _0x3d7eef(_0x1ca661[0]?.["recolherlinkgp"] ? "Sistema de recolher links por grupo foi ativado. Os links serão armazenados e você pode visualizá-los com " + _0x53781d + "links. Para limpar todos os links, use " + _0x53781d + "zerarlinks" : "Sistema de recolher links por grupo foi desativado.");
  }
}, {
  'name': "zerarlinks",
  'aliases': ["zerarlink", "limparlinks"],
  'category': "dono",
  'description': "Remove todos os links recolhidos",
  'longDescription': "Limpa todos os links de grupos do WhatsApp que foram recolhidos pelo bot.",
  'usage': "zerarlinks",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x437e9b,
  'requirements': {},
  'execute': async ({
    conn: _0x2267b0,
    info: _0x560c68,
    from: _0x585ee4,
    SoDono: _0x43b0df,
    reply: _0x1648d9,
    Res_SoDono: _0x496f36,
    BANCOP: _0x5dacf0
  }) => {
    if (!_0x43b0df) {
      return _0x1648d9(_0x496f36);
    }
    try {
      _0x5dacf0.prepare("DELETE FROM links_recolhidos").run();
      _0x1648d9("Todos os links recolhidos foram excluídos com sucesso.");
    } catch (_0x41323f) {
      console.error("Erro ao zerar links:", _0x41323f);
      return _0x1648d9("Erro ao excluir os links");
    }
  }
}, {
  'name': "premium",
  'aliases': ["prem"],
  'category': "dono",
  'description': "Gerencia usuários premium",
  'longDescription': "Gerencia usuários premium do bot, permitindo adicionar, renovar, remover usuários e listar os usuários premium atuais.",
  'usage': "premium [ação] [usuário] [tempo]",
  'example': "premium add @usuario/30d\npremium renovar @usuario/7d\npremium remover @usuario\npremium lista\npremium eu",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x17ce3f,
  'requirements': {},
  'execute': async ({
    conn: _0x131202,
    info: _0x34ee1b,
    args: _0x501b27,
    comando: _0x233bfc,
    q: _0x1ceac9,
    q_2: _0x14fbdb,
    from: _0x41abd5,
    SoDono: _0xed98e4,
    isnit: _0xa7b86a,
    nmrdn: _0x30d86a,
    numerodono_ofc: _0x3fa7fd,
    fs: _0xaeb06a,
    mention: _0x260f05,
    reply: _0x3d2dc1,
    menc_os2: _0x17c785,
    marc_tds: _0x3a2ea7,
    kyun: _0x44f457,
    isGroup: _0x26f2e5,
    Res_SoGrupo: _0x451e76,
    Res_SoDono: _0x3e5fe9,
    prefix: _0x2bb0f6,
    BANCOP: _0x55c2f3,
    verificarPremium: _0x2642e9,
    adicionarPremium: _0x184574,
    removerPremium: _0x4995fe,
    listarPremium: _0x4ad15b
  }) => {
    if (!_0xed98e4 && !_0x34ee1b.key.fromMe && !_0xa7b86a) {
      return _0x3d2dc1(_0x3e5fe9);
    }
    const _0x37bb8b = Math.floor(Date.now() / 1000);
    if (_0x501b27[0]?.["toLowerCase"]() === 'eu' || _0x501b27[0]?.["toLowerCase"]() === "self") {
      const _0x85767a = _0x184574(_0x30d86a, "Dono do Bot", 365, "vitalício", "sistema");
      if (_0x85767a.sucesso) {
        _0x260f05("Pronto @" + _0x3fa7fd + ", você foi adicionado como usuário premium permanente.");
      } else {
        _0x260f05("Erro ao adicionar @" + _0x3fa7fd + " como premium: " + _0x85767a.mensagem);
      }
      return true;
    }
    if (_0x501b27[0]?.["toLowerCase"]() === "lista" || _0x501b27[0]?.["toLowerCase"]() === "list") {
      const _0xea12af = _0x4ad15b(true);
      if (_0xea12af.length === 0) {
        return _0x3d2dc1("Não há usuários premium ativos no momento.");
      }
      let _0x918b9c = "*Lista de Usuários Premium*\n\n";
      _0xea12af.forEach((_0x26bcbe, _0x3c6186) => {
        _0x918b9c += _0x3c6186 + 1 + ". @" + _0x26bcbe.userId.split('@')[0] + "\n";
        _0x918b9c += " ├ Plano: " + _0x26bcbe.plano + "\n";
        _0x918b9c += " ├ Dias restantes: " + _0x26bcbe.diasRestantes + "\n";
        _0x918b9c += " └ Expira em: " + _0x26bcbe.vencimento + "\n\n";
      });
      _0x260f05(_0x918b9c);
      return true;
    }
    if (!_0x26f2e5) {
      return _0x3d2dc1(_0x451e76);
    }
    if (["add", "adicionar", "renovar", "renovação", "renovacao"].includes(_0x501b27[0]?.["toLowerCase"]())) {
      if (!_0x17c785) {
        return _0x3d2dc1("Marque o usuário do grupo ou digite o número do usuário ou marque a mensagem dele.");
      }
      const _0x472546 = _0x14fbdb.split('/');
      if (_0x472546.length < 2) {
        return _0x3d2dc1("Exemplo: " + _0x2bb0f6 + "premium add @usuario/30d ou " + _0x2bb0f6 + "premium renovar @usuario/30d");
      }
      const _0x1f905a = _0x472546[1].trim();
      let _0x501907 = 0;
      if (_0x1f905a.includes('d')) {
        _0x501907 = parseInt(_0x1f905a.split('d')[0].trim());
      } else {
        if (_0x1f905a.includes('h')) {
          _0x501907 = parseInt(_0x1f905a.split('h')[0].trim()) / 24;
        } else {
          if (_0x1f905a.includes('m')) {
            _0x501907 = parseInt(_0x1f905a.split('m')[0].trim()) / 1440;
          } else {
            return _0x3d2dc1("Formato de tempo inválido. Use d para dias, h para horas ou m para minutos. Exemplo: 30d, 12h, 120m");
          }
        }
      }
      if (isNaN(_0x501907) || _0x501907 <= 0) {
        return _0x3d2dc1("Tempo inválido. Use um número positivo seguido de d (dias), h (horas) ou m (minutos).");
      }
      const _0x36962b = _0x55c2f3.prepare("SELECT * FROM usuarios_premium WHERE user_id = ? AND status = 'ativo'").get(_0x17c785);
      let _0x40c6d2;
      if (_0x36962b) {
        const _0x25640c = Math.max(_0x36962b.vencimento, _0x37bb8b) + _0x501907 * 86400;
        _0x55c2f3.prepare("UPDATE usuarios_premium \nSET vencimento = ?, status = 'ativo'\nWHERE user_id = ?").run(_0x25640c, _0x17c785);
        const _0x37cbda = Math.floor((_0x25640c - _0x37bb8b) / 86400);
        _0x260f05("Premium renovado para @" + _0x17c785.split('@')[0] + " com sucesso.\nNovo vencimento: " + new Date(_0x25640c * 1000).toLocaleString("pt-BR") + "\nTempo restante: " + _0x37cbda + " dias.");
      } else {
        _0x40c6d2 = _0x184574(_0x17c785, '', _0x501907, "normal", _0x34ee1b.key.participant || _0x34ee1b.key.remoteJid);
        if (_0x40c6d2.sucesso) {
          _0x260f05("👑 @" + _0x17c785.split('@')[0] + " foi adicionado à lista de usuários premium com sucesso 👑\nPlano válido por " + Math.floor(_0x501907) + " dias.");
        } else {
          _0x260f05("Erro ao adicionar @" + _0x17c785.split('@')[0] + " como premium: " + _0x40c6d2.mensagem);
        }
      }
      return true;
    }
    if (["del", "delete", "remover", "remove", 'rm'].includes(_0x501b27[0]?.["toLowerCase"]())) {
      if (!_0x3a2ea7) {
        return _0x3d2dc1("Marque o usuário do grupo ou digite o número do usuário ou marque a mensagem dele.");
      }
      const _0x3d04ad = _0x55c2f3.prepare("SELECT * FROM usuarios_premium WHERE user_id = ? AND status = 'ativo'").get(_0x3a2ea7);
      if (!_0x3d04ad) {
        return _0x3d2dc1("Este usuário não está na lista premium ou já foi removido.");
      }
      const _0x5bbfed = _0x4995fe(_0x3a2ea7);
      if (_0x5bbfed.sucesso) {
        _0x260f05('@' + _0x3a2ea7.split('@')[0] + " foi removido da lista premium com sucesso.");
      } else {
        _0x260f05("Erro ao remover @" + _0x3a2ea7.split('@')[0] + " da lista premium: " + _0x5bbfed.mensagem);
      }
      return true;
    }
    return _0x3d2dc1("Comando inválido. Use:\n- " + _0x2bb0f6 + "premium eu (para você mesmo)\n- " + _0x2bb0f6 + "premium lista (ver todos)\n- " + _0x2bb0f6 + "premium add @usuario/30d\n- " + _0x2bb0f6 + "premium renovar @usuario/7d\n- " + _0x2bb0f6 + "premium remover @usuario");
  }
}, {
  'name': "listaaluguel2",
  'aliases': ["lista_aluguel2"],
  'category': "dono",
  'description': "Lista detalhada do sistema de aluguel",
  'longDescription': "Exibe uma lista detalhada de todos os itens do sistema de aluguel com informações sobre status, vencimento e tempo restante.",
  'usage': "listaaluguel2 [filtro]",
  'example': "listaaluguel2 vencido",
  'menu': "dono",
  'menuSection': "Aluguel",
  'permissions': _0x556efd,
  'requirements': {},
  'execute': async ({
    conn: _0x4a44fa,
    info: _0x3c2f37,
    from: _0x431fee,
    q: _0x3f8d97,
    SoDono: _0x5021bb,
    Res_SoDono: _0x38bffd,
    prefix: _0x42ff82,
    BANCOP: _0x51af99,
    reply: _0x5167a5
  }) => {
    if (!_0x5021bb) {
      return _0x5167a5(_0x38bffd);
    }
    let _0xc75927 = _0x3f8d97.trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, '');
    let _0x3ccf4b = await _0x4a44fa.groupFetchAllParticipating();
    let _0x582370 = Object.entries(_0x3ccf4b).slice(0).map(_0xac0245 => _0xac0245[1]);
    let _0x195de8 = _0x582370.filter(_0x2fe973 => !_0x2fe973.isCommunity && !_0x2fe973.isCommunityAnnounce && !_0x2fe973.isReadOnly);
    let _0x5428d2 = Math.floor(Date.now() / 1000);
    const _0x116acf = _0x27245f => {
      if (_0x27245f <= 0) {
        return "Expirado";
      }
      const _0x2f0ce1 = {
        value: 0x15180,
        name: "dia"
      };
      const _0x3708e0 = {
        value: 0xe10,
        name: "hora"
      };
      const _0x159d49 = {
        value: 0x3c,
        name: "minuto"
      };
      const _0x57cf8e = {
        value: 0x1,
        name: "segundo"
      };
      const _0x12e916 = [_0x2f0ce1, _0x3708e0, _0x159d49, _0x57cf8e];
      let _0x3d608c = '';
      for (const _0x2d1f98 of _0x12e916) {
        const _0x4cab24 = Math.floor(_0x27245f / _0x2d1f98.value);
        if (_0x4cab24 > 0) {
          _0x27245f -= _0x4cab24 * _0x2d1f98.value;
          _0x3d608c += _0x4cab24 + " " + _0x2d1f98.name + (_0x4cab24 > 1 ? 's' : '') + " ";
        }
      }
      return _0x3d608c.trim() || "Menos de 1 segundo";
    };
    const _0x276567 = _0xffd1d3 => {
      if (!_0xffd1d3 || _0xffd1d3 === 0) {
        return "Não definido";
      }
      const _0x43c204 = new Date(_0xffd1d3 * 1000);
      return _0x43c204.toLocaleDateString("pt-BR");
    };
    const _0x2bc1c4 = _0x195de8.map(_0x117769 => _0x117769.id);
    let _0x394f40 = '';
    let _0x398ef6 = 0;
    let _0x36f68e = [];
    if (["vencido", "nao_vencido", "em dia", '', "todos", "7dias"].includes(_0xc75927)) {
      let _0x3658bc = "SELECT * FROM aluguel WHERE 1=1";
      let _0x2148e3 = [];
      if (_0x2bc1c4.length > 0) {
        const _0x58cbe4 = _0x2bc1c4.map(() => '?').join(',');
        _0x3658bc += " AND (is_grupo = 0 OR id_gp IN (" + _0x58cbe4 + '))';
        _0x2148e3.push(..._0x2bc1c4);
      }
      if (_0xc75927 === "vencido") {
        _0x3658bc += " AND vencimento <= ?";
        _0x2148e3.push(_0x5428d2);
      } else {
        if (_0xc75927 === "nao_vencido" || _0xc75927 === "em dia") {
          _0x3658bc += " AND vencimento > ?";
          _0x2148e3.push(_0x5428d2);
        } else {
          if (_0xc75927 === "7dias") {
            _0x3658bc += " AND vencimento > ? AND vencimento <= ?";
            _0x2148e3.push(_0x5428d2, _0x5428d2 + 604800);
          }
        }
      }
      if (_0xc75927 === "vencido") {
        _0x3658bc += " ORDER BY vencimento DESC";
      } else {
        _0x3658bc += " ORDER BY vencimento ASC";
      }
      const _0x2ef64d = _0x51af99.prepare(_0x3658bc);
      _0x36f68e = _0x2ef64d.all(..._0x2148e3);
      _0x398ef6 = _0x36f68e.length;
      const _0x2d38de = {
        '': "Todos"
      };
      _0x2d38de.vencido = "Vencidos";
      _0x2d38de.nao_vencido = "Não Vencidos";
      _0x2d38de["em dia"] = "Em Dia";
      _0x2d38de["7dias"] = "Vencendo em 7 Dias";
      _0x2d38de.todos = "Todos";
      const _0x1a5588 = _0x2d38de[_0xc75927] || "Todos";
      _0x394f40 += "┏━━━「 *LISTA DE ALUGUEL* 」━━━┓\n";
      _0x394f40 += "┃ *Filtro:* " + _0x1a5588 + "\n";
      _0x394f40 += "┃ *Total:* " + _0x398ef6 + " item(s)\n";
      _0x394f40 += "┗━━━━━━━━━━━━━━━━━━━━━━┛\n\n";
      for (let [_0x2b081e, _0x123693] of _0x36f68e.entries()) {
        const _0x2c2264 = _0x123693.vencimento - _0x5428d2;
        const _0xdf43f8 = _0x2c2264 > 0;
        const _0x3943ad = _0x116acf(_0x2c2264);
        const _0x337f5b = _0x276567(_0x123693.vencimento);
        let _0x4982fd = _0x582370.find(_0x43fa27 => _0x43fa27.id === _0x123693.id_gp);
        let _0x1f6a64 = _0x123693.is_grupo ? _0x4982fd ? _0x4982fd.subject : _0x123693.nome : _0x123693.nome;
        if (_0x1f6a64 && _0x1f6a64 !== _0x123693.nome && _0x123693.id_gp.includes("@g.us")) {
          _0x51af99.prepare("UPDATE aluguel SET nome = ? WHERE id_gp = ?").run(_0x1f6a64, _0x123693.id_gp);
          _0x123693.nome = _0x1f6a64;
        }
        const _0x5296bb = _0x123693.is_grupo ? "Grupo" : "Contato";
        _0x394f40 += "┏━━━「 *" + (_0x2b081e + 1) + ". " + _0x5296bb + "* 」━━━┓\n";
        _0x394f40 += "┃ *Nome:* " + (_0x123693.nome || "Sem nome") + "\n";
        _0x394f40 += "┃ *Status:* " + (_0xdf43f8 ? "✅ Ativo" : "❌ Inativo") + "\n";
        _0x394f40 += "┃ *Vencimento:* " + _0x337f5b + "\n";
        _0x394f40 += "┃ *Tempo:* " + _0x3943ad + "\n";
        _0x394f40 += "┗━━━━━━━━━━━━━━━━━━━━━━┛\n\n";
      }
    } else {
      if (_0xc75927 === "nao registrado") {
        const _0x4795fd = _0x51af99.prepare("SELECT id_gp FROM aluguel WHERE is_grupo = 1").all().map(_0x1a5afe => _0x1a5afe.id_gp);
        let _0x1f3e7f = _0x195de8.filter(_0x2a7ff2 => !_0x4795fd.includes(_0x2a7ff2.id));
        _0x398ef6 = _0x1f3e7f.length;
        _0x394f40 += "┏━━━「 *GRUPOS NÃO REGISTRADOS* 」━━━┓\n";
        _0x394f40 += "┃ *Total:* " + _0x398ef6 + " grupo(s)\n";
        _0x394f40 += "┗━━━━━━━━━━━━━━━━━━━━━━┛\n\n";
        for (let [_0x2f0cf0, _0x1ef997] of _0x1f3e7f.entries()) {
          _0x394f40 += "┏━━━「 *" + (_0x2f0cf0 + 1) + ". Grupo* 」━━━┓\n";
          _0x394f40 += "┃ *Nome:* " + _0x1ef997.subject + "\n";
          _0x394f40 += "┃ *Status:* ⚠️ Não registrado\n";
          _0x394f40 += "┗━━━━━━━━━━━━━━━━━━━━━━┛\n\n";
        }
      } else {
        if (_0xc75927 === "contatos") {
          const _0x1026e5 = _0x51af99.prepare("SELECT * FROM aluguel WHERE is_grupo = 0").all();
          _0x398ef6 = _0x1026e5.length;
          _0x394f40 += "┏━━━「 *CONTATOS NO SISTEMA* 」━━━┓\n";
          _0x394f40 += "┃ *Total:* " + _0x398ef6 + " contato(s)\n";
          _0x394f40 += "┗━━━━━━━━━━━━━━━━━━━━━━┛\n\n";
          for (let [_0x5ec415, _0x2bd091] of _0x1026e5.entries()) {
            const _0x2c03f3 = _0x2bd091.vencimento - _0x5428d2;
            const _0x3184d2 = _0x2c03f3 > 0;
            const _0x550787 = _0x116acf(_0x2c03f3);
            const _0x3bfc00 = _0x276567(_0x2bd091.vencimento);
            _0x394f40 += "┏━━━「 *" + (_0x5ec415 + 1) + ". Contato* 」━━━┓\n";
            _0x394f40 += "┃ *Nome:* " + (_0x2bd091.nome || "Sem nome") + "\n";
            _0x394f40 += "┃ *Status:* " + (_0x3184d2 ? "✅ Ativo" : "❌ Inativo") + "\n";
            _0x394f40 += "┃ *Vencimento:* " + _0x3bfc00 + "\n";
            _0x394f40 += "┃ *Tempo:* " + _0x550787 + "\n";
            _0x394f40 += "┗━━━━━━━━━━━━━━━━━━━━━━┛\n\n";
          }
        } else {
          return _0x5167a5("Filtro inválido. Use: vencido, nao_vencido, em dia, 7dias, contatos, nao registrado ou deixe em branco para todos.");
        }
      }
    }
    _0x394f40 += "┏━━━「 *COMANDOS ÚTEIS* 」━━━┓\n";
    _0x394f40 += "┃ • " + _0x42ff82 + "aluguel - Registrar\n";
    _0x394f40 += "┃ • " + _0x42ff82 + "renovar_aluguel - Renovar\n";
    _0x394f40 += "┃ • " + _0x42ff82 + "rm_aluguel - Remover\n";
    _0x394f40 += "┗━━━━━━━━━━━━━━━━━━━━━━┛";
    if (_0x398ef6 === 0) {
      _0x394f40 = "Nenhum item encontrado para o filtro: " + (_0xc75927 || "todos");
    }
    _0x5167a5(_0x394f40);
    return true;
  }
}, {
  'name': "listaaluguel",
  'aliases': ["sairgpaluguel", "lista_aluguel"],
  'category': "dono",
  'description': "Menu do sistema de aluguel",
  'longDescription': "Exibe um menu interativo para visualizar grupos ou sair de grupos com base em diferentes categorias de aluguel.",
  'usage': "listaaluguel",
  'example': "listaaluguel",
  'menu': "dono",
  'menuSection': "Aluguel",
  'permissions': _0x166c57,
  'requirements': {},
  'execute': async ({
    conn: _0x4cd954,
    info: _0x30c1e6,
    from: _0x4cf9d6,
    sender: _0x9edbfa,
    command: _0x5412a8,
    SoDono: _0x14c1d5,
    prefix: _0x51d8e3,
    getUniqueKey: _0x590e21,
    optionsBuffer: _0x4857b6,
    flushOptionsBuffer: _0x476cbf,
    createChoiceMenu: _0x1d0098,
    BANCOP: _0x4eed8b,
    reply: _0x903bb1
  }) => {
    if (!_0x14c1d5 && !_0x30c1e6.key.fromMe) {
      return _0x903bb1("Este comando só o bot ou o dono pode executar..");
    }
    const _0x95c498 = _0x590e21(_0x4cf9d6, _0x9edbfa);
    if (_0x4857b6[_0x95c498]) {
      delete _0x4857b6[_0x95c498];
      _0x476cbf();
    }
    const _0x5e4208 = await _0x4cd954.groupFetchAllParticipating();
    const _0x3ea9bb = Object.entries(_0x5e4208).slice(0).map(_0x57f444 => _0x57f444[1]);
    const _0x33e432 = _0x3ea9bb.map(_0x2ec6b2 => _0x2ec6b2.id);
    try {
      const _0x5ab17e = _0x33e432.map(() => '?').join(',');
      _0x4eed8b.prepare("\nDELETE FROM aluguel \nWHERE is_grupo = 1 \nAND id_gp NOT IN (" + _0x5ab17e + ")\n").run(..._0x33e432);
    } catch (_0x332d7f) {
      console.error("Erro ao limpar registros de grupos inativos:", _0x332d7f);
    }
    const _0x34e358 = _0x5412a8 === "sairgpaluguel";
    const _0x240465 = _0x34e358 ? "sair" : "ver";
    const _0x3845d4 = _0x34e358 ? "Sair Dos Grupos" : "Ver Lista Da Categoria";
    const _0x1c5d71 = {
      'principal': {
        'text': "┏━━━「 *" + _0x3845d4.toUpperCase() + "* 」━━━┓\n┃\n┃ Qual categoria você gostaria de " + _0x240465 + "?\n┃\n┃ *1* - Em Dia\n┃ *2* - Vencido\n┃ *3* - Contatos\n┃ *4* - Não Registrado\n┃ *5* - Todos\n┃ *6* - Vencendo em 7 Dias\n┃\n┗━━━━━━━━━━━━━━━━━━━━━━┛",
        'options': {
          '1': {
            'command': _0x51d8e3 + _0x5412a8 + "2 em dia",
            'text': "✅ Iniciando operação em grupos em dia...",
            'edit': true
          },
          '2': {
            'command': _0x51d8e3 + _0x5412a8 + "2 vencido",
            'text': "✅ Iniciando operação em grupos vencidos...",
            'edit': true
          },
          '3': {
            'command': _0x51d8e3 + _0x5412a8 + "2 contatos",
            'text': "✅ Iniciando operação em contatos...",
            'edit': true
          },
          '4': {
            'command': _0x51d8e3 + _0x5412a8 + "2 nao registrado",
            'text': "✅ Iniciando operação em grupos não registrados...",
            'edit': true
          },
          '5': {
            'command': _0x51d8e3 + _0x5412a8 + "2 todos",
            'text': "✅ Iniciando operação em todos os grupos...",
            'edit': true
          },
          '6': {
            'command': _0x51d8e3 + _0x5412a8 + "2 7dias",
            'text': "✅ Iniciando operação em grupos com 7 dias...",
            'edit': true
          }
        }
      }
    };
    await _0x1d0098(_0x4cf9d6, _0x9edbfa, _0x1c5d71.principal.text, _0x1c5d71.principal.options, {
      'menus': _0x1c5d71,
      'history': ["principal"]
    });
    return true;
  }
}, {
  'name': "aluguel",
  'aliases': [],
  'category': "dono",
  'description': "Ativa/desativa o sistema de aluguel no grupo",
  'longDescription': "Ativa ou desativa o sistema de aluguel no grupo atual, permitindo ou não o registro de aluguéis.",
  'usage': "aluguel",
  'example': "aluguel",
  'menu': "dono",
  'menuSection': "Aluguel",
  'permissions': _0x2dc4c0,
  'requirements': {},
  'execute': async ({
    conn: _0x2d8d08,
    info: _0x1f34a8,
    from: _0x5afbe4,
    SoDono: _0x23b1a3,
    Res_SoDono: _0x148c86,
    isGroup: _0x27ad36,
    Res_SoGrupo: _0x509006,
    prefix: _0x1277c0,
    dataGp: _0x376bc1,
    setGp: _0x3e6022,
    reply: _0x5ce2c2
  }) => {
    if (!_0x23b1a3) {
      return _0x5ce2c2(_0x148c86);
    }
    if (!_0x27ad36) {
      return _0x5ce2c2(_0x509006);
    }
    _0x376bc1[0].rg_aluguel = !_0x376bc1[0].rg_aluguel;
    _0x3e6022(_0x376bc1);
    _0x5ce2c2(_0x376bc1[0].rg_aluguel ? "Ativado com sucesso, agora use o comando: " + _0x1277c0 + "rg_aluguel\nOu então o comando " + _0x1277c0 + "info rg_aluguel pra saber como usar o resto." : "Desativado com sucesso.");
    return true;
  }
}, {
  'name': "aluguel_global",
  'aliases': ["aluguelgb"],
  'category': "dono",
  'description': "Ativa/desativa o sistema de aluguel global",
  'longDescription': "Ativa ou desativa o sistema de aluguel global, permitindo ou não o registro de aluguéis em todos os grupos.",
  'usage': "aluguel_global",
  'example': "aluguel_global",
  'menu': "dono",
  'menuSection': "Aluguel",
  'permissions': _0x7aa26f,
  'requirements': {},
  'execute': async ({
    conn: _0x2982dd,
    info: _0x243012,
    from: _0x1fc11d,
    SoDono: _0x580c9a,
    Res_SoDono: _0x4c5e84,
    prefix: _0x248123,
    nescessario: _0x3a0b09,
    setNes: _0xd6d395,
    reply: _0x484f5e
  }) => {
    if (!_0x580c9a) {
      return _0x484f5e(_0x4c5e84);
    }
    _0x3a0b09.rg_aluguelGB = !_0x3a0b09.rg_aluguelGB;
    _0xd6d395(_0x3a0b09);
    _0x484f5e(_0x3a0b09?.["rg_aluguelGB"] ? "Ativado com sucesso, agora use o comando: " + _0x248123 + "rg_aluguel\nOu então o comando " + _0x248123 + "info rg_aluguel pra saber como usar o resto." : "Desativado com sucesso..");
    return true;
  }
}, {
  'name': "rg_aluguel",
  'aliases': ["rgaluguel"],
  'category': "dono",
  'description': "Registra um novo aluguel",
  'longDescription': "Registra um novo aluguel com a data de vencimento especificada. No grupo executa diretamente, no privado abre menu de seleção.",
  'usage': "rg_aluguel [grupo_id] [data/duração]",
  'example': "rg_aluguel 31/12/2025 ou /30d",
  'menu': "dono",
  'menuSection': "Aluguel",
  'permissions': _0x3812f3,
  'requirements': {},
  'execute': async ({
    conn: _0x3a0ee8,
    info: _0x12fd35,
    from: _0x2379db,
    sender: _0x46590b,
    q: _0x14c66d,
    SoDono: _0x196946,
    Res_SoDono: _0x277c0c,
    isGroup: _0x3f2bf1,
    groupName: _0x5d9ec2,
    pushname: _0x2801ae,
    prefix: _0x14124c,
    dataGp: _0x2d2f9d,
    nescessario: _0x157889,
    BANCOP: _0x4d68b5,
    createChoiceMenu: _0xa66dad,
    reply: _0x31254b,
    getGroupSettings: _0x15e3fb,
    puxarTodosGrupos: _0x55eb41,
    puxarGrupo: _0x144e32
  }) => {
    if (!_0x196946) {
      return _0x31254b(_0x277c0c);
    }
    function _0x49b115(_0x61f0f, _0x976707, _0x540bd6, _0x3f1755, _0x4f6466 = {}) {
      try {
        const _0x3a40a6 = _0x61f0f.prepare("SELECT historico FROM aluguel WHERE id_gp = ?").get(_0x976707);
        let _0x5dac45 = [];
        if (_0x3a40a6 && _0x3a40a6.historico) {
          try {
            _0x5dac45 = JSON.parse(_0x3a40a6.historico);
          } catch (_0x1a3bb5) {
            _0x5dac45 = [];
          }
        }
        const _0x5aefd1 = {
          'timestamp': Math.floor(Date.now() / 1000),
          'action': _0x540bd6,
          'user': _0x3f1755,
          'details': _0x4f6466
        };
        _0x5dac45.push(_0x5aefd1);
        if (_0x5dac45.length > 50) {
          _0x5dac45 = _0x5dac45.slice(-50);
        }
        _0x61f0f.prepare("UPDATE aluguel SET historico = ? WHERE id_gp = ?").run(JSON.stringify(_0x5dac45), _0x976707);
        return true;
      } catch (_0x31a908) {
        console.error("Erro ao registrar histórico:", _0x31a908);
        return false;
      }
    }
    async function _0x2d1105(_0x4238f5) {
      if (_0x157889?.["rg_aluguelGB"]) {
        return true;
      }
      if (!_0x4238f5.endsWith("@g.us")) {
        return false;
      }
      try {
        const _0x2eb11e = await _0x15e3fb(_0x4238f5);
        return _0x2eb11e && _0x2eb11e[0]?.["rg_aluguel"];
      } catch (_0x3f3c85) {
        return false;
      }
    }
    async function _0x42046c(_0x2de898) {
      try {
        let _0x2aca61 = await _0x2de898.groupFetchAllParticipating();
        let _0x2383b1 = Object.entries(_0x2aca61).slice(0).map(_0x41fc7b => _0x41fc7b[1]);
        let _0x144dcc = _0x2383b1.filter(_0x5400fd => !_0x5400fd.isCommunity && !_0x5400fd.isCommunityAnnounce && !_0x5400fd.isReadOnly);
        const _0xc5713b = [];
        for (const _0x26f998 of _0x144dcc) {
          const _0x168249 = await _0x2d1105(_0x26f998.id);
          if (_0x168249) {
            _0xc5713b.push(_0x26f998);
          }
        }
        return _0xc5713b;
      } catch (_0xe2adcc) {
        console.error("Erro ao buscar grupos:", _0xe2adcc);
        return [];
      }
    }
    async function _0x42d189(_0x2d1051, _0xd7cf8, _0x494d7c = null) {
      try {
        const _0x3723fb = await _0x2d1105(_0x2d1051);
        if (!_0x3723fb) {
          return _0x31254b("Sistema de aluguel não está ativo. Para ativar:\n• Global: " + _0x14124c + "aluguel_global\n• Por grupo: " + _0x14124c + "aluguel (no grupo específico)");
        }
        const _0x11a085 = _0xd7cf8.trim();
        const _0xcf1db = /^\d{2}\/\d{2}\/\d{4}$/.test(_0x11a085);
        const _0x3070af = /^\/(\d+)([dhm])$/;
        const _0x3b2262 = _0x3070af.test(_0x11a085);
        if (!_0xcf1db && !_0x3b2262) {
          return _0x31254b("Por favor, forneça o tempo no formato correto:\n- Para data específica: DD/MM/YYYY (exemplo: 31/12/2025)\n- Para duração: /Xd (dias), /Xh (horas) ou /Xm (minutos)\nExemplos: /30d, /24h, /120m");
        }
        const _0x4a081f = Math.floor(Date.now() / 1000);
        let _0x55ba26;
        if (_0xcf1db) {
          const [_0x188763, _0x6c685, _0x52c79d] = _0x11a085.split('/').map(_0x5d6178 => parseInt(_0x5d6178, 10));
          if (_0x188763 < 1 || _0x188763 > 31 || _0x6c685 < 1 || _0x6c685 > 12 || _0x52c79d < 2024 || _0x52c79d > 2100) {
            return _0x31254b("Data inválida. Use o formato DD/MM/YYYY com valores válidos.");
          }
          const _0x42f240 = new Date();
          const _0x27f501 = new Date(_0x52c79d, _0x6c685 - 1, _0x188763, _0x42f240.getHours(), _0x42f240.getMinutes(), _0x42f240.getSeconds());
          if (_0x27f501.getTime() / 1000 <= _0x4a081f) {
            return _0x31254b("A data fornecida já passou. Por favor, forneça uma data futura.");
          }
          _0x55ba26 = Math.floor(_0x27f501.getTime() / 1000);
        } else {
          const _0x52ed43 = _0x11a085.match(_0x3070af);
          const _0x3ed33c = parseInt(_0x52ed43[1], 10);
          const _0x3e7b5f = _0x52ed43[2];
          if (_0x3ed33c <= 0 || _0x3ed33c > 365) {
            return _0x31254b("Quantidade inválida. Deve ser um número positivo e razoável (máximo de 365 para dias).");
          }
          let _0x4c74b1;
          switch (_0x3e7b5f) {
            case 'd':
              if (_0x3ed33c > 365) {
                return _0x31254b("O máximo permitido é 365 dias.");
              }
              _0x4c74b1 = _0x3ed33c * 86400;
              break;
            case 'h':
              if (_0x3ed33c > 8760) {
                return _0x31254b("O máximo permitido é 8760 horas (equivalente a 365 dias).");
              }
              _0x4c74b1 = _0x3ed33c * 3600;
              break;
            case 'm':
              if (_0x3ed33c > 525600) {
                return _0x31254b("O máximo permitido é 525600 minutos (equivalente a 365 dias).");
              }
              _0x4c74b1 = _0x3ed33c * 60;
              break;
            default:
              return _0x31254b("Unidade de tempo inválida. Use d para dias, h para horas ou m para minutos.");
          }
          _0x55ba26 = _0x4a081f + _0x4c74b1;
        }
        const _0x8b3cd7 = _0x2d1051.endsWith("@g.us") ? "GRUPO" : "USUÁRIO";
        let _0x3cae54;
        if (_0x8b3cd7 === "GRUPO") {
          if (_0x494d7c) {
            _0x3cae54 = _0x494d7c;
          } else {
            try {
              const _0x33f7aa = await _0x144e32(_0x3a0ee8, _0x2d1051);
              _0x3cae54 = _0x33f7aa.subject || "Grupo Desconhecido";
            } catch (_0x7a8beb) {
              console.error("Erro ao buscar dados do grupo:", _0x7a8beb);
              _0x3cae54 = "Grupo Desconhecido";
            }
          }
        } else {
          _0x3cae54 = _0x2801ae || "Usuário";
        }
        _0x4d68b5.prepare("INSERT OR REPLACE INTO aluguel (id_gp, nome, vencimento, data_registro, status_aviso, is_grupo, historico, renovacoes) VALUES (?, ?, ?, ?, 0, ?, ?, 0)").run(_0x2d1051, _0x3cae54, _0x55ba26, _0x4a081f, _0x8b3cd7 === "GRUPO" ? 1 : 0, '[]');
        const _0x34d100 = {
          vencimento: _0x55ba26,
          data_formatada: _0x11a085
        };
        _0x49b115(_0x4d68b5, _0x2d1051, "registro", _0x46590b, _0x34d100);
        const _0x3119de = new Date(_0x55ba26 * 1000);
        const _0x228b45 = _0x3119de.toLocaleDateString("pt-BR");
        const _0x175f44 = _0x3119de.toLocaleTimeString("pt-BR");
        const _0x4dd7f0 = new Date().toLocaleTimeString("pt-BR");
        const _0x7e1c89 = "*REGISTRO REALIZADO COM SUCESSO*\n\n*" + _0x8b3cd7 + ":* " + _0x3cae54 + "\n*ID:* " + _0x2d1051 + "\n*DATA DO VENCIMENTO:* " + _0x228b45 + "\n*HORA DO VENCIMENTO:* " + _0x175f44 + "\n*HORA DO REGISTRO:* " + _0x4dd7f0 + "\n\n*CASO QUEIRA REMOVER O ALUGUEL UTILIZE O COMANDO RM_ALUGUEL NESTE " + _0x8b3cd7 + '*';
        _0x31254b(_0x7e1c89);
        if (!_0x3f2bf1 && _0x8b3cd7 === "GRUPO") {
          try {
            const _0x82e606 = {
              text: "🔔 *ALUGUEL REGISTRADO*\n\n📅 *Vencimento:* " + _0x228b45 + " às " + _0x175f44 + "\n👤 *Registrado por:* " + _0x2801ae + "\n\n_Aluguel registrado remotamente pelo proprietário._"
            };
            await _0x3a0ee8.sendMessage(_0x2d1051, _0x82e606);
          } catch (_0x31315b) {
            console.error("Erro ao enviar notificação para o grupo:", _0x31315b);
          }
        }
        return true;
      } catch (_0x7a0834) {
        console.error("Erro ao registrar aluguel:", _0x7a0834);
        return _0x31254b("Erro ao registrar aluguel. Por favor, tente novamente.");
      }
    }
    if (_0x3f2bf1) {
      if (!_0x14c66d.trim()) {
        return _0x31254b("*📝 REGISTRO DE ALUGUEL*\n\n*Uso:* " + _0x14124c + "rg_aluguel [data/duração]\n\n*Formatos aceitos:*\n• Data: DD/MM/YYYY (31/12/2025)\n• Duração: /Xd (dias), /Xh (horas), /Xm (minutos)\n\n*Exemplos:*\n• " + _0x14124c + "rg_aluguel 31/12/2025\n• " + _0x14124c + "rg_aluguel /30d\n• " + _0x14124c + "rg_aluguel /24h");
      }
      return await _0x42d189(_0x2379db, _0x14c66d, _0x5d9ec2);
    }
    if (!_0x196946) {
      if (!_0x14c66d.trim()) {
        return _0x31254b("*📝 REGISTRO DE ALUGUEL*\n\n*Uso:* " + _0x14124c + "rg_aluguel [data/duração]\n\n*Formatos aceitos:*\n• Data: DD/MM/YYYY (31/12/2025)\n• Duração: /Xd (dias), /Xh (horas), /Xm (minutos)\n\n*Exemplos:*\n• " + _0x14124c + "rg_aluguel 31/12/2025\n• " + _0x14124c + "rg_aluguel /30d\n• " + _0x14124c + "rg_aluguel /24h");
      }
      return await _0x42d189(_0x2379db, _0x14c66d, _0x2801ae);
    }
    const _0x3c5837 = _0x14c66d.trim().split(" ");
    if (_0x3c5837.length >= 2 && _0x3c5837[0].includes("@g.us")) {
      const _0x126920 = _0x3c5837[0];
      const _0x5d4397 = _0x3c5837.slice(1).join(" ");
      return await _0x42d189(_0x126920, _0x5d4397);
    }
    if (_0x3c5837.length >= 1 && (_0x3c5837[0].match(/^\d{2}\/\d{2}\/\d{4}$/) || _0x3c5837[0].match(/^\/\d+[dhm]$/))) {
      const _0xf08ca3 = _0x14c66d.trim();
      const _0x27a8d5 = await _0x42046c(_0x3a0ee8);
      if (_0x27a8d5.length === 0) {
        return _0x31254b("❌ Nenhum grupo com sistema de aluguel ativo encontrado.\n\nPara ativar:\n• Global: " + _0x14124c + "aluguel_global\n• Por grupo: " + _0x14124c + "aluguel (no grupo)");
      }
      const _0xa3a8bc = {
        close: true,
        text: "❌ Registro cancelado pelo usuário."
      };
      const _0x23c936 = {
        'principal': {
          'text': "╭━━━⊱「 REGISTRO DE ALUGUEL 」⊰━━━╮\n┃\n┃ 📝 Dados para registro:\n┃ ⏰ " + _0xf08ca3 + "\n┃\n┃ Selecione o grupo para registrar:\n┃\n" + _0x27a8d5.slice(0, 15).map((_0x85c335, _0x3d73a4) => "┃ " + (_0x3d73a4 + 1) + " - " + (_0x85c335.subject || "Sem nome")).join("\n") + "\n┃\n┃ 0 - Cancelar\n┃\n╰━━━⊱「 𝐑𝐄𝐆𝐈𝐒𝐓𝐑𝐎 」⊰━━━╯\n\nDigite uma opção:",
          'options': {
            ...Object.fromEntries(_0x27a8d5.slice(0, 15).map((_0x227d5d, _0x5a43db) => [String(_0x5a43db + 1), {
              'text': "✅ Registrando aluguel no grupo: " + _0x227d5d.subject,
              'command': _0x14124c + "rg_aluguel " + _0x227d5d.id + " " + _0xf08ca3,
              'edit': true
            }])),
            '0': _0xa3a8bc
          }
        }
      };
      await _0xa66dad(_0x2379db, _0x46590b, _0x23c936.principal.text, _0x23c936.principal.options, {
        'menus': _0x23c936,
        'history': ["principal"]
      });
      return true;
    }
    if (_0x14c66d.trim()) {
      return _0x31254b("*📝 REGISTRO DE ALUGUEL - FORMATO INVÁLIDO*\n\n*Formatos aceitos no privado:*\n\n*Com grupo específico:*\n" + _0x14124c + "rg_aluguel [grupo_id] [data/duração]\n\n*Com seleção de grupo:*\n" + _0x14124c + "rg_aluguel [data/duração]\n\n*Formatos de tempo:*\n• Data: DD/MM/YYYY (exemplo: 31/12/2025)\n• Duração: /Xd, /Xh, /Xm (exemplo: /30d)\n\n*Exemplos válidos:*\n• " + _0x14124c + "rg_aluguel 120363025918861132@g.us /30d\n• " + _0x14124c + "rg_aluguel /30d\n• " + _0x14124c + "rg_aluguel 31/12/2025");
    }
    let _0x25d237 = await _0x3a0ee8.groupFetchAllParticipating();
    let _0x2ae87d = Object.entries(_0x25d237).slice(0).map(_0x482f30 => _0x482f30[1]);
    let _0x275ac7 = _0x2ae87d.filter(_0x371f37 => !_0x371f37.isCommunity && !_0x371f37.isCommunityAnnounce && !_0x371f37.isReadOnly);
    const _0x37fa68 = [];
    for (const _0x6bfa9a of _0x275ac7) {
      const _0x1ac5fc = await _0x2d1105(_0x6bfa9a.id);
      if (_0x1ac5fc) {
        _0x37fa68.push(_0x6bfa9a);
      }
    }
    if (_0x37fa68.length === 0) {
      return _0x31254b("❌ Nenhum grupo com sistema de aluguel ativo encontrado.\n\nPara ativar:\n• Global: " + _0x14124c + "aluguel_global\n• Por grupo: " + _0x14124c + "aluguel (no grupo)");
    }
    const _0x3dbe82 = {
      submenu: "data_especifica"
    };
    const _0x44af93 = {
      submenu: "duracao"
    };
    const _0x4bc259 = {
      submenu: "ajuda"
    };
    const _0x1f8360 = {
      close: true,
      text: "✅ Menu fechado com sucesso!"
    };
    const _0x99190 = {
      '1': _0x3dbe82,
      '2': _0x44af93,
      '3': _0x4bc259,
      '4': _0x1f8360
    };
    const _0x5c5ebd = {
      text: "╭━━━⊱「 REGISTRO DE ALUGUEL 」⊰━━━╮\n┃\n┃ 1 - Registro com Data Específica 📅\n┃ • Definir data exata (DD/MM/YYYY)\n┃\n┃ 2 - Registro com Duração ⏰\n┃ • Definir tempo (/30d, /24h, /120m)\n┃\n┃ 3 - Ajuda e Exemplos 📖\n┃ • Como usar o comando\n┃\n┃ 4 - Sair\n┃ • Encerra o menu\n┃\n╰━━━⊱「 𝐑𝐄𝐆𝐈𝐒𝐓𝐑𝐎 」⊰━━━╯\n\nDigite uma opção:",
      options: _0x99190
    };
    const _0x1bd1fa = {
      back: true
    };
    const _0x25a32e = {
      back: true
    };
    const _0x45f6fb = {
      back: true
    };
    const _0x5ea249 = {
      '0': _0x45f6fb
    };
    const _0x2b1809 = {
      text: "╭━━━⊱「 AJUDA - REGISTRO 」⊰━━━╮\n┃\n┃ 📖 Como usar o comando:\n┃\n┃ *Em grupo:*\n┃ " + _0x14124c + "rg_aluguel [data/duração]\n┃\n┃ *No privado:*\n┃ " + _0x14124c + "rg_aluguel [grupo_id] [data/duração]\n┃ ou\n┃ " + _0x14124c + "rg_aluguel [data/duração] (menu)\n┃\n┃ *Formatos aceitos:*\n┃ • Data: DD/MM/YYYY (31/12/2025)\n┃ • Duração: /Xd, /Xh, /Xm\n┃\n┃ *Exemplos práticos:*\n┃ • " + _0x14124c + "rg_aluguel 31/12/2025\n┃ • " + _0x14124c + "rg_aluguel /30d\n┃ • " + _0x14124c + "rg_aluguel /24h\n┃ • " + _0x14124c + "rg_aluguel /120m\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐀𝐉𝐔𝐃𝐀 」⊰━━━╯",
      options: _0x5ea249
    };
    const _0x13c876 = {
      'principal': _0x5c5ebd,
      'data_especifica': {
        'text': "╭━━━⊱「 GRUPOS DISPONÍVEIS 」⊰━━━╮\n┃\n┃ 📅 Selecione o grupo para registrar\n┃ com data específica:\n┃\n" + _0x37fa68.slice(0, 15).map((_0x1cf86d, _0x35a9e5) => "┃ " + (_0x35a9e5 + 1) + " - " + (_0x1cf86d.subject || "Sem nome")).join("\n") + "\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐃𝐀𝐓𝐀 」⊰━━━╯\n\nDigite uma opção:",
        'options': {
          ...Object.fromEntries(_0x37fa68.slice(0, 15).map((_0x588386, _0x2d117d) => [String(_0x2d117d + 1), {
            'submenu': "input_data",
            'data': {
              'grupoId': _0x588386.id,
              'grupoNome': _0x588386.subject
            }
          }])),
          '0': _0x1bd1fa
        }
      },
      'duracao': {
        'text': "╭━━━⊱「 GRUPOS DISPONÍVEIS 」⊰━━━╮\n┃\n┃ ⏰ Selecione o grupo para registrar\n┃ com duração:\n┃\n" + _0x37fa68.slice(0, 15).map((_0x18aa92, _0x44e583) => "┃ " + (_0x44e583 + 1) + " - " + (_0x18aa92.subject || "Sem nome")).join("\n") + "\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐃𝐔𝐑𝐀𝐂̧𝐀̃𝐎 」⊰━━━╯\n\nDigite uma opção:",
        'options': {
          ...Object.fromEntries(_0x37fa68.slice(0, 15).map((_0x388ec3, _0x17f86d) => [String(_0x17f86d + 1), {
            'submenu': "input_duracao",
            'data': {
              'grupoId': _0x388ec3.id,
              'grupoNome': _0x388ec3.subject
            }
          }])),
          '0': _0x25a32e
        }
      },
      'ajuda': _0x2b1809
    };
    await _0xa66dad(_0x2379db, _0x46590b, _0x13c876.principal.text, _0x13c876.principal.options, {
      'menus': _0x13c876,
      'history': ["principal"]
    });
    return true;
  }
}, {
  'name': "renovar_aluguel",
  'aliases': ["rn_aluguel"],
  'category': "dono",
  'description': "Renova um aluguel existente",
  'longDescription': "Renova um aluguel existente com a nova data de vencimento especificada. No grupo executa diretamente, no privado abre menu de seleção.",
  'usage': "renovar_aluguel [grupo_id] [data/duração]",
  'example': "renovar_aluguel 31/12/2025 ou /30d",
  'menu': "dono",
  'menuSection': "Aluguel",
  'permissions': _0x39cec9,
  'requirements': {},
  'execute': async ({
    conn: _0x26681,
    info: _0x2b8e47,
    from: _0x5b416e,
    sender: _0x5cc75c,
    q: _0x24dcb9,
    SoDono: _0x322ec8,
    Res_SoDono: _0x3e1d62,
    isGroup: _0x2bfa72,
    groupName: _0x191f00,
    pushname: _0x6314e8,
    prefix: _0x12ee99,
    dataGp: _0x4f3819,
    nescessario: _0x3d4716,
    BANCOP: _0x2f4259,
    createChoiceMenu: _0x1f6123,
    reply: _0x3ca90d,
    getGroupSettings: _0x2c6fe7,
    puxarTodosGrupos: _0x5ea528,
    puxarGrupo: _0x40d580
  }) => {
    if (!_0x322ec8) {
      return _0x3ca90d(_0x3e1d62);
    }
    function _0x23bf9a(_0x29ad05, _0x375a5a, _0x490f9e, _0x42fed7, _0x46996a = {}) {
      try {
        const _0x541f44 = _0x29ad05.prepare("SELECT historico FROM aluguel WHERE id_gp = ?").get(_0x375a5a);
        let _0x362e9b = [];
        if (_0x541f44 && _0x541f44.historico) {
          try {
            _0x362e9b = JSON.parse(_0x541f44.historico);
          } catch (_0x36c8a6) {
            _0x362e9b = [];
          }
        }
        const _0x2ce08d = {
          'timestamp': Math.floor(Date.now() / 1000),
          'action': _0x490f9e,
          'user': _0x42fed7,
          'details': _0x46996a
        };
        _0x362e9b.push(_0x2ce08d);
        if (_0x362e9b.length > 50) {
          _0x362e9b = _0x362e9b.slice(-50);
        }
        _0x29ad05.prepare("UPDATE aluguel SET historico = ? WHERE id_gp = ?").run(JSON.stringify(_0x362e9b), _0x375a5a);
        return true;
      } catch (_0x53e6d1) {
        console.error("Erro ao registrar histórico:", _0x53e6d1);
        return false;
      }
    }
    async function _0x22baf5(_0x2790) {
      if (_0x3d4716?.["rg_aluguelGB"]) {
        return true;
      }
      if (!_0x2790.endsWith("@g.us")) {
        return false;
      }
      try {
        const _0x30bbbd = await _0x2c6fe7(_0x2790);
        return _0x30bbbd && _0x30bbbd[0]?.["rg_aluguel"];
      } catch (_0x55e032) {
        return false;
      }
    }
    async function _0x30f257(_0x252d25) {
      try {
        let _0x65bd00 = await _0x252d25.groupFetchAllParticipating();
        let _0x209a70 = Object.entries(_0x65bd00).slice(0).map(_0x12e85f => _0x12e85f[1]);
        let _0x5f45d6 = _0x209a70.filter(_0x3beea1 => !_0x3beea1.isCommunity && !_0x3beea1.isCommunityAnnounce && !_0x3beea1.isReadOnly);
        const _0x4d34d0 = [];
        for (const _0x7bc872 of _0x5f45d6) {
          const _0xae030d = _0x2f4259.prepare("SELECT * FROM aluguel WHERE id_gp = ?").get(_0x7bc872.id);
          if (_0xae030d) {
            const _0x60be1f = await _0x22baf5(_0x7bc872.id);
            if (_0x60be1f) {
              const _0x219a78 = {
                ..._0x7bc872
              };
              _0x219a78.registro = _0xae030d;
              _0x4d34d0.push(_0x219a78);
            }
          }
        }
        return _0x4d34d0;
      } catch (_0x567cfa) {
        console.error("Erro ao buscar grupos:", _0x567cfa);
        return [];
      }
    }
    async function _0x40265e(_0xd2257a, _0x450fb6, _0x143025 = null) {
      try {
        const _0x2ae1b6 = _0x2f4259.prepare("SELECT * FROM aluguel WHERE id_gp = ?").get(_0xd2257a);
        if (!_0x2ae1b6) {
          return _0x3ca90d("Este grupo não está na lista de aluguel, use: " + _0x12ee99 + "listaaluguel para ver os grupos registrados.");
        }
        const _0x252223 = await _0x22baf5(_0xd2257a);
        if (!_0x252223) {
          return _0x3ca90d("Sistema de aluguel não está ativo. Para ativar:\n• Global: " + _0x12ee99 + "aluguel_global\n• Por grupo: " + _0x12ee99 + "aluguel (no grupo específico)");
        }
        const _0x43f648 = _0x450fb6.trim();
        const _0xc3c057 = /^\d{2}\/\d{2}\/\d{4}$/.test(_0x43f648);
        const _0x2c38ef = /^\/(\d+)([dhm])$/;
        const _0xc53874 = _0x2c38ef.test(_0x43f648);
        if (!_0xc3c057 && !_0xc53874) {
          return _0x3ca90d("Por favor, forneça o tempo no formato correto:\n- Para data específica: DD/MM/YYYY (exemplo: 31/12/2025)\n- Para duração: /Xd (dias), /Xh (horas) ou /Xm (minutos)\nExemplos: /30d, /24h, /120m");
        }
        const _0xb06d3c = Math.floor(Date.now() / 1000);
        let _0x1d56a7;
        if (_0xc3c057) {
          const [_0x3bf582, _0x5a6559, _0x21f366] = _0x43f648.split('/').map(_0xa874fd => parseInt(_0xa874fd, 10));
          if (_0x3bf582 < 1 || _0x3bf582 > 31 || _0x5a6559 < 1 || _0x5a6559 > 12 || _0x21f366 < 2024 || _0x21f366 > 2100) {
            return _0x3ca90d("Data inválida. Use o formato DD/MM/YYYY com valores válidos.");
          }
          const _0xdc1497 = new Date();
          const _0x4e53a0 = new Date(_0x21f366, _0x5a6559 - 1, _0x3bf582, _0xdc1497.getHours(), _0xdc1497.getMinutes(), _0xdc1497.getSeconds());
          if (_0x4e53a0.getTime() / 1000 <= _0xb06d3c) {
            return _0x3ca90d("A data fornecida já passou. Por favor, forneça uma data futura.");
          }
          _0x1d56a7 = Math.floor(_0x4e53a0.getTime() / 1000);
        } else {
          const _0x282cd7 = _0x43f648.match(_0x2c38ef);
          const _0x48ef28 = parseInt(_0x282cd7[1], 10);
          const _0x26d268 = _0x282cd7[2];
          if (_0x48ef28 <= 0 || _0x48ef28 > 365) {
            return _0x3ca90d("Quantidade inválida. Deve ser um número positivo e razoável (máximo de 365 para dias).");
          }
          let _0x19d9f9;
          switch (_0x26d268) {
            case 'd':
              if (_0x48ef28 > 365) {
                return _0x3ca90d("O máximo permitido é 365 dias.");
              }
              _0x19d9f9 = _0x48ef28 * 86400;
              break;
            case 'h':
              if (_0x48ef28 > 8760) {
                return _0x3ca90d("O máximo permitido é 8760 horas (equivalente a 365 dias).");
              }
              _0x19d9f9 = _0x48ef28 * 3600;
              break;
            case 'm':
              if (_0x48ef28 > 525600) {
                return _0x3ca90d("O máximo permitido é 525600 minutos (equivalente a 365 dias).");
              }
              _0x19d9f9 = _0x48ef28 * 60;
              break;
            default:
              return _0x3ca90d("Unidade de tempo inválida. Use d para dias, h para horas ou m para minutos.");
          }
          const _0x1c0f39 = _0x2ae1b6.vencimento - _0xb06d3c;
          if (_0x1c0f39 <= 0) {
            _0x1d56a7 = _0xb06d3c + _0x19d9f9;
          } else {
            _0x1d56a7 = _0x2ae1b6.vencimento + _0x19d9f9;
          }
        }
        const _0x57e05d = _0xd2257a.endsWith("@g.us") ? "GRUPO" : "USUÁRIO";
        let _0x4a0ace;
        if (_0x57e05d === "GRUPO") {
          if (_0x143025) {
            _0x4a0ace = _0x143025;
          } else {
            try {
              const _0x1a0526 = await _0x40d580(_0x26681, _0xd2257a);
              _0x4a0ace = _0x1a0526.subject || _0x2ae1b6.nome || "Grupo Desconhecido";
            } catch (_0xa5fe1f) {
              console.error("Erro ao buscar dados do grupo:", _0xa5fe1f);
              _0x4a0ace = _0x2ae1b6.nome || "Grupo Desconhecido";
            }
          }
        } else {
          _0x4a0ace = _0x6314e8 || _0x2ae1b6.nome || "Usuário";
        }
        _0x2f4259.prepare("UPDATE aluguel SET vencimento = ?, status_aviso = 0, renovacoes = renovacoes + 1 WHERE id_gp = ?").run(_0x1d56a7, _0xd2257a);
        const _0x562eac = {
          vencimento: _0x1d56a7,
          data_formatada: _0x43f648
        };
        _0x23bf9a(_0x2f4259, _0xd2257a, "renovacao", _0x5cc75c, _0x562eac);
        const _0x1da6de = new Date(_0x1d56a7 * 1000);
        const _0x49e590 = _0x1da6de.toLocaleDateString("pt-BR");
        const _0x4d9ac5 = _0x1da6de.toLocaleTimeString("pt-BR");
        const _0x498072 = new Date().toLocaleTimeString("pt-BR");
        const _0x375f00 = "*RENOVADO COM SUCESSO*\n\n*" + _0x57e05d + ":* " + _0x4a0ace + "\n*ID:* " + _0xd2257a + "\n*DATA DO VENCIMENTO:* " + _0x49e590 + "\n*HORA DO VENCIMENTO:* " + _0x4d9ac5 + "\n*HORA DA RENOVAÇÃO:* " + _0x498072 + "\n\n*CASO QUEIRA REMOVER O ALUGUEL UTILIZE O COMANDO RM_ALUGUEL NESTE " + _0x57e05d + '*';
        _0x3ca90d(_0x375f00);
        if (!_0x2bfa72 && _0x57e05d === "GRUPO") {
          try {
            const _0x4deea8 = {
              text: "🔔 *ALUGUEL RENOVADO*\n\n📅 *Novo Vencimento:* " + _0x49e590 + " às " + _0x4d9ac5 + "\n👤 *Renovado por:* " + _0x6314e8 + "\n\n_Aluguel renovado remotamente pelo proprietário._"
            };
            await _0x26681.sendMessage(_0xd2257a, _0x4deea8);
          } catch (_0x3139e1) {
            console.error("Erro ao enviar notificação para o grupo:", _0x3139e1);
          }
        }
        return true;
      } catch (_0x454402) {
        console.error("Erro ao renovar aluguel:", _0x454402);
        return _0x3ca90d("Erro ao renovar aluguel. Por favor, tente novamente.");
      }
    }
    if (_0x2bfa72) {
      if (!_0x24dcb9.trim()) {
        return _0x3ca90d("*🔄 RENOVAÇÃO DE ALUGUEL*\n\n*Uso:* " + _0x12ee99 + "renovar_aluguel [data/duração]\n\n*Formatos aceitos:*\n• Data: DD/MM/YYYY (31/12/2025)\n• Duração: /Xd (dias), /Xh (horas), /Xm (minutos)\n\n*Exemplos:*\n• " + _0x12ee99 + "renovar_aluguel 31/12/2025\n• " + _0x12ee99 + "renovar_aluguel /30d\n• " + _0x12ee99 + "renovar_aluguel /24h");
      }
      return await _0x40265e(_0x5b416e, _0x24dcb9, _0x191f00);
    }
    if (!_0x322ec8) {
      if (!_0x24dcb9.trim()) {
        return _0x3ca90d("*🔄 RENOVAÇÃO DE ALUGUEL*\n\n*Uso:* " + _0x12ee99 + "renovar_aluguel [data/duração]\n\n*Formatos aceitos:*\n• Data: DD/MM/YYYY (31/12/2025)\n• Duração: /Xd (dias), /Xh (horas), /Xm (minutos)\n\n*Exemplos:*\n• " + _0x12ee99 + "renovar_aluguel 31/12/2025\n• " + _0x12ee99 + "renovar_aluguel /30d\n• " + _0x12ee99 + "renovar_aluguel /24h");
      }
      return await _0x40265e(_0x5b416e, _0x24dcb9, _0x6314e8);
    }
    const _0x4e1490 = _0x24dcb9.trim().split(" ");
    if (_0x4e1490.length >= 2 && _0x4e1490[0].includes("@g.us")) {
      const _0x56043c = _0x4e1490[0];
      const _0x218dc8 = _0x4e1490.slice(1).join(" ");
      return await _0x40265e(_0x56043c, _0x218dc8);
    }
    if (_0x4e1490.length >= 1 && (_0x4e1490[0].match(/^\d{2}\/\d{2}\/\d{4}$/) || _0x4e1490[0].match(/^\/\d+[dhm]$/))) {
      const _0x1d0638 = _0x24dcb9.trim();
      const _0x9c31b5 = await _0x30f257(_0x26681);
      if (_0x9c31b5.length === 0) {
        return _0x3ca90d("❌ Nenhum grupo com aluguel registrado e ativo encontrado.\n\nPara ativar:\n• Global: " + _0x12ee99 + "aluguel_global\n• Por grupo: " + _0x12ee99 + "aluguel (no grupo)");
      }
      const _0x117c22 = {
        'principal': {
          'text': "╭━━━⊱「 RENOVAÇÃO DE ALUGUEL 」⊰━━━╮\n┃\n┃ 🔄 Dados para renovação:\n┃ ⏰ " + _0x1d0638 + "\n┃\n┃ Selecione o grupo para renovar:\n┃\n" + _0x9c31b5.slice(0, 15).map((_0x238a4, _0x199cf3) => {
            const _0x18406a = Math.floor(Date.now() / 1000);
            const _0x56c4ed = _0x238a4.registro.vencimento > _0x18406a;
            const _0x121a8b = _0x56c4ed ? '✅' : '❌';
            const _0x5cbd32 = new Date(_0x238a4.registro.vencimento * 1000).toLocaleDateString("pt-BR");
            return "┃ " + (_0x199cf3 + 1) + " - " + _0x121a8b + " " + (_0x238a4.subject || "Sem nome") + "\n┃ Vence: " + _0x5cbd32;
          }).join("\n┃\n") + "\n┃\n┃ 0 - Cancelar\n┃\n╰━━━⊱「 𝐑𝐄𝐍𝐎𝐕𝐀𝐑 」⊰━━━╯\n\nDigite uma opção:",
          'options': {
            ...Object.fromEntries(_0x9c31b5.slice(0, 15).map((_0x24505e, _0x329c6a) => [String(_0x329c6a + 1), {
              'text': "✅ Renovando aluguel no grupo: " + _0x24505e.subject,
              'command': _0x12ee99 + "renovar_aluguel " + _0x24505e.id + " " + _0x1d0638,
              'edit': true
            }])),
            '0': {
              'close': true,
              'text': "❌ Renovação cancelada pelo usuário."
            }
          }
        }
      };
      await _0x1f6123(_0x5b416e, _0x5cc75c, _0x117c22.principal.text, _0x117c22.principal.options, {
        'menus': _0x117c22,
        'history': ["principal"]
      });
      return true;
    }
    if (_0x24dcb9.trim()) {
      return _0x3ca90d("*🔄 RENOVAÇÃO DE ALUGUEL - FORMATO INVÁLIDO*\n\n*Formatos aceitos no privado:*\n\n*Com grupo específico:*\n" + _0x12ee99 + "renovar_aluguel [grupo_id] [data/duração]\n\n*Com seleção de grupo:*\n" + _0x12ee99 + "renovar_aluguel [data/duração]\n\n*Formatos de tempo:*\n• Data: DD/MM/YYYY (exemplo: 31/12/2025)\n• Duração: /Xd, /Xh, /Xm (exemplo: /30d)\n\n*Exemplos válidos:*\n• " + _0x12ee99 + "renovar_aluguel 120363025918861132@g.us /30d\n• " + _0x12ee99 + "renovar_aluguel /30d\n• " + _0x12ee99 + "renovar_aluguel 31/12/2025");
    }
    let _0x5ba495 = await _0x26681.groupFetchAllParticipating();
    let _0x5c82a1 = Object.entries(_0x5ba495).slice(0).map(_0x45b478 => _0x45b478[1]);
    let _0x520d1f = _0x5c82a1.filter(_0x1f094b => !_0x1f094b.isCommunity && !_0x1f094b.isCommunityAnnounce && !_0x1f094b.isReadOnly);
    const _0x2e5a2c = [];
    for (const _0x8e399 of _0x520d1f) {
      const _0x571f3e = _0x2f4259.prepare("SELECT * FROM aluguel WHERE id_gp = ?").get(_0x8e399.id);
      if (_0x571f3e) {
        const _0x52fa2d = await _0x22baf5(_0x8e399.id);
        if (_0x52fa2d) {
          const _0xa2d1c7 = {
            ..._0x8e399
          };
          _0xa2d1c7.registro = _0x571f3e;
          _0x2e5a2c.push(_0xa2d1c7);
        }
      }
    }
    if (_0x2e5a2c.length === 0) {
      return _0x3ca90d("❌ Nenhum grupo com aluguel registrado e ativo encontrado.\n\nPara ativar:\n• Global: " + _0x12ee99 + "aluguel_global\n• Por grupo: " + _0x12ee99 + "aluguel (no grupo)");
    }
    const _0x238c1e = Math.floor(Date.now() / 1000);
    const _0x16b735 = _0x2e5a2c.filter(_0x2a4259 => _0x2a4259.registro.vencimento > _0x238c1e);
    const _0x2fe350 = _0x2e5a2c.filter(_0x1084d5 => _0x1084d5.registro.vencimento <= _0x238c1e);
    const _0x193aab = {
      submenu: "ativos"
    };
    const _0x2cafed = {
      submenu: "vencidos"
    };
    const _0x378c25 = {
      submenu: "todos"
    };
    const _0x49fb14 = {
      submenu: "ajuda"
    };
    const _0xa54e5b = {
      close: true
    };
    _0xa54e5b.text = "✅ Menu fechado com sucesso!";
    const _0x4a40c2 = {
      '1': _0x193aab,
      '2': _0x2cafed,
      '3': _0x378c25,
      '4': _0x49fb14,
      '5': _0xa54e5b
    };
    const _0x511ded = {
      text: "╭━━━⊱「 RENOVAÇÃO DE ALUGUEL 」⊰━━━╮\n┃\n┃ 1 - Grupos Ativos (" + _0x16b735.length + ") ✅\n┃ • Aluguéis ainda válidos\n┃\n┃ 2 - Grupos Vencidos (" + _0x2fe350.length + ") ❌\n┃ • Aluguéis que expiraram\n┃\n┃ 3 - Todos os Grupos (" + _0x2e5a2c.length + ") 📊\n┃ • Visualizar todos\n┃\n┃ 4 - Ajuda e Exemplos 📖\n┃ • Como usar o comando\n┃\n┃ 5 - Sair\n┃ • Encerra o menu\n┃\n╰━━━⊱「 𝐑𝐄𝐍𝐎𝐕𝐀𝐑 」⊰━━━╯\n\nDigite uma opção:",
      options: _0x4a40c2
    };
    const _0x2adca4 = {
      back: true
    };
    const _0x5e89da = {
      '0': _0x2adca4
    };
    const _0x29535a = {
      back: true
    };
    const _0x36c158 = {
      '0': _0x29535a
    };
    const _0x1271e8 = {
      back: true
    };
    const _0x11b68a = {
      '0': _0x1271e8
    };
    const _0x2409ad = {
      back: true
    };
    const _0x59b52e = {
      '0': _0x2409ad
    };
    const _0x1e670d = {
      text: "╭━━━⊱「 AJUDA - RENOVAÇÃO 」⊰━━━╮\n┃\n┃ 📖 Como usar o comando:\n┃\n┃ *Em grupo:*\n┃ " + _0x12ee99 + "renovar_aluguel [data/duração]\n┃\n┃ *No privado:*\n┃ " + _0x12ee99 + "renovar_aluguel [grupo_id] [data/duração]\n┃ ou\n┃ " + _0x12ee99 + "renovar_aluguel [data/duração] (menu)\n┃\n┃ *Como funciona a duração:*\n┃ • Se vencido: adiciona a partir de agora\n┃ • Se ativo: adiciona ao tempo restante\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐀𝐉𝐔𝐃𝐀 」⊰━━━╯",
      options: _0x59b52e
    };
    const _0xbf718d = {
      'principal': _0x511ded,
      'ativos': {
        'text': "╭━━━⊱「 GRUPOS ATIVOS 」⊰━━━╮\n┃\n" + (_0x16b735.length === 0 ? "┃ ❌ Nenhum grupo ativo encontrado\n┃" : _0x16b735.slice(0, 15).map((_0x40c901, _0x40a299) => {
          const _0x1c1c01 = new Date(_0x40c901.registro.vencimento * 1000).toLocaleDateString("pt-BR");
          return "┃ " + (_0x40a299 + 1) + " - ✅ " + (_0x40c901.subject || "Sem nome") + "\n┃ Vence: " + _0x1c1c01;
        }).join("\n┃\n")) + "\n┃\n┃ Digite o número do grupo e depois\n┃ o tempo para renovar:\n┃ Ex: 1 /30d ou 1 31/12/2025\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐀𝐓𝐈𝐕𝐎𝐒 」⊰━━━╯",
        'options': _0x5e89da
      },
      'vencidos': {
        'text': "╭━━━⊱「 GRUPOS VENCIDOS 」⊰━━━╮\n┃\n" + (_0x2fe350.length === 0 ? "┃ ❌ Nenhum grupo vencido encontrado\n┃" : _0x2fe350.slice(0, 15).map((_0x13f431, _0x35c89b) => {
          const _0x132843 = new Date(_0x13f431.registro.vencimento * 1000).toLocaleDateString("pt-BR");
          return "┃ " + (_0x35c89b + 1) + " - ❌ " + (_0x13f431.subject || "Sem nome") + "\n┃ Venceu: " + _0x132843;
        }).join("\n┃\n")) + "\n┃\n┃ Digite o número do grupo e depois\n┃ o tempo para renovar:\n┃ Ex: 1 /30d ou 1 31/12/2025\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐕𝐄𝐍𝐂𝐈𝐃𝐎𝐒 」⊰━━━╯",
        'options': _0x36c158
      },
      'todos': {
        'text': "╭━━━⊱「 TODOS OS GRUPOS 」⊰━━━╮\n┃\n" + _0x2e5a2c.slice(0, 15).map((_0x590a69, _0x34cbd0) => {
          const _0x29f3d3 = Math.floor(Date.now() / 1000);
          const _0x29e63b = _0x590a69.registro.vencimento > _0x29f3d3;
          const _0x5d3a18 = new Date(_0x590a69.registro.vencimento * 1000).toLocaleDateString("pt-BR");
          const _0x4dc413 = _0x29e63b ? '✅' : '❌';
          const _0x56259e = _0x29e63b ? "Vence" : "Venceu";
          return "┃ " + (_0x34cbd0 + 1) + " - " + _0x4dc413 + " " + (_0x590a69.subject || "Sem nome") + "\n┃ " + _0x56259e + ": " + _0x5d3a18;
        }).join("\n┃\n") + "\n┃\n┃ Digite o número do grupo e depois\n┃ o tempo para renovar:\n┃ Ex: 1 /30d ou 1 31/12/2025\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐓𝐎𝐃𝐎𝐒 」⊰━━━╯",
        'options': _0x11b68a
      },
      'ajuda': _0x1e670d
    };
    await _0x1f6123(_0x5b416e, _0x5cc75c, _0xbf718d.principal.text, _0xbf718d.principal.options, {
      'menus': _0xbf718d,
      'history': ["principal"]
    });
    return true;
  }
}, {
  'name': "rm_aluguel",
  'aliases': ["rmaluguel", "remove_aluguel"],
  'category': "dono",
  'description': "Remove um aluguel existente",
  'longDescription': "Remove completamente um aluguel do sistema. No grupo executa diretamente, no privado abre menu de seleção.",
  'usage': "rm_aluguel [grupo_id]",
  'example': "rm_aluguel",
  'menu': "dono",
  'menuSection': "Aluguel",
  'permissions': _0x545c66,
  'requirements': {},
  'execute': async ({
    conn: _0x26a9ab,
    info: _0x3a641d,
    from: _0x45e3a0,
    sender: _0xc4fb34,
    q: _0x314309,
    SoDono: _0x2edb11,
    Res_SoDono: _0x30abf5,
    isGroup: _0x4e1cf1,
    groupName: _0x85313c,
    pushname: _0x5bf951,
    prefix: _0x511c23,
    dataGp: _0x539763,
    nescessario: _0x19add3,
    BANCOP: _0x2ed0ee,
    createChoiceMenu: _0x3928fe,
    reply: _0x48fd47,
    getGroupSettings: _0x4d47a3,
    puxarTodosGrupos: _0x393d34,
    puxarGrupo: _0x3a5945
  }) => {
    if (!_0x2edb11) {
      return _0x48fd47(_0x30abf5);
    }
    function _0x1f3c0d(_0x145e8a, _0x5d4c52, _0x210e57, _0x2f57ce, _0x224586 = {}) {
      try {
        const _0x5c7b92 = _0x145e8a.prepare("SELECT historico FROM aluguel WHERE id_gp = ?").get(_0x5d4c52);
        let _0x243681 = [];
        if (_0x5c7b92 && _0x5c7b92.historico) {
          try {
            _0x243681 = JSON.parse(_0x5c7b92.historico);
          } catch (_0x459c87) {
            _0x243681 = [];
          }
        }
        const _0x506621 = {
          'timestamp': Math.floor(Date.now() / 1000),
          'action': _0x210e57,
          'user': _0x2f57ce,
          'details': _0x224586
        };
        _0x243681.push(_0x506621);
        if (_0x243681.length > 50) {
          _0x243681 = _0x243681.slice(-50);
        }
        _0x145e8a.prepare("UPDATE aluguel SET historico = ? WHERE id_gp = ?").run(JSON.stringify(_0x243681), _0x5d4c52);
        return true;
      } catch (_0x3aaa6f) {
        console.error("Erro ao registrar histórico:", _0x3aaa6f);
        return false;
      }
    }
    async function _0xa00b9a(_0x3c5db5, _0x470395 = null) {
      try {
        const _0x59c3b5 = _0x2ed0ee.prepare("SELECT * FROM aluguel WHERE id_gp = ?").get(_0x3c5db5);
        if (!_0x59c3b5) {
          return _0x48fd47("Este grupo não está na lista de aluguel, use: " + _0x511c23 + "listaaluguel para ver os grupos registrados.");
        }
        const _0x4cfc02 = _0x3c5db5.endsWith("@g.us") ? "GRUPO" : "USUÁRIO";
        let _0x2a8ed3;
        if (_0x4cfc02 === "GRUPO") {
          if (_0x470395) {
            _0x2a8ed3 = _0x470395;
          } else {
            try {
              const _0x425f99 = await _0x3a5945(_0x26a9ab, _0x3c5db5);
              _0x2a8ed3 = _0x425f99.subject || _0x59c3b5.nome || "Grupo Desconhecido";
            } catch (_0x1aa81a) {
              console.error("Erro ao buscar dados do grupo:", _0x1aa81a);
              _0x2a8ed3 = _0x59c3b5.nome || "Grupo Desconhecido";
            }
          }
        } else {
          _0x2a8ed3 = _0x5bf951 || _0x59c3b5.nome || "Usuário";
        }
        const _0x5c528e = {
          nome: _0x2a8ed3
        };
        _0x1f3c0d(_0x2ed0ee, _0x3c5db5, "remocao", _0xc4fb34, _0x5c528e);
        _0x2ed0ee.prepare("DELETE FROM aluguel WHERE id_gp = ?").run(_0x3c5db5);
        const _0x577cec = new Date().toLocaleTimeString("pt-BR");
        const _0x5c2b48 = new Date().toLocaleDateString("pt-BR");
        const _0x3ea4c3 = "*ALUGUEL REMOVIDO COM SUCESSO*\n\n*" + _0x4cfc02 + ":* " + _0x2a8ed3 + "\n*ID:* " + _0x3c5db5 + "\n*DATA DA REMOÇÃO:* " + _0x5c2b48 + "\n*HORA DA REMOÇÃO:* " + _0x577cec + "\n\n*O ALUGUEL FOI COMPLETAMENTE REMOVIDO DO SISTEMA*";
        _0x48fd47(_0x3ea4c3);
        if (!_0x4e1cf1 && _0x4cfc02 === "GRUPO") {
          try {
            const _0x1b25ea = {
              text: "🔔 *ALUGUEL REMOVIDO*\n\n📅 *Removido em:* " + _0x5c2b48 + " às " + _0x577cec + "\n👤 *Removido por:* " + _0x5bf951 + "\n\n_Aluguel removido remotamente pelo proprietário._"
            };
            await _0x26a9ab.sendMessage(_0x3c5db5, _0x1b25ea);
          } catch (_0x88ac28) {
            console.error("Erro ao enviar notificação para o grupo:", _0x88ac28);
          }
        }
        return true;
      } catch (_0x1c4535) {
        console.error("Erro ao remover aluguel:", _0x1c4535);
        return _0x48fd47("Erro ao remover aluguel. Por favor, tente novamente.");
      }
    }
    if (_0x4e1cf1) {
      return await _0xa00b9a(_0x45e3a0, _0x85313c);
    }
    if (!_0x2edb11) {
      return await _0xa00b9a(_0x45e3a0, _0x5bf951);
    }
    const _0x85646 = _0x314309.trim().split(" ");
    if (_0x85646.length >= 1 && _0x85646[0].includes("@g.us")) {
      const _0x23f073 = _0x85646[0];
      return await _0xa00b9a(_0x23f073);
    }
    if (_0x314309.trim()) {
      return _0x48fd47("*❌ REMOÇÃO DE ALUGUEL - FORMATO INVÁLIDO*\n\n*Formato aceito no privado:*\n\n*Com grupo específico:*\n" + _0x511c23 + "rm_aluguel [grupo_id]\n\n*Exemplo válido:*\n• " + _0x511c23 + "rm_aluguel 120363025918861132@g.us");
    }
    let _0x3a7500 = await _0x26a9ab.groupFetchAllParticipating();
    let _0x148c77 = Object.entries(_0x3a7500).slice(0).map(_0x3af7da => _0x3af7da[1]);
    let _0x4a11f7 = _0x148c77.filter(_0x29eab9 => !_0x29eab9.isCommunity && !_0x29eab9.isCommunityAnnounce && !_0x29eab9.isReadOnly);
    const _0xac5776 = [];
    for (const _0x153e1b of _0x4a11f7) {
      const _0x321f8c = _0x2ed0ee.prepare("SELECT * FROM aluguel WHERE id_gp = ?").get(_0x153e1b.id);
      if (_0x321f8c) {
        const _0x3c435e = {
          ..._0x153e1b
        };
        _0x3c435e.registro = _0x321f8c;
        _0xac5776.push(_0x3c435e);
      }
    }
    if (_0xac5776.length === 0) {
      return _0x48fd47("❌ Nenhum grupo com aluguel registrado encontrado.\n\nUse " + _0x511c23 + "listaaluguel para verificar aluguéis ativos.");
    }
    const _0x3c4e9a = Math.floor(Date.now() / 1000);
    const _0x4c721f = _0xac5776.filter(_0x88f4bd => _0x88f4bd.registro.vencimento > _0x3c4e9a);
    const _0x50d348 = _0xac5776.filter(_0x1c7b2b => _0x1c7b2b.registro.vencimento <= _0x3c4e9a);
    const _0x84218f = {
      submenu: "ativos"
    };
    const _0x3e46c6 = {
      submenu: "vencidos"
    };
    const _0x41439a = {
      submenu: "todos"
    };
    const _0x7de2e6 = {
      submenu: "ajuda"
    };
    const _0x26659a = {
      close: true,
      text: "✅ Menu fechado com sucesso!"
    };
    const _0xe24f2 = {
      '1': _0x84218f,
      '2': _0x3e46c6,
      '3': _0x41439a,
      '4': _0x7de2e6,
      '5': _0x26659a
    };
    const _0x1c0b49 = {
      text: "╭━━━⊱「 REMOÇÃO DE ALUGUEL 」⊰━━━╮\n┃\n┃ ⚠️ *ATENÇÃO:* Esta ação é irreversível!\n┃\n┃ 1 - Grupos Ativos (" + _0x4c721f.length + ") ✅\n┃ • Aluguéis ainda válidos\n┃\n┃ 2 - Grupos Vencidos (" + _0x50d348.length + ") ❌\n┃ • Aluguéis que expiraram\n┃\n┃ 3 - Todos os Grupos (" + _0xac5776.length + ") 📊\n┃ • Visualizar todos\n┃\n┃ 4 - Ajuda e Exemplos 📖\n┃ • Como usar o comando\n┃\n┃ 5 - Sair\n┃ • Encerra o menu\n┃\n╰━━━⊱「 𝐑𝐄𝐌𝐎𝐕𝐄𝐑 」⊰━━━╯\n\nDigite uma opção:",
      options: _0xe24f2
    };
    const _0xce9011 = {
      back: true
    };
    const _0x37b62c = {
      back: true
    };
    const _0x415dfd = {
      back: true
    };
    const _0x475747 = {
      back: true
    };
    const _0x100eb5 = {
      '0': _0x475747
    };
    const _0xd03365 = {
      'principal': _0x1c0b49,
      'ativos': {
        'text': "╭━━━⊱「 GRUPOS ATIVOS 」⊰━━━╮\n┃\n⚠️ *ATENÇÃO:* Remoção é irreversível!\n┃\n" + (_0x4c721f.length === 0 ? "┃ ❌ Nenhum grupo ativo encontrado\n┃" : _0x4c721f.slice(0, 15).map((_0x24dc70, _0x22ddee) => {
          const _0x10e87d = new Date(_0x24dc70.registro.vencimento * 1000).toLocaleDateString("pt-BR");
          return "┃ " + (_0x22ddee + 1) + " - ✅ " + (_0x24dc70.subject || "Sem nome") + "\n┃ Vence: " + _0x10e87d;
        }).join("\n┃\n")) + "\n┃\n┃ Digite o número do grupo para remover:\n┃ Ex: 1\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐀𝐓𝐈𝐕𝐎𝐒 」⊰━━━╯",
        'options': {
          ...Object.fromEntries(_0x4c721f.slice(0, 15).map((_0x12f7d7, _0x4404ad) => [String(_0x4404ad + 1), {
            'text': "⚠️ Removendo aluguel do grupo: " + _0x12f7d7.subject,
            'command': _0x511c23 + "rm_aluguel " + _0x12f7d7.id,
            'edit': true
          }])),
          '0': _0xce9011
        }
      },
      'vencidos': {
        'text': "╭━━━⊱「 GRUPOS VENCIDOS 」⊰━━━╮\n┃\n⚠️ *ATENÇÃO:* Remoção é irreversível!\n┃\n" + (_0x50d348.length === 0 ? "┃ ❌ Nenhum grupo vencido encontrado\n┃" : _0x50d348.slice(0, 15).map((_0x28de44, _0xc7057e) => {
          const _0x392227 = new Date(_0x28de44.registro.vencimento * 1000).toLocaleDateString("pt-BR");
          return "┃ " + (_0xc7057e + 1) + " - ❌ " + (_0x28de44.subject || "Sem nome") + "\n┃ Venceu: " + _0x392227;
        }).join("\n┃\n")) + "\n┃\n┃ Digite o número do grupo para remover:\n┃ Ex: 1\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐕𝐄𝐍𝐂𝐈𝐃𝐎𝐒 」⊰━━━╯",
        'options': {
          ...Object.fromEntries(_0x50d348.slice(0, 15).map((_0x98e8ec, _0x398706) => [String(_0x398706 + 1), {
            'text': "⚠️ Removendo aluguel do grupo: " + _0x98e8ec.subject,
            'command': _0x511c23 + "rm_aluguel " + _0x98e8ec.id,
            'edit': true
          }])),
          '0': _0x37b62c
        }
      },
      'todos': {
        'text': "╭━━━⊱「 TODOS OS GRUPOS 」⊰━━━╮\n┃\n⚠️ *ATENÇÃO:* Remoção é irreversível!\n┃\n" + _0xac5776.slice(0, 15).map((_0x172ee3, _0x3ee9e0) => {
          const _0x1660fe = Math.floor(Date.now() / 1000);
          const _0x2e5343 = _0x172ee3.registro.vencimento > _0x1660fe;
          const _0x55b390 = new Date(_0x172ee3.registro.vencimento * 1000).toLocaleDateString("pt-BR");
          const _0x12e256 = _0x2e5343 ? '✅' : '❌';
          const _0x3fda87 = _0x2e5343 ? "Vence" : "Venceu";
          return "┃ " + (_0x3ee9e0 + 1) + " - " + _0x12e256 + " " + (_0x172ee3.subject || "Sem nome") + "\n┃ " + _0x3fda87 + ": " + _0x55b390;
        }).join("\n┃\n") + "\n┃\n┃ Digite o número do grupo para remover:\n┃ Ex: 1\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐓𝐎𝐃𝐎𝐒 」⊰━━━╯",
        'options': {
          ...Object.fromEntries(_0xac5776.slice(0, 15).map((_0x3c22d3, _0x42b2dc) => [String(_0x42b2dc + 1), {
            'text': "⚠️ Removendo aluguel do grupo: " + _0x3c22d3.subject,
            'command': _0x511c23 + "rm_aluguel " + _0x3c22d3.id,
            'edit': true
          }])),
          '0': _0x415dfd
        }
      },
      'ajuda': {
        'text': "╭━━━⊱「 AJUDA - REMOÇÃO 」⊰━━━╮\n┃\n┃ 📖 Como usar o comando:\n┃\n┃ *Em grupo:*\n┃ " + _0x511c23 + "rm_aluguel\n┃ • Remove o aluguel do grupo atual\n┃\n┃ *No privado:*\n┃ " + _0x511c23 + "rm_aluguel [grupo_id]\n┃ ou\n┃ " + _0x511c23 + "rm_aluguel (menu de seleção)\n┃\n┃ ⚠️ *IMPORTANTE:*\n┃ • A remoção é irreversível\n┃ • Todos os dados serão perdidos\n┃ • Use com cuidado!\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐀𝐉𝐔𝐃𝐀 」⊰━━━╯",
        'options': _0x100eb5
      }
    };
    await _0x3928fe(_0x45e3a0, _0xc4fb34, _0xd03365.principal.text, _0xd03365.principal.options, {
      'menus': _0xd03365,
      'history': ["principal"]
    });
    return true;
  }
}, {
  'name': "add_contrat",
  'aliases': ["rm_contrat"],
  'category': "dono",
  'description': "Gerencia contratantes do sistema de aluguel",
  'longDescription': "Adiciona ou remove contratantes do sistema de aluguel para o grupo atual.",
  'usage': "add_contrat @usuario ou rm_contrat @usuario",
  'example': "add_contrat @usuario",
  'menu': "dono",
  'menuSection': "Aluguel",
  'permissions': _0x334f87,
  'requirements': _0x3da2c2,
  'execute': async ({
    conn: _0x3a9987,
    info: _0x2f5087,
    from: _0x3771c1,
    command: _0x240c52,
    SoDono: _0x481ed4,
    Res_SoDono: _0x2cf707,
    isGroup: _0x2af89a,
    menc_os2: _0x374ce6,
    BANCOP: _0x59914c,
    prefix: _0x57b641,
    reply: _0x3a33ed
  }) => {
    if (!_0x481ed4) {
      return _0x3a33ed(_0x2cf707);
    }
    if (!_0x2af89a) {
      return _0x3a33ed("Este comando só pode ser usado em grupos.");
    }
    let _0x2ec998 = _0x240c52 === "add_contrat" ? "adicionar" : "remover";
    if (!_0x374ce6) {
      return _0x3a33ed("Mencione quem você deseja adicionar ou remover como contratante do aluguel deste grupo");
    }
    if (!_0x374ce6 || !/^\d{11,15}@s\.whatsapp\.net$/.test(_0x374ce6)) {
      return _0x3a33ed("ID de contratante inválido. Certifique-se de usar o formato correto.");
    }
    try {
      const _0x1c6257 = _0x59914c.prepare("SELECT * FROM aluguel WHERE id_gp = ?").get(_0x3771c1);
      if (!_0x1c6257) {
        return _0x3a33ed("Este grupo não está na lista de aluguel, use: " + _0x57b641 + "listaaluguel para ver os grupos registrados.");
      }
      let _0x14300c = [];
      try {
        _0x14300c = JSON.parse(_0x1c6257.contratantes || '[]');
      } catch (_0x2daa85) {
        _0x14300c = [];
      }
      if (_0x2ec998 === "adicionar") {
        if (_0x14300c.includes(_0x374ce6)) {
          return _0x3a33ed("Este ID já está na lista de contratantes.");
        }
        _0x14300c.push(_0x374ce6);
        _0x3a33ed("Contratante adicionado com sucesso.");
      } else {
        if (_0x2ec998 === "remover") {
          if (!_0x14300c.includes(_0x374ce6)) {
            return _0x3a33ed("Este ID não está na lista de contratantes.");
          }
          _0x14300c = _0x14300c.filter(_0x17a5e4 => _0x17a5e4 !== _0x374ce6);
          _0x3a33ed("Contratante removido com sucesso.");
        }
      }
      _0x59914c.prepare("UPDATE aluguel SET contratantes = ? WHERE id_gp = ?").run(JSON.stringify(_0x14300c), _0x3771c1);
      return true;
    } catch (_0xc9b886) {
      console.error("Erro ao " + _0x2ec998 + " contratante:", _0xc9b886);
      _0x3a33ed("Ocorreu um erro ao " + _0x2ec998 + " o contratante. Tente novamente.");
      return false;
    }
  }
}, {
  'name': "verificar_aluguel",
  'aliases': ["status_aluguel", "check_aluguel"],
  'category': "grupo",
  'description': "Verifica o status do aluguel do grupo",
  'longDescription': "Mostra informações sobre o status do aluguel do grupo, incluindo data de vencimento e tempo restante. No privado, permite verificar qualquer grupo através de menu interativo.",
  'usage': "verificar_aluguel [grupo_id]",
  'example': "verificar_aluguel",
  'menu': "grupo",
  'menuSection': "Aluguel",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x142d45,
    info: _0x254ad9,
    from: _0xce4a14,
    sender: _0x3fb1b5,
    q: _0x3191f0,
    isGroup: _0x5f1413,
    isGroupAdmins: _0x1fcffb,
    Res_SoAdm: _0x18d30c,
    groupName: _0x3b4e31,
    BANCOP: _0x5477e6,
    prefix: _0x136d33,
    createChoiceMenu: _0x553477,
    reply: _0x28e1f6
  }) => {
    function _0x46dd94(_0x24f22e) {
      const _0x10f9c9 = Math.floor(_0x24f22e / 86400);
      const _0x861705 = Math.floor(_0x24f22e % 86400 / 3600);
      const _0x4471f3 = Math.floor(_0x24f22e % 3600 / 60);
      const _0x5940bb = Math.floor(_0x24f22e % 60);
      let _0x544fc3 = '';
      if (_0x10f9c9 > 0) {
        _0x544fc3 += _0x10f9c9 + " Dia" + (_0x10f9c9 !== 1 ? 's' : '') + " ";
      }
      if (_0x861705 > 0 || _0x10f9c9 > 0) {
        _0x544fc3 += _0x861705 + " Hora" + (_0x861705 !== 1 ? 's' : '') + " ";
      }
      if (_0x4471f3 > 0 || _0x861705 > 0 || _0x10f9c9 > 0) {
        _0x544fc3 += _0x4471f3 + " Minuto" + (_0x4471f3 !== 1 ? 's' : '') + " ";
      }
      _0x544fc3 += _0x5940bb + " Segundo" + (_0x5940bb !== 1 ? 's' : '');
      return _0x544fc3.trim();
    }
    function _0x390f6c(_0x480ddb) {
      if (!_0x480ddb || _0x480ddb.length === 0) {
        return "Nenhum histórico encontrado.";
      }
      let _0x1a126f = "*📋 HISTÓRICO DE AÇÕES*\n\n";
      const _0x212964 = _0x480ddb.sort((_0x3e36ab, _0xf49bdf) => _0xf49bdf.timestamp - _0x3e36ab.timestamp);
      _0x212964.slice(0, 5).forEach((_0x30ae99, _0x1d1838) => {
        const _0x149f17 = new Date(_0x30ae99.timestamp * 1000).toLocaleDateString("pt-BR");
        const _0x45f6eb = new Date(_0x30ae99.timestamp * 1000).toLocaleTimeString("pt-BR");
        let _0x541668 = '';
        switch (_0x30ae99.action) {
          case "registro":
            _0x541668 = "📝 Registro";
            break;
          case "renovacao":
            _0x541668 = "🔄 Renovação";
            break;
          case "remocao":
            _0x541668 = "🗑️ Remoção";
            break;
          default:
            _0x541668 = _0x30ae99.action;
        }
        _0x1a126f += '*' + (_0x1d1838 + 1) + ".* " + _0x541668 + "\n";
        _0x1a126f += "📅 " + _0x149f17 + " às " + _0x45f6eb + "\n";
        _0x1a126f += "👤 " + _0x30ae99.user.split('@')[0] + "\n";
        if (_0x30ae99.details && Object.keys(_0x30ae99.details).length > 0) {
          if (_0x30ae99.details.vencimento) {
            const _0x1a0cb7 = new Date(_0x30ae99.details.vencimento * 1000).toLocaleDateString("pt-BR");
            _0x1a126f += "⏰ Vencimento: " + _0x1a0cb7 + "\n";
          }
          if (_0x30ae99.details.motivo) {
            _0x1a126f += "💭 Motivo: " + _0x30ae99.details.motivo + "\n";
          }
        }
        _0x1a126f += "\n";
      });
      return _0x1a126f;
    }
    function _0x1e429b(_0xc8ad7d, _0x2ceab3) {
      try {
        const _0x4e2ded = _0x5477e6.prepare("SELECT * FROM aluguel WHERE id_gp = ?").get(_0xc8ad7d);
        if (!_0x4e2ded) {
          return _0x28e1f6("Este grupo não está na lista de aluguel.");
        }
        const _0x4534eb = Math.floor(Date.now() / 1000);
        const _0x10053d = _0x4e2ded.vencimento;
        const _0x440498 = _0x10053d <= _0x4534eb ? "inativo" : "ativo";
        const _0xb95bc8 = {
          hour12: false
        };
        const _0x4a675e = new Date(_0x10053d * 1000).toLocaleTimeString("pt-BR", _0xb95bc8);
        const _0x175077 = new Date(_0x10053d * 1000).toLocaleDateString("pt-BR");
        let _0x4438f7 = _0x46dd94(_0x10053d - _0x4534eb);
        if (_0x10053d <= _0x4534eb) {
          _0x4438f7 = "Aluguel Vencido";
        }
        let _0x4695ac = [];
        try {
          _0x4695ac = JSON.parse(_0x4e2ded.historico || '[]');
        } catch (_0x1a42d9) {
          _0x4695ac = [];
        }
        const _0x1efb8f = _0x2ceab3 || _0x4e2ded.nome;
        const _0x14bbb9 = _0x4e2ded.renovacoes || 0;
        const _0x156752 = new Date(_0x4e2ded.data_registro * 1000).toLocaleDateString("pt-BR");
        let _0x5934e5 = "*📊 DETALHES DO ALUGUEL*\n\n";
        _0x5934e5 += "*Grupo:* " + _0x1efb8f + "\n";
        _0x5934e5 += "*ID:* " + _0xc8ad7d + "\n";
        _0x5934e5 += "*Status:* " + (_0x440498 === "ativo" ? "✅ Ativo" : "❌ Inativo") + "\n";
        _0x5934e5 += "*Data De Vencimento:* " + _0x175077 + "\n";
        _0x5934e5 += "*Hora De Vencimento:* " + _0x4a675e + "\n";
        _0x5934e5 += "*Tempo Restante:* " + _0x4438f7 + "\n";
        _0x5934e5 += "*Data Registro:* " + _0x156752 + "\n";
        _0x5934e5 += "*Renovações:* " + _0x14bbb9 + "\n\n";
        if (_0x4695ac.length > 0) {
          _0x5934e5 += _0x390f6c(_0x4695ac);
        } else {
          _0x5934e5 += "*📋 HISTÓRICO:* Nenhum histórico encontrado.";
        }
        return _0x28e1f6(_0x5934e5);
      } catch (_0x4edf19) {
        console.error("Erro ao verificar status de aluguel:", _0x4edf19);
        return _0x28e1f6("Ocorreu um erro ao verificar o status do aluguel. Tente novamente.");
      }
    }
    if (_0x5f1413) {
      if (!_0x1fcffb) {
        return _0x28e1f6(_0x18d30c);
      }
      return _0x1e429b(_0xce4a14, _0x3b4e31);
    }
    const _0x59603c = _0x3191f0.trim();
    if (_0x59603c && _0x59603c.includes("@g.us")) {
      return _0x1e429b(_0x59603c, null);
    }
    const _0x580411 = Math.floor(Date.now() / 1000);
    const _0x3d51d4 = _0x5477e6.prepare("SELECT * FROM aluguel WHERE is_grupo = 1 AND vencimento > ? ORDER BY vencimento ASC LIMIT 15").all(_0x580411);
    const _0x2e4d64 = _0x5477e6.prepare("SELECT * FROM aluguel WHERE is_grupo = 1 AND vencimento <= ? ORDER BY vencimento DESC LIMIT 15").all(_0x580411);
    const _0x53724b = _0x5477e6.prepare("SELECT * FROM aluguel WHERE is_grupo = 1 ORDER BY vencimento ASC LIMIT 15").all();
    const _0x5c981e = _0x5477e6.prepare("SELECT * FROM aluguel WHERE is_grupo = 0 ORDER BY vencimento ASC LIMIT 15").all();
    const _0x2fbcf6 = {
      submenu: "ativos"
    };
    const _0x4f6c12 = {
      submenu: "inativos"
    };
    const _0x4f3ae4 = {
      submenu: "todos"
    };
    const _0x3c7795 = {
      submenu: "contatos"
    };
    const _0x169c29 = {
      close: true,
      text: "✅ Menu fechado com sucesso!"
    };
    const _0x1abf57 = {
      '1': _0x2fbcf6,
      '2': _0x4f6c12,
      '3': _0x4f3ae4,
      '4': _0x3c7795,
      '5': _0x169c29
    };
    const _0x1b08d2 = {
      "text": "╭━━━⊱「 VERIFICAÇÃO DE ALUGUÉIS 」⊰━━━╮\n┃\n┃ 1 - Grupos Ativos (" + _0x3d51d4.length + ") ✅\n┃ • Aluguéis em dia\n┃\n┃ 2 - Grupos Inativos (" + _0x2e4d64.length + ") ❌\n┃ • Aluguéis vencidos\n┃\n┃ 3 - Todos os Grupos (" + _0x53724b.length + ") 📊\n┃ • Visualizar todos\n┃\n┃ 4 - Contatos (" + _0x5c981e.length + ") 👤\n┃ • Usuários individuais\n┃\n┃ 5 - Sair\n┃ • Encerra o menu\n┃\n╰━━━⊱「 𝐕𝐄𝐑𝐈𝐅𝐈𝐂𝐀𝐑 」⊰━━━╯\n\nDigite uma opção:",
      options: _0x1abf57
    };
    const _0x1f9093 = {
      back: true
    };
    const _0x4cb7a4 = {
      "back": true
    };
    const _0x2bfc7d = {
      back: true
    };
    const _0x54defa = {
      back: true
    };
    const _0x198511 = {
      'principal': _0x1b08d2,
      'ativos': {
        'text': "╭━━━⊱「 GRUPOS ATIVOS 」⊰━━━╮\n┃\n" + (_0x3d51d4.length === 0 ? "┃ ❌ Nenhum grupo ativo encontrado\n┃" : _0x3d51d4.map((_0x411794, _0x5628f1) => {
          const _0x36440a = new Date(_0x411794.vencimento * 1000).toLocaleDateString("pt-BR");
          return "┃ " + (_0x5628f1 + 1) + " - ✅ " + (_0x411794.nome || "Sem nome") + "\n┃   Vence: " + _0x36440a;
        }).join("\n┃\n")) + "\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐀𝐓𝐈𝐕𝐎𝐒 」⊰━━━╯\n\nDigite uma opção:",
        'options': {
          ...Object.fromEntries(_0x3d51d4.map((_0x8215ed, _0x39eae6) => [String(_0x39eae6 + 1), {
            'text': "✅ Verificando " + _0x8215ed.nome + "...",
            'command': _0x136d33 + "verificar_aluguel " + _0x8215ed.id_gp,
            'edit': true
          }])),
          '0': _0x1f9093
        }
      },
      'inativos': {
        'text': "╭━━━⊱「 GRUPOS INATIVOS 」⊰━━━╮\n┃\n" + (_0x2e4d64.length === 0 ? "┃ ❌ Nenhum grupo inativo encontrado\n┃" : _0x2e4d64.map((_0x5b4317, _0x5bd270) => {
          const _0x66b0bc = new Date(_0x5b4317.vencimento * 1000).toLocaleDateString("pt-BR");
          return "┃ " + (_0x5bd270 + 1) + " - ❌ " + (_0x5b4317.nome || "Sem nome") + "\n┃   Venceu: " + _0x66b0bc;
        }).join("\n┃\n")) + "\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐈𝐍𝐀𝐓𝐈𝐕𝐎𝐒 」⊰━━━╯\n\nDigite uma opção:",
        'options': {
          ...Object.fromEntries(_0x2e4d64.map((_0x244f94, _0x1001ce) => [String(_0x1001ce + 1), {
            'text': "✅ Verificando " + _0x244f94.nome + "...",
            'command': _0x136d33 + "verificar_aluguel " + _0x244f94.id_gp,
            'edit': true
          }])),
          '0': _0x4cb7a4
        }
      },
      'todos': {
        'text': "╭━━━⊱「 TODOS OS GRUPOS 」⊰━━━╮\n┃\n" + (_0x53724b.length === 0 ? "┃ ❌ Nenhum grupo encontrado\n┃" : _0x53724b.map((_0x477d75, _0x59cc2a) => {
          const _0x287561 = _0x477d75.vencimento > _0x580411;
          const _0x24db11 = new Date(_0x477d75.vencimento * 1000).toLocaleDateString("pt-BR");
          const _0x3912d6 = _0x287561 ? '✅' : '❌';
          const _0x224bdc = _0x287561 ? "Vence" : "Venceu";
          return "┃ " + (_0x59cc2a + 1) + " - " + _0x3912d6 + " " + (_0x477d75.nome || "Sem nome") + "\n┃   " + _0x224bdc + ": " + _0x24db11;
        }).join("\n┃\n")) + "\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐓𝐎𝐃𝐎𝐒 」⊰━━━╯\n\nDigite uma opção:",
        'options': {
          ...Object.fromEntries(_0x53724b.map((_0x41a0fb, _0x4146cb) => [String(_0x4146cb + 1), {
            'text': "✅ Verificando " + _0x41a0fb.nome + "...",
            'command': _0x136d33 + "verificar_aluguel " + _0x41a0fb.id_gp,
            'edit': true
          }])),
          '0': _0x2bfc7d
        }
      },
      'contatos': {
        'text': "╭━━━⊱「 CONTATOS 」⊰━━━╮\n┃\n" + (_0x5c981e.length === 0 ? "┃ ❌ Nenhum contato encontrado\n┃" : _0x5c981e.map((_0x3e1d0f, _0x1fc0cb) => {
          const _0x3a5484 = _0x3e1d0f.vencimento > _0x580411;
          const _0x5627db = new Date(_0x3e1d0f.vencimento * 1000).toLocaleDateString("pt-BR");
          const _0x37e342 = _0x3a5484 ? '✅' : '❌';
          const _0x3083d2 = _0x3a5484 ? "Vence" : "Venceu";
          return "┃ " + (_0x1fc0cb + 1) + " - " + _0x37e342 + " " + (_0x3e1d0f.nome || "Sem nome") + "\n┃   " + _0x3083d2 + ": " + _0x5627db;
        }).join("\n┃\n")) + "\n┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐂𝐎𝐍𝐓𝐀𝐓𝐎𝐒 」⊰━━━╯\n\nDigite uma opção:",
        'options': {
          ...Object.fromEntries(_0x5c981e.map((_0x7f30a2, _0x4b127d) => [String(_0x4b127d + 1), {
            'text': "✅ Verificando " + _0x7f30a2.nome + "...",
            'command': _0x136d33 + "verificar_aluguel " + _0x7f30a2.id_gp,
            'edit': true
          }])),
          '0': _0x54defa
        }
      }
    };
    await _0x553477(_0xce4a14, _0x3fb1b5, _0x198511.principal.text, _0x198511.principal.options, {
      'menus': _0x198511,
      'history': ["principal"]
    });
    return true;
  }
}, {
  'name': "bcaluguel",
  'aliases': [],
  'category': "dono",
  'description': "Inicia um menu para transmissão em grupos de aluguel",
  'longDescription': "Inicia um menu interativo para enviar uma mensagem de transmissão para diferentes categorias de grupos de aluguel.",
  'usage': "bcaluguel [mensagem]",
  'example': "bcaluguel *ALUGUEL VENCIDO*",
  'menu': "dono",
  'menuSection': "Aluguel",
  'permissions': _0x25cbbe,
  'requirements': _0x2b45ff,
  'execute': async ({
    conn: _0x3d6ba6,
    info: _0x4f0412,
    from: _0x28cbb9,
    sender: _0x384d24,
    q: _0x3bb74e,
    SoDono: _0x2d6d66,
    prefix: _0x1e5cb4,
    command: _0x4bdcf8,
    getUniqueKey: _0x53a810,
    optionsBuffer: _0x2bc394,
    flushOptionsBuffer: _0x34f206,
    createChoiceMenu: _0x4c8530,
    reply: _0x18c77d
  }) => {
    if (!_0x2d6d66 && !_0x4f0412.key.fromMe) {
      return _0x18c77d("Este comando só o bot ou o dono pode executar..");
    }
    if (!_0x3bb74e) {
      return _0x18c77d("Qual mensagem você deseja enviar? Utilize desta maneira:\n" + (_0x1e5cb4 + _0x4bdcf8) + " *ALUGUEL VENCIDO*");
    }
    const _0x398c4e = _0x53a810(_0x28cbb9, _0x384d24);
    if (_0x2bc394[_0x398c4e]) {
      delete _0x2bc394[_0x398c4e];
      _0x34f206();
    }
    const _0x3a2dee = {
      'principal': {
        'text': "*transmissão nos gps do sistema de aluguel*\n\n*Qual categoria você gostaria de enviar está mensagem?*\n\n*1 - Em Dia*\n*2 - Vencido*\n*3 - Não Registrado*\n*4 - Todos*\n*5 - 7 Dias*",
        'options': {
          '1': {
            'command': _0x1e5cb4 + _0x4bdcf8 + "2 em dia|" + _0x3bb74e,
            'text': "✅ Enviando mensagem para grupos em dia...",
            'edit': true
          },
          '2': {
            'command': _0x1e5cb4 + _0x4bdcf8 + "2 vencido|" + _0x3bb74e,
            'text': "✅ Enviando mensagem para grupos vencidos...",
            'edit': true
          },
          '3': {
            'command': _0x1e5cb4 + _0x4bdcf8 + "2 nao registrado|" + _0x3bb74e,
            'text': "✅ Enviando mensagem para grupos não registrados...",
            'edit': true
          },
          '4': {
            'command': _0x1e5cb4 + _0x4bdcf8 + "2 todos|" + _0x3bb74e,
            'text': "✅ Enviando mensagem para todos os grupos...",
            'edit': true
          },
          '5': {
            'command': _0x1e5cb4 + _0x4bdcf8 + "2 7dias|" + _0x3bb74e,
            'text': "✅ Enviando mensagem para grupos com 7 dias...",
            'edit': true
          }
        }
      }
    };
    await _0x4c8530(_0x28cbb9, _0x384d24, _0x3a2dee.principal.text, _0x3a2dee.principal.options, {
      'menus': _0x3a2dee,
      'history': ["principal"]
    });
    return true;
  }
}, {
  'name': "bcaluguel2",
  'aliases': [],
  'category': "dono",
  'description': "Envia transmissão para grupos de aluguel",
  'longDescription': "Envia uma mensagem de transmissão para grupos específicos baseados na categoria de aluguel selecionada.",
  'usage': "bcaluguel2 [categoria]|[mensagem]",
  'example': "bcaluguel2 todos|Mensagem importante",
  'menu': "dono",
  'menuSection': "Aluguel",
  'permissions': _0x3ff62d,
  'requirements': _0x152cc0,
  'execute': async ({
    conn: _0x54852f,
    info: _0xd92ca4,
    from: _0x3de393,
    q: _0x19598e,
    prefix: _0x16a482,
    command: _0x14ea5a,
    getGroupAdmins: _0x1f0332,
    sleep: _0x5d34b0,
    numerodono_ofc: _0x37c9ea,
    BANCOP: _0x49f27a,
    reply: _0xf8b013,
    puxarGrupo: _0x48dfb8
  }) => {
    if (!_0x19598e.trim()) {
      return _0xf8b013("Texto onde?\n\nExemplo : " + (_0x16a482 + _0x14ea5a) + " BOA VISTA");
    }
    let [_0x3d7be5, _0x1edc8d] = _0x19598e.trim().normalize("NFD").replace(/[\u0300-\u036f]/g, '').split('|').map(_0x14f4e2 => _0x14f4e2.trim());
    let _0x3a5d59 = await _0x54852f.groupFetchAllParticipating();
    let _0x77d7dc = Object.entries(_0x3a5d59).map(_0x5575a6 => _0x5575a6[1]);
    let _0x39c5be = Math.floor(Date.now() / 1000);
    let _0x3f0441 = [];
    let _0x5811b7 = [];
    if (!_0x1edc8d) {
      _0x1edc8d = _0x3d7be5;
      _0x3d7be5 = '';
    }
    try {
      let _0x33f528 = _0x77d7dc.map(_0x5103cf => _0x5103cf.id);
      const _0x433f5a = _0x33f528.map(() => '?').join(',');
      _0x49f27a.prepare("DELETE FROM aluguel WHERE is_grupo = 1 AND id_gp NOT IN (" + _0x433f5a + ')').run(_0x33f528);
      switch (_0x3d7be5.toLowerCase()) {
        case "vencido":
          _0x3f0441 = _0x49f27a.prepare("SELECT id_gp FROM aluguel WHERE is_grupo = 1 AND vencimento <= ?").all(_0x39c5be).map(_0x1c3383 => _0x1c3383.id_gp);
          break;
        case "em dia":
          _0x3f0441 = _0x49f27a.prepare("SELECT id_gp FROM aluguel WHERE is_grupo = 1 AND vencimento > ?").all(_0x39c5be).map(_0x1f4598 => _0x1f4598.id_gp);
          break;
        case "nao registrado":
          const _0x14c9be = _0x49f27a.prepare("SELECT id_gp FROM aluguel WHERE is_grupo = 1").all().map(_0x1c48ce => _0x1c48ce.id_gp);
          _0x3f0441 = _0x77d7dc.filter(_0x4aa9da => !_0x14c9be.includes(_0x4aa9da.id) && !_0x4aa9da.isCommunity && !_0x4aa9da.isCommunityAnnounce).map(_0x119490 => _0x119490.id);
          break;
        case "7dias":
          const _0x30884c = _0x39c5be + 604800;
          _0x3f0441 = _0x49f27a.prepare("SELECT id_gp FROM aluguel WHERE is_grupo = 1 AND vencimento > ? AND vencimento <= ?").all(_0x39c5be, _0x30884c).map(_0x141ad2 => _0x141ad2.id_gp);
          break;
        case "todos":
        default:
          _0x3f0441 = _0x77d7dc.filter(_0x14a747 => !_0x14a747.isCommunity && !_0x14a747.isCommunityAnnounce).map(_0x44fd76 => _0x44fd76.id);
          break;
      }
      for (let _0x359001 = 0; _0x359001 < _0x3f0441.length; _0x359001++) {
        await _0x5d34b0(1500);
        let _0xea5d46 = "「 TRANSMISSAO DO BOT 」\n\n" + _0x1edc8d;
        try {
          let _0x2ddc33 = [];
          try {
            const _0x49e84e = await _0x48dfb8(_0x3f0441[_0x359001]);
            _0x2ddc33 = _0x1f0332(_0x49e84e.participants || []);
          } catch (_0x10100a) {
            console.error("Erro ao obter metadata do grupo " + _0x3f0441[_0x359001] + ':', _0x10100a);
          }
          const _0x24b2b6 = {
            text: _0xea5d46,
            mentions: _0x2ddc33
          };
          await _0x54852f.sendMessage(_0x3f0441[_0x359001], _0x24b2b6);
          let _0x57b3d7 = _0x77d7dc.find(_0x407f76 => _0x407f76.id === _0x3f0441[_0x359001]);
          if (_0x57b3d7) {
            const _0x349df6 = {
              id: _0x57b3d7.id,
              name: _0x57b3d7.subject
            };
            _0x5811b7.push(_0x349df6);
          }
        } catch (_0x17ec0a) {
          console.error("Erro ao enviar mensagem para o grupo " + _0x3f0441[_0x359001] + ':', _0x17ec0a);
        }
      }
      let _0x250d0d = _0x5811b7.map(_0x4e3b01 => "Nome: " + _0x4e3b01.name + "\nID: " + _0x4e3b01.id).join("\n\n");
      _0xf8b013("Enviado com sucesso para os seguintes grupos:\n\n" + _0x250d0d);
      return true;
    } catch (_0x48e446) {
      console.error("Erro ao executar bcaluguel2:", _0x48e446);
      return _0xf8b013("Ocorreu um erro ao executar o comando. Tente novamente.");
    }
  }
}, {
  'name': "sairgpaluguel2",
  'aliases': [],
  'category': "dono",
  'description': "Sai de grupos com base na categoria de aluguel",
  'longDescription': "Faz o bot sair de grupos específicos baseados na categoria de aluguel selecionada.",
  'usage': "sairgpaluguel2 [categoria]",
  'example': "sairgpaluguel2 vencido",
  'menu': "dono",
  'menuSection': "Aluguel",
  'permissions': _0x1bf85d,
  'requirements': _0x13e1a1,
  'execute': async ({
    conn: _0x596f5a,
    info: _0x19f5cb,
    from: _0x348106,
    q: _0x2bd6bd,
    SoDono: _0x1f64ca,
    numerodono_ofc: _0x7fb58d,
    sleep: _0x1027a5,
    BANCOP: _0x3ad354,
    reply: _0x39059a
  }) => {
    if (!_0x1f64ca && !_0x19f5cb.key.fromMe) {
      return _0x39059a("Este comando só o bot ou o dono pode executar..");
    }
    let _0xddfa45 = [];
    let _0x53bfb1 = Math.floor(Date.now() / 1000);
    let _0x5e9725 = _0x2bd6bd.normalize("NFD").replace(/[\u0300-\u036f]/g, '');
    let _0x5dd5d2 = await _0x596f5a.groupFetchAllParticipating();
    let _0x3b21f1 = Object.entries(_0x5dd5d2).slice(0).map(_0x5d32e9 => _0x5d32e9[1]);
    try {
      switch (_0x5e9725.toLowerCase()) {
        case "nao registrado":
          const _0x4446f0 = _0x3ad354.prepare("SELECT id_gp FROM aluguel WHERE is_grupo = 1").all().map(_0x424fc4 => _0x424fc4.id_gp);
          _0xddfa45 = _0x3b21f1.filter(_0x47dccb => !_0x4446f0.includes(_0x47dccb.id) && !_0x47dccb.isCommunity && !_0x47dccb.isCommunityAnnounce).map(_0x476eef => _0x476eef.id);
          break;
        case "em dia":
          _0xddfa45 = _0x3ad354.prepare("SELECT id_gp FROM aluguel WHERE is_grupo = 1 AND vencimento > ?").all(_0x53bfb1).map(_0x1ced6e => _0x1ced6e.id_gp);
          break;
        case "vencido":
          _0xddfa45 = _0x3ad354.prepare("SELECT id_gp FROM aluguel WHERE is_grupo = 1 AND vencimento <= ?").all(_0x53bfb1).map(_0x423f52 => _0x423f52.id_gp);
          break;
        case "todos":
          _0xddfa45 = _0x3ad354.prepare("SELECT id_gp FROM aluguel WHERE is_grupo = 1").all().map(_0x47c440 => _0x47c440.id_gp);
          break;
        default:
          return _0x39059a("Por favor, forneça uma opção válida: 'nao registrado', 'em dia', 'vencido' ou 'todos'.");
      }
      _0x39059a("Saindo dos grupos da categoria: " + _0x5e9725);
      for (let _0x90211c = 0; _0x90211c < _0xddfa45.length; _0x90211c++) {
        await _0x1027a5(2000);
        let _0x2a184c = _0xddfa45[_0x90211c];
        if (!_0x3b21f1.some(_0x18787e => _0x18787e.id === _0x2a184c && (_0x18787e.isCommunity || _0x18787e.isCommunityAnnounce))) {
          const _0x2fd594 = {
            text: "Por motivos pessoais e para evitar bugs, o bot irá sair do grupo. Se desejar adicionar o bot novamente, entre em contato com o meu dono.\n\nwa.me/" + _0x7fb58d
          };
          _0x596f5a.sendMessage(_0x2a184c, _0x2fd594);
          setTimeout(() => _0x596f5a.groupLeave(_0x2a184c), 5000);
        }
      }
      return true;
    } catch (_0x5cc891) {
      console.error("Erro ao processar comando sairgpaluguel2:", _0x5cc891);
      return _0x39059a("Ocorreu um erro ao executar o comando. Tente novamente.");
    }
  }
}, {
  'name': "addstickercmd",
  'aliases': ["setstickercmd"],
  'category': "stickers",
  'description': "Registra uma figurinha para ser usada como comando",
  'longDescription': "Associa uma figurinha a um comando específico, permitindo enviar a figurinha apenas digitando o comando.",
  'usage': "addstickercmd [comando]",
  'example': "addstickercmd ping",
  'menu': "admin",
  'menuSection': "Figurinhas",
  'permissions': _0x3964cf,
  'requirements': {
    'customRequirement': ({
      isQuotedSticker: _0x2e6472,
      q: _0x59133e
    }) => {
      if (!_0x2e6472) {
        const _0x27baf9 = {
          success: false,
          message: "Marque uma figurinha..."
        };
        return _0x27baf9;
      }
      if (!_0x59133e) {
        const _0x3faffc = {
          success: false,
          message: "Por favor informe o comando."
        };
        return _0x3faffc;
      }
      const _0x5f2c30 = {
        success: true
      };
      return _0x5f2c30;
    }
  },
  'execute': async ({
    conn: _0x12f310,
    info: _0x4ad22a,
    from: _0x44ba1f,
    q: _0x1c5b17,
    prefix: _0x1e662f,
    SoDono: _0x38e3c2,
    Res_SoDono: _0xf2cc19,
    sender: _0x21aae3,
    isQuotedSticker: _0x43b061,
    stickerHelpers: _0x455fea,
    reply: _0x2db85d
  }) => {
    try {
      if (!_0x38e3c2) {
        return _0x2db85d(_0xf2cc19);
      }
      if (!_0x43b061) {
        return _0x2db85d("Marque uma figurinha...");
      }
      if (!_0x1c5b17) {
        return _0x2db85d("Por favor informe o comando. Exemplo: " + _0x1e662f + "addstickercmd ping");
      }
      const _0x59eea5 = _0x4ad22a.message.extendedTextMessage.contextInfo.quotedMessage;
      if (!_0x59eea5.stickerMessage) {
        return _0x2db85d("Marque uma figurinha válida.");
      }
      const _0x507a8e = _0x455fea.normalizeId(_0x59eea5.stickerMessage.fileSha256);
      if (!_0x507a8e) {
        return _0x2db85d("Não foi possível obter o ID da figurinha.");
      }
      const _0x24c8b9 = _0x455fea.statements.getCommand.get(_0x507a8e);
      let _0x11e0f9 = _0x1c5b17;
      if (_0x1c5b17.startsWith(_0x1e662f)) {
        _0x11e0f9 = _0x1c5b17.slice(_0x1e662f.length);
      }
      const _0x6eb84b = Date.now();
      _0x455fea.statements.insertCommand.run(_0x507a8e, _0x11e0f9, _0x21aae3, _0x6eb84b);
      const _0xc481d9 = await _0x455fea.saveSticker(_0x11e0f9, _0x59eea5.stickerMessage, _0x21aae3);
      let _0x78d72b = '';
      if (_0x24c8b9) {
        _0x78d72b = "✅ Figurinha atualizada com sucesso!\nComando antigo: " + _0x24c8b9.command + "\nNovo comando: " + _0x11e0f9;
      } else {
        _0x78d72b = "✅ Figurinha registrada com sucesso!\nComando: " + _0x11e0f9;
      }
      if (_0xc481d9.success) {
        if (_0xc481d9.isMultiple) {
          _0x78d72b += "\nEsta é a figurinha #" + (_0xc481d9.index + 1) + " para este comando";
        }
      } else {
        _0x78d72b += "\nAviso: Não foi possível salvar o arquivo da figurinha.";
      }
      _0x2db85d(_0x78d72b);
      return true;
    } catch (_0x2ce393) {
      console.error("Erro no comando addstickercmd:", _0x2ce393);
      const _0x2d9a34 = {
        success: false,
        message: "❌ Ocorreu um erro ao processar o comando."
      };
      return _0x2d9a34;
    }
  }
}, {
  'name': "getstickercmd",
  'aliases': ["getstickcmd"],
  'category': "stickers",
  'description': "Envia uma figurinha registrada com o comando especificado",
  'longDescription': "Busca e envia uma figurinha que foi registrada com um comando específico.",
  'usage': "getstickercmd [comando] [índice/random]",
  'example': "getstickercmd ping",
  'menu': "utilidades",
  'menuSection': "Figurinhas",
  'permissions': {},
  'requirements': _0x3ab26a,
  'execute': async ({
    conn: _0x15e406,
    info: _0x132402,
    from: _0x49bb26,
    q: _0x52cdfe,
    prefix: _0x4f5b94,
    stickerHelpers: _0x47bcec,
    reply: _0x9764c5
  }) => {
    try {
      if (!_0x52cdfe) {
        return _0x9764c5("Por favor informe o comando para buscar a figurinha. Exemplo: " + _0x4f5b94 + "getsticker ping");
      }
      const _0x5c25d6 = _0x52cdfe.trim().split(/\s+/);
      const _0x44df4c = _0x5c25d6[0];
      const _0x533cf8 = _0x5c25d6.length > 1 ? parseInt(_0x5c25d6[1]) : null;
      const _0x166126 = {
        'quoted': _0x132402,
        'index': _0x533cf8,
        'random': _0x5c25d6.includes("random") || _0x5c25d6.includes("aleatoria")
      };
      const _0x3c35aa = await _0x47bcec.sendSticker(_0x44df4c, _0x15e406, _0x49bb26, _0x166126);
      if (!_0x3c35aa.success) {
        _0x9764c5(_0x3c35aa.message || "❌ Não foi possível encontrar a figurinha.");
      } else if (_0x3c35aa.totalStickers > 1 && !_0x533cf8 && !_0x166126.random) {
        _0x9764c5("Existem " + _0x3c35aa.totalStickers + " figurinhas para este comando. Use \"" + _0x4f5b94 + "getsticker " + _0x44df4c + " [número]\" para escolher uma específica ou \"" + _0x4f5b94 + "getsticker " + _0x44df4c + " random\" para obter uma aleatória.");
      }
      return true;
    } catch (_0xcc6b0c) {
      console.error("Erro no comando getsticker:", _0xcc6b0c);
      const _0x46ec35 = {
        success: false,
        message: "❌ Ocorreu um erro ao buscar a figurinha."
      };
      return _0x46ec35;
    }
  }
}, {
  'name': "delstickercmd",
  'aliases': ["remstickercmd"],
  'category': "stickers",
  'description': "Remove uma figurinha registrada",
  'longDescription': "Remove uma figurinha registrada como comando, seja marcando a figurinha ou especificando o comando e índice.",
  'usage': "delstickercmd [comando] [índice] ou marque uma figurinha",
  'example': "delstickercmd ping 1",
  'menu': "admin",
  'menuSection': "Figurinhas",
  'permissions': _0x487062,
  'requirements': {},
  'execute': async ({
    conn: _0x3a83d9,
    info: _0x2fea94,
    from: _0x5ee473,
    q: _0x52b018,
    prefix: _0x197549,
    SoDono: _0x3ba6d4,
    Res_SoDono: _0x254c58,
    isQuotedSticker: _0x42432e,
    stickerHelpers: _0x15ebe8,
    reply: _0x453d85
  }) => {
    try {
      if (!_0x3ba6d4) {
        return _0x453d85(_0x254c58);
      }
      if (_0x42432e) {
        const _0x11ecdf = _0x2fea94.message.extendedTextMessage.contextInfo.quotedMessage;
        if (!_0x11ecdf.stickerMessage) {
          return _0x453d85("Marque uma figurinha válida.");
        }
        const _0x5d902f = _0x15ebe8.normalizeId(_0x11ecdf.stickerMessage.fileSha256);
        if (!_0x5d902f) {
          return _0x453d85("Não foi possível obter o ID da figurinha.");
        }
        const _0x58e06f = _0x15ebe8.statements.getCommand.get(_0x5d902f);
        if (!_0x58e06f) {
          return _0x453d85("❌ Esta figurinha não possui comando registrado.");
        }
        const _0x5bd654 = _0x58e06f.command;
        _0x15ebe8.statements.deleteCommand.run(_0x5d902f);
        const _0x38413a = _0x15ebe8.deleteById(_0x5d902f);
        if (_0x38413a.success) {
          _0x453d85("✅ Comando removido com sucesso!\nComando removido: " + _0x5bd654 + "\nFigurinha #" + (_0x38413a.index + 1) + " removida.");
        } else {
          _0x453d85("✅ Comando removido com sucesso!\nComando removido: " + _0x5bd654 + "\nNota: " + _0x38413a.message);
        }
      } else {
        if (_0x52b018) {
          const _0x26fbdf = _0x52b018.trim().split(/\s+/);
          const _0x1d66ce = _0x26fbdf[0];
          const _0x21743f = _0x26fbdf.length > 1 ? parseInt(_0x26fbdf[1]) : null;
          if (!_0x21743f) {
            return _0x453d85("Por favor especifique o índice da figurinha. Exemplo: " + _0x197549 + "delstickercmd ping 2");
          }
          const _0x5b7a82 = _0x15ebe8.deleteByCommandAndIndex(_0x1d66ce, _0x21743f - 1);
          if (_0x5b7a82.success) {
            _0x453d85("✅ Figurinha para o comando \"" + _0x5b7a82.command + "\" (índice " + _0x21743f + ") removida com sucesso!");
          } else {
            _0x453d85(_0x5b7a82.message || "❌ Erro ao remover figurinha.");
          }
        } else {
          _0x453d85("❌ Uso incorreto. Marque uma figurinha ou use " + _0x197549 + "delstickercmd [comando] [índice]");
        }
      }
      return true;
    } catch (_0x19ed7a) {
      console.error("Erro no comando delstickercmd:", _0x19ed7a);
      const _0x2463cb = {
        success: false,
        message: "❌ Ocorreu um erro ao processar o comando."
      };
      return _0x2463cb;
    }
  }
}, {
  'name': "liststickerscmd",
  'aliases': ["liststickcmd"],
  'category': "stickers",
  'description': "Lista todos os comandos de figurinhas",
  'longDescription': "Mostra todos os comandos de figurinhas registrados no sistema ou detalhes de um comando específico.",
  'usage': "liststickerscmd [comando opcional]",
  'example': "liststickerscmd",
  'menu': "utilidades",
  'menuSection': "Figurinhas",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x1fac78,
    info: _0x53c630,
    from: _0x29afbc,
    q: _0xe326f5,
    prefix: _0x57b65d,
    stickerHelpers: _0x43fcb8,
    mention: _0x228d30,
    reply: _0x575ffc
  }) => {
    try {
      function _0x59ab10() {
        try {
          const _0x38f706 = _0x43fcb8.statements.getAllCommands.all();
          const _0x53f088 = new Set();
          _0x38f706.forEach(_0x562ba9 => {
            if (_0x562ba9 && _0x562ba9.command) {
              _0x53f088.add(_0x562ba9.command);
            }
          });
          return Array.from(_0x53f088).sort();
        } catch (_0x305405) {
          console.error("Erro ao obter comandos de figurinhas:", _0x305405);
          return [];
        }
      }
      if (!_0xe326f5) {
        const _0x1e0916 = _0x59ab10();
        if (_0x1e0916.length === 0) {
          return _0x575ffc("❌ Nenhuma figurinha registrada no sistema.");
        }
        let _0x1e568f = "╔═══════════════════════╗\n";
        _0x1e568f += "║🌟 COMANDOS COM FIGURINHAS 🌟\n";
        _0x1e568f += "╚═══════════════════════╝\n\n";
        _0x1e568f += "🔍 Total: *" + _0x1e0916.length + " comandos* com figurinhas\n\n";
        for (let _0x28c4bf = 0; _0x28c4bf < _0x1e0916.length; _0x28c4bf += 3) {
          const _0x5799e6 = _0x1e0916.slice(_0x28c4bf, _0x28c4bf + 3);
          _0x1e568f += _0x5799e6.map((_0x7b6d22, _0x2547c1) => _0x28c4bf + _0x2547c1 + 1 + ". *" + _0x7b6d22 + '*').join(" ") + "\n";
        }
        _0x1e568f += "\n╔═══════════════════════╗\n";
        _0x1e568f += "║ ℹ️ Como usar: \n";
        _0x1e568f += "╠═══════════════════════╣\n";
        _0x1e568f += "║ Ver detalhes: " + _0x57b65d + "liststickerscmd [comando] \n";
        _0x1e568f += "║ Obter figurinha: " + _0x57b65d + "getsticker [comando] \n";
        _0x1e568f += "╚═══════════════════════╝";
        return _0x575ffc(_0x1e568f);
      }
      let _0xcc79e3 = _0xe326f5;
      if (_0xcc79e3.startsWith(_0x57b65d)) {
        _0xcc79e3 = _0xcc79e3.slice(_0x57b65d.length);
      }
      const _0x479616 = _0x59ab10();
      if (!_0x479616.includes(_0xcc79e3)) {
        return _0x575ffc("❌ Comando *" + _0xcc79e3 + "* não encontrado no sistema de figurinhas.");
      }
      const _0x4cd28d = _0x43fcb8.statements.getAllCommands.all().filter(_0xba34a8 => _0xba34a8.command === _0xcc79e3);
      if (_0x4cd28d.length === 0) {
        return _0x575ffc("❌ Nenhuma figurinha encontrada para o comando: *" + _0xcc79e3 + '*');
      }
      const _0x4baa5a = _0x43fcb8.statements.countFiles.get(_0xcc79e3);
      const _0x11c211 = _0x4baa5a ? _0x4baa5a.count : 0;
      let _0x29ec99 = "╔═══════════════════════╗\n";
      _0x29ec99 += "║ 🧩 FIGURINHAS: *" + _0xcc79e3.toUpperCase() + "* \n";
      _0x29ec99 += "╚═══════════════════════╝\n\n";
      _0x29ec99 += "📊 Total: *" + _0x4cd28d.length + "* comando(s)\n";
      _0x29ec99 += "🖼️ Arquivos: *" + _0x11c211 + "* figurinha(s)\n\n";
      _0x29ec99 += "╔═══════════════════════╗\n";
      _0x29ec99 += "║ *Nº*║ *Adicionado por* ║ *Data* ║\n";
      _0x29ec99 += "╠═══════════════════════╣\n";
      _0x4cd28d.forEach((_0x60a2a3, _0x5d60af) => {
        const _0x125952 = new Date(_0x60a2a3.timestamp);
        const _0x8763f2 = _0x125952.getDate().toString().padStart(2, '0');
        const _0x318332 = (_0x125952.getMonth() + 1).toString().padStart(2, '0');
        const _0x1bdc89 = _0x125952.getFullYear().toString().slice(-2);
        const _0x18b81a = _0x8763f2 + '/' + _0x318332 + '/' + _0x1bdc89;
        const _0x578b31 = _0x60a2a3.author ? _0x60a2a3.author.split('@')[0] : "Desconhecido";
        _0x29ec99 += "║ *- " + (_0x5d60af + 1).toString().padEnd(4) + " -* ║ @" + _0x578b31.padEnd(15) + " ║ " + _0x18b81a.padEnd(12) + " \n";
      });
      _0x29ec99 += "╚═══════════════════════╝\n\n";
      _0x29ec99 += "✨ *Como usar:*\n";
      _0x29ec99 += "Obter figurinha: " + _0x57b65d + "getsticker " + _0xcc79e3 + " [número]\n";
      _0x29ec99 += "Figurinha aleatória: " + _0x57b65d + "getsticker " + _0xcc79e3 + " random\n";
      _0x29ec99 += "Remover figurinha: " + _0x57b65d + "delstickercmd " + _0xcc79e3 + " [número]";
      _0x228d30(_0x29ec99);
      return true;
    } catch (_0x13f756) {
      console.error("Erro no comando liststickerscmd:", _0x13f756);
      const _0x54e3e1 = {
        success: false,
        message: "❌ Ocorreu um erro ao listar as figurinhas."
      };
      return _0x54e3e1;
    }
  }
}, {
  'name': "stickercmdinfo",
  'aliases': ["infostrcmd"],
  'category': "stickers",
  'description': "Mostra informações detalhadas sobre uma figurinha",
  'longDescription': "Exibe informações técnicas e de registro sobre uma figurinha marcada, incluindo comando associado e detalhes de quem a registrou.",
  'usage': "stickercmdinfo",
  'example': "stickercmdinfo",
  'menu': "admin",
  'menuSection': "Figurinhas",
  'permissions': _0x147380,
  'requirements': {
    'customRequirement': ({
      isQuotedSticker: _0x19b91c
    }) => {
      if (!_0x19b91c) {
        const _0x3a6cf1 = {
          success: false,
          message: "Marque uma figurinha..."
        };
        return _0x3a6cf1;
      }
      const _0x21da0a = {
        success: true
      };
      return _0x21da0a;
    }
  },
  'execute': async ({
    conn: _0x4174fb,
    info: _0x4efe20,
    from: _0x5eb1e3,
    prefix: _0x391116,
    SoDono: _0x3742c2,
    Res_SoDono: _0x3a3dcc,
    isQuotedSticker: _0x3282a7,
    stickerHelpers: _0x45151d,
    mention: _0x5a5ddd,
    reply: _0x23c8a2
  }) => {
    try {
      if (!_0x3742c2) {
        return _0x23c8a2(_0x3a3dcc);
      }
      if (!_0x3282a7) {
        return _0x23c8a2("Marque uma figurinha...");
      }
      const _0x14c5e9 = _0x4efe20.message.extendedTextMessage.contextInfo.quotedMessage;
      if (!_0x14c5e9.stickerMessage) {
        return _0x23c8a2("Marque uma figurinha válida.");
      }
      const _0x1579b7 = _0x14c5e9.stickerMessage;
      const _0x2c7e6e = _0x45151d.normalizeId(_0x1579b7.fileSha256);
      if (!_0x2c7e6e) {
        return _0x23c8a2("Não foi possível obter o ID da figurinha.");
      }
      const _0x18bb71 = _0x45151d.statements.getCommand.get(_0x2c7e6e);
      let _0x211883 = "🔍 *INFORMAÇÕES DA FIGURINHA*\n\n";
      _0x211883 += "SHA256: " + _0x2c7e6e + "\n";
      _0x211883 += "Tipo: " + _0x1579b7.mimetype + "\n";
      _0x211883 += "Animada: " + (_0x1579b7.isAnimated ? "Sim" : "Não") + "\n";
      if (_0x18bb71) {
        const _0x3582d1 = _0x391116 + _0x18bb71.command;
        _0x211883 += "\n✅ *Comando Registrado*: " + _0x3582d1 + "\n";
        const _0x2b470b = new Date(_0x18bb71.timestamp);
        const _0xc9e523 = _0x2b470b.getDate().toString().padStart(2, '0');
        const _0x4df90c = (_0x2b470b.getMonth() + 1).toString().padStart(2, '0');
        const _0x511beb = _0x2b470b.getFullYear().toString().slice(-2);
        const _0x5f3755 = _0x2b470b.getHours().toString().padStart(2, '0');
        const _0x4ab86f = _0x2b470b.getMinutes().toString().padStart(2, '0');
        const _0x44552a = _0x2b470b.getSeconds().toString().padStart(2, '0');
        const _0x3e1ab0 = _0xc9e523 + '/' + _0x4df90c + '/' + _0x511beb;
        const _0x42b329 = _0x5f3755 + ':' + _0x4ab86f + ':' + _0x44552a;
        _0x211883 += "Adicionado em: " + _0x3e1ab0 + " às " + _0x42b329 + "\n";
        if (_0x18bb71.author) {
          _0x211883 += "Adicionado por: @" + _0x18bb71.author.split('@')[0] + "\n";
        }
        const _0x215c67 = _0x45151d.statements.countFiles.get(_0x18bb71.command);
        const _0x43f6f2 = _0x215c67 ? _0x215c67.count : 0;
        _0x211883 += "Arquivos relacionados: " + _0x43f6f2 + "\n";
      } else {
        _0x211883 += "\n❌ *Sem comando registrado*\n";
      }
      _0x5a5ddd(_0x211883);
      return true;
    } catch (_0x1aad93) {
      console.error("Erro no comando stickerinfo:", _0x1aad93);
      const _0x1c4889 = {
        success: false,
        message: "❌ Ocorreu um erro ao processar as informações."
      };
      return _0x1c4889;
    }
  }
}, {
  'name': "teste",
  'aliases': [],
  'category': "utilidades",
  'description': "Menu interativo de teste",
  'longDescription': "Cria um menu interativo multi-nível para demonstrar a funcionalidade de menus dinâmicos do bot.",
  'usage': "teste2",
  'example': "teste2",
  'menu': "utils",
  'menuSection': "Teste",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x3742bd,
    info: _0x13587a,
    from: _0x545e26,
    sender: _0x300ae2,
    prefix: _0x400fb2,
    createChoiceMenu: _0x47662c
  }) => {
    return true;
  }
}, {
  'name': "menu",
  'aliases': ["help", "comandos", "commands"],
  'category': "info",
  'description': "Mostra o menu de comandos",
  'longDescription': "Exibe o menu principal ou um menu específico com base no argumento fornecido.",
  'usage': "menu [nome do menu]",
  'example': "menu admin",
  'menuSection': "Informações",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x313ce7,
    info: _0x2f8b4f,
    prefix: _0x4624cc,
    sender: _0x590087,
    from: _0x2c66e1,
    NomeDoBot: _0x1281f0,
    args: _0x31c9c9,
    q: _0x13553a,
    dataGp: _0x522d56,
    isGroup: _0xc3c32d,
    lermais: _0x8c8545,
    SoDono: _0x258308,
    isGroupAdmins: _0x3cfd80,
    isModobn: _0x2b51bb,
    isPremium: _0x45a02c,
    isnit: _0x2c9995
  }) => {
    const {
      getMenuCommands: _0x508788,
      getAllMenus: _0x33c8fa,
      commandManager: _0x58797a,
      getFormattedMenu: _0x1aed9d,
      getFormattedMenuMultiSection: _0x531fc6,
      getTimeOfDay: _0x5c4e73,
      formatUptime: _0x3cdcc7,
      temaManager: _0x2ea26c
    } = require("./commandsManager");
    let _0x1c5eff = _0x13553a.length > 0 ? _0x13553a.toLowerCase() : null;
    if (_0x1c5eff) {
      const _0x1f605b = {
        dataGp: _0x522d56,
        isGroup: _0xc3c32d,
        SoDono: _0x258308,
        isGroupAdmins: _0x3cfd80,
        isModobn: _0x2b51bb,
        isPremium: _0x45a02c,
        isnit: _0x2c9995
      };
      const _0x5ca5a7 = _0x58797a.checkMenuPermission(_0x1c5eff, _0x1f605b);
      if (!_0x5ca5a7.allowed) {
        const _0x204a84 = {
          success: false,
          message: _0x5ca5a7.message
        };
        return _0x204a84;
      }
    }
    if (!_0x1c5eff) {
      const _0x49fe26 = _0x33c8fa();
      const _0x159f72 = _0x58797a.getPrincipalMenuSections();
      const _0x4e832b = {
        dataGp: _0x522d56,
        isGroup: _0xc3c32d,
        SoDono: _0x258308,
        isGroupAdmins: _0x3cfd80,
        isModobn: _0x2b51bb,
        isPremium: _0x45a02c,
        isnit: _0x2c9995
      };
      const _0x455b90 = _0x49fe26.filter(_0x55c5d0 => {
        const _0xae9e1d = _0x58797a.checkMenuPermission(_0x55c5d0, _0x4e832b);
        return _0xae9e1d.allowed;
      }).map(_0x2f6d62 => ({
        'name': "menu " + _0x2f6d62,
        'desc': ''
      }));
      const _0x197db1 = [];
      _0x197db1.push({
        'titulo': "Menu Principal",
        'info': _0x5c4e73() + ", @" + _0x590087.split('@')[0] + " | ⏱️ Online A " + _0x3cdcc7(process.uptime()) + "\n" + (_0x8c8545 || ''),
        'comandos': _0x455b90
      });
      for (const [_0xd2d837, _0x5a6172] of Object.entries(_0x159f72)) {
        _0x197db1.push({
          'titulo': _0xd2d837,
          'info': '',
          'comandos': _0x5a6172.map(_0x3a5ee7 => ({
            'name': _0x3a5ee7.name,
            'desc': ''
          }))
        });
      }
      const _0x5f3fd4 = _0x531fc6(_0x197db1, _0x4624cc, _0x522d56, _0xc3c32d);
      const _0x56591b = _0x2ea26c.menuImage("menu", _0x522d56, _0xc3c32d);
      const _0x12a02d = {
        ..._0x56591b
      };
      _0x12a02d.caption = _0x5f3fd4;
      _0x12a02d.mentions = [_0x590087];
      const _0x54a82f = {
        quoted: _0x2f8b4f
      };
      return await _0x313ce7.sendMessage(_0x2c66e1, _0x12a02d, _0x54a82f);
    } else {
      const _0x4c6b63 = _0x508788(_0x1c5eff);
      if (Object.keys(_0x4c6b63).length === 0) {
        const _0x1871c7 = {
          success: false,
          message: "Menu \"" + _0x1c5eff + "\" não encontrado. Use " + _0x4624cc + "menu para ver os menus disponíveis."
        };
        return _0x1871c7;
      }
      const _0x2309ef = [];
      _0x2309ef.push({
        'titulo': "Menu " + (_0x1c5eff.charAt(0).toUpperCase() + _0x1c5eff.slice(1)),
        'info': _0x5c4e73() + ", @" + _0x590087.split('@')[0] + " | ⏱️ " + _0x3cdcc7(process.uptime()) + "\n" + (_0x8c8545 || ''),
        'comandos': []
      });
      for (const [_0x3f73c8, _0x543037] of Object.entries(_0x4c6b63)) {
        _0x2309ef.push({
          'titulo': _0x3f73c8,
          'info': '',
          'comandos': _0x543037.map(_0x1a0843 => ({
            'name': _0x1a0843.name,
            'desc': ''
          }))
        });
      }
      const _0x3635aa = _0x531fc6(_0x2309ef, _0x4624cc, _0x522d56, _0xc3c32d);
      const _0x3533bf = _0x2ea26c.menuImage(_0x1c5eff, _0x522d56, _0xc3c32d);
      const _0x111f12 = {
        ..._0x3533bf
      };
      _0x111f12.caption = _0x3635aa;
      _0x111f12.mentions = [_0x590087];
      const _0x2208bc = {
        quoted: _0x2f8b4f
      };
      return await _0x313ce7.sendMessage(_0x2c66e1, _0x111f12, _0x2208bc);
    }
  }
}, {
  'name': "info",
  'aliases': ["infocmd", "cmdinfo", 'i'],
  'category': "info",
  'description': "Mostra informações detalhadas de um comando",
  'longDescription': "Exibe informações detalhadas sobre um comando específico ou estatísticas gerais sobre todos os comandos disponíveis.",
  'usage': "info [nome do comando]",
  'example': "info sticker",
  'menu': ["principal", "info"],
  'menuSection': "Informações",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x40c4d7,
    info: _0x5db311,
    prefix: _0x246876,
    sender: _0xf38e39,
    from: _0xc406a4,
    args: _0x1597f1,
    NomeDoBot: _0x175cd3,
    EmojiBot: _0x3dec7d
  }) => {
    const {
      commandManager: _0x5a4bec
    } = require("./commandsManager");
    if (!_0x1597f1 || _0x1597f1.length === 0) {
      const _0x2e75eb = _0x5a4bec.commands.size;
      const _0x50d9ab = _0x5a4bec.aliases.size;
      const _0xf6c4d4 = _0x5a4bec.categoriesIndex.size;
      const _0x3cdd23 = _0x5a4bec.menuIndex.size;
      const _0x277708 = {};
      _0x5a4bec.categoriesIndex.forEach((_0x14d567, _0x519c5a) => {
        _0x277708[_0x519c5a] = _0x14d567.length;
      });
      const _0x2a4995 = Object.entries(_0x277708).sort((_0x3609eb, _0xdfadc2) => _0xdfadc2[1] - _0x3609eb[1]).slice(0, 5);
      let _0x16b3b4 = "\n╭━━━━━━━━━━━━━━━━━━━━━━━╮\n┃ " + (_0x3dec7d || '🤖') + " *PAINEL DE INFORMAÇÕES* ┃\n╰━━━━━━━━━━━━━━━━━━━━━━━╯\n\n📊 *ESTATÍSTICAS DO BOT*\n┏━━━━━━━━━━━━━━━━━━━━━━━━\n┃ 🎯 Comandos únicos: *" + _0x2e75eb + "*\n┃ 🔄 Aliases/atalhos: *" + _0x50d9ab + "*\n┃ 📁 Categorias: *" + _0xf6c4d4 + "*\n┃ 📋 Menus: *" + _0x3cdd23 + "*\n┗━━━━━━━━━━━━━━━━━━━━━━━━\n\n🏆 *TOP CATEGORIAS MAIS USADAS*\n┏━━━━━━━━━━━━━━━━━━━━━━━━";
      _0x2a4995.forEach(([_0x53dddc, _0x389ae4], _0xadbce9) => {
        const _0x507361 = _0xadbce9 === 0 ? '🥇' : _0xadbce9 === 1 ? '🥈' : _0xadbce9 === 2 ? '🥉' : '🏅';
        _0x16b3b4 += "\n┃ " + _0x507361 + " *" + (_0x53dddc.charAt(0).toUpperCase() + _0x53dddc.slice(1)) + "*: " + _0x389ae4 + " comandos";
      });
      _0x16b3b4 += "\n┗━━━━━━━━━━━━━━━━━━━━━━━━\n\n💡 *COMO USAR ESTE COMANDO*\n┏━━━━━━━━━━━━━━━━━━━━━━━━\n┃ 🔍 `" + _0x246876 + "info [comando]` - Ver detalhes completos\n┃ 📚 `" + _0x246876 + "menu` - Ver todos os menus\n┃ 📂 `" + _0x246876 + "menu [categoria]` - Ver por categoria\n┗━━━━━━━━━━━━━━━━━━━━━━━━\n\n📝 *Exemplo prático:* `" + _0x246876 + "info sticker`\n💬 *Dica:* Digite apenas parte do nome que eu encontro!";
      const _0x4faa6f = {
        text: _0x16b3b4,
        mentions: [_0xf38e39]
      };
      const _0x571d67 = {
        quoted: _0x5db311
      };
      await _0x40c4d7.sendMessage(_0xc406a4, _0x4faa6f, _0x571d67);
      return true;
    }
    const _0x5ee562 = _0x1597f1[0].toLowerCase().replace(_0x246876, '');
    const _0xae1d74 = _0x5a4bec.getCommand(_0x5ee562);
    if (!_0xae1d74) {
      const _0xe0acef = "\n❌ *COMANDO NÃO ENCONTRADO*\n\n🔍 O comando `" + _0x5ee562 + "` não existe.\n\n💡 *Sugestões:*\n• Use `" + _0x246876 + "menu` para ver todos os comandos\n• Use `" + _0x246876 + "info` para ver estatísticas\n• Verifique se digitou corretamente\n\n🎯 *Comandos similares:* Digite `" + _0x246876 + "menu` e procure!";
      const _0x5f1284 = {
        text: _0xe0acef,
        mentions: [_0xf38e39]
      };
      const _0xd97ba1 = {
        quoted: _0x5db311
      };
      await _0x40c4d7.sendMessage(_0xc406a4, _0x5f1284, _0xd97ba1);
      return false;
    }
    let _0xa90712 = "\n╭━━━━━━━━━━━━━━━━━━━━━━━╮\n┃ 📋 *DETALHES DO COMANDO* ┃\n╰━━━━━━━━━━━━━━━━━━━━━━━╯\n\n🎯 *IDENTIFICAÇÃO*\n┏━━━━━━━━━━━━━━━━━━━━━━━━\n┃ 📌 *Nome principal:* `" + _0x246876 + _0xae1d74.name + "`\n┃ 📂 *Categoria:* " + (_0xae1d74.category || "Sem categoria");
    if (_0xae1d74.aliases && _0xae1d74.aliases.length > 0) {
      _0xa90712 += "\n┃ 🔄 *Atalhos:* " + _0xae1d74.aliases.map(_0x1229b7 => '`' + _0x246876 + _0x1229b7 + '`').join(", ");
    }
    if (_0xae1d74.menu) {
      if (Array.isArray(_0xae1d74.menu)) {
        _0xa90712 += "\n┃ 📋 *Menus:* " + _0xae1d74.menu.join(", ");
      } else {
        _0xa90712 += "\n┃ 📋 *Menu:* " + _0xae1d74.menu;
      }
      if (_0xae1d74.menuSection) {
        _0xa90712 += " > " + _0xae1d74.menuSection;
      }
    }
    _0xa90712 += "\n┗━━━━━━━━━━━━━━━━━━━━━━━━\n\n📝 *O QUE FAZ*\n┏━━━━━━━━━━━━━━━━━━━━━━━━\n┃ " + (_0xae1d74.longDescription || _0xae1d74.description || "Sem descrição disponível") + "\n┗━━━━━━━━━━━━━━━━━━━━━━━━\n\n🎮 *COMO USAR*\n┏━━━━━━━━━━━━━━━━━━━━━━━━\n┃ 📖 *Sintaxe:* `" + _0x246876 + (_0xae1d74.usage || _0xae1d74.name) + '`';
    if (_0xae1d74.example) {
      _0xa90712 += "\n┃ 💡 *Exemplo:* `" + _0x246876 + _0xae1d74.example + '`';
    }
    _0xa90712 += "\n┗━━━━━━━━━━━━━━━━━━━━━━━━";
    const _0x11ed2f = _0xae1d74.permissions && Object.keys(_0xae1d74.permissions).some(_0x5b61cd => _0xae1d74.permissions[_0x5b61cd]);
    const _0x19b3fe = _0xae1d74.requirements && Object.keys(_0xae1d74.requirements).some(_0x1917dd => _0xae1d74.requirements[_0x1917dd]);
    if (_0x11ed2f) {
      _0xa90712 += "\n\n🔒 *QUEM PODE USAR*\n┏━━━━━━━━━━━━━━━━━━━━━━━━";
      if (_0xae1d74.permissions.onlyDono) {
        _0xa90712 += "\n┃ 👑 *Apenas o dono do bot* - Comando exclusivo";
      } else {
        if (_0xae1d74.permissions.onlyAdmins) {
          _0xa90712 += "\n┃ 👮 *Apenas administradores* - Em grupos";
        } else {
          _0xa90712 += "\n┃ 👥 *Todos os usuários* - Sem restrições";
        }
      }
      if (_0xae1d74.permissions.onlyGroups) {
        _0xa90712 += "\n┃ 🏢 *Apenas em grupos* - Não funciona no privado";
      }
      if (_0xae1d74.permissions.onlyBotAdmin) {
        _0xa90712 += "\n┃ 🤖 *Bot precisa ser admin* - Para funcionar";
      }
      if (_0xae1d74.permissions.onlyPremium) {
        _0xa90712 += "\n┃ 💎 *Apenas usuários premium* - Recurso especial";
      }
      _0xa90712 += "\n┗━━━━━━━━━━━━━━━━━━━━━━━━";
    } else {
      _0xa90712 += "\n\n✅ *ACESSO LIVRE*\n┏━━━━━━━━━━━━━━━━━━━━━━━━\n┃ 👥 *Todos podem usar* - Sem restrições\n┗━━━━━━━━━━━━━━━━━━━━━━━━";
    }
    if (_0x19b3fe) {
      _0xa90712 += "\n\n⚠️ *REQUISITOS ESPECIAIS*\n┏━━━━━━━━━━━━━━━━━━━━━━━━";
      if (_0xae1d74.requirements.needArgs) {
        const _0x1f4882 = _0xae1d74.requirements.minArgs || 1;
        _0xa90712 += "\n┃ 📝 *Precisa de argumentos* - Mínimo: " + _0x1f4882;
      }
      if (_0xae1d74.requirements.modobrincadeira) {
        _0xa90712 += "\n┃ 🎮 *Modo brincadeira ativo* - Use " + _0x246876 + "modbrincadeira";
      }
      if (_0xae1d74.requirements.needmenc) {
        _0xa90712 += "\n┃ 👤 *Precisa mencionar alguém* - @usuário";
      }
      if (_0xae1d74.requirements.cooldown) {
        _0xa90712 += "\n┃ ⏰ *Tem cooldown* - " + _0xae1d74.requirements.cooldown + "s entre usos";
      }
      _0xa90712 += "\n┗━━━━━━━━━━━━━━━━━━━━━━━━";
    }
    _0xa90712 += "\n\n💡 *DICAS ÚTEIS*\n• Use `" + _0x246876 + "menu " + _0xae1d74.category + "` para ver comandos similares\n• Digite `" + _0x246876 + "help` se precisar de ajuda geral\n• Alguns comandos têm sub-funções - teste!";
    const _0x187fd1 = {
      text: _0xa90712,
      mentions: [_0xf38e39]
    };
    const _0x301732 = {
      quoted: _0x5db311
    };
    await _0x40c4d7.sendMessage(_0xc406a4, _0x187fd1, _0x301732);
    return true;
  }
}, {
  'name': "upscale",
  'aliases': [],
  'category': 'ia',
  'description': "Melhora a qualidade de uma imagem com IA",
  'longDescription': "Utiliza inteligência artificial para melhorar a qualidade e resolução de uma imagem marcada.",
  'usage': "upscale [marque uma imagem]",
  'example': "upscale [responder a uma imagem]",
  'menu': "utils",
  'menuSection': 'IA',
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      info: _0x6f6c8a
    }) => {
      if (!_0x6f6c8a.message.extendedTextMessage?.["contextInfo"]?.["quotedMessage"]?.["imageMessage"]) {
        const _0xf1e85c = {
          success: false,
          message: "Marque uma imagem para aplicar o upscale!"
        };
        return _0xf1e85c;
      }
      const _0x3935dd = {
        success: true
      };
      return _0x3935dd;
    }
  },
  'execute': async ({
    conn: _0xbc6323,
    info: _0x548197,
    from: _0x5edd7c,
    Res_Aguarde: _0x3b48ba,
    fs: _0x2a4e41,
    getFileBuffer: _0x41e579,
    axios: _0x3ce901,
    FormData: _0x2fdce4,
    reply: _0x1c4b89
  }) => {
    try {
      if (!_0x548197.message.extendedTextMessage?.["contextInfo"]?.["quotedMessage"]?.["imageMessage"]) {
        const _0x84b68e = {
          success: false,
          message: "Marque uma imagem para aplicar o upscale!"
        };
        return _0x84b68e;
      }
      _0x1c4b89(_0x3b48ba);
      const _0x4b6a60 = JSON.parse(JSON.stringify(_0x548197).replace("quotedM", 'm')).message.extendedTextMessage.contextInfo.message.imageMessage;
      const _0x543815 = await _0x41e579(_0x4b6a60, "image");
      _0x2a4e41.writeFileSync("./temp.jpg", _0x543815);
      const _0x334240 = new _0x2fdce4();
      _0x334240.append("image", _0x2a4e41.createReadStream("./temp.jpg"), {
        'filename': "temp.jpg",
        'contentType': "image/jpeg"
      });
      const _0x269634 = await _0x3ce901.post("https://ironman.koyeb.app/ironman/ai/upscale?ApiKey=img-1r0nm4nH4x!", _0x334240, {
        'headers': {
          ..._0x334240.getHeaders(),
          'Referer': "https://github.com/IRON-M4N"
        },
        'responseType': "arraybuffer"
      });
      const _0x1041c4 = {
        image: _0x269634.data,
        caption: "✨ Imagem aprimorada com IA"
      };
      await _0xbc6323.sendMessage(_0x5edd7c, _0x1041c4);
      _0x2a4e41.unlinkSync("./temp.jpg");
      return true;
    } catch (_0x5bb3fd) {
      console.error("Erro no comando upscale:", _0x5bb3fd);
      try {
        _0x2a4e41.unlinkSync("./temp.jpg");
      } catch (_0x311af9) {}
      const _0x25cabe = {
        success: false,
        message: "❌ Erro ao processar o comando. Certifique-se de marcar uma imagem válida."
      };
      return _0x25cabe;
    }
  }
}, {
  'name': "lastfm",
  'aliases': ['lt', "topalb", "topart", "topmusic"],
  'category': "utility",
  'description': "Informações do Last.fm",
  'longDescription': "Obtém informações detalhadas de perfis do Last.fm, incluindo músicas recentes, artistas e álbuns favoritos.",
  'usage': "lastfm [nome de usuário]",
  'example': "lastfm nomedeusuario",
  'menu': "utils",
  'menuSection': "Música",
  'permissions': {},
  'requirements': _0x3cf511,
  'execute': async ({
    conn: _0x2caf8c,
    info: _0x353983,
    from: _0x29a270,
    q: _0x41d40a,
    command: _0x21a43f,
    prefix: _0x5679f2,
    reply: _0x731492
  }) => {
    if (!_0x41d40a) {
      return _0x731492("Digite um nome de usuário do Last.fm\nExemplo: " + _0x5679f2 + _0x21a43f + " nomedeusuario");
    }
    var _0x9ddcc = require("lastfm").LastFmNode;
    const _0x9312d3 = {
      api_key: "2b44afbc4a671b8a8ffb01d333348df3",
      secret: "a00534a388edde31f3643080bba49bdc",
      useragent: "salientekill"
    };
    var _0x3283b3 = new _0x9ddcc(_0x9312d3);
    function _0x3238d8(_0x15c53d) {
      if (!_0x15c53d) {
        return "??/?? às ??:??";
      }
      const _0x491e78 = new Date(_0x15c53d * 1000);
      const _0x571243 = _0x491e78.getDate() < 10 ? '0' + _0x491e78.getDate() : _0x491e78.getDate();
      const _0x1eab85 = _0x491e78.getMonth() < 9 ? '0' + (_0x491e78.getMonth() + 1) : _0x491e78.getMonth() + 1;
      const _0x12dab9 = _0x491e78.getHours() < 10 ? '0' + _0x491e78.getHours() : _0x491e78.getHours();
      const _0xeeb969 = _0x491e78.getMinutes() < 10 ? '0' + _0x491e78.getMinutes() : _0x491e78.getMinutes();
      return _0x571243 + '/' + _0x1eab85 + " às " + _0x12dab9 + ':' + _0xeeb969;
    }
    const _0x4ce619 = {
      'getUserInfo': _0x58ee4c => new Promise(_0x2d2946 => {
        _0x3283b3.request("user.getInfo", {
          'user': _0x58ee4c,
          'handlers': {
            'success': _0x41c073 => _0x2d2946(_0x41c073.user),
            'error': () => _0x2d2946(false)
          }
        });
      }),
      'getRecentTrack': _0x46a9c8 => new Promise(_0x38de1c => {
        _0x3283b3.request("user.getRecentTracks", {
          'user': _0x46a9c8,
          'limit': 0x1,
          'handlers': {
            'success': _0x257124 => _0x38de1c(_0x257124.recenttracks.track[0]),
            'error': () => _0x38de1c(false)
          }
        });
      }),
      'getTopArtists': (_0x3b055f, _0x356864 = 3) => new Promise(_0x3541b9 => {
        _0x3283b3.request("user.getTopArtists", {
          'user': _0x3b055f,
          'limit': _0x356864,
          'period': "overall",
          'handlers': {
            'success': _0x290aac => _0x3541b9(_0x290aac.topartists.artist),
            'error': () => _0x3541b9(false)
          }
        });
      }),
      'getTopAlbums': (_0x18fe20, _0x2f2c0e = 3) => new Promise(_0x443ba9 => {
        _0x3283b3.request("user.getTopAlbums", {
          'user': _0x18fe20,
          'limit': _0x2f2c0e,
          'period': "overall",
          'handlers': {
            'success': _0x1e9896 => _0x443ba9(_0x1e9896.topalbums.album),
            'error': () => _0x443ba9(false)
          }
        });
      }),
      'getTopTracks': (_0x2eeaaf, _0x217796 = 3) => new Promise(_0xe8545a => {
        _0x3283b3.request("user.getTopTracks", {
          'user': _0x2eeaaf,
          'limit': _0x217796,
          'period': "overall",
          'handlers': {
            'success': _0x5b8731 => _0xe8545a(_0x5b8731.toptracks.track),
            'error': () => _0xe8545a(false)
          }
        });
      }),
      'getTrackInfo': (_0x45dc82, _0x15538d) => new Promise(_0x541944 => {
        _0x3283b3.request("track.getInfo", {
          'artist': _0x45dc82,
          'track': _0x15538d,
          'autocorrect': 0x1,
          'handlers': {
            'success': _0x21c5bb => _0x541944(_0x21c5bb.track),
            'error': () => _0x541944(false)
          }
        });
      })
    };
    try {
      switch (_0x21a43f) {
        case "lastfm":
          {
            const [_0x2912da, _0x5921b4, _0x5ae556, _0xb34342] = await Promise.all([_0x4ce619.getUserInfo(_0x41d40a), _0x4ce619.getTopTracks(_0x41d40a), _0x4ce619.getTopArtists(_0x41d40a), _0x4ce619.getRecentTrack(_0x41d40a)]);
            if (!_0x2912da || !_0x5921b4 || !_0x5ae556 || !_0xb34342) {
              return _0x731492("*lastm.fm*: Erro ao buscar dados do perfil '" + _0x41d40a + "'.");
            }
            const _0xc1a764 = parseInt(_0x2912da.subscriber) ? "👑 " : '';
            const _0x2a49f4 = parseInt(_0x2912da.age) > 0 ? ", " + _0x2912da.age : '';
            const _0x3fca91 = _0x3238d8(parseInt(_0x2912da.registered.unixtime));
            const _0x3e196f = _0xb34342["@attr"]?.["nowplaying"] == "true";
            const _0x188f5c = _0x3e196f ? "Ouvindo _agora_" : "Ouvido por último";
            const _0x2a7b3e = _0x3e196f ? '' : " _(em " + _0x3238d8(parseInt(_0xb34342.date.uts)) + ')_';
            const _0x28655c = "📻 _last.fm_ " + _0xc1a764 + '*' + _0x2912da.name + "* _(" + _0x2912da.country + _0x2a49f4 + ")_\n\n🍼 Usuário desde *" + _0x3fca91 + "*\n🎶 *" + _0x2912da.playcount + "* scrobbles\n🎙 *" + _0x2912da.track_count + "* músicas e *" + _0x2912da.album_count + "* albuns de *" + _0x2912da.artist_count + "* artistas diferentes\n\n🎧 *" + _0x188f5c + "*: " + _0xb34342.artist["#text"] + " - _" + _0xb34342.name + '_' + _0x2a7b3e + "\n\n📊 *Top Artistas*\n🥇 " + (_0x5ae556[0]?.["name"] ?? '-') + "\n🥈 " + (_0x5ae556[1]?.["name"] ?? '-') + "\n🥉 " + (_0x5ae556[2]?.["name"] ?? '-') + "\n\n📊 *Top Músicas*\n🥇 " + (_0x5921b4[0]?.["artist"]?.["name"] ?? '-') + " - _" + (_0x5921b4[0]?.["name"] ?? '-') + "_\n🥈 " + (_0x5921b4[1]?.["artist"]?.["name"] ?? '-') + " - _" + (_0x5921b4[1]?.["name"] ?? '-') + "_\n🥉 " + (_0x5921b4[2]?.["artist"]?.["name"] ?? '-') + " - _" + (_0x5921b4[2]?.["name"] ?? '-') + "_\n\n🔗 " + _0x2912da.url;
            _0x731492(_0x28655c);
            break;
          }
        case 'lt':
          {
            const _0x221243 = await _0x4ce619.getRecentTrack(_0x41d40a);
            if (!_0x221243) {
              return _0x731492("Erro ao buscar músicas de '" + _0x41d40a + "'.");
            }
            const _0x37df40 = await _0x4ce619.getTrackInfo(_0x221243.artist["#text"], _0x221243.name);
            const _0xd57fd2 = _0x221243.image.reduce((_0xc916e, _0xe6ceef) => {
              return _0xe6ceef.size === "extralarge" || _0xe6ceef.size === "large" ? _0xe6ceef["#text"] : _0xc916e;
            }, _0x221243.image[0]["#text"]);
            const _0x115f3b = _0x221243["@attr"]?.["nowplaying"] == "true";
            const _0x1640fa = _0x115f3b ? "Ouvindo agora" : "Ouvido em " + _0x3238d8(parseInt(_0x221243.date.uts));
            const _0x269ce3 = _0x37df40?.["duration"] ? "\n⏱️ Duração: " + Math.floor(_0x37df40.duration / 1000 / 60) + ':' + String(Math.floor(_0x37df40.duration / 1000 % 60)).padStart(2, '0') : '';
            const _0x3f8ba0 = _0x221243.album["#text"] ? "\n💿 Álbum: " + _0x221243.album["#text"] : '';
            const _0x57ffac = _0x37df40?.["userplaycount"] ? "\n🔄 Plays: " + _0x37df40.userplaycount : '';
            const _0x4378de = _0x37df40?.["toptags"]?.["tag"] ? "\n🏷️ Tags: " + _0x37df40.toptags.tag.slice(0, 3).map(_0x2fc022 => _0x2fc022.name).join(", ") : '';
            const _0xd85930 = "🎵 *" + _0x221243.name + "*\n👤 Artista: " + _0x221243.artist["#text"] + _0x3f8ba0 + _0x269ce3 + _0x57ffac + _0x4378de + "\n\n👤 *" + _0x41d40a + "*\n⏰ " + _0x1640fa + "\n🔗 " + (_0x37df40?.["url"] || _0x221243.url);
            const _0x18d0e8 = {
              url: _0xd57fd2
            };
            const _0x1a0a6c = {
              image: _0x18d0e8,
              caption: _0xd85930
            };
            await _0x2caf8c.sendMessage(_0x29a270, _0x1a0a6c);
            break;
          }
        case "topalb":
          {
            const _0x1a8567 = await _0x4ce619.getTopAlbums(_0x41d40a, 10);
            if (!_0x1a8567) {
              return _0x731492("Erro ao buscar álbuns de '" + _0x41d40a + "'.");
            }
            let _0xd942b2 = "📊 *Top 10 Álbuns de " + _0x41d40a + "*\n\n";
            _0x1a8567.forEach((_0x412fc8, _0x2fd94e) => {
              _0xd942b2 += _0x2fd94e + 1 + ". *" + _0x412fc8.artist.name + "* - _" + _0x412fc8.name + "_\n";
              _0xd942b2 += " ▫️ " + _0x412fc8.playcount + " plays\n";
            });
            _0x731492(_0xd942b2);
            break;
          }
        case "topart":
          {
            const _0x16a593 = await _0x4ce619.getTopArtists(_0x41d40a, 10);
            if (!_0x16a593) {
              return _0x731492("Erro ao buscar artistas de '" + _0x41d40a + "'.");
            }
            let _0xe208e0 = "📊 *Top 10 Artistas de " + _0x41d40a + "*\n\n";
            _0x16a593.forEach((_0x565905, _0x1c8b78) => {
              _0xe208e0 += _0x1c8b78 + 1 + ". *" + _0x565905.name + "*\n";
              _0xe208e0 += " ▫️ " + _0x565905.playcount + " plays\n";
            });
            _0x731492(_0xe208e0);
            break;
          }
        case "topmusic":
          {
            const _0x502375 = await _0x4ce619.getTopTracks(_0x41d40a, 10);
            if (!_0x502375) {
              return _0x731492("Erro ao buscar músicas de '" + _0x41d40a + "'.");
            }
            let _0xb26476 = "📊 *Top 10 Músicas de " + _0x41d40a + "*\n\n";
            _0x502375.forEach((_0x87dc33, _0x686a96) => {
              _0xb26476 += _0x686a96 + 1 + ". *" + _0x87dc33.artist.name + "* - _" + _0x87dc33.name + "_\n";
              _0xb26476 += " ▫️ " + _0x87dc33.playcount + " plays\n";
            });
            _0x731492(_0xb26476);
            break;
          }
      }
      const _0x9a0c16 = {
        text: '🎵',
        key: _0x353983.key
      };
      const _0x48e47c = {
        react: _0x9a0c16
      };
      await _0x2caf8c.sendMessage(_0x29a270, _0x48e47c);
      return true;
    } catch (_0x34cd22) {
      console.error("Erro Last.fm:", _0x34cd22);
      const _0x4d792b = {
        success: false,
        message: "Ocorreu um erro ao processar sua solicitação."
      };
      return _0x4d792b;
    }
  }
}, {
  'name': "admgm",
  'aliases': [],
  'category': "admin",
  'description': "Gerencia permissões de administradores",
  'longDescription': "Sistema anti-roubo que permite definir quais administradores têm permissão para promover ou rebaixar membros no grupo. Aceita menções (@usuário) ou números diretos (552199540044).",
  'usage': "admgm [@usuário | número] ou admgm",
  'example': "admgm @admin ou admgm 552199540044",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0xccaf5e,
  'requirements': {},
  'execute': async ({
    conn: _0x49e0e2,
    info: _0x34dab6,
    from: _0x2584f0,
    menc_os2: _0x9f513,
    isGroup: _0x2ccd53,
    isGroupAdmins: _0x2a92bc,
    SoDono: _0x556031,
    dataGp: _0x20be95,
    setGp: _0x388de0,
    prefix: _0x418df6,
    mention: _0x1c55d9,
    reply: _0x5d4925,
    args: _0x20c244,
    q: _0x460836
  }) => {
    if (!_0x2ccd53) {
      return _0x5d4925("⚠️ Este comando só funciona em grupos!");
    }
    if (!_0x20be95[0]) {
      _0x20be95[0] = {};
    }
    if (!_0x20be95[0].peradm) {
      _0x20be95[0].peradm = [];
    }
    const _0x51175a = _0x2735bd => {
      if (!_0x2735bd) {
        return null;
      }
      const _0xe4afc0 = _0x2735bd.replace(/\D/g, '');
      if (_0xe4afc0.length < 10) {
        return null;
      }
      let _0x2b169d = _0xe4afc0;
      if (!_0x2b169d.startsWith('55') && _0x2b169d.length <= 11) {
        _0x2b169d = '55' + _0x2b169d;
      }
      if (_0x2b169d.length < 12 || _0x2b169d.length > 15) {
        return null;
      }
      return _0x2b169d + "@s.whatsapp.net";
    };
    let _0x13da86 = null;
    if (_0x9f513) {
      _0x13da86 = _0x9f513;
    } else {
      if (_0x20c244[0]) {
        _0x13da86 = _0x51175a(_0x20c244[0]);
        if (!_0x13da86) {
          return _0x5d4925("❌ Número inválido! Use o formato: 552199540044 ou mencione o usuário.");
        }
      }
    }
    if (!_0x13da86) {
      if (!_0x2a92bc && !_0x556031) {
        return _0x5d4925("🚫 Apenas administradores podem usar este comando.");
      }
      if (_0x20be95[0].peradm.length <= 0) {
        const _0x15e7c8 = "*📋 SISTEMA ANTI-ROUBO*\n\nNão há administradores com permissões especiais neste grupo.\nQualquer administrador pode promover ou rebaixar membros.\n\n*Como usar:*\n" + ("• `" + _0x418df6 + "admgm @usuário` - Adiciona/remove um admin da lista\n") + ("• `" + _0x418df6 + "admgm 552199540044` - Adiciona/remove usando número\n") + ("• `" + _0x418df6 + "admgm` - Mostra esta lista de permissões\n") + ("• `" + _0x418df6 + "antiroubo` - Mostra ajuda completa");
        return _0x5d4925(_0x15e7c8);
      }
      let _0x5da102 = "*📋 ADMINISTRADORES COM PERMISSÃO*\n\n";
      _0x5da102 += "_Apenas estes administradores podem promover ou rebaixar membros:_\n\n";
      for (let _0x4e4cd3 = 0; _0x4e4cd3 < _0x20be95[0].peradm.length; _0x4e4cd3++) {
        const _0x598149 = _0x20be95[0].peradm[_0x4e4cd3].split('@')[0];
        _0x5da102 += _0x4e4cd3 + 1 + ". @" + _0x598149 + "\n";
        if (_0x4e4cd3 < _0x20be95[0].peradm.length - 1) {
          _0x5da102 += '-'.repeat(20) + "\n\n";
        }
      }
      _0x5da102 += "\n\n*Como usar:*\n";
      _0x5da102 += "• `" + _0x418df6 + "admgm @usuário` - Adiciona/remove da lista\n";
      _0x5da102 += "• `" + _0x418df6 + "admgm 552199540044` - Adiciona/remove usando número\n";
      _0x5da102 += "• `" + _0x418df6 + "antiroubo` - Mostra ajuda completa";
      const _0x183f98 = {
        text: _0x5da102,
        mentions: _0x20be95[0].peradm
      };
      return _0x49e0e2.sendMessage(_0x2584f0, _0x183f98);
    }
    if (!_0x556031) {
      return _0x5d4925("🚫 Apenas meu dono pode modificar a lista de permissões.");
    }
    const _0x3e7a57 = _0x20be95[0].peradm.findIndex(_0x4ab6ff => _0x4ab6ff === _0x13da86);
    if (_0x3e7a57 === -1) {
      _0x20be95[0].peradm.push(_0x13da86);
      _0x388de0(_0x20be95);
      return _0x1c55d9("✅ @" + _0x13da86.split('@')[0] + " foi *ADICIONADO* à lista de permissões! Apenas administradores na lista podem promover ou rebaixar membros.");
    } else {
      _0x20be95[0].peradm.splice(_0x3e7a57, 1);
      _0x388de0(_0x20be95);
      return _0x1c55d9("✅ @" + _0x13da86.split('@')[0] + " foi *REMOVIDO* da lista de permissões.");
    }
  }
}, {
  'name': "antiroubo",
  'aliases': [],
  'category': "admin",
  'description': "Mostra ajuda do sistema anti-roubo",
  'longDescription': "Exibe uma mensagem de ajuda detalhada sobre como funciona o sistema anti-roubo de grupos, que protege contra invasões.",
  'usage': "antiroubo",
  'example': "antiroubo",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x171e5d,
  'requirements': {},
  'execute': async ({
    conn: _0x43f94f,
    info: _0x3c4870,
    from: _0x36c354,
    isGroup: _0x33f1b6,
    prefix: _0x515008,
    reply: _0x52bc4d
  }) => {
    if (!_0x33f1b6) {
      return _0x52bc4d("⚠️ Este comando só funciona em grupos!");
    }
    _0x52bc4d("*🛡️ SISTEMA ANTI-ROUBO DE GRUPOS*\n\nEste sistema protege seu grupo contra invasões, impedindo que administradores não autorizados promovam ou rebaixem membros.\n\n*Como usar:*\n" + ("• `" + _0x515008 + "admgm` - Mostra a lista de administradores com permissão\n") + ("• `" + _0x515008 + "admgm @usuário` - Adiciona ou remove um admin da lista\n") + ("• `" + _0x515008 + "antiroubo` - Mostra esta mensagem de ajuda\n\n") + "*Como funciona:*\n" + "• Se algum administrador sem permissão tentar promover ou rebaixar alguém, ele será automaticamente rebaixado para membro comum.\n" + "• Se alguém tentar rebaixar o bot, será enviado um alerta no grupo.\n" + "• Apenas o dono do bot pode adicionar ou remover administradores da lista de permissões.");
    return true;
  }
}, {
  'name': "fechamento",
  'aliases': ["fechargp"],
  'category': "admin",
  'description': "Fecha o grupo para apenas administradores",
  'longDescription': "Fecha o grupo para que apenas administradores possam enviar mensagens, enviando uma mensagem de aviso para todos os membros.",
  'usage': "fechamento",
  'example': "fechamento",
  'menu': "admin",
  'menuSection': "Grupos",
  'permissions': _0x591bf5,
  'requirements': {},
  'execute': async ({
    conn: _0x57b2e3,
    info: _0x5dbdcc,
    from: _0x3b88ed,
    isGroup: _0x50ea09,
    isGroupAdmins: _0x426ff3,
    isBotGroupAdmins: _0xb61f5d,
    groupMembers: _0x3405bc,
    delay: _0x5f1b40,
    reply: _0x1643f0
  }) => {
    if (!_0x50ea09) {
      return _0x1643f0("SÓ EM GRUPO");
    }
    if (!_0x426ff3) {
      return _0x1643f0("PRECISA SER ADMINISTRADOR");
    }
    if (!_0xb61f5d) {
      return _0x1643f0("BOT PRECISA SER ADMINISTRADOR");
    }
    const _0x5102ea = {
      quoted: _0x5dbdcc
    };
    _0x57b2e3.sendMessage(_0x3b88ed, {
      'text': "▬▬▬.◙.▬▬▬\n═▂▄▄▓▄▄▂\n◢◤😎 █▀▀████▄▄▄▄▄▄◢◤\n█▄ █ :) ██▀▀▀▀▀▀▀╬\n◥█████◤\n══╩══╩══\n\n▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄\n\n*⚠️ALERTA!!!*⚠️\n\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\n\n*☝🏻😌 ESTAREMOS FECHANDO🔐 O GRUPO SÓ PRA ADMS 👩🏼‍✈️👩🏽‍✈️👨🏻‍✈️👨‍✈️ PARA EVITARMOS POSTAGENS INCONVENIENTES.🚫❌( NOTAS FAKES💸💳 TRAVAS ♨️📛OU GRINGOS TARADOS🚷🚮🉐🈺 )❌🚫 *\n*PRIMEIRO ADM A ACORDAR ABRE 🔓 O GP PARA OS MEMBROS👥👤!!!*\n*BOA NOITE E BOM DESCANSO!!* 🌌🌙😴🥱\n*ATÉ MAIS TARDE!!!* 🖤🌹💋\n*NÃO SAIAM DO GP!!!* ✍🏻🤝🏻\n\n🚨🚨🚨🚨🚨🚨🚨🚨🚨🚨\n\n█▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄█",
      'mentions': _0x3405bc.map(_0x3aef60 => _0x3aef60.id)
    }, _0x5102ea);
    await _0x5f1b40(900);
    await _0x57b2e3.groupSettingUpdate(_0x3b88ed, "announcement");
    return true;
  }
}, {
  'name': "circulo",
  'aliases': [],
  'category': "converter",
  'description': "Converte imagem para formato circular",
  'longDescription': "Transforma uma imagem em formato circular, ideal para criar perfis ou figurinhas redondas.",
  'usage': "circulo [marque uma imagem]",
  'example': "circulo [responder a uma imagem]",
  'menu': "converter",
  'menuSection': "Imagem",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x326708,
      isQuotedImage: _0x4c1dfa
    }) => {
      if (!(_0x326708 && info.message.imageMessage || _0x4c1dfa)) {
        const _0x178741 = {
          success: false,
          message: "Marque uma imagem, para que eu possa converter em link."
        };
        return _0x178741;
      }
      const _0x1bc4ba = {
        success: true
      };
      return _0x1bc4ba;
    }
  },
  'execute': async ({
    conn: _0x322c56,
    info: _0x4b7eab,
    from: _0x289ca8,
    isMedia: _0x37ba6d,
    isQuotedImage: _0x54e511,
    Res_Aguarde: _0x92d3e5,
    getFileBuffer: _0x5a5a15,
    fetch: _0x1713d4,
    reply: _0x50238c
  }) => {
    if (!(_0x37ba6d && _0x4b7eab.message.imageMessage || _0x54e511)) {
      const _0x43048c = {
        success: false,
        message: "Marque uma imagem, para que eu possa converter em link."
      };
      return _0x43048c;
    }
    _0x50238c(_0x92d3e5);
    const _0x38e2e0 = require("form-data");
    var _0x52e98d = _0x4b7eab?.["message"]?.["extendedTextMessage"]?.["contextInfo"]?.["quotedMessage"];
    var _0x1e14b7 = _0x52e98d?.["viewOnceMessageV2"]?.["message"]?.["imageMessage"] || _0x52e98d?.["viewOnceMessage"]?.["message"]?.["imageMessage"] || _0x52e98d?.["imageMessage"];
    let _0x1b9b6b = await _0x5a5a15(_0x1e14b7, "image");
    let _0x3d3ba9 = Buffer.from(_0x1b9b6b, "base64");
    try {
      const _0x204a6e = new _0x38e2e0();
      _0x204a6e.append("image", _0x3d3ba9, {
        'filename': "image.jpg",
        'contentType': "image/jpeg"
      });
      let _0x4b0193 = await _0x1713d4("http://sungbot.vip/api/attpCircular", {
        'method': "POST",
        'body': _0x204a6e,
        'headers': _0x204a6e.getHeaders()
      });
      if (!_0x4b0193.ok) {
        throw new Error("Erro ao processar a imagem.");
      }
      let _0x4cab44 = await _0x4b0193.buffer();
      const _0x829c32 = {
        image: _0x4cab44
      };
      const _0x4862b8 = {
        quoted: _0x4b7eab
      };
      await _0x322c56.sendMessage(_0x289ca8, _0x829c32, _0x4862b8);
      return true;
    } catch (_0x2a08c7) {
      console.error("Erro ao enviar imagem para a API:", _0x2a08c7);
      const _0x52da93 = {
        success: false,
        message: "Sinto muito, não consegui processar a imagem."
      };
      return _0x52da93;
    }
  }
}, {
  'name': "ttp",
  'aliases': ["ttp2", "ttp3", "ttp4", "ttp5", "ttp6", "ttp7", "ttp8", "ttp9", "ttp10", "ttp11", "ttp12", "ttp13", "ttp14", "ttp15", "ttp16", "ttp17", "attp3", "attp4", "attp5", "attp6", "attp7", "attp8", "attp9", "attp10", "attp11", "attp12", "attp13", "attp14", "attp15", "attp16", "attp17", "attp18", "attp19"],
  'category': "stickers",
  'description': "Cria sticker de texto",
  'longDescription': "Cria um sticker a partir de texto, com diferentes estilos e animações dependendo da variação do comando.",
  'usage': "ttp [texto]",
  'example': "ttp ESDEATH",
  'menu': "stickers",
  'menuSection': "Figurinhas",
  'permissions': {},
  'requirements': _0x2db5f5,
  'execute': async ({
    conn: _0x5e3d65,
    info: _0x120304,
    from: _0x589748,
    q: _0x2401c4,
    command: _0xeb5c57,
    prefix: _0x119b74,
    enviar: _0x8e982a,
    FigPack: _0x1b8111,
    FigAuthor: _0x124fa0,
    getBuffer: _0x1303fb,
    fs: _0x53663f,
    delay: _0x2bac03,
    reply: _0x2bbc9d
  }) => {
    if (!_0x2401c4.trim()) {
      return {
        'success': false,
        'message': "Exemplo: " + (_0x119b74 + _0xeb5c57) + " ESDEATH"
      };
    }
    _0x2bbc9d(_0x8e982a.espere);
    const _0x113653 = _0xeb5c57.includes("attp") ? "attp" : "ttp";
    const _0x31e458 = async (_0x31da9f, _0x1b7e5d) => {
      try {
        const _0x50e5cc = Math.floor(Math.random() * 10000) + ".mp4";
        const _0x3166ba = Math.floor(Math.random() * 10000) + ".webp";
        if (!Buffer.isBuffer(_0x31da9f)) {
          throw new Error("Formato de mídia inválido");
        }
        _0x53663f.writeFileSync(_0x50e5cc, _0x31da9f);
        await new Promise((_0xc5443f, _0x50376f) => {
          try {
            const _0x1e17c6 = require("fluent-ffmpeg");
            _0x1e17c6(_0x50e5cc).on("error", _0x3e9d9e => {
              console.error("Erro do ffmpeg:", _0x3e9d9e);
              _0x50376f(_0x3e9d9e);
            }).on("end", () => _0xc5443f(true)).addOutputOptions(["-vcodec", "libwebp", "-vf", "scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse", "-loop", '0', "-ss", "00:00:00", '-t', "00:00:05", "-preset", "default", "-an", "-vsync", '0']).toFormat("webp").save(_0x3166ba);
          } catch (_0x29dd91) {
            console.error("Erro ao iniciar ffmpeg:", _0x29dd91);
            _0x50376f(_0x29dd91);
          }
        });
        const _0x237609 = require("node-webpmux");
        const _0x54ae56 = Math.floor(Math.random() * 10000) + ".exif";
        const _0x36ae36 = new _0x237609.Image();
        await _0x36ae36.load(_0x3166ba);
        const _0x5ee95c = {
          "sticker-pack-id": "com.marsvard.stickermakerforwhatsapp.stickercontentprovider 1594741845",
          "sticker-pack-name": _0x1b7e5d.packname,
          "sticker-pack-publisher": _0x1b7e5d.author,
          "android-app-store-link": "https://play.google.com/store/apps/details?id=com.marsvard.stickermakerforwhatsapp&referrer=utm_source%3Dopenwa%26utm_medium%3Dstickerapi%26utm_term%3D6247",
          "ios-app-store-link": "https://itunes.apple.com/app/sticker-maker-studio/id1443326857"
        };
        const _0x1deef2 = Buffer.from([73, 73, 42, 0, 8, 0, 0, 0, 1, 0, 65, 87, 7, 0, 0, 0, 0, 0, 22, 0, 0, 0]);
        const _0x26452f = Buffer.from(JSON.stringify(_0x5ee95c), "utf-8");
        const _0x10e439 = Buffer.concat([_0x1deef2, _0x26452f]);
        _0x10e439.writeUIntLE(_0x26452f.length, 14, 4);
        _0x36ae36.exif = _0x10e439;
        await _0x36ae36.save(_0x54ae56);
        if (_0x53663f.existsSync(_0x50e5cc)) {
          _0x53663f.unlinkSync(_0x50e5cc);
        }
        if (_0x53663f.existsSync(_0x3166ba)) {
          _0x53663f.unlinkSync(_0x3166ba);
        }
        return _0x54ae56;
      } catch (_0x1e55db) {
        console.error("Erro no processamento de vídeo:", _0x1e55db);
        throw _0x1e55db;
      }
    };
    const _0x386c2d = async (_0x1d882f, _0x53114b) => {
      try {
        const _0x5ab642 = Math.floor(Math.random() * 10000) + ".jpg";
        const _0x5aaefd = Math.floor(Math.random() * 10000) + ".webp";
        if (!Buffer.isBuffer(_0x1d882f)) {
          throw new Error("Formato de mídia inválido");
        }
        _0x53663f.writeFileSync(_0x5ab642, _0x1d882f);
        await new Promise((_0x3cff78, _0xe8fbe9) => {
          try {
            const _0x23ff29 = require("fluent-ffmpeg");
            _0x23ff29(_0x5ab642).on("error", _0x3fca81 => {
              console.error("Erro do ffmpeg:", _0x3fca81);
              _0xe8fbe9(_0x3fca81);
            }).on("end", () => _0x3cff78(true)).addOutputOptions(["-vcodec", "libwebp", "-vf", "scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse"]).toFormat("webp").save(_0x5aaefd);
          } catch (_0x2a0bc8) {
            console.error("Erro ao iniciar ffmpeg:", _0x2a0bc8);
            _0xe8fbe9(_0x2a0bc8);
          }
        });
        const _0x328331 = Math.floor(Math.random() * 10000) + ".exif";
        const _0x5a3ea7 = new webp.Image();
        await _0x5a3ea7.load(_0x5aaefd);
        const _0x26c0f6 = {
          "sticker-pack-id": "@Lotus_dev",
          "sticker-pack-name": _0x53114b.packname,
          "sticker-pack-publisher": _0x53114b.author,
          emojis: _0x53114b.categories ? _0x53114b.categories : ['']
        };
        const _0x97bec7 = Buffer.from([73, 73, 42, 0, 8, 0, 0, 0, 1, 0, 65, 87, 7, 0, 0, 0, 0, 0, 22, 0, 0, 0]);
        const _0x37b700 = Buffer.from(JSON.stringify(_0x26c0f6), "utf-8");
        const _0x5f50d3 = Buffer.concat([_0x97bec7, _0x37b700]);
        _0x5f50d3.writeUIntLE(_0x37b700.length, 14, 4);
        _0x5a3ea7.exif = _0x5f50d3;
        await _0x5a3ea7.save(_0x328331);
        if (_0x53663f.existsSync(_0x5ab642)) {
          _0x53663f.unlinkSync(_0x5ab642);
        }
        if (_0x53663f.existsSync(_0x5aaefd)) {
          _0x53663f.unlinkSync(_0x5aaefd);
        }
        return _0x328331;
      } catch (_0x32add0) {
        console.error("Erro no processamento de imagem:", _0x32add0);
        throw _0x32add0;
      }
    };
    try {
      const _0x56da9f = "http://sungbot.vip/api/" + _0x113653 + "?command=" + _0xeb5c57 + "&text=" + encodeURIComponent(_0x2401c4);
      const _0x5146eb = await _0x1303fb(_0x56da9f);
      let _0xf3c63f;
      try {
        const _0x46045d = {
          packname: _0x1b8111,
          author: _0x124fa0
        };
        const _0x381b8e = {
          packname: _0x1b8111,
          author: _0x124fa0
        };
        _0xf3c63f = await (_0xeb5c57.startsWith("attp") ? _0x31e458(_0x5146eb, _0x46045d) : _0x386c2d(_0x5146eb, _0x381b8e));
      } catch (_0x56e3bd) {
        console.error("Primeira tentativa falhou:", _0x56e3bd.message);
        const _0xd56de8 = {
          packname: _0x1b8111,
          author: _0x124fa0
        };
        const _0x362f5c = {
          packname: _0x1b8111,
          author: _0x124fa0
        };
        _0xf3c63f = await (_0xeb5c57.startsWith("attp") ? _0x386c2d(_0x5146eb, _0xd56de8) : _0x31e458(_0x5146eb, _0x362f5c));
      }
      if (!_0xf3c63f) {
        throw new Error("Falha ao processar o sticker");
      }
      const _0x40e774 = {
        url: _0xf3c63f
      };
      const _0x146ce2 = {
        sticker: _0x40e774
      };
      const _0x20793a = {
        quoted: _0x120304
      };
      await _0x5e3d65.sendMessage(_0x589748, _0x146ce2, _0x20793a);
      await _0x2bac03(5000);
      if (_0x53663f.existsSync(_0xf3c63f)) {
        _0x53663f.unlinkSync(_0xf3c63f);
      }
      return true;
    } catch (_0x355951) {
      console.error("Erro ao criar sticker:", _0x355951);
      const _0x421a06 = {
        success: false,
        message: "Erro ao criar o sticker: " + _0x355951.message
      };
      return _0x421a06;
    }
  }
}, {
  'name': "setdivmsg",
  'aliases': [],
  'category': "dono",
  'description': "Define mensagem de divulgação",
  'longDescription': "Define uma mensagem para ser usada no comando divmsg, junto com a quantidade de envios.",
  'usage': "setdivmsg texto|quantidade",
  'example': "setdivmsg OIIIII|10",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x2bc338,
  'requirements': {},
  'execute': async ({
    conn: _0x52740b,
    info: _0x5ac5b7,
    from: _0x5072be,
    q: _0x46ea13,
    prefix: _0x566f53,
    command: _0x3e076b,
    reply: _0x4ea62b
  }) => {
    if (!_0x46ea13) {
      return {
        'success': false,
        'message': "Está faltando o texto e quantidade.\nExemplo: " + (_0x566f53 + _0x3e076b) + " OIIIII|10"
      };
    }
    const [_0x13e965, _0x279a03] = _0x46ea13.split('|').map(_0x281251 => _0x281251.trim());
    const _0x51063f = parseInt(_0x279a03);
    if (!_0x13e965 || isNaN(_0x51063f) || _0x51063f <= 0) {
      return {
        'success': false,
        'message': "Formato inválido! Use: " + (_0x566f53 + _0x3e076b) + " TEXTO|QUANTIDADE"
      };
    }
    global.mensagemDiv = _0x13e965;
    global.quantidadeDiv = _0x51063f;
    _0x4ea62b("✅ Mensagem definida: \"" + _0x13e965 + "\"\n📊 Quantidade: " + _0x51063f);
    return true;
  }
}, {
  'name': "divmsg",
  'aliases': [],
  'category': "grupo",
  'description': "Envia mensagem de divulgação no grupo",
  'longDescription': "Envia uma mensagem de divulgação para o grupo várias vezes, mencionando todos os membros.",
  'usage': "divmsg [texto|quantidade]",
  'example': "divmsg",
  'menu': "grupo",
  'menuSection': "Comunicação",
  'permissions': _0x166d7e,
  'requirements': {},
  'execute': async ({
    conn: _0x27363b,
    info: _0x37299b,
    from: _0x5ac1a5,
    q: _0xc4320c,
    isGroup: _0xe330a2,
    groupMembers: _0x76808b,
    prefix: _0x35659e,
    delay: _0x401d06,
    reply: _0x376282
  }) => {
    let _0x5dbb00 = global.mensagemDiv;
    let _0xa4d518 = global.quantidadeDiv || 1;
    if (_0xc4320c && _0xc4320c.trim()) {
      if (_0xc4320c.includes('|')) {
        const [_0x261a48, _0x5af61c] = _0xc4320c.split('|').map(_0x4e1e14 => _0x4e1e14.trim());
        if (_0x261a48) {
          _0x5dbb00 = _0x261a48;
        }
        const _0x38a99f = parseInt(_0x5af61c);
        if (!isNaN(_0x38a99f) && _0x38a99f > 0) {
          _0xa4d518 = _0x38a99f;
        }
      } else {
        _0x5dbb00 = _0xc4320c.trim();
      }
    }
    const _0x19a825 = {
      success: false,
      message: "❌ Nenhuma mensagem definida. Use " + _0x35659e + "setdivmsg TEXTO|QUANTIDADE"
    };
    if (!_0x5dbb00) {
      return _0x19a825;
    }
    _0xa4d518 = Math.min(Math.max(1, _0xa4d518), 20);
    const _0x2d34c3 = _0x76808b.map(_0x1b9226 => _0x1b9226.id);
    const _0x28a503 = {
      mentionedJid: _0x2d34c3,
      forwardingScore: 0x3e7,
      isForwarded: true
    };
    const _0x5a6ebc = {
      text: _0x5dbb00,
      contextInfo: _0x28a503
    };
    const _0x4c9516 = {
      extendedTextMessage: _0x5a6ebc
    };
    const _0x1aa080 = {
      currencyCodeIso4217: "BRL",
      amount1000: "1000",
      noteMessage: _0x4c9516,
      expiryTimestamp: '0',
      amount: {}
    };
    _0x1aa080.amount.value = "1000";
    _0x1aa080.amount.offset = 0x3e8;
    _0x1aa080.amount.currencyCode = "BRL";
    const _0x5bd9a6 = {
      requestPaymentMessage: _0x1aa080
    };
    const _0x43a95d = {
      fromMe: false,
      remoteJid: _0x5ac1a5
    };
    const _0x16843d = {
      key: _0x43a95d,
      message: _0x5bd9a6
    };
    for (let _0x4893a8 = 0; _0x4893a8 < _0xa4d518; _0x4893a8++) {
      await _0x27363b.relayMessage(_0x5ac1a5, _0x16843d.message, {
        'messageId': _0x16843d.key.id
      });
      if (_0x4893a8 < _0xa4d518 - 1) {
        await _0x401d06(300);
      }
    }
    return true;
  }
}, {
  'name': "nuke",
  'aliases': ["arquivargp"],
  'category': "dono",
  'description': "Arquiva um grupo",
  'longDescription': "Arquiva um grupo removendo todos os membros, rebaixando administradores e alterando nome e descrição.",
  'usage': "nuke",
  'example': "nuke",
  'menu': "dono",
  'menuSection': "Gestão",
  'permissions': _0xb4e75d,
  'requirements': {},
  'execute': async ({
    conn: _0x38db6a,
    info: _0x3763dc,
    from: _0x564e9f,
    SoDono: _0x39ee40,
    Res_SoDono: _0x107773,
    isBotGroupAdmins: _0x21c440,
    enviar: _0x15f043,
    groupMembers: _0xfcf707,
    botNumber: _0x3d0c69,
    numerodono: _0x417037,
    reply: _0x570627
  }) => {
    if (!_0x39ee40) {
      const _0x1568f9 = {
        success: false,
        message: _0x107773
      };
      return _0x1568f9;
    }
    if (!_0x21c440) {
      const _0x4682e9 = {
        success: false,
        message: _0x15f043.msg.Badmin
      };
      return _0x4682e9;
    }
    if (_0x3763dc.key.fromMe) {
      return;
    }
    try {
      await Promise.all([_0x38db6a.groupUpdateSubject(_0x564e9f, "Grupo Arquivado"), _0x38db6a.groupUpdateDescription(_0x564e9f, "Este grupo foi arquivado e está inativo.")]);
      let _0x3d7b0a = _0xfcf707.filter(_0x1bdb6b => _0x1bdb6b.isAdmin && _0x1bdb6b.id !== _0x3d0c69).map(_0x5c6ea9 => _0x5c6ea9.id);
      if (_0x3d7b0a.length > 0) {
        await _0x38db6a.groupParticipantsUpdate(_0x564e9f, _0x3d7b0a, "demote");
      }
      let _0x262749 = _0xfcf707.filter(_0x2c8692 => !_0x417037.includes(_0x2c8692.id) && _0x2c8692.id !== _0x3d0c69).map(_0x390990 => _0x390990.id);
      if (_0x262749.length > 0) {
        await _0x38db6a.groupParticipantsUpdate(_0x564e9f, _0x262749, "remove");
      }
      _0x570627("⚠️ O grupo foi arquivado. Todos os membros foram removidos, os administradores despromovidos, e o nome e descrição do grupo foram alterados. ⚠️");
      return true;
    } catch (_0x556a55) {
      console.error("Erro ao arquivar o grupo: ", _0x556a55);
      const _0x5926a0 = {
        success: false,
        message: "Ocorreu um erro ao tentar arquivar o grupo."
      };
      return _0x5926a0;
    }
  }
}, {
  'name': "tiktok",
  'aliases': ["facebook", "instagram", "twitter"],
  'category': "downloader",
  'description': "Menu de download de mídias sociais",
  'longDescription': "Exibe um menu para escolher o formato de download de vídeos do TikTok, Facebook, Instagram ou Twitter.",
  'usage': "tiktok [link]",
  'example': "tiktok https://www.tiktok.com/@user/video/123456789",
  'menu': "downloads",
  'menuSection': "Mídia",
  'permissions': {},
  'requirements': _0x48d00a,
  'execute': async ({
    conn: _0x43edf7,
    info: _0x3b704b,
    from: _0x2c0204,
    q: _0x12e8aa,
    command: _0x38320f,
    sender: _0x5e7ff8,
    prefix: _0x2fcaaa,
    getUniqueKey: _0x26940d,
    optionsBuffer: _0x28e1d4,
    flushOptionsBuffer: _0x5811b6,
    createChoiceMenu: _0x1ab24b,
    LIMPARDOCNT_QUEMJASAIU: _0x54270e,
    reply: _0x263a19
  }) => {
    if (!_0x12e8aa) {
      const _0x56c598 = {
        success: false,
        message: '*' + _0x38320f + "*\nPor favor, envie o link para realizar o download."
      };
      return _0x56c598;
    }
    await _0x54270e();
    const _0x22d05c = _0x26940d(_0x2c0204, _0x5e7ff8);
    if (_0x28e1d4[_0x22d05c]) {
      delete _0x28e1d4[_0x22d05c];
      _0x5811b6();
    }
    const _0x44bcdf = {
      'principal': {
        'text': '*' + _0x38320f + "*\nQual Formato Vc Deseja Para O Download?\n\n1 - 🎧 𝑨𝑼𝑫𝑰𝑶 📀\n2 - 🎧 𝑨𝑼𝑫𝑰𝑶 2 📀\n3 - 📽 𝑽𝑰𝑫𝑬𝑶 🖥\n4 - 📽 𝑽𝑰𝑫𝑬𝑶 2 🖥",
        'options': {
          '1': {
            'command': _0x2fcaaa + _0x38320f + "_audio " + _0x12e8aa,
            'edit': true
          },
          '2': {
            'command': _0x2fcaaa + _0x38320f + "_audio2 " + _0x12e8aa,
            'edit': true
          },
          '3': {
            'command': _0x2fcaaa + _0x38320f + "_video " + _0x12e8aa,
            'edit': true
          },
          '4': {
            'command': _0x2fcaaa + _0x38320f + "_video2 " + _0x12e8aa,
            'edit': true
          }
        }
      }
    };
    await _0x1ab24b(_0x2c0204, _0x5e7ff8, _0x44bcdf.principal.text, _0x44bcdf.principal.options, {
      'menus': _0x44bcdf,
      'history': ["principal"]
    });
    return true;
  }
}, {
  'name': "statuszap",
  'aliases': [],
  'category': "premium",
  'description': "Envia vídeos aleatórios de status",
  'longDescription': "Envia um vídeo aleatório para usar como status do WhatsApp. Exclusivo para usuários premium.",
  'usage': "statuszap",
  'example': "statuszap",
  'menu': "premium",
  'menuSection': "Mídia",
  'permissions': {},
  'requirements': _0x51cada,
  'execute': async ({
    conn: _0x36f3ee,
    info: _0x428fc2,
    from: _0x5b301a,
    isPremium: _0x4e7391,
    SoDono: _0x191a26,
    reply: _0x4c7f07
  }) => {
    if (!_0x4e7391 && !_0x191a26) {
      return _0x4c7f07("VOCÊ NÃO É UM USUÁRIO PREMIUM 🙂🖕");
    }
    rand01 = Math.floor(Math.random() * 84 * 1);
    blaLN = "https://raw.githubusercontent.com/Vangeancewins/arquivos-base/main/videos/" + rand01 + ".mp4";
    const _0x145eda = {
      url: blaLN
    };
    const _0x2793b6 = {
      video: _0x145eda,
      mimetype: "video/mp4",
      caption: "🔥𝐕𝐈𝐃𝐄𝐎𝐒🔥"
    };
    const _0x480121 = {
      quoted: _0x428fc2
    };
    _0x36f3ee.sendMessage(_0x5b301a, _0x2793b6, _0x480121);
    return true;
  }
}, {
  'name': "wame",
  'aliases': [],
  'category': "utilidades",
  'description': "Mostra seu link de WhatsApp",
  'longDescription': "Gera um link de WhatsApp para seu número que outras pessoas podem usar para iniciar uma conversa com você.",
  'usage': "wame",
  'example': "wame",
  'menu': "utils",
  'menuSection': "Consultas",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x51594e,
    info: _0x19551a,
    from: _0x37fa79,
    sender2: _0x26709b,
    reply: _0x459345
  }) => {
    _0x459345("wa.me/" + _0x26709b);
    return true;
  }
}, {
  'name': "animets",
  'aliases': [],
  'category': "anime",
  'description': "Envia imagens de animes",
  'longDescription': "Envia uma imagem aleatória do anime solicitado.",
  'usage': "animets [nome do anime]",
  'example': "animets naruto",
  'menu': "anime",
  'menuSection': "Mídia",
  'permissions': {},
  'requirements': _0x569012,
  'execute': async ({
    conn: _0x1951d5,
    info: _0x1d3e57,
    from: _0x4b3b39,
    q: _0x552d73,
    fetchJson: _0x4386f0,
    reply: _0x37436d
  }) => {
    try {
      blaLN = await _0x4386f0("https://raw.githubusercontent.com/Salientekill/figurinhas/main/animes/jsons/" + _0x552d73 + ".json");
      blarnd = blaLN[Math.floor(Math.random() * blaLN.length)];
      const _0xefd441 = {
        url: blarnd
      };
      const _0x2d4d05 = {
        image: _0xefd441,
        caption: "🇯🇵 𝐎 𝐀𝐍𝐈𝐌𝐄 𝐐𝐔𝐄 𝐕𝐎𝐂𝐄̂ 𝐏𝐄𝐃𝐈𝐔 🎌"
      };
      const _0x16bba7 = {
        quoted: _0x1d3e57
      };
      _0x1951d5.sendMessage(_0x4b3b39, _0x2d4d05, _0x16bba7);
      return true;
    } catch (_0x3536b3) {
      console.log(_0x3536b3);
      const _0x2bd33a = {
        success: false,
        message: "🤖 𝐀𝐏𝐈 𝐂𝐀𝐈𝐔 🤖"
      };
      return _0x2bd33a;
    }
  }
}, {
  'name': "listafake",
  'aliases': [],
  'category': "admin",
  'description': "Lista membros com números estrangeiros",
  'longDescription': "Lista todos os membros do grupo que possuem números estrangeiros (não brasileiros).",
  'usage': "listafake",
  'example': "listafake",
  'menu': "admin",
  'menuSection': "Grupo",
  'permissions': _0x1eedfc,
  'requirements': {},
  'execute': async ({
    conn: _0x3d8378,
    info: _0x2e2e73,
    from: _0x1d0eab,
    EmojiBot: _0x2913d0,
    isGroup: _0x565009,
    enviar: _0x328b86,
    isGroupAdmins: _0x43c820,
    isBotGroupAdmins: _0x4b6d24,
    groupMembers: _0x11b6ff,
    reply: _0x132ef1
  }) => {
    if (!_0x565009) {
      return _0x132ef1(_0x328b86.msg.grupo);
    }
    if (!_0x43c820) {
      return _0x132ef1(_0x328b86.msg.adm);
    }
    if (!_0x4b6d24) {
      return _0x132ef1(_0x328b86.msg.Badmin);
    }
    teks = _0x2913d0 + " Números fakes no grupo: " + _0x2913d0 + "\n";
    men = [];
    for (let _0x3a61ad of _0x11b6ff) {
      if (!_0x3a61ad.id.startsWith(55)) {
        teks += "┃✼❄ @" + _0x3a61ad.id.split('@')[0] + "\n";
        men.push(_0x3a61ad.id);
      }
    }
    if (teks.indexOf("┃✼❄") < 0) {
      const _0x4b76aa = {
        success: false,
        message: "*Nenhum numero Gringo foi encontrado*"
      };
      return _0x4b76aa;
    }
    const _0x34ed29 = {
      text: teks,
      mentions: men
    };
    _0x3d8378.sendMessage(_0x1d0eab, _0x34ed29);
    return true;
  }
}, {
  'name': "abraco",
  'aliases': ["abraço"],
  'category': "brincadeira",
  'description': "Dá um abraço em um membro do grupo",
  'longDescription': "Simula dar um abraço em um membro do grupo como forma de brincadeira, enviando um GIF com a menção do usuário.",
  'usage': "abraco @usuário",
  'example': "abraco @membro",
  'menu': "jogos",
  'menuSection': "Interação",
  'permissions': _0x4d67d7,
  'requirements': {},
  'execute': async ({
    conn: _0x28e0d1,
    info: _0x18c730,
    from: _0x226457,
    Res_SoGrupo: _0x2924a3,
    isModobn: _0x5e0890,
    prefix: _0x5b949a,
    menc_os2: _0x2e0585,
    abracocmd: _0x2b0077,
    reply: _0x2e8e65
  }) => {
    if (!_0x5e0890) {
      return _0x2e8e65("Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for, apenas digite " + _0x5b949a + "modobrincadeira 1");
    }
    if (!_0x2e0585) {
      return _0x2e8e65("Marque a pessoa que você quer abraçar, a mensagem ou o @");
    }
    const _0x5b4b78 = {
      url: _0x2b0077
    };
    const _0x18f562 = {
      quoted: _0x18c730
    };
    _0x28e0d1.sendMessage(_0x226457, {
      'video': _0x5b4b78,
      'gifPlayback': true,
      'caption': "Você deu um abraço gostoso na(o) @" + _0x2e0585.split('@')[0] + " 😁👉👈❤",
      'mentions': [_0x2e0585]
    }, _0x18f562);
    return true;
  }
}, {
  'name': "setperfil",
  'aliases': [],
  'category': "dono",
  'description': "Altera a foto de perfil do bot",
  'longDescription': "Altera a foto de perfil do bot usando uma imagem marcada. Apenas o dono pode usar este comando.",
  'usage': "setperfil [marque uma imagem]",
  'example': "setperfil [responder a uma imagem]",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x10d019,
  'requirements': {
    'customRequirement': ({
      isQuotedImage: _0x21dfcc
    }) => {
      if (!_0x21dfcc) {
        const _0x44a294 = {
          success: false,
          message: "Marque a nova foto de perfil do bot."
        };
        return _0x44a294;
      }
      const _0x5e7550 = {
        success: true
      };
      return _0x5e7550;
    }
  },
  'execute': async ({
    conn: _0x423d7a,
    info: _0x4faa81,
    from: _0x12e8d7,
    SoDono: _0x43ef87,
    botNumber: _0x1881a4,
    isQuotedImage: _0x52513e,
    fs: _0x2e47cb,
    getFileBuffer: _0xc0156,
    reply: _0x4e746d
  }) => {
    if (!_0x43ef87) {
      return _0x4e746d("Apenas o dono pode alterar a foto do perfil do bot.");
    }
    if (!_0x52513e) {
      return _0x4e746d("Marque a nova foto de perfil do bot.");
    }
    try {
      let _0x24f7d2 = JSON.parse(JSON.stringify(_0x4faa81).replace("quotedM", 'm')).message.extendedTextMessage.contextInfo.message.imageMessage;
      let _0x37fd15 = await _0xc0156(_0x24f7d2, "image");
      let _0x38a8b4 = "foto_" + Date.now() + ".jpg";
      const _0x28f59b = {
        recursive: true
      };
      if (!_0x2e47cb.existsSync("./dados/midias/img/")) {
        _0x2e47cb.mkdirSync("./dados/midias/img/", _0x28f59b);
      }
      let _0x788611 = "./dados/midias/img/" + _0x38a8b4;
      _0x2e47cb.writeFileSync(_0x788611, _0x37fd15);
      const _0x38b747 = {
        url: _0x788611
      };
      await _0x423d7a.updateProfilePicture(_0x1881a4, _0x38b747);
      _0x2e47cb.unlinkSync(_0x788611);
      _0x4e746d("Pronto, foto do perfil do bot alterada com sucesso!");
      return true;
    } catch (_0x420283) {
      const _0x3f59be = {
        success: false,
        message: "Ocorreu um erro ao alterar a foto de perfil."
      };
      return _0x3f59be;
    }
  }
}, {
  'name': "setfotogp",
  'aliases': [],
  'category': "admin",
  'description': "Altera a foto do grupo",
  'longDescription': "Altera a foto do grupo usando uma imagem marcada. Apenas administradores podem usar este comando.",
  'usage': "setfotogp [marque uma imagem]",
  'example': "setfotogp [responder a uma imagem]",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x1d47dc,
  'requirements': {
    'customRequirement': ({
      isQuotedImage: _0x340d80
    }) => {
      if (!_0x340d80) {
        const _0x551488 = {
          success: false,
          message: "Marque a nova foto do grupo."
        };
        return _0x551488;
      }
      const _0x5d5411 = {
        success: true
      };
      return _0x5d5411;
    }
  },
  'execute': async ({
    conn: _0x571c52,
    info: _0x309611,
    from: _0x1353d4,
    isGroup: _0x46f61b,
    enviar: _0x54ce9d,
    isGroupAdmins: _0x41b441,
    isBotGroupAdmins: _0x4d9ca8,
    isQuotedImage: _0x4085bf,
    fs: _0x5c405b,
    getFileBuffer: _0x2f8934,
    reply: _0x8ec62e
  }) => {
    if (!_0x46f61b) {
      return _0x8ec62e(_0x54ce9d.msg.grupo);
    }
    if (!_0x41b441) {
      return _0x8ec62e(_0x54ce9d.msg.adm);
    }
    if (!_0x4d9ca8) {
      return _0x8ec62e(_0x54ce9d.msg.Badmin);
    }
    if (!_0x4085bf) {
      return _0x8ec62e("Marque a nova foto do grupo.");
    }
    try {
      let _0x1f885 = JSON.parse(JSON.stringify(_0x309611).replace("quotedM", 'm')).message.extendedTextMessage.contextInfo.message.imageMessage;
      let _0x2a4b1a = await _0x2f8934(_0x1f885, "image");
      let _0x345826 = "foto_" + Date.now() + ".jpg";
      const _0x3d742f = {
        recursive: true
      };
      if (!_0x5c405b.existsSync("./dados/midias/img/")) {
        _0x5c405b.mkdirSync("./dados/midias/img/", _0x3d742f);
      }
      let _0x459bf9 = "./dados/midias/img/" + _0x345826;
      _0x5c405b.writeFileSync(_0x459bf9, _0x2a4b1a);
      const _0x35fc8e = {
        url: _0x459bf9
      };
      await _0x571c52.updateProfilePicture(_0x1353d4, _0x35fc8e);
      _0x5c405b.unlinkSync(_0x459bf9);
      _0x8ec62e("Pronto, foto do grupo alterada com sucesso!");
      return true;
    } catch (_0x58e94a) {
      const _0x3d34d3 = {
        success: false,
        message: "Ocorreu um erro ao alterar a foto do grupo."
      };
      return _0x3d34d3;
    }
  }
}, {
  'name': "clima",
  'aliases': ["tempo"],
  'category': "utilidades",
  'description': "Mostra informações do clima de uma cidade",
  'longDescription': "Exibe dados meteorológicos atuais de uma cidade específica, incluindo temperatura, umidade e condições climáticas.",
  'usage': "clima [cidade]",
  'example': "clima São Paulo",
  'menu': "utilidades",
  'menuSection': "Ferramentas",
  'permissions': {},
  'requirements': _0x11d294,
  'execute': async ({
    conn: _0x29cf80,
    info: _0x423ddd,
    from: _0xc13150,
    q: _0x5bf0c6,
    prefix: _0x2d5507,
    command: _0x1bedc3,
    moment: _0x4c0236,
    axios: _0x3b5833,
    reply: _0x2991b3
  }) => {
    if (!_0x5bf0c6) {
      return {
        'success': false,
        'message': "Use " + (_0x2d5507 + _0x1bedc3) + " cidade"
      };
    }
    var _0x37981f = ['á', 'â', 'é', 'ê', 'í', 'ó', 'ô', 'ú', 'ç'];
    for (var _0x2063ca = 0; _0x2063ca < _0x37981f.length; _0x2063ca++) {
      if (_0x5bf0c6.includes(_0x37981f[_0x2063ca])) {
        const _0x121eba = {
          success: false,
          message: "Por favor, remova os acentos"
        };
        return _0x121eba;
      }
    }
    try {
      clima = await _0x3b5833.get("https://api.openweathermap.org/data/2.5/weather?q=" + _0x5bf0c6.trim() + "&appid=1d0bdf08a222f8f2da252ef8921ff4ab&units=metric&lang=pt_br");
      if (clima.error) {
        const _0x41aa0f = {
          success: false,
          message: clima.error
        };
        return _0x41aa0f;
      }
      hora1 = _0x4c0236.tz("America/Sao_Paulo").format("HH:mm:ss");
      jr = "\n┌──────TEMPO──────┐\n│‣🌡️ Agora: " + clima.data.main.temp + "ºc\n│‣🏙️ Cidade: " + clima.data.name + "\n┌─────────────┐\n│‣🔺 Temp. max: " + clima.data.main.temp_max + "ºc\n│‣🔻 Temp. min: " + clima.data.main.temp_min + "ºc\n│‣🌦️ Clima: " + clima.data.weather[0].description + "\n│‣💧 Umidade do ar: " + clima.data.main.humidity + "%\n│‣🌬️ Ventos: " + clima.data.wind.speed + "\n└───────────〔 " + hora1 + " 〕";
      const _0x1b0a9f = {
        text: jr
      };
      const _0x5f2ceb = {
        mentionedJid: jr
      };
      const _0xdf3ee9 = {
        quoted: _0x423ddd,
        contextInfo: _0x5f2ceb
      };
      await _0x29cf80.sendMessage(_0xc13150, _0x1b0a9f, _0xdf3ee9);
      return true;
    } catch (_0x1b7ce7) {
      const _0x130f13 = {
        success: false,
        message: "Cidade não encontrada ou erro na API de clima."
      };
      return _0x130f13;
    }
  }
}, {
  'name': "roleta",
  'aliases': [],
  'category': "brincadeira",
  'description': "Escolhe um membro aleatório para ser removido do grupo",
  'longDescription': "Brincadeira de roleta russa onde o bot remove aleatoriamente um membro do grupo. Requer que o modo brincadeira esteja ativado.",
  'usage': "roleta",
  'example': "roleta",
  'menu': "jogos",
  'menuSection': "Diversão",
  'permissions': _0x275f18,
  'requirements': {},
  'execute': async ({
    conn: _0x571998,
    info: _0x4e5584,
    from: _0x2c26c0,
    sender: _0x4913a9,
    botNumber: _0xcdd9d3,
    isGroup: _0x21f3c9,
    isGroupAdmins: _0x55628e,
    isBotGroupAdmins: _0x341213,
    isModobn: _0x190aaf,
    groupMembers: _0x55967f,
    fs: _0x528b68,
    mentions: _0x253dae,
    reply: _0x2f3f2b
  }) => {
    if (!_0x21f3c9) {
      const _0x4f10b8 = {
        success: false,
        message: "Só grupo"
      };
      return _0x4f10b8;
    }
    if (!_0x55628e) {
      const _0xa4c874 = {
        success: false,
        message: "Quem é tu na fila do pão, somente adm 😂"
      };
      return _0xa4c874;
    }
    if (!_0x341213) {
      const _0x261a35 = {
        success: false,
        message: "O bot precisa ser adm garai"
      };
      return _0x261a35;
    }
    if (!_0x190aaf) {
      const _0x43ca5e = {
        success: false,
        message: "Modo brincadeira desativado, peça a algum adm"
      };
      return _0x43ca5e;
    }
    jds = [];
    A2 = _0x55967f;
    B2 = _0x55967f;
    TAMBOR = ["na perna.", "na cabeça.", "no pescoço.", "no peito.", "no olho.", "no estômago.", "na boca.", "na perna.", "na testa.", "no braço."];
    C2 = A2[Math.floor(Math.random() * A2.length)];
    if (C2 === _0x4913a9 || C2 === _0xcdd9d3 + "@s.whatsapp.net") {
      return {
        'success': false,
        'message': "*Escolhi* @" + C2.id.split('@')[0] + " mas infelizmente correu de covardia...*"
      };
    }
    tpa = TAMBOR[Math.floor(Math.random() * TAMBOR.length)];
    _0x2f3f2b("*A escolha é minha! 1 membro irá morrer, que os jogos comecem...* ");
    setTimeout(() => {
      D1 = "*Que pena... você não sobreviveu ao meu jogo* @" + C2.id.split('@')[0] + ", *hora de enterrar o cadáver, infelizmente morreu com tiro* *" + tpa + '*';
      _0x253dae(D1, jds, true);
    }, 5000);
    jds.push(C2.id);
    setTimeout(() => {
      jds.push(C2.id);
      _0x571998.groupParticipantsUpdate(_0x2c26c0, [C2.id], '☠️');
      rollfig = _0x528b68.readFileSync("./dados/midias/figs/roleta.webp");
      const _0xd9cd0 = {
        sticker: rollfig
      };
      const _0x66c469 = {
        quoted: _0x4e5584
      };
      _0x571998.sendMessage(_0x2c26c0, _0xd9cd0, _0x66c469);
    }, 6000);
    return true;
  }
}, {
  'name': "serpremium",
  'aliases': ["serprem"],
  'category': "dono",
  'description': "Adiciona o próprio dono como usuário premium",
  'longDescription': "Adiciona o próprio dono à lista de usuários premium, permitindo que ele tenha acesso a todos os recursos exclusivos.",
  'usage': "serpremium",
  'example': "serpremium",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x3e99a3,
  'requirements': {},
  'execute': async ({
    conn: _0x59d534,
    info: _0x17d14b,
    from: _0x132cc2,
    SoDono: _0x361af9,
    sender: _0x584b5b,
    isnit: _0x3c4feb,
    issupre: _0x57af5e,
    ischyt: _0x2ba854,
    numerodono_ofc: _0x341043,
    pushname: _0xd3a58e,
    BANCOP: _0x1987e5,
    mention: _0x27b3d3,
    reply: _0x15e711
  }) => {
    if (!_0x361af9 && !_0x3c4feb && !_0x57af5e && !_0x2ba854 && !_0x17d14b.key.fromMe) {
      return _0x15e711(Res_SoDono);
    }
    try {
      const _0x28436e = _0x1987e5.prepare("SELECT * FROM usuarios_premium WHERE user_id = ? AND status = 'ativo'");
      const _0x52bde2 = _0x28436e.get(_0x584b5b);
      if (_0x52bde2) {
        return _0x15e711("Você já é um usuário premium! Seu plano expira em: " + new Date(_0x52bde2.vencimento * 1000).toLocaleString("pt-BR"));
      }
      const _0x1c5afb = Math.floor(Date.now() / 1000);
      const _0x22c78c = _0x1c5afb + 31536000;
      const _0x55f364 = _0x1987e5.prepare("\nINSERT INTO usuarios_premium \n(user_id, nome, inicio, vencimento, plano, status, adicionado_por, timestamp_criacao) \nVALUES (?, ?, ?, ?, ?, 'ativo', ?, ?)");
      _0x55f364.run(_0x584b5b, _0xd3a58e || "Dono", _0x1c5afb, _0x22c78c, "vitalício", "Self", _0x1c5afb);
      const _0x39d1cb = new Date(_0x22c78c * 1000).toLocaleString("pt-BR");
      _0x27b3d3("🌟 Parabéns @" + _0x341043 + "! Você foi adicionado como usuário premium.\n\n📆 Validade: " + _0x39d1cb + "\n💎 Plano: Vitalício\n\nAgora você tem acesso a todos os recursos exclusivos!");
      return true;
    } catch (_0x301df4) {
      console.error("Erro ao adicionar usuário premium:", _0x301df4);
      _0x15e711("❌ Ocorreu um erro ao adicionar seu status premium. Tente novamente mais tarde.");
      return false;
    }
  }
}, {
  'name': "casamento",
  'aliases': [],
  'category': "brincadeira",
  'description': "Pede alguém em casamento",
  'longDescription': "Envia um GIF simulando um pedido de casamento para outro membro do grupo.",
  'usage': "casamento @usuário",
  'example': "casamento @membro",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x3490d8,
  'requirements': {},
  'execute': async ({
    conn: _0x1cd73a,
    info: _0xa27f96,
    from: _0x178b3a,
    prefix: _0x2dbd8f,
    menc_os2: _0x308ec5,
    menc_jid2: _0x5858fb,
    casamentocmd: _0x3426b6,
    reply: _0x157f85
  }) => {
    if (!_0x308ec5 || _0x5858fb[1]) {
      return _0x157f85("Marque a pessoa que você quer pedir em casamento, a mensagem ou o @");
    }
    const _0x3b54fc = {
      url: _0x3426b6
    };
    const _0x4c7f6c = {
      quoted: _0xa27f96
    };
    _0x1cd73a.sendMessage(_0x178b3a, {
      'video': _0x3b54fc,
      'gifPlayback': true,
      'caption': "Você pediu em casamento a(o) @" + _0x308ec5.split('@')[0] + " 😁👉👈❤",
      'mentions': [_0x308ec5]
    }, _0x4c7f6c);
    return true;
  }
}, {
  'name': "admautoban",
  'aliases': [],
  'category': "admin",
  'description': "Adiciona admins de outro grupo à lista negra",
  'longDescription': "Entra em um grupo através de um link de convite, adiciona todos os administradores à lista negra e sai do grupo.",
  'usage': "admautoban [link do grupo]",
  'example': "admautoban https://chat.whatsapp.com/...",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x1d9aba,
  'requirements': _0x263522,
  'execute': async ({
    conn: _0x4ba1d5,
    info: _0x2f128e,
    from: _0x2e5805,
    q: _0x31a545,
    Res_SoGrupo: _0x9896d7,
    isGroup: _0x15e571,
    isGroupAdmins: _0x5b626e,
    SoDono: _0x5b3a71,
    dataGp: _0x1d68d0,
    setGp: _0xc0acc8,
    delay: _0xf71f28,
    reply: _0x576f7e
  }) => {
    if (!_0x15e571) {
      return _0x576f7e(_0x9896d7);
    }
    if (!_0x5b626e && !_0x5b3a71) {
      return _0x576f7e("Precisa ser Dono ou Adm");
    }
    _0x576f7e("Espere um momento");
    var _0x319745 = /chat.whatsapp.com\/([0-9A-Za-z]{20,24})/i;
    var [_0x47ca07, _0x4f9f1f] = _0x31a545.match(_0x319745) || [];
    if (!_0x4f9f1f) {
      const _0x12b85f = {
        success: false,
        message: "Link Inválido"
      };
      return _0x12b85f;
    }
    try {
      var _0x259208 = await _0x4ba1d5.groupAcceptInvite(_0x4f9f1f);
    } catch (_0x4b1d8a) {
      const _0x4a56ae = {
        success: false,
        message: "ERRO, NÚMERO DO BOT JÁ FOI BANIDO OU ELE ESTÁ NO GRUPO DO LINK"
      };
      return _0x4a56ae;
    }
    resp = await _0x4ba1d5.groupMetadata(_0x259208);
    ggg = resp.participants.filter(_0x45e885 => _0x45e885.admin);
    nunber = '';
    for (number of ggg) {
      await _0xf71f28(1000);
      _0x1d68d0[0].listanegra.push(number.id);
      _0xc0acc8(_0x1d68d0);
      nunber += "# " + number.id.match(/([0-9A-Za-z]{10,14})/i)[0] + "\n";
    }
    _0x576f7e("*Números Adicionados A Lista De Autoban*\n*" + ggg.length + " Pessoas Adicionadas A Lista De Autoban*\n" + nunber);
    await _0xf71f28(1000);
    _0x4ba1d5.groupLeave(resp.id);
    return true;
  }
}, {
  'name': ["plaq1", "plaq2", "plaq3", "plaq4", "plaq5"],
  'aliases': [],
  'category': "nsfw",
  'description': "Cria plaquinhas personalizadas com diferentes modelos",
  'longDescription': "Cria uma imagem de plaquinha personalizada com o texto informado usando diferentes modelos.",
  'usage': "plaqX [texto] (onde X é o número do modelo, de 1 a 5)",
  'example': "plaq3 Seu Texto Aqui",
  'menu': "nsfw",
  'menuSection': "Plaquinhas",
  'permissions': _0x1e3b7d,
  'requirements': _0x2f1504,
  'execute': async ({
    conn: _0x478d9e,
    info: _0x3c53b0,
    from: _0x541cda,
    body: _0x26a1e9,
    args: _0x1c4498,
    prefix: _0x13f6ab,
    command: _0x32cd09,
    enviar: _0x2001d1,
    reply: _0x3b3dee
  }) => {
    const _0x4b9b38 = {
      slice: 0x6,
      maxLength: 0xf,
      url: _0x13ec7d => "https://raptibef.sirv.com/images%20(3).jpeg?text.0.text=" + _0x13ec7d + "&text.0.position.gravity=center&text.0.position.x=19%25&text.0.size=45&text.0.color=000000&text.0.opacity=55&text.0.font.family=Crimson%20Text&text.0.font.weight=300&text.0.font.style=italic&text.0.outline.opacity=21"
    };
    const _0x325d24 = {
      slice: 0x7
    };
    _0x325d24.maxLength = 0xf;
    _0x325d24.url = _0x1745ce => "https://raptibef.sirv.com/images%20(1).jpeg?profile=Zanga%202.0&text.0.text=" + _0x1745ce;
    const _0x345827 = {
      slice: 0x7,
      maxLength: 0xf,
      url: _0x5113da => "https://raptibef.sirv.com/images.jpeg?profile=Zanga%203.0&text.0.text=" + _0x5113da + "&text.0.outline.blur=63"
    };
    const _0x2be6a0 = {
      slice: 0x7
    };
    _0x2be6a0.maxLength = 0xa;
    _0x2be6a0.url = _0xce7ce0 => "https://umethroo.sirv.com/Torcedora-da-sele%C3%A7%C3%A3o-brasileira-nua-mostrando-a-bunda-236x300.jpg?text.0.text=" + _0xce7ce0 + "&text.0.position.x=-64%25&text.0.position.y=-39%25&text.0.size=25&text.0.color=1b1a1a&text.0.font.family=Architects%20Daughter";
    const _0x16ec05 = {
      slice: 0x7,
      maxLength: 0xf,
      url: _0x114871 => "https://umethroo.sirv.com/peito1.jpg?text.0.text=" + _0x114871 + "&text.0.position.x=-30%25&text.0.position.y=-50%25&text.0.size=30&text.0.color=000000&text.0.font.family=Shadows%20Into%20Light&text.0.font.weight=700"
    };
    const _0x1628de = {
      plaq1: _0x4b9b38,
      plaq2: _0x325d24,
      plaq3: _0x345827,
      plaq4: _0x2be6a0,
      plaq5: _0x16ec05
    };
    const _0x16ca1d = _0x1628de[_0x32cd09];
    if (_0x1c4498.length < 1) {
      return _0x3b3dee('' + _0x13f6ab + _0x32cd09 + " e digite o seu nome");
    }
    const _0x12a417 = _0x26a1e9.slice(_0x16ca1d.slice);
    if (_0x12a417.length > _0x16ca1d.maxLength) {
      return _0x3b3dee("O texto é longo, até " + _0x16ca1d.maxLength + " caracteres");
    }
    _0x3b3dee(_0x2001d1.espere);
    const _0x3c06dc = _0x16ca1d.url(_0x12a417);
    const _0x5f2a24 = {
      url: _0x3c06dc
    };
    const _0x1d34c1 = {
      image: _0x5f2a24,
      caption: " *Plaquinha feita ✓* "
    };
    const _0x3fe76f = {
      quoted: _0x3c53b0
    };
    _0x478d9e.sendMessage(_0x541cda, _0x1d34c1, _0x3fe76f);
    return true;
  }
}, {
  'name': "traduzir",
  'aliases': [],
  'category': "utilidades",
  'description': "Traduz um texto para português",
  'longDescription': "Traduz um texto de qualquer idioma para português brasileiro.",
  'usage': "traduzir [texto]",
  'example': "traduzir hello world",
  'menu': "utils",
  'menuSection': "Ferramentas",
  'permissions': {},
  'requirements': _0x658b60,
  'execute': async ({
    conn: _0x4cfdf0,
    info: _0x3f15a0,
    from: _0x28bbe7,
    q: _0x18984a,
    reply: _0x2a4644
  }) => {
    try {
      let {
        translate: _0x2b4afb
      } = require("@vitalets/google-translate-api");
      const _0x47a127 = await _0x2b4afb(_0x18984a, {
        'to': "pt-br"
      });
      _0x2a4644("Tradução: " + _0x47a127.text);
      return true;
    } catch (_0xf2e920) {
      return {
        'success': false,
        'message': "Erro ao traduzir: " + _0xf2e920.message
      };
    }
  }
}, {
  'name': "fig",
  'aliases': ["figemoji", "figroblox", "figmeme", "figanime", "figcoreana", "figraiva", "figengracada", "figdesenho"],
  'category': "stickers",
  'description': "Envia figurinhas aleatórias",
  'longDescription': "Envia figurinhas aleatórias de diversas categorias como emoji, memes, anime, etc. É possível escolher quantas figurinhas (até 5) serão enviadas.",
  'usage': "fig [quantidade]",
  'example': "fig 3",
  'menu': "stickers",
  'menuSection': "Figurinhas",
  'permissions': {},
  'requirements': _0x202462,
  'execute': async ({
    conn: _0x277da7,
    info: _0x3d9fdc,
    from: _0x4a7df5,
    command: _0x48bb9b,
    q: _0x962c99,
    args: _0x196f7f,
    delay: _0x5468e3,
    fetch: _0xf447cb,
    reply: _0x337756
  }) => {
    if (!_0x962c99) {
      const _0x25f935 = {
        success: false,
        message: "Insira a quantidade de figurinhas que deseja que eu envie."
      };
      return _0x25f935;
    }
    if (!Number(_0x196f7f[0]) || Number(_0x962c99.trim()) > 5) {
      const _0x11db7b = {
        success: false,
        message: "Digite a quantidade de figurinhas que deseja que eu envie.. não pode mais de 5.."
      };
      return _0x11db7b;
    }
    try {
      async function _0x76e8b1(_0x3f9281) {
        let _0x5086cd = await _0xf447cb("https://api.github.com/repos/badDevelopper/figus2/contents/" + _0x3f9281);
        let _0x2f991e = await _0x5086cd.json();
        return _0x2f991e;
      }
      let _0x1701a9 = await _0x76e8b1(_0x48bb9b);
      for (let _0xc11df5 = 0; _0xc11df5 < _0x962c99; _0xc11df5++) {
        _0x5468e3(2000);
        let _0x10df14 = Math.floor(Math.random() * _0x1701a9.length);
        let _0x109226 = "https://raw.githubusercontent.com/badDevelopper/figus2/main/" + _0x48bb9b + '/' + _0x1701a9[_0x10df14].name;
        const _0x1abb34 = {
          url: _0x109226
        };
        const _0x518209 = {
          sticker: _0x1abb34
        };
        _0x277da7.sendMessage(_0x4a7df5, _0x518209);
      }
      return true;
    } catch (_0x54223d) {
      const _0x56e39a = {
        success: false,
        message: "Erro ao buscar as figurinhas."
      };
      return _0x56e39a;
    }
  }
}, {
  'name': "aceitarmembro",
  'aliases': [],
  'category': "admin",
  'description': "Aceita solicitação de entrada no grupo",
  'longDescription': "Aceita a primeira solicitação pendente para entrar no grupo.",
  'usage': "aceitarmembro",
  'example': "aceitarmembro",
  'menu': "admin",
  'menuSection': "Gerenciamento",
  'permissions': _0x3a159d,
  'requirements': {},
  'execute': async ({
    conn: _0x15703f,
    info: _0x58837f,
    from: _0x782653,
    reply: _0x5af5e1
  }) => {
    try {
      let _0x26f266 = await _0x15703f.groupRequestParticipantsList(_0x782653);
      if (!_0x26f266 || !Array.isArray(_0x26f266) || _0x26f266.length === 0) {
        const _0x73d1ef = {
          success: false,
          message: "Nenhum membro na lista de solicitação para entrar no grupo."
        };
        return _0x73d1ef;
      }
      let _0x1a142b = await _0x15703f.groupRequestParticipantsUpdate(_0x782653, ['' + _0x26f266[0].jid], "approve");
      if (_0x1a142b === "success") {
        _0x5af5e1("Solicitação aprovada com sucesso.");
        return true;
      } else {
        const _0x382895 = {
          success: false,
          message: "Ocorreu um erro ao aprovar a solicitação."
        };
        return _0x382895;
      }
    } catch (_0xd4fb9e) {
      console.error(_0xd4fb9e);
      const _0x346b01 = {
        success: false,
        message: "Ocorreu um erro ao processar a solicitação."
      };
      return _0x346b01;
    }
  }
}, {
  'name': "listacomunidades",
  'aliases': [],
  'category': "premium",
  'description': "Lista todas as comunidades disponíveis",
  'longDescription': "Exibe uma lista detalhada de todas as comunidades das quais o bot participa, incluindo nome, ID, data de criação e número de membros.",
  'usage': "listacomunidades",
  'example': "listacomunidades",
  'menu': "premium",
  'menuSection': "Consultas",
  'permissions': _0x1c4fc3,
  'requirements': _0x4a2f83,
  'execute': async ({
    conn: _0x4ad010,
    info: _0x458ea2,
    from: _0xd49d11,
    isGroup: _0xa047ba,
    enviar: _0x34a57c,
    isPremium: _0x380e03,
    SoDono: _0xd8e9dc,
    isGroupAdmins: _0x27c475,
    moment: _0x3463f6,
    reply: _0x9edcf3
  }) => {
    if (!_0xa047ba) {
      return _0x9edcf3(_0x34a57c.msg.grupo);
    }
    if (!_0x380e03 && !_0xd8e9dc && !_0x27c475) {
      return _0x9edcf3(_0x34a57c.msg.premium);
    }
    try {
      getGroups = await _0x4ad010.groupFetchAllParticipating();
      groups = Object.entries(getGroups).slice(0).map(_0x15fdbc => _0x15fdbc[1]);
      communities = groups.filter(_0x944805 => _0x944805.isCommunity);
      communities.sort((_0xeddb02, _0x5989b4) => _0xeddb02.subject.localeCompare(_0x5989b4.subject));
      teksComuni = "*LISTA DE COMUNIDADES*\n*Total de Comunidades* : " + communities.length + "\n\n";
      for (let _0x1dbe0a = 0; _0x1dbe0a < communities.length; _0x1dbe0a++) {
        teksComuni += "• *Comunidade* : " + _0x1dbe0a + "\n• *Nome da Comunidade* : " + communities[_0x1dbe0a].subject + "\n• *Id da Comunidade* : " + communities[_0x1dbe0a].id + "\n• *Criada* : " + _0x3463f6(('' + communities[_0x1dbe0a].creation) * 1000).tz("America/Sao_Paulo").format("DD/MM/YYYY HH:mm:ss") + "\n• *Total de Membros* : " + communities[_0x1dbe0a].participants.length + "\n\n";
      }
      _0x9edcf3(teksComuni);
      return true;
    } catch (_0x83829c) {
      const _0x3f901e = {
        success: false,
        message: "Ocorreu um erro ao listar as comunidades."
      };
      return _0x3f901e;
    }
  }
}, {
  'name': "hetero",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mede o quão hetero você é",
  'longDescription': "Uma brincadeira que calcula aleatoriamente o seu \"nível hetero\" e mostra uma classificação humorística.",
  'usage': "hetero",
  'example': "hetero",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0xb90a82,
  'requirements': {},
  'execute': async ({
    conn: _0x2319d1,
    info: _0x555d7b,
    from: _0x4c772b,
    prefix: _0x1019ee,
    sender_ou_n: _0x5e6794,
    reply: _0x23f2be
  }) => {
    const _0x93af2b = {
      text: '🗿',
      key: _0x555d7b.key
    };
    const _0x73daec = {
      react: _0x93af2b
    };
    await _0x2319d1.sendMessage(_0x4c772b, _0x73daec);
    let _0x55f1e7 = Math.floor(Math.random() * 100);
    let _0x2286ee = _0x55f1e7 < 5 ? "Você não é Hetero" : _0x55f1e7 < 15 ? "Ta queimando a rosca né" : _0x55f1e7 < 25 ? "🤨 Suspeito" : _0x55f1e7 < 38 ? "Tenho minhas dúvidas" : _0x55f1e7 < 47 ? "Abaixo da metade, suspeito" : _0x55f1e7 < 55 ? "Mais que a metade, Aceitável" : _0x55f1e7 < 71 ? "Você é hetero" : _0x55f1e7 < 89 ? "Hetero Mestre" : _0x55f1e7 < 100 ? "Hetero supremo 🫡🏳️" : '';
    _0x2319d1.sendMessage(_0x4c772b, {
      'text': "❰ Pesquisando a sua ficha de hetero: @" + _0x5e6794.split('@')[0] + " aguarde... ❱",
      'mentions': [_0x5e6794]
    });
    const _0x449e0a = {
      url: "https://i.ibb.co/10cGK0X/4c6939ca6f4b5f12685f6.jpg"
    };
    _0x2319d1.sendMessage(_0x4c772b, {
      'image': _0x449e0a,
      'caption': "O quanto você é hetero?\n\n「 @" + _0x5e6794.split('@')[0] + " 」 Você é: " + _0x55f1e7 + "% \n" + _0x2286ee,
      'mentions': [_0x5e6794]
    });
    return true;
  }
}, {
  'name': "sairgp",
  'aliases': [],
  'category': "dono",
  'description': "Menu para sair de grupos",
  'longDescription': "Exibe um menu com todos os grupos para o dono escolher de qual deseja que o bot saia.",
  'usage': "sairgp",
  'example': "sairgp",
  'menu': "dono",
  'menuSection': "Gestão",
  'permissions': _0x29a170,
  'requirements': {},
  'execute': async ({
    conn: _0x54e3b4,
    info: _0x2e8198,
    from: _0x59a09c,
    sender: _0x4e3b53,
    prefix: _0x31276f,
    SoDono: _0x34e463,
    getUniqueKey: _0x2f3ea6,
    optionsBuffer: _0xc661c,
    flushOptionsBuffer: _0x4e17b5,
    createChoiceMenu: _0x1cd488,
    reply: _0x37c487
  }) => {
    if (!_0x34e463 && !_0x2e8198.key.fromMe) {
      return _0x37c487("Este comando só o bot ou o dono pode executar..");
    }
    try {
      const _0x2aee1d = _0x2f3ea6(_0x59a09c, _0x4e3b53);
      if (_0xc661c[_0x2aee1d]) {
        delete _0xc661c[_0x2aee1d];
        _0x4e17b5();
      }
      let _0x308998 = await _0x54e3b4.groupFetchAllParticipating();
      let _0x32ecb6 = Object.values(_0x308998);
      let _0x467e29 = "Qual grupo deseja sair?\n\n";
      let _0x17cacf = {};
      _0x32ecb6.forEach((_0x2a0a6a, _0x158222) => {
        _0x467e29 += _0x158222 + 1 + " - 💢 Nome: " + _0x2a0a6a.subject + "\n";
        _0x467e29 += "🚸 Total Membros: " + _0x2a0a6a.participants.length + "\n\n";
        const _0x1a90bf = {
          text: "✅ Saindo do grupo " + _0x2a0a6a.subject + "...",
          command: _0x31276f + "exitgp " + _0x2a0a6a.id,
          edit: true
        };
        _0x17cacf[(_0x158222 + 1).toString()] = _0x1a90bf;
      });
      const _0x1ea64f = {
        text: _0x467e29,
        options: _0x17cacf
      };
      const _0x4ab7fb = {
        principal: _0x1ea64f
      };
      await _0x1cd488(_0x59a09c, _0x4e3b53, _0x4ab7fb.principal.text, _0x4ab7fb.principal.options, {
        'menus': _0x4ab7fb,
        'history': ["principal"]
      });
      return true;
    } catch (_0x870f8c) {
      console.error("Erro ao listar grupos:", _0x870f8c);
      const _0x291a32 = {
        success: false,
        message: "❌ Ocorreu um erro ao listar os grupos."
      };
      return _0x291a32;
    }
  }
}, {
  'name': "exitgp",
  'aliases': [],
  'category': "dono",
  'description': "Sai de um grupo específico",
  'longDescription': "Faz com que o bot saia de um grupo específico, enviando uma mensagem de despedida antes de sair.",
  'usage': "exitgp [id do grupo]",
  'example': "exitgp 120363123456789@g.us",
  'menu': "dono",
  'menuSection': "Gestão",
  'permissions': _0x3f75da,
  'requirements': {},
  'execute': async ({
    conn: _0x598e79,
    info: _0x94d76f,
    from: _0x256268,
    q: _0x283f5a,
    SoDono: _0x1a3201,
    numerodono_ofc: _0x9f2ef3,
    reply: _0x48d877
  }) => {
    if (!_0x1a3201 && !_0x94d76f.key.fromMe) {
      return _0x48d877("Este comando só o bot ou o dono pode executar..");
    }
    try {
      if (!_0x283f5a) {
        _0x598e79.groupLeave(_0x256268);
        return true;
      } else {
        let _0x40c54d = await _0x598e79.groupFetchAllParticipating();
        var _0x108ac7 = Object.keys(_0x40c54d);
        const _0x515455 = _0x283f5a.includes('@') ? _0x283f5a : _0x283f5a + "@g.us";
        if (!_0x108ac7.includes(_0x515455)) {
          const _0x2c258a = {
            success: false,
            message: "Não estou nesse grupo, mestre"
          };
          return _0x2c258a;
        }
        vy = await _0x598e79.groupMetadata(_0x515455);
        _0x48d877("Saindo do grupo: " + vy?.["subject"]);
        const _0x212268 = {
          text: "Por motivos pessoais e para evitar bugs, o bot irá sair do grupo, caso desejar add ele novamente converse com meu dono.\n\nwa.me/" + _0x9f2ef3
        };
        _0x598e79.sendMessage(_0x515455, _0x212268);
        setTimeout(() => _0x598e79.groupLeave(_0x515455), 5000);
        return true;
      }
    } catch (_0x3ee2da) {
      const _0x51bda1 = {
        success: false,
        message: "Ocorreu um erro ao sair do grupo."
      };
      return _0x51bda1;
    }
  }
}, {
  'name': "advertidos",
  'aliases': [],
  'category': "admin",
  'description': "Lista usuários advertidos no grupo",
  'longDescription': "Mostra a lista de usuários que estão advertidos no grupo, incluindo quantas advertências cada um tem.",
  'usage': "advertidos",
  'example': "advertidos",
  'menu': "admin",
  'menuSection': "Moderação",
  'permissions': _0x118c01,
  'requirements': {},
  'execute': async ({
    conn: _0x202004,
    info: _0x3e55b1,
    from: _0x1c8a52,
    EmojiBot: _0x2bd76a,
    dataGp: _0x339ae2,
    groupMembers: _0x44ffa3,
    isGroupAdmins: _0x1be2ec,
    reply: _0x3b59c9
  }) => {
    if (!_0x1be2ec) {
      return _0x3b59c9("Apenas administrador pode usar este comando para ver a lista de pessoas que estão advertidas.");
    }
    let _0x2585d5 = _0x339ae2[0]?.["advertir"] || [];
    if (_0x2585d5.length < 1) {
      return _0x3b59c9("Não tem nenhum usuário advertido neste grupo.");
    }
    let _0x1121f8 = _0x44ffa3.filter(_0x1a8463 => _0x2585d5.includes(_0x1a8463.id)).map((_0x5a77d7, _0x4979aa, _0x2fc1d1) => {
      let _0x1c5964 = " " + _0x2bd76a + " ×==> " + (_0x4979aa + 1) + ": " + _0x5a77d7.id.split('@')[0] + "\n ° Advertências: " + _0x2585d5.filter(_0x234038 => _0x234038 === _0x5a77d7.id).length + "/3\n\n";
      return _0x4979aa === _0x2fc1d1.length - 1 ? _0x1c5964.trim() : _0x1c5964;
    }).join('');
    _0x3b59c9("Lista dos advertidos:\n\n" + _0x1121f8);
    return true;
  }
}, {
  'name': "totext",
  'aliases': [],
  'category': "converter",
  'description': "Converte áudio para texto",
  'longDescription': "Transcreve um áudio para texto utilizando a API da AssemblyAI. Limite de 2MB por arquivo.",
  'usage': "totext [marque um áudio]",
  'example': "totext [responder a um áudio]",
  'menu': "utils",
  'menuSection': "Ferramentas",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isQuotedAudio: _0x11b2ef
    }) => {
      if (!_0x11b2ef) {
        const _0xd5bebd = {
          success: false,
          message: "Por favor, mencione um áudio para realizar a leitura do áudio."
        };
        return _0xd5bebd;
      }
      const _0x5be667 = {
        success: true
      };
      return _0x5be667;
    }
  },
  'execute': async ({
    conn: _0x12da55,
    info: _0x479d81,
    from: _0x3845a1,
    sender: _0x1d976f,
    fs: _0x5c70bd,
    isQuotedAudio: _0x35d4df,
    getFileBuffer: _0x59f670,
    DLT_FL: _0x35be4a,
    reply: _0x318612,
    path: _0x516136
  }) => {
    if (!_0x35d4df) {
      return _0x318612("Por favor, mencione um áudio para realizar a leitura do áudio.");
    }
    let {
      AssemblyAI: _0x25a285
    } = require("assemblyai");
    if (_0x479d81.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage.fileLength > 2100000) {
      return _0x318612("Só realizo a transcrição de áudio de até *2MB*, envie um arquivo menor.");
    }
    try {
      let _0x1f80eb = await _0x59f670(_0x479d81.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage, "audio");
      const _0x383229 = {
        text: "Estou realizando a transcrição do áudio para texto, aguarde..."
      };
      const _0x2176b1 = {
        quoted: _0x479d81
      };
      let {
        key: _0x562889
      } = await _0x12da55.sendMessage(_0x3845a1, _0x383229, _0x2176b1);
      let _0x384487 = _0x516136.join(__dirname, "../../dados/midias/docs");
      if (!_0x5c70bd.existsSync(_0x384487)) {
        const _0x97245a = {
          recursive: true
        };
        _0x5c70bd.mkdirSync(_0x384487, _0x97245a);
      }
      let _0x48351c = _0x384487 + "/totext-" + _0x1d976f + ".mp3";
      _0x5c70bd.writeFileSync(_0x48351c, _0x1f80eb);
      const _0x5812dc = {
        apiKey: "9b0c6873d13e4c239647e782c91dceb9"
      };
      const _0x350da8 = new _0x25a285(_0x5812dc);
      const _0x28fc46 = {
        audio_url: _0x48351c,
        language_code: 'pt'
      };
      let _0x335184 = await _0x350da8.transcripts.create(_0x28fc46);
      if (_0x335184.status === "error") {
        return _0x318612("Ocorreu um erro ao transcrever o áudio! Por favor, tente novamente.");
      }
      if (!_0x335184.text || _0x335184.text.trim() === '') {
        return _0x318612("Não foi possível transcrever o áudio enviado.");
      }
      const _0xbfff76 = {
        text: "• *Transcrição* - Texto detectado:\n—\n• " + _0x335184.text,
        edit: _0x562889
      };
      await _0x12da55.sendMessage(_0x3845a1, _0xbfff76);
      _0x35be4a(_0x48351c);
      return true;
    } catch (_0x434388) {
      return {
        'success': false,
        'message': "Erro: " + _0x434388.message
      };
    }
  }
}, {
  'name': "gitclone",
  'aliases': [],
  'category': "downloader",
  'description': "Clone um repositório GitHub",
  'longDescription': "Baixa um repositório do GitHub como arquivo ZIP, permitindo que você tenha acesso ao código offline.",
  'usage': "gitclone [link do repositório]",
  'example': "gitclone https://github.com/NuevaGeneracionALB/aleatory-md",
  'menu': "downloads",
  'menuSection': "Ferramentas",
  'permissions': {},
  'requirements': _0x5d6d6c,
  'execute': async ({
    conn: _0x17ee13,
    info: _0x4ac21e,
    from: _0x400dab,
    args: _0xcd8c73,
    prefix: _0x44c39a,
    fetch: _0x58d873,
    reply: _0x31faae
  }) => {
    _0x31faae("Processando dados...");
    let _0x16b384 = /(?:https|git)(?::\/\/|@)github\.com[\/:]([^\/:]+)\/(.+)/i;
    if (!_0xcd8c73[0]) {
      const _0x522f25 = {
        success: false,
        message: "Use " + _0x44c39a + "gitclone repo link\nExemplo: https://github.com/NuevaGeneracionALB/aleatory-md"
      };
      return _0x522f25;
    }
    if (!_0x16b384.test(_0xcd8c73[0])) {
      const _0x35f398 = {
        success: false,
        message: "Link de repositório inválido"
      };
      return _0x35f398;
    }
    try {
      let [, _0x37d6a8, _0x4ed634] = _0xcd8c73[0].match(_0x16b384) || [];
      _0x4ed634 = _0x4ed634.replace(/.git$/, '');
      let _0x430345 = "https://api.github.com/repos/" + _0x37d6a8 + '/' + _0x4ed634 + "/zipball";
      let _0x3a9a9a = await _0x58d873(_0x430345, {
        'method': "HEAD"
      });
      if (!_0x3a9a9a.ok) {
        const _0x115ffa = {
          success: false,
          message: "Repositório não encontrado ou indisponível"
        };
        return _0x115ffa;
      }
      let _0x47206a = _0x3a9a9a.headers.get("content-disposition").match(/attachment; filename=(.*)/)[1];
      const _0x435304 = {
        url: _0x430345
      };
      const _0x2d008b = {
        quoted: _0x4ac21e
      };
      _0x17ee13.sendMessage(_0x400dab, {
        'document': _0x435304,
        'fileName': _0x47206a + ".zip",
        'mimetype': "application/zip"
      }, _0x2d008b)["catch"](_0x3cd941 => {
        const _0x16a67a = {
          success: false,
          message: "ERROR!!"
        };
        return _0x16a67a;
      });
      return true;
    } catch (_0x9bf1f3) {
      const _0x1ac79d = {
        success: false,
        message: "Erro ao processar o repositório: " + _0x9bf1f3.message
      };
      return _0x1ac79d;
    }
  }
}, {
  'name': "wikipedia",
  'aliases': ["wiki"],
  'category': "pesquisa",
  'description': "Pesquisa na Wikipedia",
  'longDescription': "Pesquisa informações na Wikipedia e retorna o resumo do artigo encontrado.",
  'usage': "wikipedia [termo]",
  'example': "wikipedia JavaScript",
  'menu': "pesquisa",
  'menuSection': "Internet",
  'permissions': {},
  'requirements': _0x3d6fdb,
  'execute': async ({
    conn: _0x3aa0cf,
    info: _0x16bb61,
    from: _0xd98595,
    q: _0x3a2f54,
    prefix: _0xe72c26,
    command: _0x5049d9,
    axios: _0x294ba5,
    reply: _0x26f5a8
  }) => {
    try {
      if (!_0x3a2f54) {
        return {
          'success': false,
          'message': "Exemplo: " + (_0xe72c26 + _0x5049d9) + " JavaScript"
        };
      }
      _0x26f5a8("Aguarde, pesquisando sobre o que está perguntando..");
      wikip = await _0x294ba5.get("https://pt.wikipedia.org/w/api.php?action=query&format=json&list=search&srsearch=" + encodeURIComponent(_0x3a2f54) + "&prop=info&inprop=url");
      if (!wikip.data.query.search || wikip.data.query.search.length === 0) {
        const _0x11437c = {
          success: false,
          message: "Nada foi encontrado, com base em sua pergunta.. Especifique um pouco!"
        };
        return _0x11437c;
      }
      wikis = await _0x294ba5.get("https://pt.wikipedia.org/w/api.php?format=json&action=query&prop=extracts&exintro&explaintext&redirects=1&pageids=" + wikip.data.query.search[0].pageid);
      const _0x5d4eb6 = wikis.data.query.pages[Object.keys(wikis.data.query.pages)].extract;
      if (!_0x5d4eb6 || _0x5d4eb6.trim() === '') {
        const _0x371dc8 = {
          success: false,
          message: "Não foi possível encontrar um resumo para esse termo."
        };
        return _0x371dc8;
      }
      _0x26f5a8(_0x5d4eb6);
      return true;
    } catch (_0x348e7e) {
      if (String(_0x348e7e).includes("invalid json response body at")) {
        console.log("A api caiu ou não foi possivel executar esta ação., espere retornar");
        const _0x343f35 = {
          success: false,
          message: "Nada foi encontrado, com base em sua pergunta.. Especifique um pouco!"
        };
        return _0x343f35;
      } else {
        const _0x47ba4f = {
          success: false,
          message: "Nada foi encontrado, com base em sua pergunta.. Especifique um pouco!"
        };
        return _0x47ba4f;
      }
    }
  }
}, {
  'name': "mykey",
  'aliases': [],
  'category': "dono",
  'description': "Verifica informações da chave do bot",
  'longDescription': "Comando exclusivo para o dono que exibe informações sobre a chave de ativação do bot, incluindo vencimento e limites.",
  'usage': "mykey",
  'example': "mykey",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0xb81a11,
  'requirements': {},
  'execute': async ({
    conn: _0x5c86cb,
    info: _0x2544dc,
    from: _0x3e3723,
    Res_SoDono: _0x43fb4e,
    nescessario: _0x4d445c,
    axios: _0x2cff62,
    reply: _0x21f0c9,
    path: _0x36da66
  }) => {
    try {
      let _0x4b423c = _0x36da66.join(__dirname, "../../iniciar.js");
      const _0x4cd8ee = require(_0x4b423c).mykey;
      const {
        data: _0x3a846d
      } = await _0x2cff62.get("http://sungbot.vip/api/info?chave=" + _0x4cd8ee);
      if (!_0x3a846d.status) {
        return {
          'success': false,
          'message': "❌ Erro ao consultar chave: " + _0x3a846d.message
        };
      }
      const _0x3da022 = _0x3a846d.dados;
      const _0x2565e8 = _0x3da022.vencimento.split('/');
      const _0x66b568 = new Date(_0x2565e8[2], _0x2565e8[1] - 1, _0x2565e8[0]) - new Date();
      const _0x310afc = Math.floor(_0x66b568 / 86400000);
      const _0x18ffe9 = Math.floor(_0x310afc / 365);
      const _0x2d4557 = Math.floor(_0x310afc % 365 / 30);
      const _0x15e4ea = _0x310afc % 30;
      let _0x32fcd9 = [_0x18ffe9 > 0 ? _0x18ffe9 + " ano" + (_0x18ffe9 > 1 ? 's' : '') : '', _0x2d4557 > 0 ? _0x2d4557 + " " + (_0x2d4557 > 1 ? "meses" : "mês") : '', _0x15e4ea > 0 ? _0x15e4ea + " dia" + (_0x15e4ea > 1 ? 's' : '') : ''].filter(Boolean).join(", ");
      const _0x3f8b85 = _0x3da022.acessos_realizados || 0;
      const _0x19b9f8 = _0x3da022.bots_ativos || 0;
      const _0x3ef1e0 = _0x3da022.limite_acessos;
      let _0x326038 = _0x19b9f8 >= _0x3ef1e0 ? "⚠️ *LIMITE ATINGIDO*" : _0x19b9f8 >= _0x3ef1e0 * 0.8 ? "⚠️ *PRÓXIMO DO LIMITE*" : _0x19b9f8 > 0 ? "✅ OK" : "✅ NENHUM BOT ATIVO";
      let _0x2d95bb = "┏━━━━━━━━━━━━━━━━━━━━━━━┓\n┃ 🔑 *INFORMAÇÕES DA CHAVE* \n┣━━━━━━━━━━━━━━━━━━━━━━━┫\n" + ("┃ 📌 *Chave:* " + _0x3da022.chave + "\n") + ("┃ 🤖 *Bot ID:* " + (_0x4d445c.botId || "Não definido") + "\n") + ("┃ 🛠️ *Versões:* " + _0x3da022.versoes.join(", ") + "\n") + ("┃ 📊 *Limite de Acessos:* " + _0x3ef1e0 + "\n") + ("┃ 🔄 *Acessos Feitos:* " + _0x3f8b85 + "\n") + ("┃ 🤖 *Bots Ativos:* " + _0x19b9f8 + " " + _0x326038 + "\n") + ("┃ 📅 *Vencimento:* " + _0x3da022.vencimento + "\n") + ("┃ ⏳ *Tempo Restante:* " + _0x32fcd9 + "\n") + "┗━━━━━━━━━━━━━━━━━━━━━━━┛";
      _0x21f0c9(_0x2d95bb);
      return true;
    } catch (_0x3b41f8) {
      console.error("Erro:", _0x3b41f8);
      const _0x9d384e = {
        success: false,
        message: "❌ Erro ao consultar informações da chave. Tente novamente mais tarde."
      };
      return _0x9d384e;
    }
  }
}, {
  'name': "sigma",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mede o quão sigma você é",
  'longDescription': "Uma brincadeira que calcula aleatoriamente o seu \"nível sigma\" e mostra uma classificação humorística.",
  'usage': "sigma",
  'example': "sigma",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x2d70af,
  'requirements': {},
  'execute': async ({
    conn: _0x52db66,
    info: _0x4129a0,
    from: _0x3b03a7,
    isGroup: _0x5680b7,
    isModobn: _0x20adb9,
    Res_SoGrupo: _0x30ff1c,
    prefix: _0x3e9aab,
    sender_ou_n: _0x5e05aa,
    reply: _0xf3157e
  }) => {
    if (!_0x5680b7) {
      const _0x50c8f4 = {
        success: false,
        message: _0x30ff1c
      };
      return _0x50c8f4;
    }
    if (!_0x20adb9) {
      const _0x2193d9 = {
        success: false,
        message: "Comando disponível apenas no modobrincadeira. Use " + _0x3e9aab + "modobrincadeira 1"
      };
      return _0x2193d9;
    }
    const _0x49eab2 = Math.floor(Math.random() * 100);
    const _0x426af0 = _0x49eab2 < 7 ? "Você é um Beta" : _0x49eab2 < 15 ? "Só isso? Vai malhar seu Beta!" : _0x49eab2 < 35 ? "Sigma Iniciante 🍷" : _0x49eab2 < 40 ? "Sigma Sábio 🧠" : _0x49eab2 < 55 ? "Sigma Mestre 🗿" : _0x49eab2 < 70 ? "Sigma Elite 🗿" : _0x49eab2 < 100 ? "Sigma Total 🗿🍷" : '';
    const _0x57d264 = {
      text: '🗿',
      key: _0x4129a0.key
    };
    const _0x30bfef = {
      react: _0x57d264
    };
    _0x52db66.sendMessage(_0x3b03a7, _0x30bfef);
    _0x52db66.sendMessage(_0x3b03a7, {
      'text': "❰ Pesquisando a sua ficha de Sigma: @" + _0x5e05aa.split('@')[0] + " aguarde... ❱",
      'mentions': [_0x5e05aa]
    });
    const _0x4cf715 = {
      url: "https://i.ibb.co/sJbQ5Hd/ef7b0293856ee26e17669.jpg"
    };
    _0x52db66.sendMessage(_0x3b03a7, {
      'image': _0x4cf715,
      'caption': "O quanto você é Sigma?\n\n「 @" + _0x5e05aa.split('@')[0] + " 」 Você é: " + _0x49eab2 + "% \n" + _0x426af0,
      'mentions': [_0x5e05aa]
    });
    return true;
  }
}, {
  'name': "fakemsg",
  'aliases': [],
  'category': "diversao",
  'description': "Cria uma mensagem falsa como se fosse de outro usuário",
  'longDescription': "Cria uma mensagem falsa como se fosse de outro usuário, com uma resposta simulada a essa mensagem.",
  'usage': "fakemsg @usuário|mensagem forjada|resposta",
  'example': "fakemsg @usuario|Olá, tudo bem?|Sim, estou bem!",
  'menu': "diversao",
  'menuSection': "Brincadeiras",
  'permissions': {},
  'requirements': _0x1e86fe,
  'execute': async ({
    conn: _0x5d622d,
    info: _0x37cde0,
    from: _0x26f6d0,
    q: _0x170dc2,
    prefix: _0x1734e6,
    command: _0x322955,
    Os_Returns: _0x503dd6,
    reply: _0x47e3bc
  }) => {
    if (_0x503dd6(true, true, true)["true"]) {
      return {
        'success': false,
        'message': _0x503dd6(true, true, true).txt
      };
    }
    let [_0x4eaa00, _0xa64796, _0x3aeadf] = _0x170dc2.split('|').map(_0x490c9d => _0x490c9d.trim());
    if (!_0x4eaa00) {
      const _0x240f45 = {
        success: false,
        message: "Você precisa mencionar a pessoa que deseja forjar a mensagem."
      };
      return _0x240f45;
    }
    if (!_0xa64796 || !_0x3aeadf) {
      return {
        'success': false,
        'message': "Por favor, insira a mensagem forjada e a resposta separadas por \"|\", exemplo: " + (_0x1734e6 + _0x322955) + " @usuario|OqEleFalou|Resposta"
      };
    }
    let _0x311c98 = _0x4eaa00.split('@')[1] + "@s.whatsapp.net";
    const _0xbd6f09 = {
      text: _0x3aeadf
    };
    const _0x1b2413 = {
      fromMe: false,
      participant: _0x311c98
    };
    const _0x2194cf = {
      text: _0xa64796
    };
    const _0x400cae = {
      extendedTextMessage: _0x2194cf
    };
    const _0x27207b = {
      key: _0x1b2413,
      message: _0x400cae
    };
    const _0x2be92b = {
      quoted: _0x27207b
    };
    _0x5d622d.sendMessage(_0x26f6d0, _0xbd6f09, _0x2be92b);
    return true;
  }
}, {
  'name': "twitter2",
  'aliases': [],
  'category': "downloader",
  'description': "Baixa vídeos do Twitter/X (alternativo)",
  'longDescription': "Método alternativo para baixar vídeos do Twitter/X usando o site twitsave.com",
  'usage': "twitter2 [link]",
  'example': "twitter2 https://twitter.com/user/status/123456789",
  'menu': "downloads",
  'menuSection': "Mídia",
  'permissions': {},
  'requirements': _0x53a254,
  'execute': async ({
    conn: _0x14efe8,
    info: _0x5e7278,
    from: _0x12607e,
    q: _0x2c4d58,
    prefix: _0x250c6a,
    command: _0x3a8460,
    enviar: _0x595a54,
    axios: _0x1984f0,
    cheerio: _0x1e85c4,
    getBuffer: _0x3ce35e,
    reply: _0x4e3cfe
  }) => {
    try {
      if (!_0x2c4d58.includes("twitter")) {
        return {
          'success': false,
          'message': "Exemplo: " + (_0x250c6a + _0x3a8460) + " o link do Twitter"
        };
      }
      _0x4e3cfe(_0x595a54.espere);
      const _0x5c1e4b = "https://twitsave.com/info?url=" + _0x2c4d58;
      const _0x4c3f48 = [];
      const _0x308349 = {
        accept: "*/*",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36 Edg/101.0.1210.53",
        "Accept-Language": "en-US,en;q=0.9,it;q=0.8,es;q=0.7",
        referer: "https://www.google.com/",
        cookie: "DSID=AAO-7r4OSkS76zbHUkiOpnI0kk-X19BLDFF53G8gbnd21VZV2iehu-w_2v14cxvRvrkd_NjIdBWX7wUiQ66f-D8kOkTKD1BhLVlqrFAaqDP3LodRK2I0NfrObmhV9HsedGE7-mQeJpwJifSxdchqf524IMh9piBflGqP0Lg0_xjGmLKEQ0F4Na6THgC06VhtUG5infEdqMQ9otlJENe3PmOQTC_UeTH5DnENYwWC8KXs-M4fWmDADmG414V0_X0TfjrYu01nDH2Dcf3TIOFbRDb993g8nOCswLMi92LwjoqhYnFdf1jzgK0"
      };
      const _0x426938 = {
        headers: _0x308349
      };
      const _0x56a297 = await _0x1984f0.get(_0x5c1e4b, _0x426938);
      const _0x310efb = _0x1e85c4.load(_0x56a297.data);
      _0x310efb('a').each(function (_0x4dc6ec, _0x4259ce) {
        var _0x27000c = _0x310efb(_0x4259ce).attr("href");
        if (_0x27000c && _0x27000c.length > 150) {
          const _0x4e98d3 = {
            url: _0x27000c
          };
          _0x4c3f48.push(_0x4e98d3);
        }
      });
      if (_0x4c3f48.length === 0) {
        const _0x39087c = {
          success: false,
          message: "Não foi possível encontrar o vídeo neste tweet."
        };
        return _0x39087c;
      }
      const _0x4764f1 = {
        quoted: _0x5e7278
      };
      _0x14efe8.sendMessage(_0x12607e, {
        'video': await _0x3ce35e(_0x4c3f48[0].url),
        'mimetype': "video/mp4"
      }, _0x4764f1);
      return true;
    } catch (_0x258476) {
      const _0x114228 = {
        success: false,
        message: "Erro ao baixar o vídeo do Twitter. Verifique o link e tente novamente."
      };
      return _0x114228;
    }
  }
}, {
  'name': "packfig",
  'aliases': [],
  'category': "stickers",
  'description': "Baixa pacote de figurinhas",
  'longDescription': "Envia um pacote de figurinhas para o usuário no privado.",
  'usage': "packfig [nome do pack]",
  'example': "packfig naruto",
  'menu': "stickers",
  'menuSection': "Figurinhas",
  'permissions': {},
  'requirements': _0x4bf798,
  'execute': async ({
    conn: _0x28445e,
    info: _0x46568f,
    from: _0x417a1f,
    q: _0x21b855,
    sender: _0x14e694,
    fetchJson: _0x372ceb,
    sendStickerFromUrl: _0xb08bcc,
    enviar: _0x58cbc3,
    delay: _0x3d097b,
    reply: _0xb238ca
  }) => {
    if (!_0x21b855) {
      const _0x7c3fd6 = {
        success: false,
        message: "Falta o nome do pack"
      };
      return _0x7c3fd6;
    }
    try {
      const _0x358dd2 = await _0x372ceb("https://raw.githubusercontent.com/Salientekill/figurinhas/main/jsons/" + _0x21b855 + ".json");
      _0xb238ca("Enviando O Pack No Seu Privado");
      for (let _0x1f825a of _0x358dd2[0].link) {
        await _0x3d097b(1000);
        _0xb08bcc(_0x14e694, _0x1f825a, _0x58cbc3.success);
      }
      return true;
    } catch (_0x6c5c68) {
      const _0xa6cd4 = {
        success: false,
        message: "ERRO"
      };
      return _0xa6cd4;
    }
  }
}, {
  'name': "packfig18",
  'aliases': [],
  'category': "nsfw",
  'description': "Baixa pacote de figurinhas +18",
  'longDescription': "Envia um pacote de figurinhas +18 para o usuário no privado. Requer que o modo NSFW esteja ativado.",
  'usage': "packfig18 [nome do pack]",
  'example': "packfig18 1",
  'menu': "nsfw",
  'menuSection': "Figurinhas",
  'permissions': _0x597d1b,
  'requirements': _0x4857dd,
  'execute': async ({
    conn: _0x40ef26,
    info: _0x49de36,
    from: _0x535b6e,
    q: _0x2dddd5,
    sender: _0x415034,
    isNsfw: _0xedc609,
    prefix: _0x4efa3b,
    fetchJson: _0xb45686,
    sendStickerFromUrl: _0x23f18d,
    enviar: _0x46de0a,
    delay: _0x263344,
    reply: _0x54f80b
  }) => {
    if (!_0x2dddd5) {
      return _0x54f80b("Falta o nome do pack");
    }
    try {
      lotus = await _0xb45686("https://raw.githubusercontent.com/Salientekill/figurinhas/main/jsons/%2B18/" + _0x2dddd5 + ".json");
      _0x54f80b("Enviando O Pack No Seu Privado");
      for (let _0x529746 of lotus[0].link) {
        await _0x263344(1000);
        _0x23f18d(_0x415034, _0x529746, _0x46de0a.success);
      }
      return true;
    } catch {
      const _0x67f09 = {
        success: false,
        message: "ERRO"
      };
      return _0x67f09;
    }
  }
}, {
  'name': "packsfigs",
  'aliases': [],
  'category': "stickers",
  'description': "Menu de pacotes de figurinhas",
  'longDescription': "Exibe um menu interativo com diversos pacotes de figurinhas normais e +18 para o usuário escolher.",
  'usage': "packsfigs",
  'example': "packsfigs",
  'menu': "stickers",
  'menuSection': "Figurinhas",
  'permissions': _0x133a9b,
  'requirements': {},
  'execute': async ({
    conn: _0x1e93ad,
    info: _0x58289d,
    from: _0x4772f0,
    sender: _0x3fea75,
    EmojiBot: _0x2ca64f,
    prefix: _0x3bb6b7,
    getUniqueKey: _0x29a60d,
    optionsBuffer: _0x44ab38,
    flushOptionsBuffer: _0x14c842,
    createChoiceMenu: _0x35710a,
    reply: _0x4c073b
  }) => {
    try {
      const _0x4268bb = _0x29a60d(_0x4772f0, _0x3fea75);
      if (_0x44ab38[_0x4268bb]) {
        delete _0x44ab38[_0x4268bb];
        _0x14c842();
      }
      const _0x3f5458 = {
        nome: "AMANDA",
        id: "amanda"
      };
      const _0x150bf8 = {
        nome: "ANYA",
        id: "anya"
      };
      const _0x100bc2 = {
        nome: "ANIMADAS1",
        id: "animadas1"
      };
      const _0x48f39e = {
        nome: "ANIMADAS2",
        id: "animadas2"
      };
      const _0x41fef9 = {
        nome: "ASTA",
        id: "asta"
      };
      const _0x501109 = {
        nome: "ASUNA",
        id: "asuna"
      };
      const _0x111ee1 = {
        nome: "AYAKA",
        id: "ayaka"
      };
      const _0x5897cf = {
        nome: "BAKUGOU",
        id: "bakugou"
      };
      const _0x5e0957 = {
        nome: "BEN",
        id: "ben"
      };
      const _0x4bb84b = {
        nome: "BORUTO",
        id: "boruto"
      };
      const _0x2aabc3 = {
        nome: "BRAD",
        id: "brad"
      };
      const _0x453789 = {
        nome: "DOUMA",
        id: "douma"
      };
      const _0x54c4b2 = {
        nome: "ESDEATH1",
        id: "esdeath1"
      };
      const _0x1a56e8 = {
        nome: "ESDEATH2",
        id: "esdeath2"
      };
      const _0x249c3b = {
        nome: "FLOOPA",
        id: "floopa"
      };
      const _0x52488b = {
        nome: "FRAN",
        id: "fran"
      };
      const _0x2be18c = {
        nome: "FREDDY",
        id: "freddy"
      };
      const _0x52139e = {
        nome: "GAMO-CHAN",
        id: "gamo-chan"
      };
      const _0x21ffba = {
        nome: "GOKU",
        id: "goku"
      };
      const _0x5bdd41 = {
        nome: "GUNTHER",
        id: "gunther"
      };
      const _0x1cb0dc = {
        nome: "GWEN",
        id: "gwen"
      };
      const _0x29eb35 = {
        nome: "GYOMEI",
        id: "gyomei"
      };
      const _0x3117bb = {
        nome: "HADES",
        id: "hades"
      };
      const _0x4f1d48 = {
        nome: "HEX",
        id: "hex"
      };
      const _0x21e8a7 = {
        nome: "HINATA",
        id: "hinata"
      };
      const _0x2ba1c9 = {
        nome: "HINATA2",
        id: "hinata2"
      };
      const _0x734b58 = {
        nome: "JAISON",
        id: "jaison"
      };
      const _0x491537 = {
        nome: "JAPINHA1",
        id: "japinha1"
      };
      const _0x1a37b0 = {
        nome: "JAPINHA2",
        id: "japinha2"
      };
      const _0x43da41 = {
        nome: "JAPINHA3",
        id: "japinha3"
      };
      const _0x51295e = {
        nome: "JJK",
        id: "jjk"
      };
      const _0x352cf2 = {
        nome: "KICK",
        id: "kick"
      };
      const _0x5205e3 = {
        nome: "KITAGAWA",
        id: "kitagawa"
      };
      const _0x429314 = {
        nome: "LEVI",
        id: "levi"
      };
      const _0x555afd = {
        nome: "LOTUS1",
        id: "lotus1"
      };
      const _0xdeb952 = {
        nome: "LOTUS2",
        id: "lotus2"
      };
      const _0x4499d3 = {
        nome: "LUM",
        id: "lum"
      };
      const _0x199ce6 = {
        nome: "MADARA",
        id: "madara"
      };
      const _0x1dac81 = {
        nome: "MCLOVIN",
        id: "mclovin"
      };
      const _0x425420 = {
        nome: "ZORA",
        id: "zora"
      };
      const _0x30f122 = {
        nome: "ZENITSU",
        id: "zenitsu"
      };
      const _0x40ec86 = {
        nome: "TANJIRO",
        id: "tanjiro"
      };
      const _0x3a53de = {
        nome: "TOKITO",
        id: "tokito"
      };
      const _0x3a84b2 = {
        nome: "TOMIOKA",
        id: "tomioka"
      };
      const _0x34c893 = {
        nome: "TOMIOKA2",
        id: "tomioka2"
      };
      const _0x49af8f = {
        nome: "TRISTE1",
        id: "triste1"
      };
      const _0x1327ef = {
        nome: "TRISTE2",
        id: "triste2"
      };
      const _0x3d1abd = {
        nome: "UZUI",
        id: "uzui"
      };
      const _0x3787eb = {
        nome: "YOSHI",
        id: "yoshi"
      };
      const _0xb1fc8b = {
        nome: "MELIODAS",
        id: "meliodas"
      };
      const _0x1c6107 = {
        nome: "MEMES1",
        id: "memes1"
      };
      const _0x1d9e17 = {
        nome: "MEMES2",
        id: "memes2"
      };
      const _0x27d967 = {
        nome: "MEMES3",
        id: "memes3"
      };
      const _0x39f2f1 = {
        nome: "MEMES4",
        id: "memes4"
      };
      const _0x110392 = {
        nome: "MEMES5",
        id: "memes5"
      };
      const _0x18891e = {
        nome: "MEREOLEONA",
        id: "mereoleona"
      };
      const _0x1f5e20 = {
        nome: "MIDORIYA",
        id: "midoriya"
      };
      const _0x5be422 = {
        nome: "MITSURI",
        id: "mitsuri"
      };
      const _0x35f126 = {
        nome: "MMOTTY",
        id: "mmotty"
      };
      const _0x40bc3b = {
        nome: "NAGATORO",
        id: "nagatoro"
      };
      const _0x4dca0e = {
        nome: "NAGI",
        id: "nagi"
      };
      const _0x12c08c = {
        nome: "NANATSU1",
        id: "nanatsu1"
      };
      const _0x235ad9 = {
        nome: "NANATSU2",
        id: "nanatsu2"
      };
      const _0x6b166e = {
        nome: "NARUTO",
        id: "naruto"
      };
      const _0x476e5e = {
        nome: "NARUTO2",
        id: "naruto2"
      };
      const _0x193305 = {
        nome: "NARUTO3",
        id: "naruto3"
      };
      const _0x213063 = {
        nome: "NEZUKO",
        id: "nezuko"
      };
      const _0x30aef1 = {
        nome: "NEZUKO2",
        id: "nezuko2"
      };
      const _0x352e1a = {
        nome: "NOELLE",
        id: "noelle"
      };
      const _0x772eec = {
        nome: "OBANAI",
        id: "obanai"
      };
      const _0x155deb = {
        nome: "OBITO",
        id: "obito"
      };
      const _0x55b22a = {
        nome: "ONEPIECE",
        id: "onepiece"
      };
      const _0x560e0e = {
        nome: "OTARU",
        id: "otaru"
      };
      const _0x5679e6 = {
        nome: "RAN",
        id: "ran"
      };
      const _0xcfed33 = {
        nome: "REI",
        id: "rei"
      };
      const _0x379c93 = {
        nome: "RENGOKU",
        id: "rengoku"
      };
      const _0x32a1ab = {
        nome: "RHYA",
        id: "rhya"
      };
      const _0x184094 = {
        nome: "ROMANTICAS1",
        id: "romanticas1"
      };
      const _0x3c1a12 = {
        nome: "ROMANTICAS2",
        id: "romanticas2"
      };
      const _0x583cb0 = {
        nome: "ROMANTICAS3",
        id: "romanticas3"
      };
      const _0x6e1c99 = {
        nome: "SAITAMA",
        id: "saitama"
      };
      const _0x494759 = {
        nome: "SAKURA",
        id: "sakura"
      };
      const _0x30e1e9 = {
        nome: "SANEMI",
        id: "sanemi"
      };
      const _0x11b523 = {
        nome: "SEIYA",
        id: "seiya"
      };
      const _0x22f80d = {
        nome: "SENPAI",
        id: "senpai"
      };
      const _0x54be50 = {
        nome: "SHIGARAKI",
        id: "shigaraki"
      };
      const _0x947cc = {
        nome: "SHINOBU",
        id: "shinobu"
      };
      const _0x59bd0c = {
        nome: "SHINOBU2",
        id: "shinobu2"
      };
      const _0x11b708 = {
        nome: "SPRINGTRAP",
        id: "springtrap"
      };
      const _0x3bec91 = [_0x3f5458, _0x150bf8, _0x100bc2, _0x48f39e, _0x41fef9, _0x501109, _0x111ee1, _0x5897cf, _0x5e0957, _0x4bb84b, _0x2aabc3, _0x453789, _0x54c4b2, _0x1a56e8, _0x249c3b, _0x52488b, _0x2be18c, _0x52139e, _0x21ffba, _0x5bdd41, _0x1cb0dc, _0x29eb35, _0x3117bb, _0x4f1d48, _0x21e8a7, _0x2ba1c9, _0x734b58, _0x491537, _0x1a37b0, _0x43da41, _0x51295e, _0x352cf2, _0x5205e3, _0x429314, _0x555afd, _0xdeb952, _0x4499d3, _0x199ce6, _0x1dac81, _0x425420, _0x30f122, _0x40ec86, _0x3a53de, _0x3a84b2, _0x34c893, _0x49af8f, _0x1327ef, _0x3d1abd, _0x3787eb, _0xb1fc8b, _0x1c6107, _0x1d9e17, _0x27d967, _0x39f2f1, _0x110392, _0x18891e, _0x1f5e20, _0x5be422, _0x35f126, _0x40bc3b, _0x4dca0e, _0x12c08c, _0x235ad9, _0x6b166e, _0x476e5e, _0x193305, _0x213063, _0x30aef1, _0x352e1a, _0x772eec, _0x155deb, _0x55b22a, _0x560e0e, _0x5679e6, _0xcfed33, _0x379c93, _0x32a1ab, _0x184094, _0x3c1a12, _0x583cb0, _0x6e1c99, _0x494759, _0x30e1e9, _0x11b523, _0x22f80d, _0x54be50, _0x947cc, _0x59bd0c, _0x11b708];
      const _0x28ce40 = {
        nome: "PACK+18 0",
        id: '0'
      };
      const _0x139adb = {
        nome: "PACK+18 1",
        id: '1'
      };
      const _0x4ed321 = {
        nome: "PACK+18 2",
        id: '2'
      };
      const _0x4c39d3 = {
        nome: "PACK+18 3",
        id: '3'
      };
      const _0x4ff3bb = {
        nome: "PACK+18 4",
        id: '4'
      };
      const _0x3e5ac9 = {
        nome: "PACK+18 5",
        id: '5'
      };
      const _0x4f7af1 = {
        nome: "PACK+18 6",
        id: '6'
      };
      const _0x5db69a = {
        nome: "PACK+18 7",
        id: '7'
      };
      const _0x3d9f4b = {
        nome: "PACK+18 8",
        id: '8'
      };
      const _0x4e1e5b = {
        nome: "PACK+18 9",
        id: '9'
      };
      const _0x413c70 = [_0x28ce40, _0x139adb, _0x4ed321, _0x4c39d3, _0x4ff3bb, _0x3e5ac9, _0x4f7af1, _0x5db69a, _0x3d9f4b, _0x4e1e5b];
      let _0x155546 = {};
      _0x3bec91.forEach((_0x3f7c1d, _0x1ce918) => {
        const _0x4e4204 = {
          text: "✅ Enviando figurinhas: " + _0x3f7c1d.nome,
          command: _0x3bb6b7 + "packfig " + _0x3f7c1d.id,
          edit: true
        };
        _0x155546[(_0x1ce918 + 1).toString()] = _0x4e4204;
      });
      _0x413c70.forEach((_0xd66aa9, _0x29461e) => {
        const _0x1d3274 = {
          text: "✅ Enviando figurinhas: " + _0xd66aa9.nome,
          command: _0x3bb6b7 + "packfig18 " + _0xd66aa9.id,
          edit: true
        };
        _0x155546[(90 + _0x29461e).toString()] = _0x1d3274;
      });
      const _0x3a8773 = {
        close: true,
        text: "✅ Menu fechado com sucesso!",
        edit: true
      };
      _0x155546['0'] = _0x3a8773;
      return true;
    } catch (_0xe911a0) {
      console.error("Erro no menu de figurinhas:", _0xe911a0);
      const _0x3d53a2 = {
        success: false,
        message: "❌ Ocorreu um erro ao processar o comando."
      };
      return _0x3d53a2;
    }
  }
}, {
  'name': "wallpaperprem",
  'aliases': [],
  'category': "premium",
  'description': "Menu de wallpapers premium",
  'longDescription': "Exibe um menu interativo com diversos wallpapers premium para o usuário escolher.",
  'usage': "wallpaperprem",
  'example': "wallpaperprem",
  'menu': "premium",
  'menuSection': "Mídia",
  'permissions': _0xa0d30b,
  'requirements': {},
  'execute': async ({
    conn: _0x57b114,
    info: _0x5750f8,
    from: _0x2a8539,
    sender: _0x223f4b,
    Res_SoGrupo: _0x33a333,
    isGroup: _0x1bdcc2,
    prefix: _0x2b3afd,
    getUniqueKey: _0x91a1a7,
    optionsBuffer: _0x52053d,
    flushOptionsBuffer: _0x5269c2,
    createChoiceMenu: _0x348ca4,
    reply: _0x3ea380
  }) => {
    if (!_0x1bdcc2) {
      return _0x3ea380(_0x33a333);
    }
    try {
      const _0x2dc62b = _0x91a1a7(_0x2a8539, _0x223f4b);
      if (_0x52053d[_0x2dc62b]) {
        delete _0x52053d[_0x2dc62b];
        _0x5269c2();
      }
      const _0x71fc0e = {
        nome: '4K',
        id: '4k',
        emoji: '🔳'
      };
      const _0x4ed4aa = {
        nome: "Amarelo",
        id: "amarelo",
        emoji: '🟡'
      };
      const _0x1e9339 = {
        nome: "Anime",
        id: "animes",
        emoji: '🎌'
      };
      const _0x2f9b5c = {
        nome: "Azul",
        id: "azul",
        emoji: '🔵'
      };
      const _0x242d0c = {
        nome: "Branco",
        id: "branco",
        emoji: '⚪'
      };
      const _0x562e0c = {
        nome: "Dark",
        id: "dark",
        emoji: '⚫'
      };
      const _0x58eaf8 = {
        nome: "Rosa",
        id: "rosa",
        emoji: '🟣'
      };
      const _0x282638 = {
        nome: "Roxo",
        id: "roxo",
        emoji: '💜'
      };
      const _0x583dda = {
        nome: "Verde",
        id: "verde",
        emoji: '🟢'
      };
      const _0x3826e = {
        nome: "Vermelho",
        id: "vermelho",
        emoji: '🔴'
      };
      const _0x17e399 = [_0x71fc0e, _0x4ed4aa, _0x1e9339, _0x2f9b5c, _0x242d0c, _0x562e0c, _0x58eaf8, _0x282638, _0x583dda, _0x3826e];
      let _0x47ffef = {};
      _0x17e399.forEach((_0x190688, _0x83d5da) => {
        const _0x6ef386 = {
          text: "✅ Enviando wallpaper " + _0x190688.emoji + " " + _0x190688.nome,
          command: _0x2b3afd + "wallpp " + _0x190688.id,
          edit: true
        };
        _0x47ffef[(_0x83d5da + 1).toString()] = _0x6ef386;
      });
      const _0x185b19 = {
        close: true,
        text: "✅ Menu fechado com sucesso!",
        edit: true
      };
      _0x47ffef['0'] = _0x185b19;
      return true;
    } catch (_0x48e8bb) {
      console.error("Erro no menu de wallpapers:", _0x48e8bb);
      const _0x295536 = {
        success: false,
        message: "❌ Ocorreu um erro ao processar o comando."
      };
      return _0x295536;
    }
  }
}, {
  'name': "wallpp",
  'aliases': [],
  'category': "premium",
  'description': "Envia um wallpaper premium",
  'longDescription': "Envia um wallpaper premium aleatório da categoria especificada. Comando exclusivo para usuários premium.",
  'usage': "wallpp [categoria]",
  'example': "wallpp animes",
  'menu': "premium",
  'menuSection': "Mídia",
  'permissions': {},
  'requirements': _0x477640,
  'execute': async ({
    conn: _0x36b472,
    info: _0x50551d,
    from: _0x3f6963,
    q: _0x485f7e,
    command: _0x5b0c4a,
    pushname: _0x202c72,
    isPremium: _0x1792b6,
    SoDono: _0x266a29,
    enviar: _0x5480e7,
    fetch: _0x318864,
    getBuffer: _0x41cd26,
    reply: _0x481cf7
  }) => {
    if (!_0x1792b6 && !_0x266a29) {
      return _0x481cf7("VOCÊ NÃO É UM USUÁRIO PREMIUM 🙂🖕");
    }
    if (!_0x485f7e) {
      return _0x481cf7("Especifique uma categoria de wallpaper");
    }
    _0x481cf7(_0x5480e7.espere);
    try {
      data = await _0x318864("https://raw.githubusercontent.com/Salientekill/figurinhas/main/wallpapers/" + _0x485f7e + ".js").then(_0x2bc485 => _0x2bc485.text());
      jsonData = JSON.parse(data);
      randIndex = Math.floor(Math.random() * jsonData.length);
      foda = ["✨ Aqui está seu wallpaper " + _0x5b0c4a + ", " + _0x202c72 + '!', "🖼️ Seu wallpaper " + _0x5b0c4a + " está pronto, " + _0x202c72 + '!', "🎨 Wallpaper " + _0x5b0c4a + " enviado com sucesso!", "📱 Pronto, " + _0x202c72 + "! Seu wallpaper " + _0x5b0c4a + " foi gerado.", "🌟 Seu wallpaper " + _0x5b0c4a + " foi criado especialmente para você, " + _0x202c72 + '!', "📲 Wallpaper " + _0x5b0c4a + " pronto para uso! Espero que goste.", "🔥 Aqui está um wallpaper " + _0x5b0c4a + " incrível para você!", "💫 Seu wallpaper " + _0x5b0c4a + " está pronto para personalizar seu dispositivo!", "📱 Wallpaper " + _0x5b0c4a + " entregue com sucesso, " + _0x202c72 + '!', "✅ Pronto! Seu wallpaper " + _0x5b0c4a + " foi enviado.", "🎭 Seu dispositivo vai ficar incrível com este wallpaper " + _0x5b0c4a + '!', "🌈 Wallpaper " + _0x5b0c4a + " gerado com sucesso, " + _0x202c72 + '!'];
      zaltin = foda[Math.floor(Math.random() * foda.length)];
      randKey = jsonData[randIndex];
      imagem = await _0x41cd26(randKey.result);
      thumbInfo = '' + zaltin;
      const _0x4ade0d = {
        image: imagem,
        caption: '' + thumbInfo
      };
      buttonMessage = _0x4ade0d;
      const _0x21d975 = {
        quoted: _0x50551d
      };
      _0x36b472.sendMessage(_0x3f6963, buttonMessage, _0x21d975);
      return true;
    } catch (_0x1a385a) {
      const _0x433cd4 = {
        success: false,
        message: "❌ Erro ao processar o wallpaper. Tente novamente mais tarde."
      };
      return _0x433cd4;
    }
  }
}, {
  'name': "downloader",
  'aliases': ["tiktok_video2", "tiktok_audio2", "twitter_video2", "twitter_audio2", "insta_video2", "insta_audio2", "facebook_video2", "facebook_audio2", "instagram_video2", "instagram_audio2", "allmidia"],
  'category': "downloader",
  'description': "Baixa vídeos e áudios de diversas plataformas",
  'longDescription': "Baixa vídeos e áudios do TikTok, Twitter/X, Instagram, Facebook e outros sites a partir do link compartilhado e os envia no grupo.",
  'usage': "tiktok_video2/tiktok_audio2/twitter_video2/twitter_audio2/insta_video2/insta_audio2/facebook_video2/facebook_audio2/instagram_video2/instagram_audio2/allmidia [link]",
  'example': "tiktok_video2 https://vm.tiktok.com/...\ninsta_video2 https://www.instagram.com/...\nfacebook_audio2 https://www.facebook.com/...\nallmidia [qualquer link]",
  'menu': "downloads",
  'menuSection': "Mídia",
  'permissions': {},
  'requirements': _0x5c3b6b,
  'execute': async ({
    conn: _0x38a4d9,
    info: _0x5b704e,
    from: _0x1c6171,
    q: _0x56cbc1,
    reply: _0x595286,
    downloadPinterestLinks: _0x387365,
    command: _0x39ab37,
    reagirE: _0x2680db
  }) => {
    try {
      _0x595286("Enviando aguarde...");
      let _0x25f953;
      let _0x279b8e;
      if (_0x39ab37 === "tiktok_video2" || _0x39ab37 === "tiktok_audio2") {
        _0x25f953 = "tiktok";
        _0x279b8e = _0x39ab37 === "tiktok_audio2";
      } else {
        if (_0x39ab37 === "twitter_video2" || _0x39ab37 === "twitter_audio2") {
          _0x25f953 = "twitter";
          _0x279b8e = _0x39ab37 === "twitter_audio2";
        } else {
          if (_0x39ab37 === "insta_video2" || _0x39ab37 === "insta_audio2" || _0x39ab37 === "instagram_video2" || _0x39ab37 === "instagram_audio2" || _0x39ab37 === "facebook_video2" || _0x39ab37 === "facebook_audio2") {
            _0x25f953 = "instagram_facebook";
            _0x279b8e = _0x39ab37 === "insta_audio2" || _0x39ab37 === "instagram_audio2" || _0x39ab37 === "facebook_audio2";
          } else {
            if (_0x39ab37 === "allmidia") {
              _0x25f953 = "allmidia";
              _0x279b8e = false;
            } else {
              const _0x3d69fe = _0x56cbc1.trim();
              if (_0x3d69fe.includes("tiktok.com") || _0x3d69fe.includes("vm.tiktok")) {
                _0x25f953 = "tiktok";
              } else {
                if (_0x3d69fe.includes("twitter.com") || _0x3d69fe.includes("x.com")) {
                  _0x25f953 = "twitter";
                } else {
                  if (_0x3d69fe.includes("instagram.com") || _0x3d69fe.includes("instagr.am") || _0x3d69fe.includes("facebook.com") || _0x3d69fe.includes("fb.watch")) {
                    _0x25f953 = "instagram_facebook";
                  } else {
                    _0x25f953 = "allmidia";
                  }
                }
              }
              _0x279b8e = false;
            }
          }
        }
      }
      let _0x40e331;
      if (_0x25f953 === "tiktok") {
        const {
          tikdown: _0x3039db
        } = require("nayan-videos-downloader");
        const _0x275f84 = await _0x3039db(_0x56cbc1.trim());
        _0x40e331 = _0x275f84.data.video;
      } else {
        if (_0x25f953 === "twitter") {
          const {
            twitterdown: _0x237961
          } = require("nayan-videos-downloader");
          const _0x19e41f = await _0x237961(_0x56cbc1.trim());
          _0x40e331 = _0x19e41f.data.SD;
        } else {
          if (_0x25f953 === "instagram_facebook") {
            const {
              ndown: _0x57657d
            } = require("nayan-videos-downloader");
            const _0x44464a = await _0x57657d(_0x56cbc1.trim());
            _0x40e331 = _0x44464a.data[0].url;
          } else {
            if (_0x25f953 === "allmidia") {
              if (_0x2680db) {
                _0x2680db(_0x1c6171, '⏳');
              }
              const {
                alldown: _0x21c7ba
              } = require("nayan-videos-downloader");
              const _0x2e6614 = await _0x21c7ba(_0x56cbc1.trim());
              if (_0x2e6614.data.high.includes("drive.google.com")) {
                const _0x442d8c = {
                  url: _0x2e6614.data.high
                };
                const _0x5b0cbb = {
                  document: _0x442d8c,
                  fileName: "arquivo.zip",
                  mimetype: "application/zip"
                };
                const _0x2e83ee = {
                  quoted: _0x5b704e
                };
                _0x38a4d9.sendMessage(_0x1c6171, _0x5b0cbb, _0x2e83ee);
                if (_0x2680db) {
                  _0x2680db(_0x1c6171, '✅');
                }
                return true;
              } else {
                const _0x2eb339 = {
                  url: _0x2e6614.data.high
                };
                const _0x3201c0 = {
                  video: _0x2eb339,
                  mimetype: "video/mp4"
                };
                const _0x2d2bd6 = {
                  quoted: _0x5b704e
                };
                _0x38a4d9.sendMessage(_0x1c6171, _0x3201c0, _0x2d2bd6);
                if (_0x2680db) {
                  _0x2680db(_0x1c6171, '✅');
                }
                return true;
              }
            }
          }
        }
      }
      if (_0x25f953 !== "allmidia") {
        if (_0x279b8e) {
          const _0x55aeb9 = {
            url: _0x40e331
          };
          const _0x1aa2cd = {
            audio: _0x55aeb9,
            mimetype: "audio/mpeg"
          };
          const _0x2e1443 = {
            quoted: _0x5b704e
          };
          _0x38a4d9.sendMessage(_0x1c6171, _0x1aa2cd, _0x2e1443);
        } else {
          const _0x3af4a8 = {
            url: _0x40e331
          };
          const _0x4f3eab = {
            video: _0x3af4a8,
            caption: "*AQUI ESTÁ SEU VÍDEO*"
          };
          _0x38a4d9.sendMessage(_0x1c6171, _0x4f3eab);
        }
      }
      return true;
    } catch (_0x2f3c3f) {
      console.error("Erro no download:", _0x2f3c3f);
      return {
        'success': false,
        'message': "Erro ao baixar mídia. " + _0x2f3c3f
      };
    }
  }
}, {
  'name': "emcomum",
  'aliases': [],
  'category': "dono",
  'description': "Verifica grupos em comum com um usuário",
  'longDescription': "Verifica e lista todos os grupos em comum entre o bot e um número de telefone específico. Apenas o dono do bot pode usar este comando.",
  'usage': "emcomum [número]",
  'example': "emcomum 5511999999999",
  'menu': "dono",
  'menuSection': "Consultas",
  'permissions': _0x5598be,
  'requirements': _0x517bfc,
  'execute': async ({
    conn: _0x47d998,
    info: _0x576e12,
    from: _0xcd4e8d,
    q: _0x5cf73,
    SoDono: _0x4bb912,
    Res_SoDono: _0x15c1fc,
    puxarTodosGrupos: _0x3da776,
    coletarNumeros: _0x29aacd,
    reply: _0x512125
  }) => {
    if (!_0x4bb912) {
      const _0x21896f = {
        success: false,
        message: _0x15c1fc
      };
      return _0x21896f;
    }
    function _0x29aacd(_0x1f74ba) {
      return _0x1f74ba.replace(/\D/g, '');
    }
    if (!_0x5cf73) {
      const _0x3b19d1 = {
        success: false,
        message: "Cadê o número que você deseja pesquisar?"
      };
      return _0x3b19d1;
    }
    async function _0x36e83e(_0x230193) {
      let _0x539081 = [];
      let _0x1c5fa2 = String(_0x230193).replace(/[()+\- \/]/g, '') + "@s.whatsapp.net";
      let _0x219458 = await _0x3da776(_0x47d998);
      _0x219458.forEach(_0x22733d => {
        if (_0x22733d.participants.some(_0x1f5ecc => _0x1f5ecc.id === _0x1c5fa2)) {
          let _0x5b2682 = _0x22733d.participants.find(_0x9d1b13 => _0x9d1b13.id === _0x1c5fa2).admin;
          const _0x31904e = {
            nome_gp: _0x22733d.subject,
            id_gp: _0x22733d.id,
            adm: _0x5b2682 ? "Sim" : "Não"
          };
          _0x539081.push(_0x31904e);
        }
      });
      const _0x2882b9 = {
        usuario: _0x1c5fa2
      };
      _0x539081.unshift(_0x2882b9);
      return _0x539081;
    }
    try {
      let _0x581372 = _0x29aacd(_0x5cf73.trim());
      let _0x27bab7 = await _0x36e83e(_0x581372);
      let _0x23f89b = "*Grupos em comum com o usuário:*\n\n";
      _0x27bab7.forEach((_0x43ec01, _0x38d845) => {
        if (_0x38d845 !== 0) {
          _0x23f89b += "GRUPO: " + _0x43ec01.nome_gp + "\nID: " + _0x43ec01.id_gp + "\nADM?: " + _0x43ec01.adm + "\n\n";
        }
      });
      if (_0x27bab7.length > 1) {
        _0x512125(_0x23f89b);
      } else {
        _0x512125("Não há grupos em comum com o usuário.");
      }
      return true;
    } catch (_0x114bdd) {
      return {
        'success': false,
        'message': "Erro ao verificar grupos em comum: " + _0x114bdd.message
      };
    }
  }
}, {
  'name': ["websexo", "punheteiro", "siririqueira"],
  'aliases': [],
  'category': "nsfw",
  'description': "Comandos +18: relação virtual ou análises humorísticas de hábitos íntimos.",
  'longDescription': "Comando +18 que simula relação virtual ou analisa porcentagem de \"hábitos\" íntimos de forma humorística. Requer modo NSFW ativado.",
  'usage': "<comando> @usuário",
  'example': "websexo @membro",
  'menu': "nsfw",
  'menuSection': "brincadeiras",
  'permissions': _0x408986,
  'requirements': {},
  'execute': async ({
    conn: _0x79ad5,
    info: _0x3f4421,
    from: _0x2faf58,
    command: _0xc3cb6,
    menc_os2: _0x4a1456,
    menc_jid2: _0x729d72,
    mention: _0x429c6b,
    reply: _0x50ea9f
  }) => {
    const _0x5557cd = '@' + _0x4a1456?.["split"]('@')[0];
    if (!_0x4a1456 || _0x729d72?.[1]) {
      return _0x50ea9f("Marque a pessoa que você quer fazer amor, a mensagem ou o @");
    }
    const _0x54a786 = {
      img: "https://i.ibb.co/2nmgx6N/4daf4c63b703f3e0961c3.jpg",
      texto: "Você acaba de fazer um sex* gostoso com: " + _0x5557cd + "\nsó pra lembrar que quero ser titia 😈❤️",
      delay: 0x0
    };
    const _0xf1255b = {
      img: "https://i.ibb.co/qyrcyk2/75dde0988c9a76d2c4fb9.jpg",
      frases: [[20, "bixinho ta se descobrindo ainda... 🤪"], [40, "diz que não bate, porém não me engana! 🙃"], [60, "xvideos deve ta ficando rico... 🥵"], [80, "3 por dia no máximo! 🔞"], [100, "puberdade domina 🔥"]],
      delay: 0x1b58
    };
    _0xf1255b.intro = "Hackeando seu histórico do Google: " + _0x5557cd + " aguarde...";
    const _0x21092e = {
      img: "https://i.ibb.co/jkdn3kr/7cb54a7f2ed720d214e4a.jpg"
    };
    _0x21092e.frases = [[20, "que fogo é esse menina... 👀"], [40, "não paga de santa pra mim... 😏"], [60, "kid bengala se achando... 🙄"], [80, "fogo dessa menina cada dia aumenta, mds 🥵"], [100, "to achando que ela já tá dando pot ai... 😈"]];
    _0x21092e.delay = 0x1b58;
    _0x21092e.intro = "Hackeando seu histórico de navegação: " + _0x5557cd + " aguarde...";
    const _0x24616b = {
      websexo: _0x54a786
    };
    _0x24616b.punheteiro = _0xf1255b;
    _0x24616b.siririqueira = _0x21092e;
    const _0x1aa719 = _0x24616b[_0xc3cb6];
    if (!_0x1aa719) {
      return _0x50ea9f("Comando não reconhecido.");
    }
    if (_0x1aa719.intro) {
      _0x429c6b(_0x1aa719.intro);
    }
    setTimeout(() => {
      let _0x1034de = _0x1aa719.texto;
      if (!_0x1034de) {
        const _0x2750b5 = Math.floor(Math.random() * 100);
        const _0xd21f58 = _0x1aa719.frases.find(([_0x425995]) => _0x2750b5 < _0x425995)?.[1] || "essa pessoa ultrapassou os limites...";
        _0x1034de = "Detectei um " + (_0xc3cb6 === "siririqueira" ? "siririqueira" : "punheteiro") + ": " + _0x5557cd + "\n-> com uma porcentagem de: *" + _0x2750b5 + "%*\n\n" + _0xd21f58;
      }
      const _0x151fc2 = {
        url: _0x1aa719.img
      };
      const _0x3b3db2 = {
        image: _0x151fc2,
        caption: _0x1034de,
        mentions: [_0x4a1456]
      };
      const _0x3f09c5 = {
        quoted: _0x3f4421
      };
      _0x79ad5.sendMessage(_0x2faf58, _0x3b3db2, _0x3f09c5);
    }, _0x1aa719.delay);
    return true;
  }
}, {
  'name': "eujaeununca",
  'aliases': [],
  'category': "brincadeira",
  'description': "Jogo de \"Eu já ou eu nunca\"",
  'longDescription': "Cria uma enquete com uma pergunta aleatória para o jogo \"Eu já ou eu nunca\", onde os participantes respondem se já fizeram ou nunca fizeram algo.",
  'usage': "eujaeununca [categoria opcional]",
  'example': "eujaeununca\neujaeununca normal\neujaeununca picante",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x4948bc,
  'requirements': {},
  'execute': async ({
    conn: _0x55d03b,
    info: _0x53b1d5,
    from: _0x3f47ed,
    prefix: _0x43f5b5,
    fs: _0x4a78f3,
    reply: _0x7df002,
    path: _0xa3da1e,
    args: _0x1e68d7
  }) => {
    const _0x4679d3 = JSON.parse(_0x4a78f3.readFileSync(_0xa3da1e.join(__dirname, "../../dados/org/json/frases.json")));
    const _0x2df4e8 = Object.keys(_0x4679d3.euNunca);
    let _0x35915a;
    if (_0x1e68d7[0]) {
      const _0x303f33 = _0x1e68d7[0].toLowerCase();
      if (_0x2df4e8.includes(_0x303f33)) {
        _0x35915a = _0x303f33;
      } else {
        return _0x7df002("❌ *Categoria inválida!*\n\n📋 *Categorias:*\n" + _0x2df4e8.map(_0x1b1cc3 => "• " + _0x1b1cc3).join("\n") + "\n\n💡 Use: " + _0x43f5b5 + "eujaeununca [categoria] ou " + _0x43f5b5 + "eujaeununca (aleatório)");
      }
    } else {
      _0x35915a = _0x2df4e8[Math.floor(Math.random() * _0x2df4e8.length)];
    }
    const _0x25b1b6 = _0x4679d3.euNunca[_0x35915a];
    const _0xb4c46c = _0x25b1b6[Math.floor(Math.random() * _0x25b1b6.length)];
    const _0x4642c1 = {
      normal: "😊 NORMAL",
      picante: "🌶️ PICANTE",
      adulto: "🔞 ADULTO +18",
      relacionamentos: "💕 RELACIONAMENTOS",
      trabalho_estudos: "📚 TRABALHO & ESTUDOS",
      bebidas_festas: "🍻 BEBIDAS & FESTAS",
      confissoes_secretas: "🤫 CONFISSÕES SECRETAS"
    };
    const _0x2690d2 = {
      quoted: _0x53b1d5
    };
    await _0x55d03b.sendMessage(_0x3f47ed, {
      'poll': {
        'name': '*' + (_0x4642c1[_0x35915a] || "🎯 " + _0x35915a.toUpperCase()) + "*\n\n*" + _0xb4c46c + '*',
        'values': ["*✅ EU JÁ ✅*", "*❎ EU NUNCA ❎*"],
        'selectableCount': 0x1
      }
    }, _0x2690d2);
    return true;
  }
}, {
  'name': "imc",
  'aliases': [],
  'category': "utilidades",
  'description': "Calcula o Índice de Massa Corporal",
  'longDescription': "Calcula o IMC (Índice de Massa Corporal) baseado no peso e altura informados, e dá uma classificação do resultado.",
  'usage': "imc peso|altura",
  'example': "imc 74|1.72",
  'menu': "utilidades",
  'menuSection': "Ferramentas",
  'permissions': {},
  'requirements': _0x1db3fc,
  'execute': async ({
    conn: _0x505b6e,
    info: _0x56e428,
    from: _0x27ec10,
    q: _0x4758d7,
    pushname: _0x2660ee,
    reply: _0x10eff0
  }) => {
    let _0x2dc609 = _0x4758d7.replace(/,/g, '.');
    let _0x5d3ddc = /^[\d]+([\.,][\d]+)?\|[\d]+([\.,][\d]+)?$/.test(_0x2dc609);
    if (!_0x5d3ddc) {
      const _0x5e60b7 = {
        success: false,
        message: "Por favor, insira a string no formato correto (exemplo: '74|1.72')."
      };
      return _0x5e60b7;
    }
    let [_0x48e6a4, _0xf5282e] = _0x2dc609.split('|');
    let _0x937710 = parseFloat(_0x48e6a4);
    let _0x1eb979 = parseFloat(_0xf5282e);
    if (isNaN(_0x937710) || isNaN(_0x1eb979)) {
      const _0x1752b6 = {
        success: false,
        message: "Por favor, insira valores numéricos para peso e altura."
      };
      return _0x1752b6;
    }
    let _0x167eec = _0x937710 / Math.pow(_0x1eb979, 2);
    let _0x5dca63 = "Indefinido";
    if (_0x167eec < 18.5) {
      _0x5dca63 = "Abaixo do peso";
    } else {
      if (_0x167eec < 24.9) {
        _0x5dca63 = "Peso normal";
      } else {
        if (_0x167eec < 29.9) {
          _0x5dca63 = "Sobrepeso";
        } else {
          if (_0x167eec < 34.9) {
            _0x5dca63 = "Obesidade Grau I";
          } else {
            if (_0x167eec < 39.9) {
              _0x5dca63 = "Obesidade Grau II";
            } else {
              _0x5dca63 = "Obesidade Grau III";
            }
          }
        }
      }
    }
    _0x10eff0("Olá " + _0x2660ee + " pelas minhas contas\n\nSeu peso sendo " + _0x937710 + "Kg\nE sua altura " + _0x1eb979 + "m\n\nVocê está " + _0x5dca63 + '.');
    return true;
  }
}, {
  'name': "esdeath",
  'aliases': [],
  'category': "stickers",
  'description': "Envia um sticker da personagem Esdeath",
  'longDescription': "Envia um sticker da personagem Esdeath, com imagens diferentes dependendo do seu status (dono, admin ou membro comum).",
  'usage': "esdeath",
  'example': "esdeath",
  'menu': "stickers",
  'menuSection': "Figurinhas",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x372ae7,
    info: _0x24b13f,
    from: _0x1dd68d,
    SoDono: _0x33e9bc,
    isGroupAdmins: _0x2f1330,
    EmojiBot: _0x48c331,
    sendStickerFromUrl: _0x3e90fc,
    delay: _0x281cb6
  }) => {
    let _0x2a6c93 = _0x33e9bc ? "https://i.ibb.co/GVZRgsX/6101961ea5dbf0b91548b.jpg" : _0x2f1330 ? "https://i.ibb.co/FbYGrGK/059127efa29d93f315255.jpg" : "https://i.ibb.co/1vnKNSh/e272a244dd47d555e6e47.jpg";
    const _0x316300 = {
      text: '' + _0x48c331,
      key: _0x24b13f.key
    };
    const _0x382bef = {
      react: _0x316300
    };
    await _0x372ae7.sendMessage(_0x1dd68d, _0x382bef);
    await _0x281cb6(100);
    await _0x3e90fc(_0x1dd68d, _0x2a6c93);
    return true;
  }
}, {
  'name': "pesquisarfig",
  'aliases': [],
  'category': "stickers",
  'description': "Busca e cria um sticker a partir de uma pesquisa",
  'longDescription': "Pesquisa uma imagem no Pinterest baseada no termo informado e a converte em um sticker para enviar no grupo.",
  'usage': "pesquisarfig [termo]",
  'example': "pesquisarfig cat",
  'menu': "stickers",
  'menuSection': "Figurinhas",
  'permissions': {},
  'requirements': _0x2327b9,
  'execute': async ({
    conn: _0x59295c,
    info: _0x150e7f,
    from: _0x5ea8db,
    q: _0x3bb040,
    prefix: _0x3edd98,
    fetchJson: _0x5480ca,
    sendStickerFromUrl: _0x10ba38,
    enviar: _0x2504c6,
    reply: _0x48af63
  }) => {
    try {
      if (!_0x3bb040) {
        const _0x731513 = {
          success: false,
          message: "Digite o nome da imagem que vc quer buscar\nExemplo: " + _0x3edd98 + "pesquisarfig cat"
        };
        return _0x731513;
      }
      _0x48af63(_0x2504c6.espere);
      let _0x362133 = await _0x5480ca("https://api.bronxyshost.com.br/api-bronxys/pinterest?nome=" + _0x3bb040 + "&apikey=Key_Do-Lotus_Samuel_EsDeath_12/08");
      await _0x10ba38(_0x5ea8db, _0x362133[Math.floor(Math.random() * _0x362133.length)], _0x2504c6.success)["catch"](_0x59632c => {
        const _0x2e4a0d = {
          success: false,
          message: "ERROR!!"
        };
        return _0x2e4a0d;
      });
      return true;
    } catch (_0x477f9d) {
      if (JSON.stringify(_0x477f9d).includes("Key_Do-Lotus_Samuel_EsDeath_12/08")) {
        console.log("A api caiu ou não foi possivel executar esta ação., espere retornar");
        const _0x41f4ce = {
          success: false,
          message: "A API está temporariamente indisponível, tente novamente mais tarde"
        };
        return _0x41f4ce;
      } else {
        const _0x5d1494 = {
          success: false,
          message: "ERROR!!"
        };
        return _0x5d1494;
      }
    }
  }
}, {
  'name': "webcorno",
  'aliases': [],
  'category': "brincadeira",
  'description': "Calcula a chance de ser WebCorno",
  'longDescription': "Calcula aleatoriamente a chance do usuário ser WebCorno, exibindo uma porcentagem de 0 a 110%.",
  'usage': "webcorno",
  'example': "webcorno",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x49b766,
  'requirements': {},
  'execute': async ({
    conn: _0x53f9db,
    info: _0x5daed3,
    from: _0x470520,
    body: _0x313484,
    isGroup: _0x3d4a40,
    isModobn: _0x3a0a0e,
    prefix: _0x2f0977,
    reply: _0x3d3b5e
  }) => {
    if (!_0x3d4a40) {
      const _0x222230 = {
        success: false,
        message: "Só pode ser utilizado este comando, em grupo."
      };
      return _0x222230;
    }
    if (!_0x3a0a0e) {
      const _0x53621c = {
        success: false,
        message: "Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x2f0977 + "modobrincadeira 1"
      };
      return _0x53621c;
    }
    const _0x4e84bd = _0x313484.slice(9);
    _0x53f9db.sendMessage(_0x470520, {
      'text': " ❰ Pesquisando a sua ficha de chance de Ser WebCorno : " + _0x4e84bd + " aguarde... ❱"
    });
    setTimeout(async () => {
      const _0x105169 = '' + Math.floor(Math.random() * 110);
      const _0x1767c1 = {
        url: "https://i.ibb.co/2nmgx6N/4daf4c63b703f3e0961c3.jpg"
      };
      const _0xc49f57 = {
        quoted: _0x5daed3
      };
      await _0x53f9db.sendMessage(_0x470520, {
        'image': _0x1767c1,
        'caption': "[🦬] " + _0x4e84bd + (" A chance de você Ser WebCorno é de " + _0x105169 + "% [🦬]")
      }, _0xc49f57);
    }, 7000);
    return true;
  }
}, {
  'name': "ceu",
  'aliases': [],
  'category': "brincadeira",
  'description': "Calcula a chance de ir para o céu",
  'longDescription': "Calcula aleatoriamente a chance do usuário ir para o céu, exibindo uma porcentagem de 0 a 110%.",
  'usage': "ceu",
  'example': "ceu",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x49c617,
  'requirements': {},
  'execute': async ({
    conn: _0x5a1303,
    info: _0x58e8c4,
    from: _0x3249d1,
    body: _0x1523a2,
    isGroup: _0x2264fa,
    isModobn: _0x32c6dc,
    prefix: _0x14b861,
    reply: _0x3edc68
  }) => {
    if (!_0x2264fa) {
      const _0x141c91 = {
        success: false,
        message: "Só pode ser utilizado este comando, em grupo."
      };
      return _0x141c91;
    }
    if (!_0x32c6dc) {
      const _0x190fbe = {
        success: false,
        message: "Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x14b861 + "modobrincadeira 1"
      };
      return _0x190fbe;
    }
    const _0x256b60 = _0x1523a2.slice(9);
    _0x5a1303.sendMessage(_0x3249d1, {
      'text': " ❰ Pesquisando a sua ficha de chance de ir para o céu : " + _0x256b60 + " aguarde... ❱"
    });
    setTimeout(async () => {
      const _0x18bdfb = '' + Math.floor(Math.random() * 110);
      const _0x40bc70 = {
        url: "https://i.ibb.co/HTy1bf8/6d7185cff72cd52c955f0.jpg"
      };
      const _0x123be4 = {
        quoted: _0x58e8c4
      };
      await _0x5a1303.sendMessage(_0x3249d1, {
        'image': _0x40bc70,
        'caption': "[⛩️] " + _0x256b60 + (" A chance de você ir pro céu é de " + _0x18bdfb + "% [⛩️] \n\n[🎴] Mas isso vai depender das escolhas que você fará ou fez durante sua vida [🎴]")
      }, _0x123be4);
    }, 7000);
    return true;
  }
}, {
  'name': "inferno",
  'aliases': [],
  'category': "brincadeira",
  'description': "Calcula a chance de ir para o inferno",
  'longDescription': "Calcula aleatoriamente a chance do usuário ir para o inferno, exibindo uma porcentagem de 0 a 110%.",
  'usage': "inferno",
  'example': "inferno",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x4d0358,
  'requirements': {},
  'execute': async ({
    conn: _0x4c0120,
    info: _0x15f6a9,
    from: _0x96df44,
    body: _0x3fa967,
    isGroup: _0x4433b7,
    isModobn: _0x1a4e65,
    prefix: _0x4e51d6,
    reply: _0x230880
  }) => {
    if (!_0x4433b7) {
      const _0x499b68 = {
        success: false,
        message: "Só pode ser utilizado este comando, em grupo."
      };
      return _0x499b68;
    }
    if (!_0x1a4e65) {
      const _0x176d0b = {
        success: false,
        message: "Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x4e51d6 + "modobrincadeira 1"
      };
      return _0x176d0b;
    }
    const _0x14d31b = _0x3fa967.slice(9);
    _0x4c0120.sendMessage(_0x96df44, {
      'text': " ❰ Pesquisando a sua ficha de chance de ir para o inferno : " + _0x14d31b + " aguarde... ❱"
    });
    setTimeout(async () => {
      const _0xe88c2b = '' + Math.floor(Math.random() * 110);
      const _0x5c6045 = {
        url: "https://i.ibb.co/b3CHMy3/31c3dc9dba261cc425c7c.jpg"
      };
      const _0x537873 = {
        quoted: _0x15f6a9
      };
      await _0x4c0120.sendMessage(_0x96df44, {
        'image': _0x5c6045,
        'caption': "[⛩️] " + _0x14d31b + (" A chance de você ir pro inferno é de " + _0xe88c2b + "% [⛩️] \n\n[🎴] Mas isso vai depender das escolhas que você fará ou fez durante sua vida [🎴]")
      }, _0x537873);
    }, 7000);
    return true;
  }
}, {
  'name': "gadometro",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mostra que tipo de gado você é",
  'longDescription': "Determina aleatoriamente que tipo de gado o usuário é, usando uma lista de classificações humorísticas.",
  'usage': "gadometro [@usuário]",
  'example': "gadometro @membro",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x37bc87,
  'requirements': {},
  'execute': async ({
    conn: _0x50aa94,
    info: _0x121ccb,
    from: _0x3efa27,
    budy: _0x5ac00f,
    args: _0x59be5b,
    sender: _0x2f0873,
    isGroup: _0x34b2d4,
    isModobn: _0x460d38,
    prefix: _0x4ad517,
    reply: _0x2dbe6f
  }) => {
    if (!_0x34b2d4) {
      const _0x21e3cd = {
        success: false,
        message: "Só pode ser utilizado este comando, em grupo."
      };
      return _0x21e3cd;
    }
    if (!_0x460d38) {
      const _0x16fa5f = {
        success: false,
        message: "Este tipo de comando só pode ser utilizado com o modobrincadeira ativo, fale com um adm ou se você for um, apenas digite " + _0x4ad517 + "modobrincadeira 1"
      };
      return _0x16fa5f;
    }
    let _0x3611bc;
    if (_0x5ac00f.includes('@')) {
      mention_id = _0x59be5b.join('').replace('@', '') + "@s.whatsapp.net";
      _0x3611bc = mention_id;
    } else {
      _0x3611bc = _0x2f0873;
    }
    _0x50aa94.sendMessage(_0x3efa27, {
      'text': "❰ Pesquisando Qual Tipo De Gado Você É: @" + _0x3611bc.split('@')[0] + ", aguarde... ❱",
      'mentions': [_0x3611bc]
    });
    setTimeout(async () => {
      const _0x4c876f = ["ultra extreme gado", "Gado-Master", "Gado-Rei", "Gado", "Escravo-ceta", "Escravo-ceta Maximo", "Gacorno?", "Jogador De Forno Livre<3", "Mestre Do Frifai<3<3", "Gado-Manso", "Gado-Conformado", "Gado-Incubado", "Gado Deus", "Mestre dos Gados", "Topa tudo por buceta", "Gado Comum", "Mini Gadinho", "Gado Iniciante", "Gado Basico", "Gado Intermediario", "Gado Avançado", "Gado Profisional", "Gado Mestre", "Gado Chifrudo", "Corno Conformado", "Corno HiperChifrudo", "Chifrudo Deus", "Mestre dos Chifrudos"];
      const _0x4985c2 = _0x4c876f[Math.floor(Math.random() * _0x4c876f.length)];
      const _0x4e0410 = {
        url: "https://i.ibb.co/MRXwjMF/11e551cfb802043fbbb48.jpg"
      };
      const _0x108d8a = {
        quoted: _0x121ccb
      };
      await _0x50aa94.sendMessage(_0x3efa27, {
        'image': _0x4e0410,
        'caption': "[🐃] @" + _0x3611bc.split('@')[0] + " É " + _0x4985c2 + " [🐃]",
        'mentions': [_0x3611bc]
      }, _0x108d8a);
    }, 7000);
    return true;
  }
}, {
  'name': "hentai",
  'aliases': [],
  'category': "nsfw",
  'description': "Envia um vídeo hentai aleatório",
  'longDescription': "Envia um vídeo hentai aleatório de uma coleção. Requer modo nsfw ativado.",
  'usage': "hentai",
  'example': "hentai",
  'menu': "nsfw",
  'menuSection': "Anime",
  'permissions': _0x52f71e,
  'requirements': {},
  'execute': async ({
    conn: _0x535bfd,
    info: _0xb192f6,
    from: _0x1ab0df,
    prefix: _0x9148b4,
    enviar: _0x5935ce,
    hentai: _0x25738,
    reply: _0x15a6c5
  }) => {
    try {
      _0x15a6c5(_0x5935ce.espere);
      const _0x506d2b = await _0x25738();
      const _0x1dc8b5 = _0x506d2b[Math.floor(Math.random() * _0x506d2b.length)];
      const _0x3d0663 = {
        url: _0x1dc8b5.video_1
      };
      const _0x55b4ae = {
        video: _0x3d0663,
        caption: "⭔ Título: " + _0x1dc8b5.title + "\n⭔ Visualizações: " + _0x1dc8b5.views_count + "\n⭔ Compartilhamentos: " + _0x1dc8b5.share_count
      };
      const _0x49eb0b = {
        quoted: _0xb192f6
      };
      await _0x535bfd.sendMessage(_0x1ab0df, _0x55b4ae, _0x49eb0b);
      return true;
    } catch (_0x37d943) {
      console.error("Erro ao enviar hentai:", _0x37d943);
      return {
        'success': false,
        'message': "Ocorreu um erro ao buscar o conteúdo: " + _0x37d943.message
      };
    }
  }
}, {
  'name': "banfakes",
  'aliases': ["kickfakes"],
  'category': "dono",
  'description': "Remove membros estrangeiros do grupo",
  'longDescription': "Remove automaticamente todos os membros do grupo que possuem números de telefone não brasileiros (que não começam com 55).",
  'usage': "banfakes",
  'example': "banfakes",
  'menu': "dono",
  'menuSection': "Moderação",
  'permissions': _0x5419e6,
  'requirements': {},
  'execute': async ({
    conn: _0x568ede,
    info: _0x2eb289,
    from: _0x3e3828,
    numerodono: _0x22d9d3,
    groupMembers: _0x10b14e,
    groupAdmins: _0x5f334d,
    reply: _0xbdbee9
  }) => {
    try {
      const _0x2bf51b = _0x10b14e.filter(_0x2da922 => !_0x22d9d3.includes(_0x2da922.id) && !_0x5f334d.includes(_0x2da922.id) && !_0x2da922.id.startsWith('55')).map(_0x3a2fad => _0x3a2fad.id);
      if (_0x2bf51b.length > 0) {
        await _0x568ede.groupParticipantsUpdate(_0x3e3828, _0x2bf51b, "remove");
        _0xbdbee9("Removidos " + _0x2bf51b.length + " membros estrangeiros do grupo.");
      } else {
        _0xbdbee9("Não foram encontrados membros estrangeiros no grupo.");
      }
      return true;
    } catch (_0x4c1603) {
      console.error("Erro ao remover membros estrangeiros:", _0x4c1603);
      return {
        'success': false,
        'message': "Ocorreu um erro ao remover membros estrangeiros: " + _0x4c1603.message
      };
    }
  }
}, {
  'name': "atualizarbot",
  'aliases': [],
  'category': "dono",
  'description': "Atualiza o bot para a versão mais recente",
  'longDescription': "Executa um script de atualização que puxa as últimas alterações do repositório e reinicia o bot.",
  'usage': "atualizarbot",
  'example': "atualizarbot",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x14eba4,
  'requirements': {},
  'execute': async ({
    conn: _0x13e649,
    info: _0x25b4b8,
    from: _0x25cb6e,
    reply: _0x57cb9b,
    atualizarBot: _0x49974b
  }) => {
    try {
      _0x57cb9b("🔄 ATUALIZANDO SEU BOT, AGUARDE...");
      const _0x2f6ef3 = await _0x49974b();
      if (!_0x2f6ef3.success) {
        _0x57cb9b("❌ OCORREU UM ERRO DURANTE O PROCESSO DE ATUALIZAÇÃO: " + _0x2f6ef3.error);
        setTimeout(() => {
          console.log("Encerrando processo devido a erro...");
          process.exit();
        }, 1000);
        return false;
      }
      _0x57cb9b("✅ PROCESSO DE ATUALIZAÇÃO CONCLUÍDO SEM ERROS, IREI REINICIAR...");
      setTimeout(() => {
        console.log("Reiniciando após atualização bem-sucedida...");
        process.exit();
      }, 1000);
      return true;
    } catch (_0x10f0b1) {
      console.error("Erro ao executar atualização:", _0x10f0b1);
      return {
        'success': false,
        'message': "Ocorreu um erro ao atualizar o bot: " + _0x10f0b1.message
      };
    }
  }
}, {
  'name': "backupbot",
  'aliases': [],
  'category': "dono",
  'description': "Cria e envia um backup do bot",
  'longDescription': "Compacta a pasta dados completa e envia o arquivo para o chat.",
  'usage': "backupbot",
  'example': "backupbot",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x29fa24,
  'requirements': {},
  'execute': async ({
    conn: _0x3aa94a,
    info: _0x1e9025,
    from: _0x5106a5,
    SoDono: _0x15af88,
    reagirE: _0x5bbdc5,
    fs: _0x5968b9,
    reply: _0x238c90,
    criarBackup: _0x4bacf9
  }) => {
    try {
      _0x5bbdc5(_0x5106a5, '⏳');
      const _0x1adcf3 = ["📦 Iniciando backup...", "📦 Verificando pasta dados: ▰▱▱▱▱▱▱▱▱▱ 10%", "📦 Compactando arquivos: ▰▰▰▱▱▱▱▱▱▱ 30%", "📦 Criando arquivo ZIP: ▰▰▰▰▰▱▱▱▱▱ 50%", "📦 Finalizando processo: ▰▰▰▰▰▰▰▱▱▱ 70%", "📦 Preparando envio: ▰▰▰▰▰▰▰▰▰▱ 90%", "✅ Backup concluído! ▰▰▰▰▰▰▰▰▰▰ 100%"];
      const _0x530cbc = {
        text: _0x1adcf3[0]
      };
      let {
        key: _0x3d95a2
      } = await _0x3aa94a.sendMessage(_0x5106a5, _0x530cbc);
      const _0x1e942b = async () => {
        for (let _0x1cfd38 = 1; _0x1cfd38 < _0x1adcf3.length - 1; _0x1cfd38++) {
          const _0xc72144 = {
            text: _0x1adcf3[_0x1cfd38],
            edit: _0x3d95a2
          };
          await _0x3aa94a.sendMessage(_0x5106a5, _0xc72144);
          await new Promise(_0x19434c => setTimeout(_0x19434c, 1000));
        }
      };
      const [_0x886af4, _0x42c94c] = await Promise.all([_0x1e942b(), _0x4bacf9("dados", "SUNG-BACKUP.zip")]);
      if (!_0x42c94c.success) {
        const _0x203590 = {
          text: "❌ ERRO ao criar backup: " + _0x42c94c.error,
          edit: _0x3d95a2
        };
        await _0x3aa94a.sendMessage(_0x5106a5, _0x203590);
        return false;
      }
      await _0x3aa94a.sendMessage(_0x5106a5, {
        'text': _0x1adcf3[_0x1adcf3.length - 1],
        'edit': _0x3d95a2
      });
      await new Promise(_0x4f799c => setTimeout(_0x4f799c, 1000));
      const _0x180bbd = {
        text: "📤 Enviando arquivo de backup...",
        edit: _0x3d95a2
      };
      await _0x3aa94a.sendMessage(_0x5106a5, _0x180bbd);
      const _0x4d4e63 = {
        url: _0x42c94c.filePath
      };
      const _0x54ef01 = {
        document: _0x4d4e63,
        fileName: "SUNG-BACKUP.zip",
        mimetype: "application/zip"
      };
      const _0x2f6984 = {
        quoted: _0x1e9025
      };
      _0x3aa94a.sendMessage(_0x5106a5, _0x54ef01, _0x2f6984).then(async () => {
        _0x5968b9.unlinkSync(_0x42c94c.filePath);
        _0x5bbdc5(_0x5106a5, '✅');
        const _0x2f1a63 = {
          text: "🎉 Backup enviado com sucesso!",
          edit: _0x3d95a2
        };
        await _0x3aa94a.sendMessage(_0x5106a5, _0x2f1a63);
      })["catch"](async _0x26c2e2 => {
        console.error("Erro ao enviar arquivo:", _0x26c2e2);
        const _0x4b6bf5 = {
          text: "❌ ERRO ao enviar o arquivo de backup.",
          edit: _0x3d95a2
        };
        await _0x3aa94a.sendMessage(_0x5106a5, _0x4b6bf5);
      });
      return true;
    } catch (_0x5a3346) {
      console.error("Erro ao criar backup:", _0x5a3346);
      return {
        'success': false,
        'message': "Ocorreu um erro ao criar o backup: " + _0x5a3346.message
      };
    }
  }
}, {
  'name': "hrp",
  'aliases': [],
  'category': "admin",
  'description': "Configura horários pagantes no grupo",
  'longDescription': "Ativa, desativa ou configura o sistema de horários pagantes para o grupo, definindo intervalos de envio.",
  'usage': "hrp [1h/2h/manual]",
  'example': "hrp 1h",
  'menu': "admin",
  'menuSection': "Horários",
  'permissions': _0x369632,
  'requirements': _0xbd8ab7,
  'execute': async ({
    conn: _0x11dc08,
    info: _0x5a1587,
    from: _0x405167,
    args: _0x2dec55,
    SoDono: _0x3983a1,
    Res_SoDono: _0x26ebb7,
    isGroup: _0x1a484b,
    isGroupAdmins: _0x49d37f,
    isBotGroupAdmins: _0x5662a1,
    Res_SoAdm: _0x53d4fb,
    BANCOP: _0x36eea9,
    fs: _0x55960e,
    axios: _0x3fe6fb,
    reply: _0xa4b467,
    path: _0x1f5043
  }) => {
    try {
      const _0x5b7791 = _0x1f5043.join(__dirname, "../../dados/nescessario.json");
      const _0x43301d = JSON.parse(_0x55960e.readFileSync(_0x5b7791));
      const _0x4ae0da = _0x43301d.hrpPremium;
      if (_0x4ae0da === true || _0x4ae0da === undefined) {
        if (!_0x3983a1) {
          return _0xa4b467(_0x26ebb7);
        }
      } else {
        if (_0x4ae0da === false) {
          if (!_0x49d37f) {
            return _0xa4b467(_0x53d4fb);
          }
        }
      }
      if (!_0x5662a1) {
        return _0xa4b467("Eu não sou um administrador para executar esta ação.");
      }
      const _0x541a7e = _0x2dec55[0];
      if (!_0x541a7e || !['1h', '2h', "manual"].includes(_0x541a7e)) {
        return _0xa4b467("Você precisa especificar se o intervalo será de 1h, 2h ou manual.");
      }
      const _0x5e746d = _0x1f5043.join(__dirname, "../../dados/midias/docs/");
      const _0x5d6de0 = "pp_" + _0x405167 + '_' + Date.now() + ".jpg";
      let _0x240b2d = '';
      try {
        const _0x5f25aa = await _0x11dc08.profilePictureUrl(_0x405167, "image");
        const _0x4bae88 = {
          responseType: "arraybuffer"
        };
        const _0x31d19c = await _0x3fe6fb.get(_0x5f25aa, _0x4bae88);
        const _0x291220 = Buffer.from(_0x31d19c.data, "binary");
        if (!_0x55960e.existsSync(_0x5e746d)) {
          const _0x33f12d = {
            recursive: true
          };
          _0x55960e.mkdirSync(_0x5e746d, _0x33f12d);
        }
        _0x55960e.writeFileSync('' + _0x5e746d + _0x5d6de0, _0x291220);
        _0x240b2d = '' + _0x5e746d + _0x5d6de0;
      } catch (_0x30ca6e) {
        console.error("Erro ao obter ou salvar a foto do perfil:", _0x30ca6e);
        _0x240b2d = "https://dl.dropboxusercontent.com/scl/fi/bl2ifmztcohhnbcf2it0b/lotus_satus1.jpg?rlkey=wlknjkhxk4rm1f04szjpnezfq&st=z8ybpp5g&dl=0";
      }
      const _0xfe4360 = _0x541a7e === '1h' ? 1 : _0x541a7e === '2h' ? 2 : 0;
      const _0x4e5156 = _0x36eea9.prepare("SELECT * FROM horarios_pagantes WHERE grupo_id = ?").get(_0x405167);
      let _0x3fc24c = "ativo";
      let _0x1b220a = null;
      if (_0x4e5156) {
        if (_0x541a7e === (_0x4e5156.intervalo_horas === 1 ? '1h' : _0x4e5156.intervalo_horas === 2 ? '2h' : "manual")) {
          _0x3fc24c = _0x4e5156.situacao === "ativo" ? "inativo" : "ativo";
        }
        _0x1b220a = _0x4e5156.pp_url;
        _0x36eea9.prepare("UPDATE horarios_pagantes \n SET situacao = ?, intervalo_horas = ?, pp_url = ?, timestamp_atualizacao = ? \n WHERE grupo_id = ?").run(_0x3fc24c, _0xfe4360, _0x240b2d, Date.now(), _0x405167);
      } else {
        _0x36eea9.prepare("INSERT INTO horarios_pagantes \n (grupo_id, situacao, intervalo_horas, pp_url, timestamp_criacao, timestamp_atualizacao) \n VALUES (?, ?, ?, ?, ?, ?)").run(_0x405167, _0x3fc24c, _0xfe4360, _0x240b2d, Date.now(), Date.now());
      }
      const _0x59a93a = _0x1f5043.join(__dirname, "../../dados/midias/docs/");
      if (_0x1b220a && _0x1b220a.startsWith(_0x59a93a) && _0x1b220a !== _0x240b2d) {
        try {
          if (_0x55960e.existsSync(_0x1b220a)) {
            _0x55960e.unlinkSync(_0x1b220a);
          }
        } catch (_0x584b58) {
          console.error("Erro ao remover foto antiga:", _0x584b58);
        }
      }
      if (_0x3fc24c === "ativo") {
        _0xa4b467("✅ Status de horário pagante para este grupo atualizado para " + _0x3fc24c + ". A cada: " + _0x541a7e + '.');
      } else {
        _0xa4b467("❌ Horários pagantes desativados para este grupo.");
      }
      return true;
    } catch (_0x49187f) {
      console.error("Erro ao configurar horários pagantes:", _0x49187f);
      return {
        'success': false,
        'message': "Ocorreu um erro ao configurar horários pagantes: " + _0x49187f.message
      };
    }
  }
}, {
  'name': "hrpfoto",
  'aliases': [],
  'category': "admin",
  'description': "Atualiza a foto do grupo para horários pagantes",
  'longDescription': "Atualiza a foto utilizada nas mensagens de horários pagantes para este grupo, usando a foto atual do perfil do grupo.",
  'usage': "hrpfoto",
  'example': "hrpfoto",
  'menu': "admin",
  'menuSection': "Horários",
  'permissions': _0x3e74b9,
  'requirements': {},
  'execute': async ({
    conn: _0x4e7110,
    info: _0x225a04,
    from: _0x1832b9,
    SoDono: _0x317855,
    Res_SoDono: _0x49d5cd,
    isGroup: _0x7c2cf5,
    isGroupAdmins: _0x18fc0b,
    isBotGroupAdmins: _0x21a6dd,
    Res_SoAdm: _0x19f78a,
    BANCOP: _0x5ac3b6,
    fs: _0x47684b,
    axios: _0x560adb,
    reply: _0x4f48be,
    path: _0x1a056d
  }) => {
    try {
      const _0x10eb4e = _0x1a056d.join(__dirname, "../../dados/nescessario.json");
      const _0xe6f5d0 = JSON.parse(_0x47684b.readFileSync(_0x10eb4e));
      const _0x2f6141 = _0xe6f5d0.hrpPremium;
      if (_0x2f6141 === true || _0x2f6141 === undefined) {
        if (!_0x317855) {
          return _0x4f48be(_0x49d5cd);
        }
      } else {
        if (_0x2f6141 === false) {
          if (!_0x18fc0b) {
            return _0x4f48be(_0x19f78a);
          }
        }
      }
      if (!_0x21a6dd) {
        return _0x4f48be("Eu não sou um administrador para executar esta ação.");
      }
      const _0x4f6d13 = _0x1a056d.join(__dirname, "../../dados/midias/docs/");
      let _0x3ea528;
      let _0x54e98a = null;
      const _0x104d90 = _0x5ac3b6.prepare("SELECT * FROM horarios_pagantes WHERE grupo_id = ?").get(_0x1832b9);
      if (!_0x104d90) {
        return _0x4f48be("Este grupo não está registrado no sistema de horários pagantes.");
      }
      _0x54e98a = _0x104d90.pp_url;
      try {
        const _0x1d9797 = await _0x4e7110.profilePictureUrl(_0x1832b9, "image");
        const _0x2ae6e0 = {
          responseType: "arraybuffer"
        };
        const _0x4b921c = await _0x560adb.get(_0x1d9797, _0x2ae6e0);
        const _0x2faefa = Buffer.from(_0x4b921c.data, "binary");
        const _0x549be0 = "hrp_" + _0x1832b9 + '_' + Date.now() + ".jpg";
        if (!_0x47684b.existsSync(_0x4f6d13)) {
          const _0x4ff7ad = {
            recursive: true
          };
          _0x47684b.mkdirSync(_0x4f6d13, _0x4ff7ad);
        }
        _0x47684b.writeFileSync('' + _0x4f6d13 + _0x549be0, _0x2faefa);
        _0x3ea528 = '' + _0x4f6d13 + _0x549be0;
      } catch (_0xef4f5) {
        console.error("Erro ao obter ou salvar a foto do perfil:", _0xef4f5);
        _0x3ea528 = "https://dl.dropboxusercontent.com/scl/fi/bl2ifmztcohhnbcf2it0b/lotus_satus1.jpg?rlkey=wlknjkhxk4rm1f04szjpnezfq&st=z8ybpp5g&dl=0";
      }
      _0x5ac3b6.prepare("UPDATE horarios_pagantes SET pp_url = ?, timestamp_atualizacao = ? WHERE grupo_id = ?").run(_0x3ea528, Date.now(), _0x1832b9);
      const _0x1f68a8 = _0x1a056d.join(__dirname, "../../dados/midias/docs/");
      if (_0x54e98a && _0x54e98a.startsWith(_0x1f68a8) && _0x54e98a !== _0x3ea528) {
        try {
          if (_0x47684b.existsSync(_0x54e98a)) {
            _0x47684b.unlinkSync(_0x54e98a);
          }
        } catch (_0x18687e) {
          console.error("Erro ao remover foto antiga:", _0x18687e);
        }
      }
      _0x4f48be("A foto do grupo para horários pagantes foi atualizada com sucesso.");
      return true;
    } catch (_0x1c41d2) {
      console.error("Erro ao atualizar foto:", _0x1c41d2);
      return {
        'success': false,
        'message': "Ocorreu um erro ao atualizar a foto: " + _0x1c41d2.message
      };
    }
  }
}, {
  'name': "horarios",
  'aliases': [],
  'category': "grupo",
  'description': "Exibe os horários pagantes do grupo",
  'longDescription': "Gera e exibe horários pagantes para jogos, simulando horários com maior probabilidade de ganhos.",
  'usage': "horarios",
  'example': "horarios",
  'menu': "grupo",
  'menuSection': "Horários",
  'permissions': _0x362a38,
  'requirements': {},
  'execute': async ({
    conn: _0x19790b,
    info: _0x21a6cb,
    from: _0x10c543,
    isGroup: _0x3e9aac,
    Res_SoAdm: _0x288cc0,
    isGroupAdmins: _0x20c53a,
    BANCOP: _0x4c321c,
    moment: _0x194bad,
    reply: _0x4ba577
  }) => {
    try {
      if (!_0x3e9aac) {
        return _0x4ba577("Este comando é apenas para grupos.");
      }
      if (!_0x20c53a) {
        return _0x4ba577(_0x288cc0);
      }
      const _0x42754c = _0x4c321c.prepare("SELECT * FROM horarios_pagantes WHERE grupo_id = ?").get(_0x10c543);
      if (!_0x42754c) {
        return _0x4ba577("Este Grupo Não Esta Registrado No Sistema De Horarios.");
      }
      if (_0x42754c.situacao !== "ativo") {
        return _0x4ba577("Sistema De Horarios Nesse Grupo Esta Desativado.");
      }
      const _0x212bf7 = _0x194bad().tz("America/Sao_Paulo").format('HH');
      const _0x119fb2 = _0x42754c.pp_url || "https://dl.dropboxusercontent.com/scl/fi/bl2ifmztcohhnbcf2it0b/lotus_satus1.jpg?rlkey=wlknjkhxk4rm1f04szjpnezfq&st=z8ybpp5g&dl=0";
      const _0x224e70 = {
        "FORTUNE TIGER": '🐯',
        "DRAGON LUCK": '🐉',
        "FORTUNE RABBIT": '🐰',
        "FORTUNE MOUSE": '🐭',
        "GANESHA GOLD": '🐘',
        BIKINI: '👙',
        "MUAY THAI": '🥊',
        CIRCUS: '🎪',
        "FORTUNE OX": '🐂',
        "DOUBLE FORTUNE": '💰',
        "DRAGON TIGER LUCK": "🐉🐅",
        "GENIE'S WISHES(GENIO)": '🧞',
        "JUNGLE DELIGHT": "🌳🌲",
        "PIGGY GOLD": '🐷',
        "MIDAS FORTUNE": '👑',
        "SUN & MOON": "🌞🌛",
        "WILD BANDITO": "🦹‍♂️",
        "PHOENIX RISES": "🔥🕊️",
        "SUPERMARKET SPREE": '🛒',
        "CAPTAIN BOUNTY": "🚢👨‍✈️",
        "MISTER HOLLOWEEN": '🎃',
        "LEPRECHAUN RICHES": "🍀💰",
        "BIG BASS SPLASH": '🐟',
        "LEOPARD OF GOLD": '🐆',
        AVIATOR: '✈️',
        "FORTUNE TOUCAN": '🦤',
        "MR TURTLE": '🐢',
        "AGE OF VIKINGS": '🐉',
        "MUSTANG GOLD MEGAWAYS": '🐎',
        "O VIRA LATA CARAMELO": '🦮',
        "FORTUNE GEMS 2": '💎',
        "CASH MANIA": '🤑',
        "GATES OF OLYMPUS": '⚡'
      };
      let _0x7a7fc9 = '';
      Object.entries(_0x224e70).forEach(([_0x1d92dd, _0xd66233]) => {
        _0x7a7fc9 += "\n" + _0xd66233 + " *" + _0x1d92dd + "*\n";
        for (let _0x4d900c = 0; _0x4d900c < 5; _0x4d900c++) {
          let _0x4050e2 = Math.floor(Math.random() * 60);
          let _0x236e52 = _0x4050e2 + Math.floor(Math.random() * 6);
          _0x4050e2 = _0x4050e2 > 59 ? 59 : _0x4050e2;
          _0x236e52 = _0x236e52 > 59 ? 59 : _0x236e52;
          let _0x262a08 = _0x212bf7 + ':' + _0x4050e2.toString().padStart(2, '0');
          let _0x3d6b8d = _0x212bf7 + ':' + _0x236e52.toString().padStart(2, '0');
          if (_0x3d6b8d < _0x262a08) {
            [_0x262a08, _0x3d6b8d] = [_0x3d6b8d, _0x262a08];
          }
          _0x7a7fc9 += " " + _0xd66233 + " *" + _0x262a08 + "* ✅ *" + _0x3d6b8d + "* ✅\n";
        }
      });
      let _0x452f77 = "🍀💰 *HORARIOS PAGANTES🍀💰*\n\n\n🕒 *Horários a cada hora*\n\n" + _0x7a7fc9 + "\nDica: alterne entre os giros entre normal e turbo, se vier um Grande Ganho, PARE e espere a próxima brecha!\n\n🔞NÃO INDICADO PARA MENORES🔞\n\nLembrando a todos!\n\nHorários de probabilidades aumentam muito sua chance de lucrar, mas lembrando que não anula a chance de perda, por mais que seja baixa jogue com responsabilidade...";
      const _0x13c740 = {
        url: _0x119fb2
      };
      const _0x3f51c1 = {
        image: _0x13c740,
        caption: _0x452f77
      };
      const _0x2f8af3 = {
        quoted: _0x21a6cb
      };
      _0x19790b.sendMessage(_0x10c543, _0x3f51c1, _0x2f8af3);
      return true;
    } catch (_0x2f9d82) {
      console.error("Erro ao gerar horários:", _0x2f9d82);
      return {
        'success': false,
        'message': "Ocorreu um erro ao gerar os horários: " + _0x2f9d82.message
      };
    }
  }
}, {
  'name': "porcentagem",
  'aliases': ["porcentagens"],
  'category': "grupo",
  'description': "Exibe porcentagens e estatísticas dos jogos",
  'longDescription': "Gera e exibe estatísticas com porcentagens, valores mínimos, médias e máximos para diversos jogos, incluindo dicas baseadas no horário.",
  'usage': "porcentagem",
  'example': "porcentagem",
  'menu': "grupo",
  'menuSection': "Estatísticas",
  'permissions': _0x44cecb,
  'requirements': {},
  'execute': async ({
    conn: _0x1dd5e4,
    info: _0x103df2,
    from: _0xa5148d,
    BANCOP: _0x5c5639,
    reply: _0x5f126b
  }) => {
    try {
      const _0x50dba3 = _0x5c5639.prepare("SELECT * FROM horarios_pagantes WHERE grupo_id = ?").get(_0xa5148d);
      if (!_0x50dba3) {
        return _0x5f126b("Este Grupo Não Esta Registrado No Sistema De Horarios.");
      }
      if (_0x50dba3.situacao !== "ativo") {
        return _0x5f126b("Sistema De Horarios Nesse Grupo Esta Desativado.");
      }
      const _0x5992a0 = new Date();
      const _0x5afe79 = _0x5992a0.getFullYear() * 10000 + (_0x5992a0.getMonth() + 1) * 100 + _0x5992a0.getDate();
      const _0x548ac2 = (_0x20b945, _0x214770, _0xdaf0f9 = 0) => Math.floor((Math.sin(_0x5afe79 + _0xdaf0f9) * 10000 - Math.floor(Math.sin(_0x5afe79 + _0xdaf0f9) * 10000)) * (_0x214770 - _0x20b945 + 1)) + _0x20b945;
      const _0x2e3be6 = {
        name: "FORTUNE TIGER",
        emoji: '🐯',
        baseMin: 0.4
      };
      const _0x39395e = {
        name: "DRAGON LUCK",
        emoji: '🐉',
        baseMin: 0.4
      };
      const _0xd1405e = {
        name: "FORTUNE RABBIT",
        emoji: '🐰',
        baseMin: 0.5
      };
      const _0x41df22 = {
        name: "FORTUNE MOUSE",
        emoji: '🐭',
        baseMin: 0.5
      };
      const _0x2ce695 = {
        name: "GANESHA GOLD",
        emoji: '🐘',
        baseMin: 0.3
      };
      const _0x2fe926 = {
        name: "BIKINI",
        emoji: '👙',
        baseMin: 0.5
      };
      const _0x276992 = {
        name: "MUAY THAI",
        emoji: '🥊',
        baseMin: 0.4
      };
      const _0x3f1bec = {
        name: "CIRCUS",
        emoji: '🎪',
        baseMin: 0.5
      };
      const _0x301a5b = {
        name: "FORTUNE OX",
        emoji: '🐂',
        baseMin: 0.5
      };
      const _0xa8f8a4 = {
        name: "DOUBLE FORTUNE",
        emoji: '💰',
        baseMin: 0.3
      };
      const _0x5d8125 = {
        name: "DRAGON TIGER LUCK",
        emoji: '🐉',
        emoji2: '🐅',
        baseMin: 0x1
      };
      const _0x4dc226 = {
        name: "GENIE'S WISHES (GENIO)",
        emoji: '🧞',
        baseMin: 0.5
      };
      const _0x2303a1 = {
        name: "JUNGLE DELIGHT",
        emoji: '🌳',
        baseMin: 0.4
      };
      const _0x15621d = {
        name: "PIGGY GOLD",
        emoji: '🐷',
        baseMin: 0.5
      };
      const _0x53d3ea = {
        name: "MIDAS FORTUNE",
        emoji: '👑',
        baseMin: 0.4
      };
      const _0x34d556 = {
        name: "SUN & MOON",
        emoji: '🌞',
        emoji2: '🌛',
        baseMin: 0.4
      };
      const _0x57767e = {
        name: "WILD BANDITO",
        emoji: "🦹‍♂️",
        baseMin: 0.4
      };
      const _0xd57043 = {
        name: "PHOENIX RISES",
        emoji: "🕊️",
        emoji2: '🔥',
        baseMin: 0.4
      };
      const _0x338002 = {
        name: "SUPERMARKET SPREE",
        emoji: '🛒',
        baseMin: 0.4
      };
      const _0x542030 = {
        name: "CAPTAIN BOUNTY",
        emoji: '🚢',
        emoji2: "👨‍✈️",
        baseMin: 0.5
      };
      const _0x5272ca = {
        name: "MISTER HOLLOWEEN",
        emoji: '🎃',
        baseMin: 0.3
      };
      const _0x537940 = {
        name: "LEPRECHAUN RICHES",
        emoji: '🍀',
        emoji2: '💰',
        baseMin: 0.4
      };
      const _0x3695a7 = [_0x2e3be6, _0x39395e, _0xd1405e, _0x41df22, _0x2ce695, _0x2fe926, _0x276992, _0x3f1bec, _0x301a5b, _0xa8f8a4, _0x5d8125, _0x4dc226, _0x2303a1, _0x15621d, _0x53d3ea, _0x34d556, _0x57767e, _0xd57043, _0x338002, _0x542030, _0x5272ca, _0x537940];
      const _0x26b4a0 = _0x3695a7.map((_0x5312b7, _0x22a000) => {
        const _0x4ec74c = _0x22a000 * 1000;
        return {
          'name': _0x5312b7.name,
          'emoji': _0x5312b7.emoji,
          'emoji2': _0x5312b7.emoji2 || '',
          'numbers': {
            'min': _0x5312b7.baseMin,
            'media': parseFloat((_0x5312b7.baseMin * _0x548ac2(3, 8, _0x4ec74c + 1)).toFixed(2)),
            'max': parseFloat((_0x5312b7.baseMin * _0x548ac2(10, 25, _0x4ec74c + 2)).toFixed(2)),
            'chance': _0x548ac2(15, 98, _0x4ec74c)
          }
        };
      });
      const _0x1d1a0b = _0x5992a0.getHours();
      const _0x43c488 = [["⭐ Dica: Os jogos costumam pagar melhor durante a madrugada quando há menos jogadores online.", "⭐ Dica: Na madrugada, tente Fortune Tiger com apostas médias e limites de ganho/perda.", "⭐ Dica: Entre 23h e 05h, as chances de pagamento tendem a ser melhores em Fortune Mouse e Dragon Tiger."], ["⭐ Dica: Este é um bom horário para jogos rápidos como Fortune Tiger ou Jungle Delight.", "⭐ Dica: À tarde, Bikini e Circus costumam ter melhores multiplicadores.", "⭐ Dica: Aproveite o horário da tarde para jogar Fortune Mouse com apostas consistentes."], ["⭐ Dica: Pela manhã, jogos como Fortune Ox e Piggy Gold tendem a ter melhor retorno.", "⭐ Dica: As primeiras horas do dia são ótimas para testar novas estratégias.", "⭐ Dica: Entre 8h e 11h, aposte em jogos com tema de animais para melhores ganhos."], ["⭐ Dica: Recomendamos começar com apostas pequenas e aumentar gradualmente.", "⭐ Dica: Estabeleça limites de ganho e perda antes de começar a jogar.", "⭐ Dica: Alterne entre diferentes jogos quando sentir que a sorte não está ao seu lado."]];
      const _0x35ba27 = _0x1d1a0b >= 21 || _0x1d1a0b <= 4 ? 0 : _0x1d1a0b >= 14 && _0x1d1a0b <= 18 ? 1 : _0x1d1a0b >= 5 && _0x1d1a0b <= 11 ? 2 : 3;
      const _0x44cf1c = _0x43c488[_0x35ba27][_0x5afe79 % 3];
      const _0x3e9551 = "🍀 *PORCENTAGENS E ESTATÍSTICAS* 💰\n\n" + _0x26b4a0.map(_0x30637a => {
        const _0xd2ee92 = _0x30637a.emoji2 ? '*❲' + _0x30637a.emoji + "❳ " + _0x30637a.name + " ❲" + _0x30637a.emoji2 + '❳*' : '*❲' + _0x30637a.emoji + "❳ " + _0x30637a.name + '*';
        return _0xd2ee92 + "\n- *Mínimo:* R$ " + _0x30637a.numbers.min.toFixed(2) + "\n- *Média:* R$ " + _0x30637a.numbers.media.toFixed(2) + "\n- *Máximo:* R$ " + _0x30637a.numbers.max.toFixed(2) + "\n- *Chance:* " + _0x30637a.numbers.chance + '%';
      }).join("\n\n") + "\n\n" + _0x44cf1c + "\n\nObservação: As porcentagens podem conter alguma divergência...";
      let _0xa82330;
      try {
        _0xa82330 = await _0x1dd5e4.profilePictureUrl(_0xa5148d, "image");
      } catch {
        _0xa82330 = _0x50dba3.pp_url || "https://i.ibb.co/6XGQd5g/6ca032835ed7a16748b6f.jpg";
      }
      const _0x4b4eaa = {
        url: _0xa82330
      };
      const _0x230433 = {
        forwardingScore: 0x3e7,
        isForwarded: true
      };
      const _0x26a462 = {
        image: _0x4b4eaa,
        caption: _0x3e9551,
        contextInfo: _0x230433
      };
      const _0x331450 = {
        quoted: _0x103df2
      };
      _0x1dd5e4.sendMessage(_0xa5148d, _0x26a462, _0x331450);
      return true;
    } catch (_0x1c0580) {
      console.error("Erro ao gerar porcentagens:", _0x1c0580);
      return {
        'success': false,
        'message': "Ocorreu um erro ao gerar as porcentagens: " + _0x1c0580.message
      };
    }
  }
}, {
  'name': "diagnostico-hrp",
  'aliases': ["listar-hrp"],
  'category': "admin",
  'description': "Mostra diagnóstico do sistema de horários pagantes",
  'longDescription': "Exibe informações detalhadas sobre o sistema de horários pagantes, incluindo estatísticas e status dos grupos.",
  'usage': "diagnostico-hrp",
  'example': "diagnostico-hrp",
  'menu': "admin",
  'menuSection': "Horários",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x4590bf,
    info: _0x25e5cb,
    from: _0x3514cc,
    isGroup: _0x1dd741,
    BANCOP: _0xc8f731,
    moment: _0x6806f2,
    reply: _0x224dc0
  }) => {
    try {
      const _0x5ae9ad = _0x6806f2();
      const _0x37ddc9 = _0x5ae9ad.format("HH:mm");
      const _0x3267a0 = _0x5ae9ad.clone().add(1, "hour").startOf("hour").format("HH:00");
      const _0x3eb3a3 = _0x1dd741 ? _0xc8f731.prepare("SELECT hp.*, \n(SELECT COUNT(*) FROM mensagens_agendadas WHERE grupo_id = hp.grupo_id AND enviado = 0) as msgs_pendentes,\n(SELECT COUNT(*) FROM mensagens_agendadas WHERE grupo_id = hp.grupo_id) as total_msgs\nFROM horarios_pagantes hp WHERE hp.grupo_id = ?").all(_0x3514cc) : _0xc8f731.prepare("SELECT hp.*, \n(SELECT COUNT(*) FROM mensagens_agendadas WHERE grupo_id = hp.grupo_id AND enviado = 0) as msgs_pendentes,\n(SELECT COUNT(*) FROM mensagens_agendadas WHERE grupo_id = hp.grupo_id) as total_msgs\nFROM horarios_pagantes hp").all();
      const _0x3f28b4 = _0xc8f731.prepare("SELECT COUNT(*) as total FROM mensagens_agendadas").get().total || 0;
      const _0x5d1777 = _0xc8f731.prepare("SELECT COUNT(*) as total FROM mensagens_agendadas WHERE enviado = 0").get().total || 0;
      const _0x12461b = _0x5ae9ad.clone().startOf("hour").format("HH:00");
      const _0x45b5b1 = _0xc8f731.prepare("SELECT COUNT(*) as total FROM mensagens_agendadas WHERE hora = ?").get(_0x12461b).total || 0;
      const _0x41a4e4 = _0xc8f731.prepare("SELECT COUNT(*) as total FROM mensagens_agendadas WHERE hora = ?").get(_0x3267a0).total || 0;
      let _0x44ed05 = "*DIAGNÓSTICO DE HORÁRIOS PAGANTES*\n\n";
      _0x44ed05 += "*Status Geral:*\n";
      _0x44ed05 += "• Total de grupos: " + _0x3eb3a3.length + "\n";
      _0x44ed05 += "• Grupos ativos: " + _0x3eb3a3.filter(_0x5d58f6 => _0x5d58f6.situacao === "ativo").length + "\n";
      _0x44ed05 += "• Grupos inativos: " + _0x3eb3a3.filter(_0x5cebd2 => _0x5cebd2.situacao !== "ativo").length + "\n";
      _0x44ed05 += "• Hora atual: " + _0x37ddc9 + "\n";
      _0x44ed05 += "• Próximo horário cheio: " + _0x3267a0 + "\n\n";
      _0x44ed05 += "*Mensagens no Sistema:*\n";
      _0x44ed05 += "• Total mensagens: " + _0x3f28b4 + "\n";
      _0x44ed05 += "• Mensagens pendentes: " + _0x5d1777 + "\n\n";
      _0x44ed05 += "*Mensagens recentes:*\n";
      _0x44ed05 += "• Última hora: " + _0x12461b + " → " + _0x45b5b1 + " mensagens\n";
      _0x44ed05 += "• Próxima hora: " + _0x3267a0 + " → " + _0x41a4e4 + " mensagens\n\n";
      if (_0x3eb3a3.length > 0) {
        _0x44ed05 += "*Grupos (" + _0x3eb3a3.length + "):*\n";
        for (let _0x2b53de = 0; _0x2b53de < _0x3eb3a3.length; _0x2b53de++) {
          const _0x7d7dcc = _0x3eb3a3[_0x2b53de];
          try {
            let _0x3318a7;
            try {
              _0x3318a7 = await _0x4590bf.groupMetadata(_0x7d7dcc.grupo_id);
            } catch (_0x109de0) {
              const _0x3856d4 = {
                subject: "Grupo não acessível",
                participants: []
              };
              _0x3318a7 = _0x3856d4;
            }
            const _0x791bba = _0x7d7dcc.situacao === "ativo" ? '✅' : '❌';
            const _0xcdbbe5 = _0x3318a7.subject ? _0x3318a7.subject.substring(0, 20) + (_0x3318a7.subject.length > 20 ? "..." : '') : "Nome não disponível";
            const _0x488d7f = _0x7d7dcc.grupo_id.substring(0, 24);
            const _0xadc913 = _0x6806f2(_0x7d7dcc.timestamp_atualizacao).format("DD/MM HH:mm");
            _0x44ed05 += _0x791bba + " " + (_0x2b53de + 1) + ". *" + _0xcdbbe5 + "*\n";
            _0x44ed05 += " ⏱️ Int: " + _0x7d7dcc.intervalo_horas + "h | 👥 " + _0x3318a7.participants.length + " | 👑 " + _0x3318a7.participants.filter(_0x3a79d7 => _0x3a79d7.admin).length + " | 📅 " + _0xadc913 + "\n";
            _0x44ed05 += " 📩 Msgs: " + _0x7d7dcc.total_msgs + " (" + _0x7d7dcc.msgs_pendentes + " pendentes)\n";
            _0x44ed05 += " 🆔 " + _0x488d7f + "\n";
            _0x44ed05 += " 🔄 Situação: *" + _0x7d7dcc.situacao + "*\n\n";
          } catch (_0x2f454f) {
            _0x44ed05 += "❌ " + (_0x2b53de + 1) + ". Erro ao obter dados do grupo: " + _0x2f454f.message + "\n\n";
          }
        }
      } else {
        _0x44ed05 += "*Não há grupos configurados no sistema.*\n\n";
      }
      _0x44ed05 += "*Comandos:*\n";
      _0x44ed05 += "• Para ativar/desativar: .hrp 1h/2h\n";
      _0x44ed05 += "• Para diagnóstico: .listar-hrp\n";
      _0x44ed05 += "• Para remover: .remover-hrp [ID]\n";
      _0x224dc0(_0x44ed05);
      return true;
    } catch (_0x5baefa) {
      console.error("Erro ao listar horários pagantes:", _0x5baefa);
      const _0x24507b = {
        success: false,
        message: "❌ Erro ao listar horários pagantes: " + _0x5baefa.message
      };
      return _0x24507b;
    }
  }
}, {
  'name': "remover-hrp",
  'aliases': [],
  'category': "dono",
  'description': "Remove um grupo do sistema de horários pagantes",
  'longDescription': "Remove um grupo do sistema de horários pagantes, liberando recursos e excluindo dados associados.",
  'usage': "remover-hrp [ID do grupo]",
  'example': "remover-hrp 552199990000-1631234567",
  'menu': "dono",
  'menuSection': "Horários",
  'permissions': _0x503271,
  'requirements': {},
  'execute': async ({
    conn: _0x4ac747,
    info: _0x9feb9c,
    from: _0x178109,
    args: _0x50cb5e,
    SoDono: _0x2f9a0d,
    Res_SoDono: _0x32d4f9,
    BANCOP: _0x23fc43,
    fs: _0x43c0cf,
    reply: _0x3c1a83,
    path: _0x4943eb
  }) => {
    try {
      if (!_0x2f9a0d) {
        return _0x3c1a83(_0x32d4f9);
      }
      let _0x4ed755 = _0x50cb5e.length > 0 ? _0x50cb5e[0] : _0x178109;
      if (!_0x4ed755.endsWith("@g.us")) {
        _0x4ed755 = _0x4ed755 + "@g.us";
      }
      const _0x3e8ca2 = _0x23fc43.prepare("SELECT * FROM horarios_pagantes WHERE grupo_id = ?").get(_0x4ed755);
      if (!_0x3e8ca2) {
        return _0x3c1a83("Grupo não encontrado no sistema de horários pagantes.");
      }
      const _0x1011b3 = _0x3e8ca2.pp_url;
      _0x23fc43.prepare("DELETE FROM horarios_pagantes WHERE grupo_id = ?").run(_0x4ed755);
      const _0x3a6eb2 = _0x4943eb.join(__dirname, "../../dados/midias/docs/");
      if (_0x1011b3 && _0x1011b3.startsWith(_0x3a6eb2)) {
        try {
          if (_0x43c0cf.existsSync(_0x1011b3)) {
            _0x43c0cf.unlinkSync(_0x1011b3);
          }
        } catch (_0x5bcef7) {
          console.error("Erro ao remover foto:", _0x5bcef7);
        }
      }
      _0x3c1a83("✅ Grupo removido com sucesso do sistema de horários pagantes.");
      return true;
    } catch (_0x1b99cc) {
      console.error("Erro ao remover grupo:", _0x1b99cc);
      return {
        'success': false,
        'message': "❌ Ocorreu um erro ao remover o grupo: " + _0x1b99cc.message
      };
    }
  }
}, {
  'name': "rankbct",
  'aliases': ["rankbuceta", "rankbucetudas"],
  'category': "nsfw",
  'description': "Ranking aleatório de bucetas do grupo",
  'longDescription': "Cria um ranking aleatório de 5 membros do grupo com comentários sobre suas \"bucetas\". Comando de brincadeira para grupos adultos.",
  'usage': "rankbct",
  'example': "rankbct",
  'menu': "nsfw",
  'menuSection': "Diversão +18",
  'permissions': _0x18d76c,
  'requirements': _0x69a24,
  'execute': async ({
    conn: _0x3f315f,
    info: _0x21f8e3,
    from: _0x1d4b75,
    isGroup: _0x25bb2b,
    reply: _0x425db1,
    prefix: _0x2ae7db,
    groupMembers: _0x1e2fde,
    reagirE: _0x5e5669,
    mencionarIMG: _0x2d9864
  }) => {
    _0x5e5669(_0x1d4b75, '😈');
    let _0x4f6852 = [];
    let _0x4eacc9 = ["Buceta rosinha, parece que menstrua danone! 🫣", "Buceta mó preta, parece o sufaco das minhas primas. 🤐", "Mó bucetão, parece da Elisa Shances. 😈", "Bct lisinha, parece eu sem dinheiro. 🥲", "Deliciosa, porém parece a mata atlântica. 🌼", "Deliciosa e macia. 🥰", "Pior que o correio, só pacote. 😏", "Provoca até nos sonhos. 🤤", "Sonho de qualquer homem. 😜", "Quem é Mia Khalifa perto de você?. 😉", "Se essa é a porta do paraíso, eu queria ser a chave. 😍"];
    let _0xc2873a = "*_Essas são as mais bucetudas 🤤 do grupo:_*\n*╭────────────*";
    for (let _0x500f90 = 0; _0x500f90 < 5; _0x500f90++) {
      let _0x3dcc9b = _0x1e2fde[Math.floor(Math.random() * _0x1e2fde.length)];
      _0xc2873a += "\n*│* 😈 @" + _0x3dcc9b.id.split('@')[0] + "\n*│➥ " + _0x4eacc9[Math.floor(Math.random() * _0x4eacc9.length)] + '*';
      _0x4f6852.push(_0x3dcc9b.id);
    }
    _0xc2873a += "\n*╰────────────*";
    _0x2d9864(_0xc2873a, "https://i.ibb.co/2WDFrz6/165911b460383de91b25f.jpg");
    return true;
  }
}, {
  'name': "jogos",
  'aliases': ["listadejogos"],
  'category': "downloads",
  'description': "Mostra uma lista de jogos disponíveis para download",
  'longDescription': "Exibe um menu interativo com jogos disponíveis para download. O usuário pode selecionar um jogo para receber o link de download.",
  'usage': "jogos [número do jogo]",
  'example': "jogos",
  'menu': "downloads",
  'menuSection': "Jogos",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x52df73,
    info: _0x4687e0,
    from: _0x2dc555,
    sender: _0x2467bf,
    q: _0x22aa50,
    prefix: _0x297b8a,
    command: _0x5b58f7,
    pushname: _0x39ba84,
    NomeDoBot: _0x87c41c,
    fs: _0x36e28c,
    getUniqueKey: _0x4478e8,
    optionsBuffer: _0x183b6e,
    flushOptionsBuffer: _0x37c1d0,
    createChoiceMenu: _0x16834b,
    reply: _0x16bce8,
    path: _0x18845b
  }) => {
    const _0x114c04 = _0x4478e8(_0x2dc555, _0x2467bf);
    if (_0x183b6e[_0x114c04]) {
      delete _0x183b6e[_0x114c04];
      _0x37c1d0();
    }
    const _0x5af45e = _0x18845b.join(__dirname, "../../dados/org/json/jogos.json");
    let _0x39dab9 = JSON.parse(_0x36e28c.readFileSync(_0x5af45e, "utf-8"));
    if (!_0x22aa50 || isNaN(_0x22aa50.trim())) {
      const _0x10ea12 = {
        'principal': {
          'text': "🎮 Lista de Jogos 🎮\n\n" + _0x39dab9.map(_0x5da3ae => _0x5da3ae.numero + ". 🕹️ " + _0x5da3ae.nome + " 🕹️").join("\n") + "\n\nDigite o número do jogo que você deseja baixar.",
          'options': _0x39dab9.reduce((_0x30a41c, _0x184aa4) => {
            _0x30a41c[_0x184aa4.numero.toString()] = {
              'text': "✅ Enviando link do jogo " + _0x184aa4.nome + "...",
              'command': '' + _0x297b8a + _0x5b58f7 + " " + _0x184aa4.numero,
              'edit': true
            };
            return _0x30a41c;
          }, {})
        }
      };
      await _0x16834b(_0x2dc555, _0x2467bf, _0x10ea12.principal.text, _0x10ea12.principal.options, {
        'menus': _0x10ea12,
        'history': ["principal"]
      });
      return true;
    }
    let _0x27706d = parseInt(_0x22aa50.trim());
    let _0x3cbfb7 = _0x39dab9.find(_0x145970 => _0x145970.numero === _0x27706d);
    if (_0x3cbfb7) {
      const _0xdf89f6 = {
        text: "OLÁ *" + _0x39ba84 + "*, aqui está seu pedido:\n\n🕹️ *Nome Do Jogo* : " + _0x3cbfb7.nome + "\n🔗 *Link Do Jogo* : " + _0x3cbfb7.link + "\n\n© by: " + _0x87c41c,
        quoted: _0x4687e0
      };
      await _0x52df73.sendMessage(_0x2dc555, _0xdf89f6);
    } else {
      await _0x16bce8("Número inválido, por favor escolha um número válido da lista.");
    }
    return true;
  }
}, {
  'name': "listadepacks",
  'aliases': [],
  'category': "nsfw",
  'description': "Mostra uma lista de packs +18 disponíveis",
  'longDescription': "Exibe um menu interativo com packs adultos disponíveis. O usuário pode selecionar um pack para receber o conteúdo.",
  'usage': "listadepacks",
  'example': "listadepacks",
  'menu': "nsfw",
  'menuSection': "Conteúdo +18",
  'permissions': _0x22b7fd,
  'requirements': {},
  'execute': async ({
    conn: _0xff5328,
    info: _0x51ef20,
    from: _0x1a1347,
    sender: _0x468a0a,
    prefix: _0x52dce7,
    getUniqueKey: _0x49053c,
    optionsBuffer: _0x1baa25,
    flushOptionsBuffer: _0x1bbd02,
    createChoiceMenu: _0x358e30,
    reply: _0x39f767
  }) => {
    try {
      const _0x4b83b9 = _0x49053c(_0x1a1347, _0x468a0a);
      if (_0x1baa25[_0x4b83b9]) {
        delete _0x1baa25[_0x4b83b9];
        _0x1bbd02();
      }
      const _0x2ab9d4 = {
        nome: "Alinne Faria",
        id: "packalinefaria"
      };
      const _0x11212c = {
        nome: "Alinne Fox",
        id: "packalinefox"
      };
      const _0x28d6d2 = {
        nome: "Tati",
        id: "packtati"
      };
      const _0x4ad9f9 = {
        nome: "Alycia Ribeiro",
        id: "packalycia"
      };
      const _0x1b245d = {
        nome: "Amiichan",
        id: "packamiichan"
      };
      const _0x1cbf4b = {
        nome: "Aninha Lopes",
        id: "packaninhal"
      };
      const _0x2e471d = {
        nome: "Babymatoso",
        id: "packbabymatoso"
      };
      const _0x235eb6 = {
        nome: "Belle Delphine",
        id: "packbelledel"
      };
      const _0xe88440 = {
        nome: "Brenda T",
        id: "packbrendat"
      };
      const _0x70d76 = {
        nome: "Cami Brito",
        id: "packcamib"
      };
      const _0x3bc7fe = {
        nome: "CC Clowniac",
        id: "packcclowniac"
      };
      const _0x117303 = {
        nome: "FehG",
        id: "packfehg"
      };
      const _0x535332 = {
        nome: "Giovanna C",
        id: "packgiovannac"
      };
      const _0x4873aa = {
        nome: "Isadora M",
        id: "packisadoram"
      };
      const _0xe336f4 = {
        nome: "Isa W",
        id: "packisaw"
      };
      const _0x4b82de = {
        nome: "Lay N",
        id: "packlayn"
      };
      const _0x2f078a = {
        nome: "Leticia Shiryuki",
        id: "packleticias"
      };
      const _0x247a80 = {
        nome: "Marina Mui",
        id: "packmarinam"
      };
      const _0x23f97c = {
        nome: "Maru K",
        id: "packmaruk"
      };
      const _0x5cfd4e = {
        nome: "Mc Pri",
        id: "packmcpri"
      };
      const _0x3cc005 = {
        nome: "Me1Adinha",
        id: "packme1adinha"
      };
      const _0x147762 = {
        nome: "Nath B",
        id: "packnathb"
      };
      const _0x2a0a31 = {
        nome: "Nega B",
        id: "packnegab"
      };
      const _0x59a659 = {
        nome: "Polonesa Do Hype",
        id: "packpolonesa"
      };
      const _0x5e14f9 = {
        nome: "Ruter",
        id: "packruter"
      };
      const _0x44bd0d = {
        nome: "Vita C",
        id: "packvitac"
      };
      const _0x2e94d4 = {
        nome: "Carniello",
        id: "packcarniello"
      };
      const _0x3e2843 = {
        nome: "Neters G",
        id: "packnetersg"
      };
      const _0x451260 = {
        nome: "Egrils",
        id: "packegrils"
      };
      const _0x10c6a5 = {
        nome: "Egrilv",
        id: "packegrilv"
      };
      const _0x11c0d7 = {
        nome: "Aleatorias I",
        id: "packaleatoriasi"
      };
      const _0x544bbd = {
        nome: "Aleatorios V",
        id: "packaleatoriosv"
      };
      const _0x10f509 = {
        nome: "Only Vid",
        id: "packonlyvid"
      };
      const _0x4ead76 = {
        nome: "Amador V",
        id: "packamadorv"
      };
      const _0x672887 = [_0x2ab9d4, _0x11212c, _0x28d6d2, _0x4ad9f9, _0x1b245d, _0x1cbf4b, _0x2e471d, _0x235eb6, _0xe88440, _0x70d76, _0x3bc7fe, _0x117303, _0x535332, _0x4873aa, _0xe336f4, _0x4b82de, _0x2f078a, _0x247a80, _0x23f97c, _0x5cfd4e, _0x3cc005, _0x147762, _0x2a0a31, _0x59a659, _0x5e14f9, _0x44bd0d, _0x2e94d4, _0x3e2843, _0x451260, _0x10c6a5, _0x11c0d7, _0x544bbd, _0x10f509, _0x4ead76];
      let _0x36264e = {};
      _0x672887.forEach((_0x2c8c43, _0x12ed2d) => {
        const _0x2657e6 = {
          text: "✅ Enviando pack: " + _0x2c8c43.nome,
          command: '' + _0x52dce7 + _0x2c8c43.id,
          edit: true
        };
        _0x36264e[(_0x12ed2d + 1).toString()] = _0x2657e6;
      });
      const _0x387770 = {
        close: true,
        text: "✅ Menu fechado com sucesso!",
        edit: true
      };
      _0x36264e['0'] = _0x387770;
      return true;
    } catch (_0xe816dc) {
      console.error("Erro no menu de packs:", _0xe816dc);
      _0x39f767("❌ Ocorreu um erro ao processar o comando.");
      return false;
    }
  }
}, {
  'name': "packtati",
  'aliases': [],
  'category': "nsfw",
  'description': "Envia pack da Tatizaqui",
  'longDescription': "Envia fotos 18+ da Tatizaqui. Requer modo nsfw ativado.",
  'usage': "packtati",
  'example': "packtati",
  'menu': "nsfw",
  'menuSection': "Conteúdo Adulto",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x3f0648,
    info: _0x5bba1d,
    from: _0x14f0f3,
    command: _0x356b6a,
    prefix: _0x4bc741,
    sendBimg: _0xc7405,
    selo: _0x4531c5,
    reply: _0x118dbd
  }) => {
    try {
      const _0x15e73f = ["https://i.ibb.co/HrPDNj6/4aa88fde6a9a0c4d61102.jpg", "https://i.ibb.co/StrvZ3d/9eeb0f7bc9afc2731ff22.jpg", "https://i.ibb.co/rtLtcYG/ef0b6ce4e2c899ea01ff8.jpg", "https://i.ibb.co/5Wnhd10/c4bd09b331ccc1e12fb9c.jpg", "https://i.ibb.co/0hsgn3t/96fc9eb08575c9a22c498.jpg", "https://i.ibb.co/PNTTN6H/593eca5e3a1f9c6d895aa.jpg", "https://i.ibb.co/0QVZK1w/485f2803285637f12a081.jpg", "https://i.ibb.co/McgMwzf/be117c443974cadf5ab6c.jpg", "https://i.ibb.co/Y0G0SwS/7fdb2f7f451fc6195e9c8.jpg", "https://i.ibb.co/ZVZyXtB/fc296210456dfd920f346.jpg", "https://i.ibb.co/x6zJfFv/95cb025b1415556bee57c.jpg", "https://i.ibb.co/zPGsGr6/6cb23e5c4ebfda58bd438.jpg", "https://i.ibb.co/5LP8tJN/ea8736d9b00c1eb6b7bd4.jpg", "https://i.ibb.co/Pr1wdVc/11052b0a880ccc51508a0.jpg", "https://i.ibb.co/mt02jyH/4966bfa928987051bf7b0.jpg", "https://i.ibb.co/PjMvrRX/ee7a1d65e3ca6ec8bdf01.jpg", "https://i.ibb.co/7KQqPrh/b8ac4024047b5c94eb51e.jpg", "https://i.ibb.co/7SVL38C/a05435216298578a02fb6.jpg", "https://i.ibb.co/ck00PhZ/0d0bd57946d44726150de.jpg", "https://i.ibb.co/txnY2PC/3660a90408018851f2cbb.jpg", "https://i.ibb.co/G7RP9mR/f38d36c69e7b82898f9fe.jpg", "https://i.ibb.co/ZJzjppW/ec14cad1b5d9182157398.jpg", "https://i.ibb.co/DCT1c75/f58610e6aef5a28602f33.jpg", "https://i.ibb.co/C0rxhbd/020e19b0085bb6355bc4c.jpg", "https://i.ibb.co/6YhXyrG/d001b034d73a756e45f91.jpg", "https://i.ibb.co/qkb1f14/c09247c599442fc4468b1.jpg", "https://i.ibb.co/vYBvZb7/a73572dd1950f29bf4888.jpg", "https://i.ibb.co/NS0QPtN/6bf465d785f468bbd2700.jpg", "https://i.ibb.co/vdFXwYP/4ead35657b5d1b56a042a.jpg", "https://i.ibb.co/CP809Nw/3847012a38daa3ed56e25.jpg"];
      const _0x85c4cd = _0x15e73f[Math.floor(Math.random() * _0x15e73f.length)];
      const _0x50ac69 = {
        url: _0x85c4cd
      };
      const _0x5167ee = {
        image: _0x50ac69,
        caption: "🔥 𝐏𝐀𝐂𝐊 𝐓𝐀𝐓𝐈𝐙𝐀𝐐𝐔𝐈 🔥",
        mentions: [sender]
      };
      const _0x39d8b9 = {
        quoted: _0x5bba1d
      };
      await _0x3f0648.sendMessage(_0x14f0f3, _0x5167ee, _0x39d8b9);
      return true;
    } catch (_0x556d91) {
      console.error("Erro ao executar packtati:", _0x556d91);
      const _0x2ea90c = {
        success: false,
        message: "Ocorreu um erro ao processar este comando. Tente novamente."
      };
      return _0x2ea90c;
    }
  }
}, {
  'name': "nsfwts",
  'aliases': [],
  'category': "nsfw",
  'description': "Envia NSFW de anime",
  'longDescription': "Envia imagens NSFW de anime baseado na categoria especificada. Requer modo nsfw ativado.",
  'usage': "nsfwts [categoria]",
  'example': "nsfwts hentai",
  'menu': "nsfw",
  'menuSection': "Anime",
  'permissions': _0x3e060e,
  'requirements': _0x437bfc,
  'execute': async ({
    conn: _0x3acd7b,
    info: _0x1bdcde,
    from: _0x49c81d,
    q: _0x2cbe85,
    command: _0x1ef756,
    prefix: _0x22bd8e,
    NomeDoBot: _0x42c283,
    fetchJson: _0x465d2e,
    reply: _0x35facc
  }) => {
    try {
      try {
        const _0xf56a0e = await _0x465d2e("https://raw.githubusercontent.com/Salientekill/figurinhas/main/animes/nsfw/" + _0x2cbe85 + ".json");
        const _0x16f0b9 = _0xf56a0e[Math.floor(Math.random() * _0xf56a0e.length)];
        const _0x1369cb = {
          url: _0x16f0b9
        };
        const _0x2f46a4 = {
          image: _0x1369cb,
          caption: "🔥 𝐎 𝐍𝐒𝐅𝐖 𝐐𝐔𝐄 𝐕𝐎𝐂𝐄̂ 𝐏𝐄𝐃𝐈𝐔 🔥",
          mentions: [sender]
        };
        const _0x2541bc = {
          quoted: _0x1bdcde
        };
        await _0x3acd7b.sendMessage(_0x49c81d, _0x2f46a4, _0x2541bc);
        return true;
      } catch (_0x4e027c) {
        console.log(_0x4e027c);
        const _0x43be0c = {
          success: false,
          message: "🤖 𝐀𝐏𝐈 𝐂𝐀𝐈𝐔 🤖"
        };
        return _0x43be0c;
      }
    } catch (_0xa17d8c) {
      console.error("Erro ao executar nsfwts:", _0xa17d8c);
      const _0x36c13b = {
        success: false,
        message: "Ocorreu um erro ao processar este comando. Tente novamente."
      };
      return _0x36c13b;
    }
  }
}, {
  'name': ["gif-loli", "gif-ahegao", "gif-ass", "gif-bdsm", "gif-blowjob", "gif-ero", "gif-femdom", "gif-foot", "gif-gangbang", "gif-glasses", "gif-masturbation", "gif-neko", "gif-orgy", "gif-panties", "gif-tentacles", "gif-yuri", "gif-nsfw"],
  'aliases': [],
  'category': "nsfw",
  'description': "Envia GIFs NSFW de anime",
  'longDescription': "Envia GIFs NSFW de anime baseados na categoria especificada no comando. Requer modo nsfw ativado.",
  'usage': "gif-[categoria]",
  'example': "gif-neko",
  'menu': "nsfw",
  'menuSection': "Anime GIF",
  'permissions': _0x192b21,
  'requirements': {},
  'execute': async ({
    conn: _0x3910ee,
    info: _0x53a7ac,
    from: _0x5337cc,
    command: _0x5aa972,
    isNsfw: _0x3e7ff0,
    fs: _0x571d16,
    exec: _0x4315ec,
    getBuffer: _0x10e008,
    getRandom: _0x1b4964,
    reply: _0x4dab04
  }) => {
    try {
      try {
        const _0x527ed4 = {
          ahegao: 0x1a,
          ass: 0x16,
          blowjob: 0x16,
          bsdm: 0x16,
          ero: 0x14,
          femdom: 0x16,
          foot: 0x11,
          gangbang: 0x14,
          glasses: 0x14,
          masturbation: 0x14,
          neko: 0x14,
          orgy: 0x13,
          panties: 0x14,
          tentacles: 0x14,
          yuri: 0x12
        };
        let _0x47c842 = _0x5aa972.split('-')[1];
        if (_0x47c842 === "bdsm") {
          _0x47c842 = "bsdm";
        }
        const _0x2bbfc1 = _0x527ed4[_0x47c842];
        if (_0x47c842 !== "loli" && (!_0x2bbfc1 || _0x2bbfc1 <= 0)) {
          return _0x4dab04("Quantidade inválida para o gênero: " + _0x47c842);
        }
        if (_0x47c842 === "loli") {
          const _0x7ad18d = ["https://telegra.ph/file/4237a0ae4841f541ed0b9.mp4", "https://telegra.ph/file/685bcc7a0119219ff77dd.mp4", "https://telegra.ph/file/d80e76e1094238197a325.mp4", "https://telegra.ph/file/8cdd8365a64fd0ce71cb9.mp4", "https://telegra.ph/file/6d691bc30972a5ea22e4.mp4", "https://telegra.ph/file/92f36dc62bb08aca9d4e4.mp4", "https://telegra.ph/file/1ebd59dd985cf6d1e9b6.mp4", "https://telegra.ph/file/8a0d9ea01b41d206a59ee.mp4", "https://telegra.ph/file/2e838d5a07019e7ae6fe1.mp4", "https://telegra.ph/file/6499abb6bcea141142aa2.mp4", "https://telegra.ph/file/711cfb21edc6f5e5bf257.mp4", "https://telegra.ph/file/620e9b759f3dd82b3bc3b.mp4", "https://telegra.ph/file/d752be9b700fdfc21e4f6.mp4", "https://telegra.ph/file/abe29d4c8e02e3078031e.mp4", "https://telegra.ph/file/7d93c4440c3f9538bc51c.mp4", "https://telegra.ph/file/ce6c71a90265fa398cf9f.mp4", "https://telegra.ph/file/05f6d21e39fccf5516047.mp4", "https://telegra.ph/file/39c6aa2401215b075a472.mp4", "https://telegra.ph/file/d9a1e4bdec09dd035163d.mp4", "https://telegra.ph/file/531c8a0bc8dfb92060ede.mp4", "https://telegra.ph/file/6545f018a9da70d3b79a4.mp4", "https://telegra.ph/file/e3bc16f5003e1a65f0dd0.mp4", "https://telegra.ph/file/39af98ee28c45305119fc.mp4"];
          const _0x35fdf5 = _0x7ad18d[Math.floor(Math.random() * _0x7ad18d.length)];
          const _0xdb1645 = {
            url: _0x35fdf5
          };
          const _0x3d7484 = {
            video: _0xdb1645,
            gifPlayback: true,
            caption: "🔥Aqui Está Seu Gif🔥"
          };
          const _0x11a505 = {
            quoted: _0x53a7ac
          };
          await _0x3910ee.sendMessage(_0x5337cc, _0x3d7484, _0x11a505);
        } else {
          const _0x36e6d3 = Math.floor(Math.random() * _0x2bbfc1) + 1;
          const _0x433f5d = await _0x10e008("https://raw.githubusercontent.com/Salientekill/Conteudos/main/nsfw/gif/" + _0x47c842 + "/%20" + _0x36e6d3 + ".gif");
          const _0x48460f = _0x1b4964(".gif");
          const _0x439e39 = _0x1b4964(".mp4");
          _0x571d16.writeFileSync(_0x48460f, _0x433f5d);
          _0x4315ec("ffmpeg -i " + _0x48460f + " -movflags faststart -pix_fmt yuv420p -vf \"scale=trunc(iw/2)*2:trunc(ih/2)*2\" " + _0x439e39, async _0x949456 => {
            if (_0x949456) {
              console.error("Erro ao converter GIF para vídeo: " + _0x949456.message);
              return _0x4dab04("*ERROR ao converter o GIF*");
            }
            const _0x36b7f5 = {
              url: './' + _0x439e39
            };
            const _0x31368b = {
              video: _0x36b7f5,
              gifPlayback: true,
              caption: "🔥Aqui Está Seu Gif🔥"
            };
            const _0x4c76c1 = {
              quoted: _0x53a7ac
            };
            await _0x3910ee.sendMessage(_0x5337cc, _0x31368b, _0x4c76c1);
            setTimeout(() => {
              _0x571d16.unlinkSync(_0x48460f);
            }, 3000);
          });
        }
        return true;
      } catch (_0x2f4fc0) {
        console.error("Erro: " + _0x2f4fc0.message);
        const _0xa20df5 = {
          success: false,
          message: " *ERROR* "
        };
        return _0xa20df5;
      }
    } catch (_0x2b1a52) {
      console.error("Erro ao executar gif-nsfw:", _0x2b1a52);
      const _0x39422f = {
        success: false,
        message: "Ocorreu um erro ao processar este comando. Tente novamente."
      };
      return _0x39422f;
    }
  }
}, {
  'name': ["pack", "packalinefaria", "packalinefox", "packalycia", "packamiichan", "packaninhal", "packbabymatoso", "packbelledel", "packbrendat", "packcamib", "packcclowniac", "packfehg", "packgiovannac", "packisadoram", "packisaw", "packlayn", "packleticias", "packmarinam", "packmaruk", "packmcpri", "packme1adinha", "packnathb", "packnegab", "packpolonesa", "packruter", "packvitac", "packcarniello", "packnetersg", "packegrils", "packaleatoriasi", "packonlyvid", "packaleatoriosv", "packegrilv", "packamadorv"],
  'aliases': [],
  'category': "nsfw",
  'description': "Envia fotos/vídeos de packs",
  'longDescription': "Envia fotos ou vídeos 18+ de vários packs diferentes. Requer modo nsfw ativado.",
  'usage': "packNOME",
  'example': "packalinefaria",
  'menu': "nsfw",
  'menuSection': "Conteúdo Adulto",
  'permissions': _0x353197,
  'requirements': {},
  'execute': async ({
    conn: _0x5a2795,
    info: _0x1a67b1,
    from: _0x52709e,
    sender: _0x102aad,
    command: _0x444cc6,
    prefix: _0x5c5f54,
    reply: _0x12c67b
  }) => {
    try {
      const _0x72f8ca = {
        max: 0x41,
        path: "packs/AlineFaria/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐀𝐋𝐈𝐍𝐄 𝐅𝐀𝐅𝐈𝐀🔥"
      };
      const _0x3746df = {
        max: 0x3c,
        path: "packs/AlineFox/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐀𝐋𝐈𝐍𝐄 𝐅𝐎𝐗🔥"
      };
      const _0x22bcc3 = {
        max: 0x1c,
        path: "packs/AlyciaRibeiro/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐀𝐋𝐘𝐂𝐈𝐀 𝐑𝐈𝐁𝐄𝐈𝐑𝐎🔥"
      };
      const _0x3fe0e2 = {
        max: 0x1e,
        path: "packs/Amiichan/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐀𝐌𝐈𝐈𝐂𝐇𝐀𝐍🔥"
      };
      const _0x433f25 = {
        max: 0x1e,
        path: "packs/AninhaLopes/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐀𝐍𝐈𝐍𝐇𝐀 𝐋𝐎𝐏𝐄𝐒🔥"
      };
      const _0x32532f = {
        max: 0x24,
        path: "packs/BabyMatoso/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐁𝐀𝐁𝐘 𝐌𝐀𝐓𝐎𝐒𝐎🔥"
      };
      const _0x500ad2 = {
        max: 0x1f,
        path: "packs/BelleDelphine/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐁𝐄𝐋𝐋𝐄 𝐃𝐄𝐋𝐏𝐇𝐈𝐍𝐄🔥"
      };
      const _0x566e49 = {
        max: 0x19,
        path: "packs/BrendaTrindade/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐁𝐑𝐄𝐍𝐃𝐀 𝐓𝐑𝐈𝐍𝐃𝐀𝐃𝐄🔥"
      };
      const _0x5ca4f7 = {
        max: 0x1e,
        path: "packs/CamiBrito/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐂𝐀𝐌𝐈 𝐁𝐑𝐈𝐓𝐎🔥"
      };
      const _0xb2c57a = {
        max: 0x1d,
        path: "packs/Cclowniac/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐂𝐂𝐋𝐎𝐖𝐍𝐈𝐀𝐂🔥"
      };
      const _0x4e297b = {
        max: 0x20,
        path: "packs/FehGalvao/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐅𝐄𝐇 𝐆𝐀𝐋𝐕𝐀̃𝐎 🔥"
      };
      const _0x4313e8 = {
        max: 0x22,
        path: "packs/GiovannaCampomar/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐆𝐈𝐎𝐕𝐀𝐍𝐍𝐀 𝐂𝐀𝐌𝐏𝐎𝐌𝐀𝐑🔥"
      };
      const _0x35e7fb = {
        max: 0x1e,
        path: "packs/ISADORA%20MARTINEZ/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐈𝐒𝐀𝐃𝐎𝐑𝐀 𝐌𝐀𝐑𝐓𝐈𝐍𝐄𝐙🔥"
      };
      const _0x46b121 = {
        max: 0x15,
        path: "packs/IsaWaifu/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐈𝐒𝐀 𝐖𝐀𝐈𝐅𝐔🔥"
      };
      const _0x417595 = {
        max: 0x19,
        path: "packs/LayNuniz/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐋𝐀𝐘 𝐍𝐔𝐍𝐈𝐙🔥"
      };
      const _0x4d0a05 = {
        max: 0x1c,
        path: "packs/LeticiaShirayuki/%20",
        ext: "jpeg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐋𝐄𝐓𝐈𝐂𝐈𝐀 𝐒𝐇𝐈𝐑𝐀𝐘𝐔𝐊𝐈🔥"
      };
      const _0x3ba6ec = {
        max: 0x1b,
        path: "packs/MarinaMui/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐌𝐀𝐑𝐈𝐍𝐀 𝐌𝐔𝐈🔥"
      };
      const _0x3fcb53 = {
        max: 0x28,
        path: "packs/MaruKarv/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐌𝐀𝐑𝐔 𝐊𝐀𝐑𝐕🔥"
      };
      const _0x2eb335 = {
        max: 0x20,
        path: "packs/McPrincesa/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐌𝐂 𝐏𝐑𝐈𝐍𝐂𝐄𝐒𝐀🔥"
      };
      const _0x31ca67 = {
        max: 0x21,
        path: "packs/Me1adinha/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐌𝐄1𝐀𝐃𝐈𝐍𝐇𝐀🔥"
      };
      const _0x95e7a1 = {
        max: 0x17,
        path: "packs/NathBister%C3%A7o/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐍𝐀𝐓𝐇 𝐁𝐈𝐒𝐓𝐄𝐑𝐂̧𝐎🔥"
      };
      const _0x40b587 = {
        max: 0x15,
        path: "packs/NegaBarbie/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐍𝐄𝐆𝐀 𝐁𝐀𝐑𝐁𝐈𝐄🔥"
      };
      const _0x295642 = {
        max: 0x1c,
        path: "packs/PolonesaDoHype/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐏𝐎𝐋𝐎𝐍𝐄𝐒𝐀 𝐃𝐎 𝐇𝐘𝐏𝐄🔥"
      };
      const _0x44c7ab = {
        max: 0x1e,
        path: "packs/RuteRocha/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐑𝐔𝐓𝐄 𝐑𝐎𝐂𝐇𝐀🔥"
      };
      const _0x20197a = {
        max: 0x1e,
        path: "packs/VitaCelestine/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐕𝐈𝐓𝐀 𝐂𝐄𝐋𝐄𝐒𝐓𝐈𝐍𝐄🔥"
      };
      const _0x4eb6e5 = {
        max: 0x1d,
        path: "packs/carniello/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐂𝐀𝐑𝐍𝐈𝐄𝐋𝐋𝐎🔥"
      };
      const _0x23a37d = {
        max: 0x1e,
        path: "packs/netersg/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐍𝐄𝐓𝐄𝐑𝐒𝐆🔥"
      };
      const _0x4ef302 = {
        max: 0x24,
        path: "packs/egril/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐃𝐄 𝐄𝐆𝐑𝐈𝐋𝐒🔥"
      };
      const _0x364bf4 = {
        max: 0x2c,
        path: "packs/PornoFoto/%20",
        ext: "jpg",
        title: "🔥𝐏𝐀𝐂𝐊 𝐃𝐄 𝐅𝐎𝐓𝐎𝐒 𝐀𝐋𝐄𝐀𝐓𝐎́𝐑𝐈𝐀𝐒🔥"
      };
      const _0x5986cf = {
        max: 0x2f,
        path: "packs/OnlyfansVideo/%20",
        ext: "mp4",
        type: "video",
        title: "🔥𝐏𝐀𝐂𝐊 𝐃𝐄 𝐎𝐍𝐋𝐘𝐅𝐀𝐍𝐒 𝐕𝐈𝐃𝐄𝐎𝐒🔥"
      };
      const _0x2d3a38 = {
        max: 0x25,
        path: "packs/PornoVideo/",
        ext: "mp4",
        type: "video",
        title: "🔥𝐏𝐀𝐂𝐊 𝐃𝐄 𝐕𝐈́𝐃𝐄𝐎𝐒 𝐀𝐋𝐄𝐀𝐓𝐎́𝐑𝐈𝐎𝐒🔥"
      };
      const _0x3d49c0 = {
        max: 0xe,
        path: "packs/EgrilVideo/%20",
        ext: "mp4",
        type: "video",
        title: "🔥𝐏𝐀𝐂𝐊 𝐃𝐄 𝐕𝐈́𝐃𝐄𝐎𝐒 𝐃𝐄 𝐄𝐆𝐑𝐈𝐋𝐒🔥"
      };
      const _0x1c58e3 = {
        max: 0xe,
        path: "packs/AmadorVideo/",
        ext: "mp4",
        type: "video",
        title: "🔥𝐏𝐀𝐂𝐊 𝐃𝐄 𝐕𝐈́𝐃𝐄𝐎𝐒 𝐀𝐌𝐀𝐃𝐎𝐑🔥"
      };
      const _0x4a44ce = {
        packalinefaria: _0x72f8ca,
        packalinefox: _0x3746df,
        packalycia: _0x22bcc3,
        packamiichan: _0x3fe0e2,
        packaninhal: _0x433f25,
        packbabymatoso: _0x32532f,
        packbelledel: _0x500ad2,
        packbrendat: _0x566e49,
        packcamib: _0x5ca4f7,
        packcclowniac: _0xb2c57a,
        packfehg: _0x4e297b,
        packgiovannac: _0x4313e8,
        packisadoram: _0x35e7fb,
        packisaw: _0x46b121,
        packlayn: _0x417595,
        packleticias: _0x4d0a05,
        packmarinam: _0x3ba6ec,
        packmaruk: _0x3fcb53,
        packmcpri: _0x2eb335,
        packme1adinha: _0x31ca67,
        packnathb: _0x95e7a1,
        packnegab: _0x40b587,
        packpolonesa: _0x295642,
        packruter: _0x44c7ab,
        packvitac: _0x20197a,
        packcarniello: _0x4eb6e5,
        packnetersg: _0x23a37d,
        packegrils: _0x4ef302,
        packaleatoriasi: _0x364bf4,
        packonlyvid: _0x5986cf,
        packaleatoriosv: _0x2d3a38,
        packegrilv: _0x3d49c0,
        packamadorv: _0x1c58e3
      };
      if (_0x444cc6 === "pack") {
        let _0x14ddb6 = "🔞 *PACKS DISPONÍVEIS* 🔞\n\n";
        let _0x34ae75 = [];
        let _0x3d036a = [];
        for (const [_0x142a72, _0x1f5e22] of Object.entries(_0x4a44ce)) {
          if (_0x1f5e22.type === "video") {
            _0x3d036a.push(_0x142a72);
          } else {
            _0x34ae75.push(_0x142a72);
          }
        }
        _0x14ddb6 += "*FOTOS:*\n" + _0x34ae75.map(_0x3173c3 => "• " + _0x5c5f54 + _0x3173c3).join("\n") + "\n\n";
        _0x14ddb6 += "*VÍDEOS:*\n" + _0x3d036a.map(_0x554992 => "• " + _0x5c5f54 + _0x554992).join("\n") + "\n\n";
        return _0x12c67b(_0x14ddb6);
      }
      if (!_0x4a44ce[_0x444cc6]) {
        return _0x12c67b("Comando não encontrado. Use " + _0x5c5f54 + "pack para ver a lista de packs disponíveis.");
      }
      const _0xee748b = _0x4a44ce[_0x444cc6];
      const _0x61ac3b = Math.floor(Math.random() * _0xee748b.max) + 1;
      const _0x333242 = "https://github.com/Salientekill/Conteudos/raw/main/" + _0xee748b.path + _0x61ac3b + '.' + _0xee748b.ext;
      if (_0xee748b.type === "video") {
        const _0x479010 = {
          url: _0x333242
        };
        const _0x4c7498 = {
          video: _0x479010,
          caption: _0xee748b.title,
          mimetype: "video/mp4"
        };
        const _0x5bb044 = {
          quoted: _0x1a67b1
        };
        _0x5a2795.sendMessage(_0x52709e, _0x4c7498, _0x5bb044);
      } else {
        const _0x161ef6 = {
          url: _0x333242
        };
        const _0x1067ae = {
          image: _0x161ef6,
          caption: _0xee748b.title
        };
        const _0x2c699e = {
          quoted: _0x1a67b1
        };
        _0x5a2795.sendMessage(_0x52709e, _0x1067ae, _0x2c699e);
      }
      return true;
    } catch (_0x3fdbed) {
      console.error("Erro ao executar comando de pack:", _0x3fdbed);
      const _0x3b747b = {
        success: false,
        message: "Ocorreu um erro ao processar este comando. Tente novamente."
      };
      return _0x3b747b;
    }
  }
}, {
  'name': "packfig",
  'aliases': [],
  'category': "stickers",
  'description': "Envia um pack de figurinhas",
  'longDescription': "Envia um pack de figurinhas diretamente para o privado do usuário que solicitou.",
  'usage': "packfig [nome do pack]",
  'example': "packfig anime",
  'menu': "stickers",
  'menuSection': "Figurinhas",
  'permissions': {},
  'requirements': _0x5144ee,
  'execute': async ({
    conn: _0x33b0cd,
    info: _0x30448a,
    from: _0x3e9de9,
    q: _0xde6c1f,
    sender: _0x2dac16,
    fetchJson: _0x4f3cc1,
    delay: _0x25e3f4,
    sendStickerFromUrl: _0x16ebba,
    enviar: _0x3a4b41,
    reply: _0x4ec51a
  }) => {
    try {
      try {
        const _0x219635 = await _0x4f3cc1("https://raw.githubusercontent.com/Salientekill/figurinhas/main/jsons/" + _0xde6c1f + ".json");
        _0x4ec51a("Enviando O Pack No Seu Privado");
        for (let _0x4afea8 of _0x219635[0].link) {
          await _0x25e3f4(1000);
          await _0x16ebba(_0x2dac16, _0x4afea8, _0x3a4b41.success);
        }
        return true;
      } catch (_0x494254) {
        const _0x154533 = {
          success: false,
          message: "ERRO"
        };
        return _0x154533;
      }
    } catch (_0x420880) {
      console.error("Erro ao enviar pack de figurinhas:", _0x420880);
      const _0x434c59 = {
        success: false,
        message: "Ocorreu um erro ao processar este comando. Tente novamente."
      };
      return _0x434c59;
    }
  }
}, {
  'name': "packfig18",
  'aliases': [],
  'category': "nsfw",
  'description': "Envia um pack de figurinhas 18+",
  'longDescription': "Envia um pack de figurinhas adultas diretamente para o privado do usuário que solicitou. Requer modo nsfw ativado.",
  'usage': "packfig18 [nome do pack]",
  'example': "packfig18 hot",
  'menu': "nsfw",
  'menuSection': "Figurinhas",
  'permissions': _0x149002,
  'requirements': _0x181539,
  'execute': async ({
    conn: _0x1805f8,
    info: _0x33cb79,
    from: _0x18beea,
    q: _0x40b675,
    sender: _0x2ff506,
    prefix: _0x167446,
    fetchJson: _0x455150,
    delay: _0x3cd4f9,
    sendStickerFromUrl: _0x1d9d6c,
    enviar: _0x4ace1d,
    reply: _0x2e775a
  }) => {
    try {
      try {
        const _0x186434 = await _0x455150("https://raw.githubusercontent.com/Salientekill/figurinhas/main/jsons/%2B18/" + _0x40b675 + ".json");
        _0x2e775a("Enviando O Pack No Seu Privado");
        for (let _0x27cad7 of _0x186434[0].link) {
          await _0x3cd4f9(1000);
          await _0x1d9d6c(_0x2ff506, _0x27cad7, _0x4ace1d.success);
        }
        return true;
      } catch (_0x1bc6ac) {
        const _0x3a8ded = {
          success: false,
          message: "ERRO"
        };
        return _0x3a8ded;
      }
    } catch (_0x30da26) {
      console.error("Erro ao enviar pack de figurinhas 18+:", _0x30da26);
      const _0x1c19fb = {
        success: false,
        message: "Ocorreu um erro ao processar este comando. Tente novamente."
      };
      return _0x1c19fb;
    }
  }
}, {
  'name': "listagp2",
  'aliases': [],
  'category': "dono",
  'description': "Lista todos os grupos em que o bot está",
  'longDescription': "Exibe uma lista completa e detalhada de todos os grupos em que o bot está presente. Comando exclusivo para o dono do bot.",
  'usage': "listagp2",
  'example': "listagp2",
  'menu': "dono",
  'menuSection': "Administração",
  'permissions': _0x4dd0f8,
  'requirements': {},
  'execute': async ({
    conn: _0x1a8433,
    info: _0x450ae4,
    from: _0x38b94f,
    SoDono: _0x26313d,
    isnit: _0x185f5a,
    moment: _0x41a516,
    delay: _0x45ec37,
    reply: _0x80020a
  }) => {
    try {
      if (!_0x26313d && !_0x185f5a && !_0x450ae4.key.fromMe) {
        return _0x80020a("```SOMENTE MEU DONO LINDÃO```");
      }
      let _0x2b33a7 = await _0x1a8433.groupFetchAllParticipating();
      let _0x2377d1 = Object.values(_0x2b33a7).filter(_0x218a28 => !_0x218a28.isCommunity && !_0x218a28.isCommunityAnnounce).sort((_0x4e6764, _0x224826) => _0x4e6764.subject.length - _0x224826.subject.length);
      let _0x42c0e0 = "*LISTA DE GRUPOS*\n*Total de Grupos* : " + _0x2377d1.length + "\n\n";
      const _0x9e6645 = async _0x1a683c => {
        let _0x59f43a = await _0x1a8433.groupMetadata(_0x1a683c.id);
        let _0xc17fe9;
        try {
          let _0x5d4b55 = await _0x1a8433.groupInviteCode(_0x1a683c.id);
          _0xc17fe9 = "https://chat.whatsapp.com/" + _0x5d4b55;
        } catch {
          _0xc17fe9 = "Não foi possível puxar o link";
        }
        let _0x2d294c = _0x59f43a.subjectOwner.split('@')[0];
        return "_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_\n*• Nome do Grupo:* " + _0x1a683c.subject + "\n*• Id do Grupo:* " + _0x1a683c.id + "\n*• Link do grupo:* " + _0xc17fe9 + "\n*• Dono:* " + _0x2d294c + "\n*• Criado:* " + _0x41a516(('' + _0x1a683c.creation) * 1000).tz("America/Sao_Paulo").format("DD/MM/YYYY HH:mm:ss") + "\n*• Total de Membros:* " + _0x1a683c.participants.length + "\n\n";
      };
      const _0x4deaf2 = async _0x21aa8b => {
        for (let _0x2165ab = 0; _0x2165ab < _0x21aa8b.length; _0x2165ab += 5) {
          let _0x3c58a5 = _0x21aa8b.slice(_0x2165ab, _0x2165ab + 5);
          for (let _0x3b8cb4 of _0x3c58a5) {
            _0x42c0e0 += await _0x9e6645(_0x3b8cb4);
          }
          await _0x45ec37(1200);
        }
      };
      await _0x4deaf2(_0x2377d1);
      _0x80020a(_0x42c0e0);
      return true;
    } catch (_0x17e08) {
      console.error("Erro ao listar grupos:", _0x17e08);
      const _0x4db7f0 = {
        success: false,
        message: "Ocorreu um erro ao listar os grupos."
      };
      return _0x4db7f0;
    }
  }
}, {
  'name': "simih2",
  'aliases': [],
  'category': "admin",
  'description': "Ativa/desativa o modo simih2 (aprendizado de conversação)",
  'longDescription': "Ativa ou desativa o modo simih2, que aprende as perguntas e respostas dos membros para responder automaticamente.",
  'usage': "simih2",
  'example': "simih2",
  'menu': "admin",
  'menuSection': "Automação",
  'permissions': _0x3a8bf0,
  'requirements': {},
  'execute': async ({
    conn: _0x5c4547,
    info: _0x10685b,
    from: _0x3be468,
    Res_SoAdm: _0x3cf4f8,
    isGroupAdmins: _0x24a871,
    dataGp: _0x4cecae,
    setGp: _0x3f01fe,
    reply: _0x27216b
  }) => {
    try {
      if (!_0x24a871) {
        return _0x27216b(_0x3cf4f8);
      }
      if (_0x4cecae[0].simi2) {
        _0x4cecae[0].simi2 = false;
        _0x3f01fe(_0x4cecae);
        _0x27216b("Desativado modo simi com sucesso neste grupo 😡️");
      } else {
        _0x4cecae[0].simi2 = true;
        _0x3f01fe(_0x4cecae);
        _0x27216b("Ativado com sucesso o modo simi neste grupo 😗, Este simih2 ele aprende as respostas e perguntas das pessoas, conforme vai falando");
      }
      return true;
    } catch (_0x9fbc10) {
      console.error("Erro ao alterar modo simih2:", _0x9fbc10);
      const _0x31234a = {
        success: false,
        message: "Ocorreu um erro ao alterar o modo simih2."
      };
      return _0x31234a;
    }
  }
}, {
  'name': "mensagem-automatica",
  'aliases': ["msg-auto", "mensagem-automatica-rp", "msg-auto-rp"],
  'category': "admin",
  'description': "Define uma mensagem automática para o grupo",
  'longDescription': "Configura uma mensagem que será enviada automaticamente no grupo em horários específicos ou em intervalos regulares.",
  'usage': "mensagem-automatica Horário|Marcação|Mensagem|Data de Expiração (opcional)",
  'example': "mensagem-automatica 12:00|sim|Atenção membros do grupo!|31/12/2023",
  'menu': "admin",
  'menuSection': "Automação",
  'permissions': _0x355630,
  'requirements': _0x421bad,
  'execute': async ({
    conn: _0x1337ad,
    info: _0x3b3b36,
    from: _0x38cb48,
    q: _0x58a4da,
    isMedia: _0x1dfad8,
    isQuotedImage: _0x2956a5,
    isQuotedVideo: _0x2ed5ee,
    BANCOP: _0x3e8a69,
    fs: _0x4570f1,
    moment: _0x46b64b,
    getFileBuffer: _0x5e8b8c,
    reply: _0x1e5e9b,
    path: _0x5952d8
  }) => {
    try {
      function _0x543ee4() {
        try {
          const _0x58834a = _0x3e8a69.prepare("SELECT limite_global, limites_grupos FROM mensagens_automaticas LIMIT 1").get();
          const _0x4b7938 = {
            permitido: true
          };
          if (!_0x58834a) {
            return _0x4b7938;
          }
          let _0x10157d = {};
          if (_0x58834a.limites_grupos) {
            try {
              _0x10157d = JSON.parse(_0x58834a.limites_grupos);
            } catch (_0x5759af) {
              _0x10157d = {};
            }
          }
          const _0xb9612d = _0x10157d[_0x38cb48];
          const _0x27d0cb = _0xb9612d !== undefined ? _0xb9612d : _0x58834a.limite_global;
          const _0x467f87 = {
            permitido: true
          };
          if (_0x27d0cb === null) {
            return _0x467f87;
          }
          const _0x3f2038 = _0x3e8a69.prepare("SELECT COUNT(*) as total FROM mensagens_automaticas WHERE grupo_id = ?").get(_0x38cb48);
          const _0x32df9a = _0x3f2038 ? _0x3f2038.total : 0;
          if (_0x32df9a >= _0x27d0cb) {
            const _0x24d90f = _0xb9612d !== undefined ? "específico do grupo" : "global";
            const _0x5398c1 = {
              permitido: false,
              limite: _0x27d0cb,
              atual: _0x32df9a,
              tipo: _0x24d90f
            };
            return _0x5398c1;
          }
          const _0xba4759 = {
            permitido: true,
            limite: _0x27d0cb,
            atual: _0x32df9a
          };
          return _0xba4759;
        } catch (_0x3ba403) {
          console.error("Erro ao verificar limites:", _0x3ba403);
          const _0x4285c0 = {
            permitido: true
          };
          return _0x4285c0;
        }
      }
      const _0x4d9841 = _0x543ee4();
      if (!_0x4d9841.permitido) {
        return _0x1e5e9b("🚫 *LIMITE ATINGIDO*\n\n🔢 Limite " + _0x4d9841.tipo + ": " + _0x4d9841.atual + '/' + _0x4d9841.limite + "\n\n" + '⚠️' + " Remova uma mensagem automática ou peça ao dono para aumentar o limite.");
      }
      let [_0x5bb776, _0x18857b, _0x1b2c8e, _0x36a967] = _0x58a4da.split('|').map(_0x3e8cc6 => _0x3e8cc6?.["trim"]());
      if (!_0x5bb776 || !_0x18857b || !_0x1b2c8e) {
        const _0x55bfeb = {
          success: false,
          message: "❌ *PARÂMETROS INVÁLIDOS*\n\n⚙️ Formato correto:\n• Horário|Marcação|Mensagem|Data(opcional)\n\n🕒 Exemplo com horário:\n• 12:00|sim|Bom dia a todos!\n\n🔄 Exemplo com repetição:\n• 3h|não|Lembrete de atividade"
        };
        return _0x55bfeb;
      }
      let _0x29a204 = false;
      if (["sim", 's', "yes", 'y', "true", '1'].includes(_0x18857b.toLowerCase())) {
        _0x29a204 = true;
      } else {
        if (["não", "nao", 'n', 'no', "false", '0'].includes(_0x18857b.toLowerCase())) {
          _0x29a204 = false;
        } else {
          _0x29a204 = false;
        }
      }
      let _0x2d08ba = null;
      let _0x255003 = null;
      if (_0x36a967) {
        let _0x3285cf = ["DD/MM/YYYY", "D/M/YYYY", "DD-MM-YYYY", "YYYY-MM-DD"];
        for (const _0x36c8e5 of _0x3285cf) {
          const _0x3fbba1 = _0x46b64b(_0x36a967, _0x36c8e5, true);
          if (_0x3fbba1.isValid()) {
            _0x2d08ba = _0x3fbba1;
            _0x255003 = _0x3fbba1.format("DD/MM/YYYY");
            break;
          }
        }
        if (!_0x2d08ba) {
          const _0x1a4740 = {
            success: false,
            message: "❌ *DATA INVÁLIDA*\n\n📅 Formato esperado: DD/MM/YYYY\n⚠️ A data informada não é válida ou já passou."
          };
          return _0x1a4740;
        }
        if (_0x2d08ba.isBefore(_0x46b64b().startOf("day"))) {
          const _0x2d5eaf = {
            success: false,
            message: "❌ *DATA EXPIRADA*\n\n📅 A data " + _0x255003 + " já passou.\n" + '⚠️' + " Informe uma data futura."
          };
          return _0x2d5eaf;
        }
      }
      let _0x1ea177 = '';
      let _0x2b7862 = '';
      let _0x277e51 = false;
      if (/^\d{1,2}h$/i.test(_0x5bb776)) {
        let _0x13ba2c = parseInt(_0x5bb776.replace(/h$/i, ''));
        let _0x5ca851 = [1, 2, 3, 4, 5, 6];
        if (isNaN(_0x13ba2c) || !_0x5ca851.includes(_0x13ba2c)) {
          const _0x231eb0 = {
            success: false,
            message: "❌ *REPETIÇÃO INVÁLIDA*\n\n🔄 Valores permitidos: 1h, 2h, 3h, 4h, 5h ou 6h\n⚠️ O valor informado (" + _0x5bb776 + ") não é suportado."
          };
          return _0x231eb0;
        }
        _0x1ea177 = 'RP' + _0x13ba2c;
        _0x2b7862 = "a cada " + _0x13ba2c + " hora" + (_0x13ba2c > 1 ? 's' : '');
        _0x277e51 = true;
      } else {
        if (/^([01]?\d|2[0-3]):([0-5]\d)$/.test(_0x5bb776)) {
          const [_0x520b32, _0xda8ff1] = _0x5bb776.split(':').map(_0x4c8e2d => _0x4c8e2d.padStart(2, '0'));
          _0x1ea177 = _0x520b32 + ':' + _0xda8ff1;
          _0x2b7862 = _0x1ea177;
          _0x277e51 = false;
        } else {
          const _0x3c164c = {
            success: false,
            message: "❌ *HORÁRIO INVÁLIDO*\n\n🕒 Formatos aceitos:\n• HH:MM (ex: 14:30)\n• Repetição (ex: 2h)\n\n⚠️ O valor informado (" + _0x5bb776 + ") não é reconhecido."
          };
          return _0x3c164c;
        }
      }
      let _0x1bf7c8 = '';
      const _0x549e4f = _0x5952d8.join(__dirname, "../../dados/midias/docs/");
      let _0x209b55 = null;
      let _0xf83390 = null;
      if (_0x1dfad8 || _0x2956a5 || _0x2ed5ee) {
        if (!_0x4570f1.existsSync(_0x549e4f)) {
          const _0x423a7b = {
            recursive: true
          };
          _0x4570f1.mkdirSync(_0x549e4f, _0x423a7b);
        }
        let _0x599f2c;
        if (_0x2956a5) {
          _0x599f2c = JSON.parse(JSON.stringify(_0x3b3b36).replace("quotedM", 'm')).message.extendedTextMessage.contextInfo.message.imageMessage;
          _0x209b55 = "image";
        } else {
          if (_0x2ed5ee) {
            _0x599f2c = JSON.parse(JSON.stringify(_0x3b3b36).replace("quotedM", 'm')).message.extendedTextMessage.contextInfo.message.videoMessage;
            _0x209b55 = "video";
          } else {
            if (_0x3b3b36.message.imageMessage) {
              _0x599f2c = _0x3b3b36.message.imageMessage;
              _0x209b55 = "image";
            } else {
              if (_0x3b3b36.message.videoMessage) {
                _0x599f2c = _0x3b3b36.message.videoMessage;
                _0x209b55 = "video";
              }
            }
          }
        }
        if (_0x599f2c) {
          try {
            const _0x5aec9e = await _0x5e8b8c(_0x599f2c, _0x209b55);
            const _0x62a6d5 = Date.now();
            const _0x2eb6e2 = Math.floor(Math.random() * 10000);
            const _0x46cc78 = _0x38cb48.split('@')[0].replace(/[^a-zA-Z0-9]/g, '');
            const _0xb77528 = _0x209b55 === "image" ? "jpg" : "mp4";
            const _0x182ef3 = "media_" + _0x46cc78 + '_' + _0x62a6d5 + '_' + _0x2eb6e2 + '.' + _0xb77528;
            const _0x3a8dc1 = _0x5952d8.join(_0x549e4f, _0x182ef3);
            _0x4570f1.writeFileSync(_0x3a8dc1, _0x5aec9e);
            _0x1bf7c8 = _0x3a8dc1;
            let _0x77b538 = _0x4570f1.statSync(_0x3a8dc1).size;
            let _0x4d663d = '';
            if (_0x77b538 < 1024) {
              _0x4d663d = _0x77b538 + " B";
            } else {
              if (_0x77b538 < 1048576) {
                _0x4d663d = (_0x77b538 / 1024).toFixed(1) + " KB";
              } else {
                _0x4d663d = (_0x77b538 / 1048576).toFixed(1) + " MB";
              }
            }
            const _0x4cd5a5 = {
              tipo: _0x209b55,
              tamanho: _0x4d663d,
              nome: _0x182ef3
            };
            _0xf83390 = _0x4cd5a5;
          } catch (_0x337e20) {
            console.error("Erro ao processar mídia:", _0x337e20);
            const _0x4719c9 = {
              success: false,
              message: "❌ *ERRO NA MÍDIA*\n\n⚠️ Não foi possível processar a mídia anexada.\n⚙️ Tente novamente ou use apenas texto."
            };
            return _0x4719c9;
          }
        }
      }
      try {} catch (_0x18d84e) {
        console.error("Erro ao salvar no banco de dados:", _0x18d84e);
        if (_0x1bf7c8 && _0x4570f1.existsSync(_0x1bf7c8)) {
          try {
            _0x4570f1.unlinkSync(_0x1bf7c8);
          } catch (_0x629cb8) {
            console.error("Erro ao remover arquivo após falha:", _0x629cb8);
          }
        }
        const _0x1e8e12 = {
          success: false,
          message: "❌ *ERRO DE BANCO DE DADOS*\n\n⚠️ Não foi possível salvar a mensagem automática.\n⚙️ Detalhes: " + _0x18d84e.message
        };
        return _0x1e8e12;
      }
      const _0x277853 = ["✅ *MENSAGEM AUTOMÁTICA CONFIGURADA*", '', "💬 *Mensagem:* " + (_0x1b2c8e.length > 50 ? _0x1b2c8e.substring(0, 47) + "..." : _0x1b2c8e), "🏷️ *Marcação:* " + (_0x29a204 ? "Ativada" : "Desativada"), "🕒 *" + (_0x5bb776.includes('h') ? "Repetição" : "Horário") + ":* " + _0x2b7862];
      if (_0xf83390) {
        _0x277853.push((_0xf83390.tipo === "image" ? "🖼️" : '🎥') + " *Mídia:* " + (_0xf83390.tipo === "image" ? "Imagem" : "Vídeo") + " (" + _0xf83390.tamanho + ')');
      }
      if (_0x255003) {
        _0x277853.push("📅 *Expira em:* " + _0x255003);
      }
      if (_0x4d9841.limite !== undefined && _0x4d9841.limite !== null) {
        const _0x4b4478 = _0x4d9841.atual + 1;
        _0x277853.push("🔢 *Uso:* " + _0x4b4478 + '/' + _0x4d9841.limite + " mensagens automáticas");
      }
      _0x277853.push('');
      if (_0x277e51) {
        _0x277853.push("⚙️ Para remover, use o comando *rm-msg-auto-rp*");
      } else {
        _0x277853.push("⚙️ Para remover, use o comando *rm-msg-auto*");
      }
      _0x1e5e9b(_0x277853.join("\n"));
      return true;
    } catch (_0x53834e) {
      console.error("Erro geral na função mensagem-automatica:", _0x53834e);
      try {
        if (typeof mediaUrl !== "undefined" && mediaUrl && _0x4570f1.existsSync(mediaUrl)) {
          _0x4570f1.unlinkSync(mediaUrl);
          console.log("Arquivo removido após erro: " + mediaUrl);
        }
      } catch (_0x1895ee) {
        console.error("Erro ao limpar arquivo após falha:", _0x1895ee);
      }
      const _0x646762 = {
        success: false,
        message: "❌ *ERRO INESPERADO*\n\n⚠️ Algo deu errado ao definir a mensagem automática.\n\n🔍 *Detalhes técnicos:*\n" + (_0x53834e.message || "Erro desconhecido")
      };
      return _0x646762;
    }
  }
}, {
  'name': "limite-msg-auto",
  'aliases': ["limit-msg-auto"],
  'category': "owner",
  'description': "Define limite de mensagens automáticas global ou por grupo",
  'usage': "limite-msg-auto [global|grupo] [número]",
  'example': "limite-msg-auto global 5",
  'menu': "dono",
  'permissions': _0x11c8b7,
  'requirements': _0x2c37b0,
  'execute': async ({
    from: _0x35cd45,
    args: _0x206388,
    BANCOP: _0x5e4c0f,
    reply: _0x521ac8,
    isGroup: _0x885432,
    groupName: _0x52d85e
  }) => {
    try {
      const [_0xfd24b4, _0x1b7dbf] = _0x206388;
      if (!["global", "grupo"].includes(_0xfd24b4.toLowerCase())) {
        return _0x521ac8("❌ Use: limite-msg-auto global [número] ou limite-msg-auto grupo [número]");
      }
      let _0xcf5768 = null;
      if (_0x1b7dbf.toLowerCase() !== "off") {
        _0xcf5768 = parseInt(_0x1b7dbf);
        if (isNaN(_0xcf5768) || _0xcf5768 < 0) {
          return _0x521ac8("❌ Valor deve ser um número ≥ 0 ou \"off\" para sem limite");
        }
      }
      if (_0xfd24b4.toLowerCase() === "global") {
        const _0x290579 = _0x5e4c0f.prepare("UPDATE mensagens_automaticas SET limite_global = ?").run(_0xcf5768);
        const _0x13825f = _0xcf5768 === null ? "✅ Limite global removido (" + _0x290579.changes + " registros atualizados)" : "✅ Limite global definido: " + _0xcf5768 + " mensagens por grupo (" + _0x290579.changes + " registros atualizados)";
        return _0x521ac8(_0x13825f);
      } else {
        if (!_0x885432) {
          return _0x521ac8("❌ Para definir limite por grupo, use este comando dentro do grupo");
        }
        const _0xabb3c9 = _0x5e4c0f.prepare("SELECT limites_grupos FROM mensagens_automaticas WHERE limites_grupos IS NOT NULL LIMIT 1").get();
        let _0x203033 = {};
        if (_0xabb3c9 && _0xabb3c9.limites_grupos) {
          try {
            _0x203033 = JSON.parse(_0xabb3c9.limites_grupos);
          } catch (_0x239082) {
            _0x203033 = {};
          }
        }
        if (_0xcf5768 === null) {
          delete _0x203033[_0x35cd45];
        } else {
          _0x203033[_0x35cd45] = _0xcf5768;
        }
        const _0x42cf20 = JSON.stringify(_0x203033);
        const _0x45c641 = _0x5e4c0f.prepare("UPDATE mensagens_automaticas SET limites_grupos = ?").run(_0x42cf20);
        const _0x3a6fbc = _0xcf5768 === null ? "✅ Limite específico removido do grupo " + (_0x52d85e || "atual") + " (" + _0x45c641.changes + " registros atualizados)" : "✅ Limite definido para grupo " + (_0x52d85e || "atual") + ": " + _0xcf5768 + " mensagens (" + _0x45c641.changes + " registros atualizados)";
        return _0x521ac8(_0x3a6fbc);
      }
    } catch (_0x22baa8) {
      console.error("Erro no limite-msg-auto:", _0x22baa8);
      return _0x521ac8("❌ Erro ao definir limite: " + _0x22baa8.message);
    }
  }
}, {
  'name': "limpar-mensagens-automaticas",
  'aliases': ["limpar-msg-auto", "rm-msg-auto", "limpar-mensagens-automaticas-rp", "limpar-msg-auto-rp", "rm-msg-auto-rp"],
  'category': "admin",
  'description': "Remove mensagens automáticas do grupo",
  'longDescription': "Lista e permite remover as mensagens automáticas configuradas para o grupo, tanto de horários fixos quanto de repetição.",
  'usage': "limpar-mensagens-automaticas [número ou \"todas\"]",
  'example': "limpar-mensagens-automaticas todas",
  'menu': "admin",
  'menuSection': "Automação",
  'permissions': _0x569a65,
  'requirements': {},
  'execute': async ({
    conn: _0x4ad1a3,
    info: _0x5bf140,
    from: _0x4e08fe,
    q: _0x44b871,
    command: _0x4aa76f,
    prefix: _0x2ba65c,
    sender: _0x23c6f3,
    BANCOP: _0x2b2374,
    fs: _0x1bf0aa,
    createChoiceMenu: _0xd7ba4d,
    getUniqueKey: _0x3bef35,
    optionsBuffer: _0x5f4fa1,
    flushOptionsBuffer: _0x498c40,
    reply: _0x12db94,
    path: _0x105647
  }) => {
    try {
      const _0x5b2c63 = _0x4aa76f.includes("-rp");
      const _0x27e5a2 = _0x5b2c63 ? "Repetição" : "Horários Fixos";
      const _0x261489 = _0x5b2c63 ? "SELECT * FROM mensagens_automaticas WHERE grupo_id = ? AND hora LIKE 'RP%' ORDER BY id ASC" : "SELECT * FROM mensagens_automaticas WHERE grupo_id = ? AND hora NOT LIKE 'RP%' ORDER BY hora ASC, id ASC";
      const _0xc19b31 = _0x2b2374.prepare(_0x261489).all(_0x4e08fe);
      if (_0xc19b31.length === 0) {
        return _0x12db94("*Nenhuma mensagem automática de " + _0x27e5a2 + " encontrada*\n\nNão há mensagens configuradas para este grupo.");
      }
      const _0x16d5da = _0x105647.join(__dirname, "../../dados/midias/");
      if (_0x44b871.trim()) {
        const _0x384c2b = _0x44b871.trim().toLowerCase();
        if (_0x384c2b === "todas") {
          const _0x5b168c = _0xc19b31.filter(_0x252cab => _0x252cab.url && (_0x252cab.url.startsWith(_0x16d5da) || _0x1bf0aa.existsSync(_0x252cab.url))).map(_0x167c90 => _0x167c90.url);
          _0x2b2374.prepare(_0x5b2c63 ? "DELETE FROM mensagens_automaticas WHERE grupo_id = ? AND hora LIKE 'RP%'" : "DELETE FROM mensagens_automaticas WHERE grupo_id = ? AND hora NOT LIKE 'RP%'").run(_0x4e08fe);
          let _0x11b73a = 0;
          let _0x23bf40 = 0;
          for (const _0x25d482 of _0x5b168c) {
            try {
              if (_0x1bf0aa.existsSync(_0x25d482)) {
                _0x1bf0aa.unlinkSync(_0x25d482);
                _0x11b73a++;
              }
            } catch (_0x297c47) {
              console.warn("Erro ao tentar apagar o arquivo: " + _0x25d482 + ". Detalhes: " + _0x297c47.message);
              _0x23bf40++;
            }
          }
          return _0x12db94("✅ *Todas as mensagens automáticas de " + _0x27e5a2 + " foram removidas*\n\n*Total:* " + _0xc19b31.length + " mensagens\n*Arquivos excluídos:* " + _0x11b73a);
        } else {
          const _0x13b16e = parseInt(_0x384c2b);
          if (isNaN(_0x13b16e) || _0x13b16e <= 0 || _0x13b16e > _0xc19b31.length) {
            return _0x12db94("❌ *Número inválido*\n\nPor favor, selecione um número de 1 a " + _0xc19b31.length + '.');
          }
          const _0x3ce670 = _0xc19b31[_0x13b16e - 1];
          let _0x3eccb6 = false;
          if (_0x3ce670.url && (_0x3ce670.url.startsWith(_0x16d5da) || _0x1bf0aa.existsSync(_0x3ce670.url))) {
            try {
              _0x1bf0aa.unlinkSync(_0x3ce670.url);
              _0x3eccb6 = true;
            } catch (_0x48787a) {
              console.warn("Erro ao tentar apagar o arquivo: " + _0x3ce670.url + ". Detalhes: " + _0x48787a.message);
            }
          }
          _0x2b2374.prepare("DELETE FROM mensagens_automaticas WHERE id = ?").run(_0x3ce670.id);
          return _0x12db94("✅ *Mensagem automática removida*\n\nA mensagem número " + _0x13b16e + " foi removida com sucesso.");
        }
      }
      const _0x58c60e = _0x3bef35(_0x4e08fe, _0x23c6f3);
      if (_0x5f4fa1[_0x58c60e]) {
        delete _0x5f4fa1[_0x58c60e];
        _0x498c40();
      }
      let _0x586f6b = {};
      _0xc19b31.forEach((_0x346856, _0x5f4d02) => {
        _0x586f6b[(_0x5f4d02 + 1).toString()] = {
          'text': "✅ Removendo mensagem " + (_0x5f4d02 + 1) + "...",
          'command': '' + _0x2ba65c + _0x4aa76f + " " + (_0x5f4d02 + 1),
          'edit': true
        };
      });
      _0x586f6b.todas = {
        'text': "✅ Removendo todas as mensagens...",
        'command': '' + _0x2ba65c + _0x4aa76f + " todas",
        'edit': true
      };
      const _0x4a0c0b = _0xc19b31.map((_0xd6717f, _0xabfd95) => {
        let _0x4fec7f;
        if (!_0xd6717f.url) {
          _0x4fec7f = "📄 Apenas texto";
        } else {
          const _0x420ccc = _0xd6717f.url.toLowerCase();
          if (_0x420ccc.endsWith(".jpg") || _0x420ccc.endsWith(".jpeg") || _0x420ccc.endsWith(".png")) {
            _0x4fec7f = "🖼️ Imagem";
          } else {
            if (_0x420ccc.endsWith(".mp4") || _0x420ccc.endsWith(".3gp") || _0x420ccc.endsWith(".mov")) {
              _0x4fec7f = "🎥 Vídeo";
            } else {
              if (_0x420ccc.endsWith(".mp3") || _0x420ccc.endsWith(".ogg") || _0x420ccc.endsWith(".m4a")) {
                _0x4fec7f = "🔊 Áudio";
              } else {
                _0x4fec7f = "📎 Arquivo";
              }
            }
          }
        }
        let _0x2dc90b;
        if (_0xd6717f.hora.startsWith('RP')) {
          const _0x2fda9a = _0xd6717f.hora.replace('RP', '');
          _0x2dc90b = "A cada " + _0x2fda9a + " " + (parseInt(_0x2fda9a) > 1 ? "horas" : "hora");
        } else {
          _0x2dc90b = _0xd6717f.hora;
        }
        return '*' + (_0xabfd95 + 1) + ".*\n💬 *Mensagem:* " + (_0xd6717f.msg || "Sem texto") + "\n⏰ *" + _0x2dc90b + "*\n📌 *Tipo:* " + _0x4fec7f;
      }).join("\n\n");
      const _0x16c6ef = "*Mensagens Automáticas Encontradas (" + _0x27e5a2 + "):*\n\n" + _0x4a0c0b + "\n\n✏️ *Digite o número da mensagem que deseja remover*\nOu envie \"*todas*\" para excluir todas as mensagens listadas.";
      const _0x3a5431 = {
        text: _0x16c6ef,
        options: _0x586f6b
      };
      const _0x26e2b3 = {
        principal: _0x3a5431
      };
      await _0xd7ba4d(_0x4e08fe, _0x23c6f3, _0x26e2b3.principal.text, _0x26e2b3.principal.options, {
        'menus': _0x26e2b3,
        'history': ["principal"]
      });
      return true;
    } catch (_0x20eb6e) {
      console.error("Erro ao limpar mensagens automáticas:", _0x20eb6e);
      return {
        'success': false,
        'message': "❌ Ocorreu um erro ao processar o comando: " + _0x20eb6e.message
      };
    }
  }
}, {
  'name': "listar-mensagens-automaticas",
  'aliases': ["listar-msg-auto", "ls-msg-auto", "listar-mensagens-automaticas-rp", "listar-msg-auto-rp", "ls-msg-auto-rp"],
  'category': "admin",
  'description': "Lista as mensagens automáticas do grupo",
  'longDescription': "Exibe uma lista das mensagens automáticas configuradas para o grupo, tanto de horários fixos quanto de repetição.",
  'usage': "listar-mensagens-automaticas [filtros]",
  'example': "listar-mensagens-automaticas todas",
  'menu': "admin",
  'menuSection': "Automação",
  'permissions': _0x222c26,
  'requirements': {},
  'execute': async ({
    conn: _0x47d713,
    info: _0x3682d8,
    from: _0x518b1b,
    q: _0xb254ac,
    command: _0x299c8a,
    SoDono: _0x32e070,
    BANCOP: _0x1954a6,
    moment: _0x34e104,
    reply: _0x36fe88
  }) => {
    try {
      const _0x144e41 = _0x299c8a.includes("-rp");
      const _0x5c7f05 = _0xb254ac.trim().split(" ");
      let _0x1525e9 = false;
      let _0x45c8ec = null;
      if (_0x5c7f05.length > 0 && _0x5c7f05[0]) {
        if (_0x5c7f05.includes("todas") || _0x5c7f05.includes("all")) {
          _0x1525e9 = true;
        }
        if (_0x32e070) {
          for (const _0x2ffa66 of _0x5c7f05) {
            if (_0x2ffa66.includes("@g.us")) {
              _0x45c8ec = _0x2ffa66;
              break;
            }
            if (_0x2ffa66.match(/^\d+$/)) {
              _0x45c8ec = _0x2ffa66 + "@g.us";
              break;
            }
          }
        }
      }
      function _0x435c0a(_0x2563ee = _0x518b1b) {
        try {
          const _0x35ea81 = _0x1954a6.prepare("SELECT limite_global, limites_grupos FROM mensagens_automaticas LIMIT 1").get();
          const _0x749cfb = {
            limite: null,
            tipo: "sem limite",
            atual: 0x0
          };
          if (!_0x35ea81) {
            return _0x749cfb;
          }
          let _0x13aca5 = {};
          if (_0x35ea81.limites_grupos) {
            try {
              _0x13aca5 = JSON.parse(_0x35ea81.limites_grupos);
            } catch (_0x4008e1) {
              _0x13aca5 = {};
            }
          }
          const _0x2b7a05 = _0x1954a6.prepare("SELECT COUNT(*) as total FROM mensagens_automaticas WHERE grupo_id = ?").get(_0x2563ee);
          const _0x29c8d3 = _0x2b7a05 ? _0x2b7a05.total : 0;
          const _0x31c509 = _0x13aca5[_0x2563ee];
          if (_0x31c509 !== undefined) {
            return {
              'limite': _0x31c509,
              'tipo': "específico do grupo",
              'atual': _0x29c8d3
            };
          }
          return {
            'limite': _0x35ea81.limite_global,
            'tipo': _0x35ea81.limite_global === null ? "sem limite global" : "limite global",
            'atual': _0x29c8d3
          };
        } catch (_0x32a919) {
          console.error("Erro ao obter informações de limite:", _0x32a919);
          const _0x267df0 = {
            limite: null,
            tipo: "erro ao verificar",
            atual: 0x0
          };
          return _0x267df0;
        }
      }
      let _0x3b53aa = "SELECT * FROM mensagens_automaticas WHERE 1=1";
      const _0xaa25c1 = [];
      if (!_0x1525e9 || !_0x32e070) {
        _0x3b53aa += " AND grupo_id = ?";
        _0xaa25c1.push(_0x45c8ec || _0x518b1b);
      }
      if (!_0x1525e9 && _0x144e41) {
        _0x3b53aa += " AND hora LIKE 'RP%'";
      } else {
        if (!_0x1525e9 && !_0x144e41) {
          _0x3b53aa += " AND hora NOT LIKE 'RP%'";
        }
      }
      _0x3b53aa += " ORDER BY hora ASC, id ASC";
      const _0x4ce4b3 = _0x1954a6.prepare(_0x3b53aa).all(..._0xaa25c1);
      if (_0x4ce4b3.length === 0) {
        let _0x26f8f4 = "Não foram encontradas mensagens automáticas";
        if (_0x144e41 && !_0x1525e9) {
          _0x26f8f4 += " de repetição (RP)";
        } else if (!_0x144e41 && !_0x1525e9) {
          _0x26f8f4 += " de horários fixos";
        }
        if (_0x45c8ec && _0x45c8ec !== _0x518b1b) {
          _0x26f8f4 += " para o grupo " + _0x45c8ec.split('@')[0];
        } else if (!_0x1525e9 || !_0x32e070) {
          _0x26f8f4 += " para este grupo";
        }
        return _0x36fe88(_0x26f8f4 + '.');
      }
      const _0x39c284 = {};
      _0x4ce4b3.forEach(_0xaf7aba => {
        if (!_0x39c284[_0xaf7aba.hora]) {
          _0x39c284[_0xaf7aba.hora] = [];
        }
        _0x39c284[_0xaf7aba.hora].push(_0xaf7aba);
      });
      let _0x58be30 = '';
      if (_0x1525e9) {
        _0x58be30 = "*TODAS AS MENSAGENS AUTOMÁTICAS*\n";
        if (_0x45c8ec) {
          const _0x1b5c80 = _0x45c8ec.split('@')[0];
          _0x58be30 += "Grupo: " + _0x1b5c80 + "\n";
        }
      } else {
        _0x58be30 = "*MENSAGENS AUTOMÁTICAS " + (_0x144e41 ? "REPETIÇÃO (RP)" : "FIXAS") + "*\n";
      }
      const _0x169cfd = _0x435c0a(_0x45c8ec || _0x518b1b);
      if (_0x169cfd.limite === null) {
        _0x58be30 += "🔢 *Limite:* Sem limite (" + _0x169cfd.tipo + ")\n";
      } else {
        if (_0x169cfd.limite === 0) {
          _0x58be30 += "🔢 *Limite:* 🚫 Bloqueado (" + _0x169cfd.tipo + ")\n";
        } else {
          const _0x29b302 = _0x169cfd.atual >= _0x169cfd.limite ? "❌ ATINGIDO" : "✅ OK";
          _0x58be30 += "🔢 *Limite:* " + _0x169cfd.atual + '/' + _0x169cfd.limite + " " + _0x29b302 + " (" + _0x169cfd.tipo + ")\n";
        }
      }
      _0x58be30 += "📊 *Total:* " + _0x4ce4b3.length + " mensagens\n\n";
      const _0x16a888 = Object.keys(_0x39c284).sort((_0x57174c, _0x2b9fd9) => {
        const _0x571e1b = _0x57174c.startsWith('RP');
        const _0x467389 = _0x2b9fd9.startsWith('RP');
        if (_0x571e1b && !_0x467389) {
          return -1;
        }
        if (!_0x571e1b && _0x467389) {
          return 1;
        }
        if (_0x571e1b && _0x467389) {
          return parseInt(_0x57174c.replace('RP', '')) - parseInt(_0x2b9fd9.replace('RP', ''));
        }
        return _0x57174c.localeCompare(_0x2b9fd9);
      });
      for (const _0x5f2cf7 of _0x16a888) {
        const _0x2702ce = _0x39c284[_0x5f2cf7];
        let _0x2ebdaa = _0x5f2cf7.startsWith('RP') ? "⏰ *Repetição: A cada " + _0x5f2cf7.replace('RP', '') + " " + (_0x5f2cf7.replace('RP', '') > 1 ? "horas" : "hora") + '*' : "⏰ *Horário: " + _0x5f2cf7 + '*';
        _0x58be30 += _0x2ebdaa + " (" + _0x2702ce.length + ")\n";
        _0x58be30 += "┌───────────────────────┐\n";
        _0x2702ce.forEach((_0x51e281, _0x401c28) => {
          let _0x36378c = '📝';
          if (_0x51e281.url) {
            if (_0x51e281.url.endsWith(".mp4")) {
              _0x36378c = '🎥';
            } else {
              if (_0x51e281.url.endsWith(".jpg")) {
                _0x36378c = '📷';
              }
            }
          }
          _0x58be30 += "│ " + (_0x401c28 + 1) + ". " + _0x36378c + " ID: " + _0x51e281.id + "\n";
          if (_0x1525e9) {
            let _0x520b6e;
            if (_0x51e281.grupo_id === _0x518b1b) {
              _0x520b6e = "este grupo";
            } else {
              const _0x1e584b = _0x51e281.grupo_id.split('@')[0];
              _0x520b6e = "grupo " + _0x1e584b;
            }
            _0x58be30 += "│ 👥 " + _0x520b6e + "\n";
          }
          const _0x3f6a96 = _0x51e281.msg.length > 30 ? _0x51e281.msg.substring(0, 27) + "..." : _0x51e281.msg;
          _0x58be30 += "│ 💬 " + _0x3f6a96 + "\n";
          if (_0x51e281.hidetag) {
            _0x58be30 += "│ 👁️ Com marcação\n";
          }
          if (_0x51e281.data_expiracao) {
            const _0x1e4775 = _0x34e104();
            const _0x5eb5a3 = _0x34e104(_0x51e281.data_expiracao, "DD/MM/YYYY");
            const _0x5464e7 = _0x5eb5a3.diff(_0x1e4775, "days");
            _0x58be30 += "│ 📅 Expira: " + _0x51e281.data_expiracao;
            if (_0x5464e7 > 0) {
              _0x58be30 += " (" + _0x5464e7 + " dias restantes)\n";
            } else {
              if (_0x5464e7 === 0) {
                _0x58be30 += " (Expira hoje)\n";
              } else {
                _0x58be30 += " (EXPIRADA)\n";
              }
            }
          }
          if (_0x401c28 < _0x2702ce.length - 1) {
            _0x58be30 += "│ -------------------------\n";
          }
        });
        _0x58be30 += "└───────────────────────┘\n\n";
      }
      _0x58be30 += "*Para mais opções:*\n";
      _0x58be30 += "• Ver todas: -ls-msg-auto todas\n";
      if (_0x32e070) {
        _0x58be30 += "• Ver grupo específico: -ls-msg-auto ID_GRUPO\n";
        _0x58be30 += "• Ver só RP: -ls-msg-auto-rp\n";
        _0x58be30 += "• Gerenciar limites: -limite-msg-auto\n";
      }
      _0x36fe88(_0x58be30);
      return true;
    } catch (_0x3712a3) {
      console.error("Erro ao listar mensagens automáticas:", _0x3712a3);
      return {
        'success': false,
        'message': "Ocorreu um erro ao listar mensagens automáticas: " + _0x3712a3.message
      };
    }
  }
}, {
  'name': "mensagens-agendadas",
  'aliases': ["listar-agendadas", "pendentes"],
  'category': "admin",
  'description': "Lista as mensagens agendadas",
  'longDescription': "Exibe uma lista das mensagens programadas para envio automático, com suporte a diversos filtros e agrupamento por horário.",
  'usage': "mensagens-agendadas [filtros]",
  'example': "mensagens-agendadas hpagante 12:00",
  'menu': "admin",
  'menuSection': "Agendamento",
  'permissions': _0x542836,
  'requirements': {},
  'execute': async ({
    conn: _0x11c2cd,
    info: _0x7e8957,
    from: _0x14ae82,
    q: _0x41b29f,
    SoDono: _0x3ce557,
    isGroup: _0x4f583e,
    moment: _0x36e5e,
    BANCOP: _0x189a04,
    reply: _0x2c934a
  }) => {
    try {
      if (!_0x3ce557 && !_0x4f583e) {
        return _0x2c934a("Este comando é apenas para grupos ou para o dono do bot.");
      }
      let _0x31e9c7 = _0x4f583e && !_0x3ce557 ? _0x14ae82 : null;
      let _0x2e8560 = null;
      let _0x27e8af = null;
      let _0x4e864c = false;
      const _0x4afb92 = _0x41b29f.trim().split(" ");
      if (_0x4afb92.length > 0 && _0x4afb92[0]) {
        for (const _0x356d50 of _0x4afb92) {
          if (_0x356d50.toLowerCase() === "todas" || _0x356d50.toLowerCase() === "all") {
            _0x4e864c = true;
          } else {
            if (_0x356d50.match(/^([01]\d|2[0-3]):([0-5]\d)$/)) {
              _0x2e8560 = _0x356d50;
            } else {
              if (["text", "image", "video", "hpagante", "auto"].includes(_0x356d50.toLowerCase())) {
                _0x27e8af = _0x356d50.toLowerCase();
              } else {
                if (_0x3ce557 && _0x356d50.includes("@g.us")) {
                  _0x31e9c7 = _0x356d50;
                } else if (_0x3ce557 && _0x356d50.match(/^\d+$/)) {
                  _0x31e9c7 = _0x356d50 + "@g.us";
                }
              }
            }
          }
        }
      }
      let _0x2379d1 = "SELECT * FROM mensagens_agendadas WHERE 1=1";
      const _0x5ade8d = [];
      if (_0x31e9c7) {
        _0x2379d1 += " AND grupo_id = ?";
        _0x5ade8d.push(_0x31e9c7);
      }
      if (_0x2e8560) {
        _0x2379d1 += " AND hora = ?";
        _0x5ade8d.push(_0x2e8560);
      }
      if (_0x27e8af) {
        switch (_0x27e8af.toLowerCase()) {
          case "hpagante":
            _0x2379d1 += " AND is_hpagante = 1 AND is_auto = 0";
            break;
          case "auto":
            _0x2379d1 += " AND is_auto = 1 AND is_hpagante = 0";
            break;
          case "text":
          case "image":
          case "video":
            _0x2379d1 += " AND tipo = ?";
            _0x5ade8d.push(_0x27e8af);
            break;
        }
      }
      if (!_0x4e864c) {
        _0x2379d1 += " AND enviado = 0";
      }
      _0x2379d1 += " ORDER BY hora ASC, is_hpagante DESC, priority DESC";
      const _0x523ea9 = _0x189a04.prepare(_0x2379d1).all(..._0x5ade8d);
      if (_0x523ea9.length === 0) {
        return _0x2c934a("Não há mensagens agendadas" + (_0x31e9c7 ? " para este grupo" : '') + (_0x2e8560 ? " para o horário " + _0x2e8560 : '') + (_0x27e8af ? " do tipo " + _0x27e8af : '') + (_0x4e864c ? '' : " pendentes") + '.');
      }
      const _0x3c2bd2 = _0x36e5e().format("HH:mm");
      const _0x506571 = await _0x11c2cd.groupFetchAllParticipating();
      const _0x3a97a5 = {};
      Object.keys(_0x506571).forEach(_0x47155b => {
        let _0x32f3bd = _0x506571[_0x47155b].subject || _0x47155b;
        if (_0x32f3bd.length > 25) {
          _0x32f3bd = _0x32f3bd.substring(0, 22) + "...";
        }
        _0x3a97a5[_0x47155b] = _0x32f3bd;
      });
      const _0x4ad5f5 = {};
      for (const _0x45e4ef of _0x523ea9) {
        if (!_0x4ad5f5[_0x45e4ef.hora]) {
          _0x4ad5f5[_0x45e4ef.hora] = [];
        }
        _0x4ad5f5[_0x45e4ef.hora].push(_0x45e4ef);
      }
      let _0x673621 = "*═ 📋 MENSAGENS AGENDADAS 📋 ═*\n\n";
      let _0x377bdb = [];
      if (_0x2e8560) {
        _0x377bdb.push("Horário: " + _0x2e8560);
      }
      if (_0x27e8af) {
        _0x377bdb.push("Tipo: " + _0x27e8af);
      }
      if (_0x31e9c7 && _0x31e9c7 !== _0x14ae82) {
        const _0x4076be = _0x3a97a5[_0x31e9c7] || "ID: " + _0x31e9c7.split('@')[0];
        _0x377bdb.push("Grupo: " + _0x4076be);
      }
      if (_0x377bdb.length > 0) {
        _0x673621 += "*Filtros:* " + _0x377bdb.join(" | ") + "\n";
      }
      _0x673621 += "*Total:* " + _0x523ea9.length + " mensagens" + (!_0x4e864c ? " pendentes" : '') + "\n\n";
      const _0x5cce62 = Object.keys(_0x4ad5f5).sort((_0x4e67c1, _0x4e49dd) => {
        const _0xef9d08 = _0x4e67c1 >= _0x3c2bd2;
        const _0x5c5e14 = _0x4e49dd >= _0x3c2bd2;
        if (_0xef9d08 && !_0x5c5e14) {
          return -1;
        }
        if (!_0xef9d08 && _0x5c5e14) {
          return 1;
        }
        return _0x4e67c1.localeCompare(_0x4e49dd);
      });
      for (const _0x3617f9 of _0x5cce62) {
        const _0x523ddb = _0x4ad5f5[_0x3617f9];
        const _0x5837b0 = _0x3617f9 >= _0x3c2bd2 ? '🔜' : '⏱️';
        _0x673621 += _0x5837b0 + " *" + _0x3617f9 + "* (" + _0x523ddb.length + ")\n";
        _0x673621 += "┌─────────────────────────┐\n";
        const _0x1f33aa = _0x523ddb.filter(_0x1cf9b8 => _0x1cf9b8.is_hpagante === 1);
        const _0x2213c2 = _0x523ddb.filter(_0xd7750e => _0xd7750e.is_auto === 1);
        const _0x5d82a1 = _0x523ddb.filter(_0x3ffd68 => _0x3ffd68.is_hpagante !== 1 && _0x3ffd68.is_auto !== 1);
        const _0x4e1b1d = (_0x7ab97f, _0xc44758) => {
          if (_0x7ab97f.length === 0) {
            return '';
          }
          let _0x36703b = "│ *" + _0xc44758 + "* (" + _0x7ab97f.length + ")\n";
          _0x7ab97f.forEach((_0x3b2164, _0x42fa52) => {
            let _0x4c1abc;
            if (_0x3b2164.grupo_id === _0x14ae82) {
              _0x4c1abc = "este grupo";
            } else {
              if (_0x3a97a5[_0x3b2164.grupo_id]) {
                _0x4c1abc = _0x3a97a5[_0x3b2164.grupo_id];
              } else {
                const _0x223566 = _0x3b2164.grupo_id.split('@')[0];
                _0x4c1abc = "grupo " + _0x223566.substring(0, 8) + "...";
              }
            }
            let _0xaf3770 = '';
            if (_0x3b2164.tipo === "text") {
              _0xaf3770 = '📝';
            } else {
              if (_0x3b2164.tipo === "image") {
                _0xaf3770 = '📷';
              } else {
                if (_0x3b2164.tipo === "video") {
                  _0xaf3770 = '🎥';
                }
              }
            }
            _0x36703b += "│ " + (_0x42fa52 + 1) + ". " + _0xaf3770 + " " + _0x4c1abc + "\n";
          });
          return _0x36703b;
        };
        if (_0x1f33aa.length > 0) {
          _0x673621 += _0x4e1b1d(_0x1f33aa, "Horários Pagantes");
        }
        if (_0x2213c2.length > 0) {
          _0x673621 += _0x4e1b1d(_0x2213c2, "Mensagens Automáticas");
        }
        if (_0x5d82a1.length > 0) {
          _0x673621 += _0x4e1b1d(_0x5d82a1, "Mensagens Normais");
        }
        _0x673621 += "└─────────────────────────┘\n\n";
      }
      _0x673621 += "*═══ 🔍 GUIA DE FILTROS 🔍 ═══*\n";
      _0x673621 += "• *Hora:* -pendentes HH:MM\n";
      _0x673621 += "• *Tipo:* -pendentes text/image/video/hpagante/auto\n";
      _0x673621 += "• *Todas:* -pendentes todas\n";
      if (_0x3ce557) {
        _0x673621 += "\n*═══ 👑 COMANDOS DE DONO 👑 ═══*\n";
        _0x673621 += "• *Grupo:* -pendentes ID_DO_GRUPO\n";
        _0x673621 += "• *Combinar filtros:* -pendentes ID_DO_GRUPO hpagante\n";
      }
      _0x2c934a(_0x673621);
      return true;
    } catch (_0x185468) {
      console.error("Erro ao listar mensagens agendadas:", _0x185468);
      return {
        'success': false,
        'message': "Ocorreu um erro ao listar mensagens agendadas: " + _0x185468.message
      };
    }
  }
}, {
  'name': "limpar-agendadas",
  'aliases': ["limpar-mensagens", "clear-msgs"],
  'category': "admin",
  'description': "Remove mensagens agendadas",
  'longDescription': "Remove mensagens programadas para envio automático, com suporte a diversos filtros. Requer confirmação para evitar remoções acidentais.",
  'usage': "limpar-agendadas [filtros] [confirmar]",
  'example': "limpar-agendadas hpagante confirmar",
  'menu': "admin",
  'menuSection': "Agendamento",
  'permissions': _0x3e72ed,
  'requirements': {},
  'execute': async ({
    conn: _0x18cf61,
    info: _0x3fa16b,
    from: _0x99d582,
    q: _0x39bd71,
    command: _0x51e889,
    SoDono: _0x5a5a53,
    isGroup: _0x4ca65f,
    isGroupAdmins: _0x2e07bc,
    BANCOP: _0x54c74a,
    reply: _0x4a6229
  }) => {
    try {
      if (!_0x5a5a53 && !_0x4ca65f) {
        return _0x4a6229("Este comando é apenas para grupos ou para o dono do bot.");
      }
      if (_0x4ca65f && !_0x2e07bc && !_0x5a5a53) {
        return _0x4a6229("❌ Você precisa ser administrador para usar este comando.");
      }
      let _0x58511c = _0x4ca65f && !_0x5a5a53 ? _0x99d582 : null;
      let _0x5ddbdf = null;
      let _0x2b0527 = null;
      let _0x2ef524 = false;
      const _0x2622cb = _0x39bd71.trim().split(" ");
      if (_0x2622cb.length > 0 && _0x2622cb[0]) {
        for (const _0x29e2b7 of _0x2622cb) {
          if (_0x29e2b7.toLowerCase() === "confirmar" || _0x29e2b7.toLowerCase() === "confirm") {
            _0x2ef524 = true;
          } else {
            if (_0x29e2b7.match(/^([01]\d|2[0-3]):([0-5]\d)$/)) {
              _0x5ddbdf = _0x29e2b7;
            } else {
              if (["text", "image", "video", "hpagante", "auto"].includes(_0x29e2b7.toLowerCase())) {
                _0x2b0527 = _0x29e2b7.toLowerCase();
              } else {
                if (_0x5a5a53 && _0x29e2b7.includes("@g.us")) {
                  _0x58511c = _0x29e2b7;
                } else {
                  if (_0x5a5a53 && _0x29e2b7.match(/^\d+$/)) {
                    _0x58511c = _0x29e2b7 + "@g.us";
                  }
                }
              }
            }
          }
        }
      }
      if (!_0x2ef524) {
        let _0x1baf25 = "⚠️ *ATENÇÃO* ⚠️\n\nVocê está prestes a limpar mensagens agendadas";
        if (_0x58511c) {
          if (_0x58511c === _0x99d582) {
            _0x1baf25 += " deste grupo";
          } else {
            const _0x55af7f = _0x58511c.split('@')[0];
            _0x1baf25 += " do grupo " + _0x55af7f;
          }
        } else {
          _0x1baf25 += " de todos os grupos";
        }
        if (_0x5ddbdf) {
          _0x1baf25 += " agendadas para " + _0x5ddbdf;
        }
        if (_0x2b0527) {
          _0x1baf25 += " do tipo " + _0x2b0527;
        }
        _0x1baf25 += ".\n\nEsta ação não pode ser desfeita!\n\nPara confirmar, envie o mesmo comando com \"confirmar\" no final.";
        _0x1baf25 += "\n\nExemplo: \"" + _0x51e889 + " " + _0x39bd71.trim() + " confirmar\"";
        return _0x4a6229(_0x1baf25);
      }
      let _0xd79afd = "DELETE FROM mensagens_agendadas WHERE enviado = 0";
      const _0x43f311 = [];
      if (_0x58511c) {
        _0xd79afd += " AND grupo_id = ?";
        _0x43f311.push(_0x58511c);
      }
      if (_0x5ddbdf) {
        _0xd79afd += " AND hora = ?";
        _0x43f311.push(_0x5ddbdf);
      }
      if (_0x2b0527) {
        switch (_0x2b0527.toLowerCase()) {
          case "hpagante":
            _0xd79afd += " AND is_hpagante = 1";
            break;
          case "auto":
            _0xd79afd += " AND is_auto = 1";
            break;
          case "text":
          case "image":
          case "video":
            _0xd79afd += " AND tipo = ?";
            _0x43f311.push(_0x2b0527);
            break;
        }
      }
      const _0x2806fe = _0x54c74a.prepare(_0xd79afd).run(..._0x43f311).changes;
      console.log("[LIMPAR_MSG] SQL: " + _0xd79afd + ", Params: " + _0x43f311.join(", ") + ", Removidas: " + _0x2806fe);
      if (_0x2806fe === 0) {
        return _0x4a6229("Nenhuma mensagem agendada foi encontrada para remover com os filtros especificados.");
      } else {
        let _0x2017b4 = "✅ *Limpeza Concluída*\n\n";
        _0x2017b4 += _0x2806fe + " mensagens agendadas foram removidas";
        if (_0x58511c) {
          if (_0x58511c === _0x99d582) {
            _0x2017b4 += " deste grupo";
          } else {
            const _0x5c1816 = _0x58511c.split('@')[0];
            _0x2017b4 += " do grupo " + _0x5c1816;
          }
        }
        if (_0x5ddbdf) {
          _0x2017b4 += " do horário " + _0x5ddbdf;
        }
        if (_0x2b0527) {
          _0x2017b4 += " do tipo " + _0x2b0527;
        }
        _0x2017b4 += '.';
        return _0x4a6229(_0x2017b4);
      }
    } catch (_0x2d2cd6) {
      console.error("Erro ao limpar mensagens agendadas:", _0x2d2cd6);
      return {
        'success': false,
        'message': "Ocorreu um erro ao limpar mensagens agendadas: " + _0x2d2cd6.message
      };
    }
  }
}, {
  'name': "fechar-abrirgp",
  'aliases': ["horario-open-close"],
  'category': "admin",
  'description': "Define horários para abrir e fechar o grupo automaticamente",
  'longDescription': "Configura múltiplos horários para que o bot abra e feche o grupo automaticamente todos os dias nos horários especificados. Permite adicionar vários horários e substitui automaticamente os que se sobrepõem.",
  'usage': "fechar-abrirgp [hora:minuto de fechar]|[hora:minuto de abrir] ou múltiplos separados por vírgula",
  'example': "fechar-abrirgp 23:00|07:00 ou fechar-abrirgp 12:00|13:00,18:00|19:00",
  'menu': "admin",
  'menuSection': "Automação",
  'permissions': _0x316c5f,
  'requirements': _0x430605,
  'execute': async ({
    conn: _0x2eac95,
    info: _0x468258,
    from: _0xba8f24,
    q: _0x29bba6,
    BANCOP: _0x1114e9,
    reply: _0x5a7156
  }) => {
    try {
      const _0x45ab69 = _0x29bba6.split(',').map(_0xacea24 => _0xacea24.trim());
      const _0x11e03c = [];
      for (let _0x5ab673 of _0x45ab69) {
        const [_0x59d0f9, _0x4961db] = _0x5ab673.split('|');
        if (!_0x59d0f9 || !_0x4961db || !_0x59d0f9.match(/^([01]\d|2[0-3]):([0-5]\d)$/) || !_0x4961db.match(/^([01]\d|2[0-3]):([0-5]\d)$/)) {
          const _0x3386d2 = {
            success: false,
            message: "Formato de hora inválido em \"" + _0x5ab673 + "\". Use o formato hora:minuto|hora:minuto.\nExemplo: 23:00|07:00"
          };
          return _0x3386d2;
        }
        const _0x2d5b89 = {
          fechar: _0x59d0f9,
          abrir: _0x4961db
        };
        _0x11e03c.push(_0x2d5b89);
      }
      const _0x338124 = _0x1114e9.prepare("SELECT * FROM opengp WHERE grupo_id = ?").get(_0xba8f24);
      let _0x2b0fc2 = [];
      if (_0x338124) {
        try {
          const _0x281a19 = JSON.parse(_0x338124.horarios_fechar || '[]');
          const _0x138a2a = JSON.parse(_0x338124.horarios_abrir || '[]');
          for (let _0x257a54 = 0; _0x257a54 < Math.min(_0x281a19.length, _0x138a2a.length); _0x257a54++) {
            const _0x368f1b = {
              fechar: _0x281a19[_0x257a54],
              abrir: _0x138a2a[_0x257a54]
            };
            _0x2b0fc2.push(_0x368f1b);
          }
        } catch (_0x5cc9e2) {
          console.error("Erro ao parsear horários existentes:", _0x5cc9e2);
        }
      }
      const _0x59f3b0 = _0x2b0fc2.filter(_0x7c650e => {
        return !_0x11e03c.some(_0x5d6eed => _0x7c650e.fechar === _0x5d6eed.fechar || _0x7c650e.abrir === _0x5d6eed.abrir);
      });
      const _0x1d529b = [..._0x59f3b0, ..._0x11e03c];
      const _0x49c06c = JSON.stringify(_0x1d529b.map(_0x486438 => _0x486438.fechar));
      const _0x5470b1 = JSON.stringify(_0x1d529b.map(_0x54f6b9 => _0x54f6b9.abrir));
      const _0x2341ae = Date.now();
      if (_0x338124) {
        _0x1114e9.prepare("UPDATE opengp SET horarios_fechar = ?, horarios_abrir = ?, ultima_atualizacao = ?, ativo = 1 WHERE grupo_id = ?").run(_0x49c06c, _0x5470b1, _0x2341ae, _0xba8f24);
      } else {
        _0x1114e9.prepare("INSERT INTO opengp \n (grupo_id, horarios_fechar, horarios_abrir, ultima_atualizacao, ativo) VALUES (?, ?, ?, ?, 1)").run(_0xba8f24, _0x49c06c, _0x5470b1, _0x2341ae);
      }
      let _0x7f78dc = "✅ *HORÁRIOS CONFIGURADOS COM SUCESSO!*\n\n";
      _0x7f78dc += "📊 *Total de horários ativos:* " + _0x1d529b.length + "\n\n";
      _0x1d529b.forEach((_0x2d0cf5, _0x432728) => {
        _0x7f78dc += _0x432728 + 1 + ". 🔒 Fechar: *" + _0x2d0cf5.fechar + "* | 🔓 Abrir: *" + _0x2d0cf5.abrir + "*\n";
      });
      if (_0x59f3b0.length !== _0x2b0fc2.length) {
        const _0x4dc0d1 = _0x2b0fc2.length - _0x59f3b0.length;
        _0x7f78dc += "\n⚠️ " + _0x4dc0d1 + " horário(s) foram substituído(s) por sobreposição.";
      }
      _0x7f78dc += "\n\n🤖 O grupo será aberto e fechado automaticamente nos horários definidos.";
      _0x5a7156(_0x7f78dc);
      return true;
    } catch (_0x3a8694) {
      console.error("Erro ao configurar horários:", _0x3a8694);
      return {
        'success': false,
        'message': "Erro ao configurar horários do grupo: " + _0x3a8694.message
      };
    }
  }
}, {
  'name': "tirar-fechar-abrirgp",
  'aliases': ["rm-fechar-abrirgp"],
  'category': "admin",
  'description': "Remove horário automático de abertura e fechamento",
  'longDescription': "Remove configurações específicas ou todas as configurações de horários automáticos para abrir e fechar o grupo. Se houver múltiplos horários, oferece um menu interativo para escolher qual remover.",
  'usage': "tirar-fechar-abrirgp [índice] ou tirar-fechar-abrirgp all",
  'example': "tirar-fechar-abrirgp ou tirar-fechar-abrirgp 1 ou tirar-fechar-abrirgp all",
  'menu': "admin",
  'menuSection': "Automação",
  'permissions': _0x1c6c15,
  'requirements': {},
  'execute': async ({
    conn: _0x45b20d,
    info: _0x495422,
    from: _0x55219a,
    args: _0x1cb068,
    prefix: _0x49db75,
    sender: _0x964263,
    BANCOP: _0x199207,
    reply: _0x391449,
    createChoiceMenu: _0x22b835
  }) => {
    try {
      const _0x4a3c14 = _0x199207.prepare("SELECT * FROM opengp WHERE grupo_id = ?").get(_0x55219a);
      if (!_0x4a3c14) {
        const _0x17bea1 = {
          success: false,
          message: "❌ Nenhuma configuração de horário encontrada para este grupo."
        };
        return _0x17bea1;
      }
      let _0x16ebf1 = [];
      try {
        const _0xac654f = JSON.parse(_0x4a3c14.horarios_fechar || '[]');
        const _0xe4fa34 = JSON.parse(_0x4a3c14.horarios_abrir || '[]');
        for (let _0x4d78eb = 0; _0x4d78eb < Math.min(_0xac654f.length, _0xe4fa34.length); _0x4d78eb++) {
          _0x16ebf1.push({
            'fechar': _0xac654f[_0x4d78eb],
            'abrir': _0xe4fa34[_0x4d78eb],
            'indice': _0x4d78eb + 1
          });
        }
      } catch (_0x13dc0a) {
        console.error("Erro ao parsear horários:", _0x13dc0a);
        const _0x47a61f = {
          success: false,
          message: "❌ Erro ao ler configurações existentes."
        };
        return _0x47a61f;
      }
      if (_0x16ebf1.length === 0) {
        _0x199207.prepare("DELETE FROM opengp WHERE grupo_id = ?").run(_0x55219a);
        const _0x4847db = {
          success: false,
          message: "❌ Nenhum horário válido encontrado. Configuração removida."
        };
        return _0x4847db;
      }
      if (_0x1cb068 && _0x1cb068[0]) {
        const _0xb170f5 = _0x1cb068[0].toLowerCase();
        if (_0xb170f5 === "all") {
          _0x199207.prepare("DELETE FROM opengp WHERE grupo_id = ?").run(_0x55219a);
          _0x391449("✅ Todas as configurações de horário foram removidas.");
          return true;
        }
        const _0x10f6e4 = parseInt(_0xb170f5);
        if (!isNaN(_0x10f6e4) && _0x10f6e4 >= 1 && _0x10f6e4 <= _0x16ebf1.length) {
          _0x16ebf1.splice(_0x10f6e4 - 1, 1);
          if (_0x16ebf1.length === 0) {
            _0x199207.prepare("DELETE FROM opengp WHERE grupo_id = ?").run(_0x55219a);
            _0x391449("✅ Último horário removido. Configuração desativada.");
          } else {
            const _0x547b21 = JSON.stringify(_0x16ebf1.map(_0xb4164f => _0xb4164f.fechar));
            const _0x2bfaeb = JSON.stringify(_0x16ebf1.map(_0x32d063 => _0x32d063.abrir));
            _0x199207.prepare("UPDATE opengp SET horarios_fechar = ?, horarios_abrir = ?, ultima_atualizacao = ? WHERE grupo_id = ?").run(_0x547b21, _0x2bfaeb, Date.now(), _0x55219a);
            _0x391449("✅ Horário " + _0x10f6e4 + " removido com sucesso.\n\n" + _0x16ebf1.length + " horário(s) restante(s).");
          }
          return true;
        }
      }
      if (_0x16ebf1.length === 1) {
        _0x199207.prepare("DELETE FROM opengp WHERE grupo_id = ?").run(_0x55219a);
        _0x391449("✅ Configuração de horário removida com sucesso.");
        return true;
      }
      const _0x20828c = {};
      let _0x8a16fa = "╭⊱「 REMOVER HORÁRIOS 」⊰╮\n┃\n";
      _0x16ebf1.forEach((_0x438acc, _0x2027d9) => {
        const _0x15ac06 = _0x2027d9 + 1;
        _0x8a16fa += "┃ " + _0x15ac06 + " - 🔒 " + _0x438acc.fechar + " | 🔓 " + _0x438acc.abrir + "\n";
        _0x20828c[_0x15ac06.toString()] = {
          'command': _0x49db75 + "tirar-fechar-abrirgp " + _0x15ac06,
          'text': "✅ Horário " + _0x15ac06 + " removido!",
          'edit': true
        };
      });
      _0x8a16fa += "┃\n┃ " + (_0x16ebf1.length + 1) + " - 🗑️ Remover TODOS\n";
      const _0x185354 = {
        command: _0x49db75 + "tirar-fechar-abrirgp all",
        text: "✅ Todos os horários removidos!",
        edit: true
      };
      _0x20828c[(_0x16ebf1.length + 1).toString()] = _0x185354;
      _0x8a16fa += "┃ 0 - ❌ Cancelar\n┃\n╰━━━⊱「 𝐒𝐄𝐋𝐄𝐂𝐈𝐎𝐍𝐄 」⊰━━━╯\n\nEscolha qual horário remover:";
      const _0x2629f2 = {
        close: true,
        text: "❌ Operação cancelada.",
        edit: true
      };
      _0x20828c['0'] = _0x2629f2;
      const _0x3c1f4f = {
        text: _0x8a16fa,
        options: _0x20828c
      };
      const _0x51e875 = {
        principal: _0x3c1f4f
      };
      await _0x22b835(_0x55219a, _0x964263, _0x51e875.principal.text, _0x51e875.principal.options, {
        'menus': _0x51e875,
        'history': ["principal"]
      });
      return true;
    } catch (_0x5beb9f) {
      console.error("Erro ao remover configuração:", _0x5beb9f);
      return {
        'success': false,
        'message': "Erro ao remover configuração do grupo: " + _0x5beb9f.message
      };
    }
  }
}, {
  'name': "verificar-horario",
  'aliases': ["check-time", "horarios"],
  'category': "admin",
  'description': "Verifica configurações detalhadas de horários do grupo",
  'longDescription': "Mostra informações completas e detalhadas sobre todas as configurações de horários automáticos para abrir e fechar o grupo, incluindo status atual, próximas execuções e histórico.",
  'usage': "verificar-horario",
  'example': "verificar-horario",
  'menu': "admin",
  'menuSection': "Automação",
  'permissions': _0x1c86a6,
  'requirements': {},
  'execute': async ({
    conn: _0x1ab16b,
    info: _0x4bcbc1,
    from: _0x291510,
    BANCOP: _0x52fa0a,
    moment: _0x47c517,
    reply: _0x45e4e7
  }) => {
    try {
      const _0x49fafd = _0x52fa0a.prepare("SELECT * FROM opengp WHERE grupo_id = ?").get(_0x291510);
      if (!_0x49fafd) {
        const _0x4661e3 = {
          success: false,
          message: "❌ O sistema de horários automáticos não está configurado neste grupo.\n\n💡 Use o comando *fechar-abrirgp* para configurar."
        };
        return _0x4661e3;
      }
      let _0x4022e8 = "🔍 Verificando...";
      let _0x1af87d = "Desconhecido";
      try {
        const _0x67fbcd = await _0x1ab16b.groupMetadata(_0x291510);
        _0x4022e8 = _0x67fbcd.announce ? "🔒 Fechado" : "🔓 Aberto";
        _0x1af87d = _0x67fbcd.announce ? "Apenas administradores" : "Todos os membros";
      } catch (_0x1fe647) {
        console.error("Erro ao obter metadados do grupo:", _0x1fe647);
        _0x4022e8 = "❌ Erro ao verificar";
      }
      let _0x2927c2 = [];
      try {
        const _0x21befd = JSON.parse(_0x49fafd.horarios_fechar || '[]');
        const _0x1c5557 = JSON.parse(_0x49fafd.horarios_abrir || '[]');
        for (let _0x10406e = 0; _0x10406e < Math.min(_0x21befd.length, _0x1c5557.length); _0x10406e++) {
          _0x2927c2.push({
            'fechar': _0x21befd[_0x10406e],
            'abrir': _0x1c5557[_0x10406e],
            'indice': _0x10406e + 1
          });
        }
      } catch (_0x2704c9) {
        console.error("Erro ao parsear horários:", _0x2704c9);
      }
      const _0x4b0c25 = _0x4378c6 => {
        const _0x4ac1e0 = _0x47c517();
        const [_0x5f2354, _0x4c2d97] = _0x4378c6.split(':').map(Number);
        let _0x3f5826 = _0x47c517().hour(_0x5f2354).minute(_0x4c2d97).second(0);
        if (_0x3f5826.isBefore(_0x4ac1e0)) {
          _0x3f5826.add(1, "day");
        }
        return _0x3f5826;
      };
      const _0xeb73ee = _0x522ccc => {
        const _0x528711 = _0x47c517();
        const _0x465f0f = _0x522ccc.diff(_0x528711);
        if (_0x465f0f < 0) {
          return "já passou";
        }
        const _0x3f9d03 = _0x47c517.duration(_0x465f0f);
        const _0x2b61cd = Math.floor(_0x3f9d03.asDays());
        const _0xdbc37a = _0x3f9d03.hours();
        const _0x35eab3 = _0x3f9d03.minutes();
        if (_0x2b61cd > 0) {
          if (_0x2b61cd === 1) {
            return "amanhã";
          }
          return "em " + _0x2b61cd + " dias";
        }
        if (_0xdbc37a > 0) {
          if (_0xdbc37a === 1 && _0x35eab3 === 0) {
            return "em 1 hora";
          }
          if (_0x35eab3 === 0) {
            return "em " + _0xdbc37a + " horas";
          }
          if (_0xdbc37a === 1) {
            return "em 1 hora e " + _0x35eab3 + " min";
          }
          return "em " + _0xdbc37a + "h e " + _0x35eab3 + " min";
        }
        if (_0x35eab3 === 0) {
          return "agora";
        }
        if (_0x35eab3 === 1) {
          return "em 1 minuto";
        }
        return "em " + _0x35eab3 + " minutos";
      };
      let _0x22e341 = null;
      let _0x25cecc = null;
      if (_0x2927c2.length > 0) {
        const _0x335f5f = [];
        _0x2927c2.forEach(_0x25b5cd => {
          _0x335f5f.push({
            'tipo': "fechar",
            'horario': _0x25b5cd.fechar,
            'momento': _0x4b0c25(_0x25b5cd.fechar)
          });
          _0x335f5f.push({
            'tipo': "abrir",
            'horario': _0x25b5cd.abrir,
            'momento': _0x4b0c25(_0x25b5cd.abrir)
          });
        });
        _0x335f5f.sort((_0xdaed62, _0x5dbfe8) => _0xdaed62.momento.diff(_0x5dbfe8.momento));
        _0x22e341 = _0x335f5f.find(_0x110244 => _0x110244.tipo === "fechar");
        _0x25cecc = _0x335f5f.find(_0x19aead => _0x19aead.tipo === "abrir");
      }
      let _0x2de363 = "╭⊱「 CONFIGURAÇÕES DE HORÁRIO 」⊰╮\n\n";
      _0x2de363 += "📊 *STATUS ATUAL DO GRUPO*\n";
      _0x2de363 += "└ Estado: " + _0x4022e8 + "\n";
      _0x2de363 += "└ Mensagens: " + _0x1af87d + "\n";
      _0x2de363 += "└ Sistema: " + (_0x49fafd.ativo ? "✅ Ativo" : "❌ Inativo") + "\n";
      if (_0x49fafd.ultimo_status) {
        const _0x49af63 = _0x49fafd.ultimo_status === "open" ? "Abrir grupo" : _0x49fafd.ultimo_status === "close" ? "Fechar grupo" : _0x49fafd.ultimo_status;
        _0x2de363 += "└ Última ação: " + _0x49af63 + "\n";
      }
      _0x2de363 += "\n";
      _0x2de363 += "⏰ *HORÁRIOS CONFIGURADOS* (" + _0x2927c2.length + ")\n";
      if (_0x2927c2.length > 0) {
        _0x2927c2.forEach((_0x5f08af, _0x56bfc3) => {
          _0x2de363 += _0x56bfc3 + 1 + ". 🔒 Fechar: *" + _0x5f08af.fechar + "* | 🔓 Abrir: *" + _0x5f08af.abrir + "*\n";
        });
      } else {
        _0x2de363 += "└ Nenhum horário válido encontrado\n";
      }
      if (_0x22e341 || _0x25cecc) {
        _0x2de363 += "\n🔮 *PRÓXIMAS EXECUÇÕES*\n";
        if (_0x22e341) {
          const _0x3f0cec = _0xeb73ee(_0x22e341.momento);
          const _0x422ebc = _0x22e341.momento.format("DD/MM/YYYY HH:mm");
          _0x2de363 += "🔒 Fechamento: *" + _0x22e341.horario + "* (" + _0x3f0cec + ")\n";
          _0x2de363 += " └ " + _0x422ebc + "\n";
        }
        if (_0x25cecc) {
          const _0x16c7c3 = _0xeb73ee(_0x25cecc.momento);
          const _0x4247a7 = _0x25cecc.momento.format("DD/MM/YYYY HH:mm");
          _0x2de363 += "🔓 Abertura: *" + _0x25cecc.horario + "* (" + _0x16c7c3 + ")\n";
          _0x2de363 += " └ " + _0x4247a7 + "\n";
        }
      }
      _0x2de363 += "\n💡 *COMANDOS ÚTEIS*\n";
      _0x2de363 += "└ Adicionar horário: *fechar-abrirgp*\n";
      _0x2de363 += "└ Remover horário: *tirar-fechar-abrirgp*\n";
      _0x2de363 += "└ Ver esta info: *verificar-horario*\n";
      _0x2de363 += "\n╰━━━⊱「 𝐇𝐎𝐑𝐀́𝐑𝐈𝐎𝐒 」⊰━━━╯";
      _0x45e4e7(_0x2de363);
      return true;
    } catch (_0x1b2651) {
      console.error("Erro ao verificar horários:", _0x1b2651);
      return {
        'success': false,
        'message': "❌ Erro ao verificar horários do grupo: " + _0x1b2651.message
      };
    }
  }
}, {
  'name': "listar-opengp",
  'aliases': [],
  'category': "dono",
  'description': "Lista todos os grupos com horários configurados",
  'longDescription': "Exibe uma lista com todos os grupos que possuem configuração de horários automáticos para abrir e fechar. Comando exclusivo para o dono do bot.",
  'usage': "listar-opengp",
  'example': "listar-opengp",
  'menu': "dono",
  'menuSection': "Administração",
  'permissions': _0x46df95,
  'requirements': {},
  'execute': async ({
    conn: _0x1a5f20,
    info: _0x16d7c4,
    from: _0x18e3cb,
    prefix: _0x288064,
    BANCOP: _0x15c67c,
    SoDono: _0x5014c,
    Res_SoDono: _0x59919d,
    reply: _0x3e925c
  }) => {
    try {
      if (!_0x5014c) {
        return _0x3e925c(_0x59919d);
      }
      const _0x3be956 = _0x15c67c.prepare("SELECT * FROM opengp ORDER BY ativo DESC, ultima_atualizacao DESC").all();
      if (_0x3be956.length === 0) {
        const _0x31b0e9 = {
          success: false,
          message: "Não há grupos com horários configurados."
        };
        return _0x31b0e9;
      }
      let _0xa7fa2c = "*GRUPOS COM HORÁRIOS CONFIGURADOS*\n";
      _0xa7fa2c += "Total: " + _0x3be956.length + " grupos\n\n";
      const _0x3c692c = _0x3be956.filter(_0x3317bc => _0x3317bc.ativo === 1);
      _0xa7fa2c += "*Grupos Ativos (" + _0x3c692c.length + "):*\n";
      for (const [_0x2caab8, _0x5f0802] of _0x3c692c.entries()) {
        if (_0x2caab8 >= 10) {
          _0xa7fa2c += "... e mais " + (_0x3c692c.length - 10) + " grupos ativos\n\n";
          break;
        }
        let _0x4d256a = "Desconhecido";
        try {
          const _0x4012b2 = await _0x1a5f20.groupMetadata(_0x5f0802.grupo_id);
          _0x4d256a = _0x4012b2.subject;
          if (_0x4d256a.length > 25) {
            _0x4d256a = _0x4d256a.substring(0, 22) + "...";
          }
        } catch (_0x1ba058) {
          const _0x54abb5 = _0x5f0802.grupo_id.split('@')[0];
          _0x4d256a = "grupo " + _0x54abb5.substring(0, 8) + "...";
        }
        _0xa7fa2c += _0x2caab8 + 1 + ". " + _0x4d256a + "\n";
        _0xa7fa2c += " 🔒 " + _0x5f0802.horarios_fechar + " → 🔓 " + _0x5f0802.horarios_abrir + "\n";
        if (_0x2caab8 < _0x3c692c.length - 1 && _0x2caab8 < 9) {
          _0xa7fa2c += "\n";
        }
      }
      const _0x4f80df = _0x3be956.filter(_0x96b8eb => _0x96b8eb.ativo !== 1);
      if (_0x4f80df.length > 0) {
        _0xa7fa2c += "\n*Grupos Inativos (" + _0x4f80df.length + "):*\n";
        _0xa7fa2c += "Use " + _0x288064 + "ativar-opengp [ID] para ativar\n";
      }
      _0x3e925c(_0xa7fa2c);
      return true;
    } catch (_0x57287e) {
      console.error("Erro ao listar grupos:", _0x57287e);
      return {
        'success': false,
        'message': "Erro ao listar grupos com horários configurados: " + _0x57287e.message
      };
    }
  }
}, {
  'name': "ativar-opengp",
  'aliases': ["desativar-opengp"],
  'category': "dono",
  'description': "Ativa ou desativa horários automáticos de um grupo",
  'longDescription': "Ativa ou desativa a configuração de horários automáticos para abrir e fechar um grupo específico. Comando exclusivo para o dono do bot.",
  'usage': "ativar-opengp [ID do grupo]",
  'example': "ativar-opengp 552199990000-1631234567",
  'menu': "dono",
  'menuSection': "Administração",
  'permissions': _0x445880,
  'requirements': _0x2cf589,
  'execute': async ({
    conn: _0x4067e8,
    info: _0x472ad8,
    from: _0x341827,
    command: _0x28ae51,
    args: _0x505c91,
    BANCOP: _0x50d1ab,
    SoDono: _0x574bcd,
    Res_SoDono: _0x2b0dde,
    reply: _0x15aa6a
  }) => {
    try {
      if (!_0x574bcd) {
        return _0x15aa6a(_0x2b0dde);
      }
      const _0x185e82 = _0x28ae51 === "ativar-opengp";
      const _0x367ec0 = _0x505c91[0];
      if (!_0x367ec0) {
        const _0x1ed257 = {
          success: false,
          message: "Você precisa especificar o ID do grupo."
        };
        return _0x1ed257;
      }
      const _0x46d757 = _0x367ec0.includes("@g.us") ? _0x367ec0 : _0x367ec0 + "@g.us";
      const _0xf6708f = _0x50d1ab.prepare("SELECT * FROM opengp WHERE grupo_id = ?").get(_0x46d757);
      if (!_0xf6708f) {
        const _0x29c846 = {
          success: false,
          message: "Grupo não encontrado na configuração de horários."
        };
        return _0x29c846;
      }
      _0x50d1ab.prepare("UPDATE opengp SET ativo = ?, ultima_atualizacao = ? WHERE grupo_id = ?").run(_0x185e82 ? 1 : 0, Date.now(), _0x46d757);
      _0x15aa6a("Sistema de horários " + (_0x185e82 ? "ativado" : "desativado") + " para o grupo " + _0x46d757);
      return true;
    } catch (_0x524bcc) {
      console.error("Erro ao " + (_0x28ae51 === "ativar-opengp" ? "ativar" : "desativar") + " configuração:", _0x524bcc);
      return {
        'success': false,
        'message': "Erro ao " + (_0x28ae51 === "ativar-opengp" ? "ativar" : "desativar") + " configuração do grupo: " + _0x524bcc.message
      };
    }
  }
}, {
  'name': "ccgold",
  'aliases': ["caracoroa"],
  'category': "jogos",
  'description': "Inicia um jogo de cara ou coroa apostando Golds",
  'longDescription': "Inicia um jogo de cara ou coroa contra outro membro do grupo, apostando 50 Golds. Cada jogador tem limite de 3 jogos por dia.",
  'usage': "ccgold @usuário",
  'example': "ccgold @membro",
  'menu': "jogos",
  'menuSection': "Apostas",
  'permissions': _0x352f23,
  'requirements': _0x408106,
  'execute': async ({
    conn: _0x2a4d3d,
    info: _0x28c4d0,
    from: _0x39807b,
    sender: _0x391daf,
    menc_os2: _0x476025,
    botNumber: _0x3649ab,
    IS_sistemGold: _0x3c4495,
    prefix: _0x4c5c9c,
    GoldManager: _0x335f3d,
    mention: _0x239ca4,
    Res_SoGrupo: _0x2129ef,
    reply: _0x5ae89e
  }) => {
    try {
      if (!isGroup) {
        return _0x5ae89e(_0x2129ef);
      }
      if (!_0x3c4495) {
        return _0x5ae89e("Este comando só pode ser utilizado quando o sistema " + _0x4c5c9c + "sistemgold está ativado.");
      }
      if (!_0x476025) {
        return _0x5ae89e("Marque alguém com @pessoa ou marque a mensagem de alguém para jogar cara ou coroa!");
      }
      if (_0x476025 === _0x391daf) {
        return _0x5ae89e("Você não pode jogar contra você mesmo!");
      }
      if (_0x476025 === _0x3649ab) {
        return _0x5ae89e("Não pode jogar contra mim");
      }
      const _0x2ddc0b = (await _0x335f3d.getChances(_0x39807b, _0x391daf, "cara_coroa")) || 0;
      if (_0x2ddc0b >= 3) {
        return _0x5ae89e("Você já jogou cara ou coroa 3 vezes hoje, volte amanhã!");
      }
      const _0x2bea9f = await _0x335f3d.getBalance(_0x39807b, _0x391daf);
      const _0x5b1488 = await _0x335f3d.getBalance(_0x39807b, _0x476025);
      if (_0x2bea9f < 50) {
        return _0x5ae89e("Você precisa ter pelo menos 50 Golds para iniciar um cara ou coroa!");
      }
      if (_0x5b1488 < 50) {
        return _0x5ae89e('@' + _0x476025.split('@')[0] + " não tem Golds suficientes para aceitar o desafio.");
      }
      const _0x364aa3 = {
        'challenger': _0x391daf,
        'challenged': _0x476025,
        'accepted': false,
        'amount': 0x32,
        'timestamp': Date.now()
      };
      global.caracoroa = global.caracoroa || {};
      global.caracoroa[_0x39807b] = _0x364aa3;
      _0x239ca4('@' + _0x476025.split('@')[0] + ", você foi desafiado para um cara ou coroa valendo 50 Golds!\n\nPara aceitar digite \"aceitar\"\nPara recusar digite \"recusar\"");
      setTimeout(() => {
        if (global.caracoroa[_0x39807b]?.["timestamp"] === _0x364aa3.timestamp) {
          delete global.caracoroa[_0x39807b];
          _0x5ae89e("Jogo cancelado por tempo esgotado!");
        }
      }, 30000);
      return true;
    } catch (_0x1ea430) {
      console.error("Erro no cara ou coroa:", _0x1ea430);
      const _0x3ed605 = {
        success: false,
        message: "Ocorreu um erro ao iniciar o jogo."
      };
      return _0x3ed605;
    }
  }
}, {
  'name': "resetarcc",
  'aliases': ["resetcc"],
  'category': "jogos",
  'description': "Reseta um jogo de cara ou coroa em andamento",
  'longDescription': "Permite que administradores cancelem um jogo de cara ou coroa que está em andamento no grupo.",
  'usage': "resetarcc",
  'example': "resetarcc",
  'menu': "jogos",
  'menuSection': "Apostas",
  'permissions': _0x3e5adf,
  'requirements': {},
  'execute': async ({
    conn: _0x4664ea,
    info: _0x272af5,
    from: _0x4fc915,
    IS_sistemGold: _0x49108d,
    prefix: _0x4563f1,
    isGroupAdmins: _0x3b59b8,
    isnit: _0x3a5a7d,
    Res_SoGrupo: _0x24bafa,
    reply: _0x1e8e61
  }) => {
    try {
      if (!isGroup) {
        return _0x1e8e61(_0x24bafa);
      }
      if (!_0x49108d) {
        return _0x1e8e61("Este comando só pode ser utilizado quando o sistema " + _0x4563f1 + "sistemgold está ativado.");
      }
      if (!_0x3b59b8 && !_0x3a5a7d) {
        return _0x1e8e61("Apenas admins podem resetar o jogo!");
      }
      if (global.caracoroa?.[_0x4fc915]) {
        delete global.caracoroa[_0x4fc915];
        _0x1e8e61("✅ Jogo de cara ou coroa resetado com sucesso!");
      } else {
        _0x1e8e61("Não há nenhum jogo de cara ou coroa em andamento!");
      }
      return true;
    } catch (_0x54bf97) {
      console.error("Erro ao resetar cara ou coroa:", _0x54bf97);
      const _0x21fcf8 = {
        success: false,
        message: "Ocorreu um erro ao resetar o jogo."
      };
      return _0x21fcf8;
    }
  }
}, {
  'name': "hrppremium",
  'aliases': [],
  'category': "dono",
  'description': "Ativa/desativa sistema de HRP Premium",
  'longDescription': "Ativa ou desativa o sistema de HRP Premium no bot. Comando exclusivo para o dono do bot.",
  'usage': "hrppremium",
  'example': "hrppremium",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x2fa0bb,
  'requirements': {},
  'execute': async ({
    conn: _0x25610c,
    info: _0xf2cbd6,
    from: _0x3f61d7,
    SoDono: _0x17f931,
    fs: _0x316c5d,
    reply: _0x28bf30,
    path: _0x4b889f
  }) => {
    if (!_0x17f931) {
      return _0x28bf30("Este comando só pode ser executado pelo dono.");
    }
    const _0x2199e3 = _0x4b889f.join(__dirname, "../../dados/nescessario.json");
    let _0x127933 = JSON.parse(_0x316c5d.readFileSync(_0x2199e3));
    _0x127933.hrpPremium = !!(_0x127933.hrpPremium === false);
    _0x316c5d.writeFileSync(_0x2199e3, JSON.stringify(_0x127933, null, 2));
    let _0x516ad0 = _0x127933.hrpPremium ? "ativado" : "desativado";
    _0x28bf30("O sistema de HRP Premium foi " + _0x516ad0 + '.');
    return true;
  }
}, {
  'name': "debug",
  'aliases': ["alerterro"],
  'category': "dono",
  'description': "Ativa/desativa avisos de erros do bot",
  'longDescription': "Ativa ou desativa o sistema de alertas de erros do bot. Comando exclusivo para o dono do bot.",
  'usage': "debug",
  'example': "debug",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x1cd50c,
  'requirements': {},
  'execute': async ({
    conn: _0x2f1963,
    info: _0x1ba500,
    from: _0x4355ec,
    SoDono: _0x39c958,
    fs: _0x1ed3e3,
    reply: _0x415a23,
    path: _0x30d991
  }) => {
    if (!_0x39c958) {
      return _0x415a23("Este comando só pode ser executado pelo dono.");
    }
    const _0x40e083 = _0x30d991.join(__dirname, "../../dados/nescessario.json");
    let _0x3c4b40 = JSON.parse(_0x1ed3e3.readFileSync(_0x40e083));
    _0x3c4b40.alertEBot = !!(_0x3c4b40.alertEBot === false);
    _0x1ed3e3.writeFileSync(_0x40e083, JSON.stringify(_0x3c4b40, null, 2));
    let _0x539600 = _0x3c4b40.alertEBot ? "ativado" : "desativado";
    _0x415a23("O sistema de avisos de erros do bot foi " + _0x539600 + '.');
    return true;
  }
}, {
  'name': "reactstatusbot",
  'aliases': [],
  'category': "dono",
  'description': "Ativa/desativa reações automáticas em status",
  'longDescription': "Ativa ou desativa o sistema de reações automáticas do bot em status. Comando exclusivo para o dono do bot.",
  'usage': "reactstatusbot",
  'example': "reactstatusbot",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x4c1304,
  'requirements': {},
  'execute': async ({
    conn: _0x1ba3ec,
    info: _0xd9a7c7,
    from: _0x1a1e05,
    SoDono: _0x25afe4,
    fs: _0x1c9ca6,
    reply: _0x7aeb9c,
    path: _0x43a043
  }) => {
    if (!_0x25afe4) {
      return _0x7aeb9c("Este comando só pode ser executado pelo dono.");
    }
    const _0xbbe24c = _0x43a043.join(__dirname, "../../dados/nescessario.json");
    let _0x310465 = JSON.parse(_0x1c9ca6.readFileSync(_0xbbe24c));
    _0x310465.reactionbot = !!(_0x310465.reactionbot === false);
    _0x1c9ca6.writeFileSync(_0xbbe24c, JSON.stringify(_0x310465, null, 2));
    let _0x23be2b = _0x310465.reactionbot ? "ativado" : "desativado";
    _0x7aeb9c("O sistema de reação automática em status foi " + _0x23be2b + '.');
    return true;
  }
}, {
  'name': "roll",
  'aliases': [],
  'category': "diversos",
  'description': "Rola dados com a quantidade e faces desejadas",
  'longDescription': "Simula a rolagem de dados, permitindo especificar quantos dados e quantas faces cada dado tem. Útil para jogos de RPG e similares.",
  'usage': "roll [quantidade]d[faces]",
  'example': "roll 2d20",
  'menu': ["principal", "jogos"],
  'menuSection': "Diversos",
  'permissions': {},
  'requirements': {
    'needArgs': true,
    'minArgs': 0x1,
    'argsError': "Exemplo: !roll 2d20",
    'customRequirement': ({
      q: _0x412c12
    }) => {
      if (!_0x412c12.toLowerCase().includes('d')) {
        const _0x55c62a = {
          success: false,
          message: "Exemplo: !roll 2d20"
        };
        return _0x55c62a;
      }
      const _0x142a9c = {
        success: true
      };
      return _0x142a9c;
    }
  },
  'execute': async ({
    conn: _0x10aad2,
    info: _0x1b7a96,
    q: _0x4925c6,
    from: _0x105bd1,
    prefix: _0x21644f,
    reply: _0x4ad793
  }) => {
    try {
      var [_0x1f4c24, _0xe54901] = _0x4925c6.toLowerCase().trim().split('d');
      var [_0xe54901, _0x33d806] = _0xe54901?.["split"]('+') || [_0xe54901, 0];
      if (parseInt(_0x1f4c24) > 200) {
        const _0xf577f4 = {
          success: false,
          message: "Quantidade de dados muito exagerada."
        };
        return _0xf577f4;
      }
      if (!Number(parseInt(_0xe54901))) {
        const _0x3c7a14 = {
          success: false,
          message: "Exemplo: " + _0x21644f + "roll 2d20"
        };
        return _0x3c7a14;
      }
      let _0x8a5194 = "Resultado dos Dados:\n\n";
      for (i = 0; i < _0x1f4c24; i++) {
        const _0x4c5b47 = Math.floor(Math.random() * parseInt(_0xe54901) + parseInt(_0x33d806 || 0));
        _0x8a5194 += "[ " + (i + 1) + " ] " + _0x4c5b47 + "\n\n";
      }
      await _0x4ad793(_0x8a5194);
      return true;
    } catch (_0x431595) {
      console.error("Erro ao rolar dados:", _0x431595);
      const _0x9a36aa = {
        success: false,
        message: "Ocorreu um erro ao rolar os dados."
      };
      return _0x9a36aa;
    }
  }
}, {
  'name': "tabela",
  'aliases': [],
  'category': "info",
  'description': "Mostra a tabela de informações do bot",
  'longDescription': "Exibe uma tabela com diversas informações sobre o bot, seus comandos e funções.",
  'usage': "tabela",
  'example': "tabela",
  'menu': ["principal", "info"],
  'menuSection': "Informações",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x472356,
    info: _0x187f03,
    from: _0xef7e91,
    tabela: _0x4e575c,
    NomeDoBot: _0x46864d,
    prefix: _0x25b1cb
  }) => {
    const _0x3061ca = {
      quoted: _0x187f03
    };
    await _0x472356.sendMessage(_0xef7e91, {
      'text': _0x4e575c(_0x25b1cb, _0x46864d)
    }, _0x3061ca);
    return true;
  }
}, {
  'name': "idiomas",
  'aliases': ["idioma"],
  'category': "info",
  'description': "Mostra informações sobre idiomas disponíveis",
  'longDescription': "Exibe informações sobre os idiomas disponíveis para uso com o comando gtts.",
  'usage': "idiomas",
  'example': "idiomas",
  'menu': ["principal", "info"],
  'menuSection': "Informações",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x511c28,
    info: _0x116861,
    from: _0x35c701,
    prefix: _0x529de1,
    reply: _0xb3eaca
  }) => {
    await _0xb3eaca("idiomas do gtts, Exemplo:\n\n>> -gtts pt (texto)\n\no pt que coloquei, é a linguagem, então pode por no lugar as 2 letras que define a linguagem, igual o exemplo e os idiomas abaixo.\n\n- Afrikaans: af\n- Albanian: sq\n- Arabic: ar\n- Armenian: hy\n- Catalan: ca\n- Croatian: hr\n- Czech: cs\n- Danish: da\n- Dutch: nl\n- English: en\n- Esperanto: eo\n- Finnish: fi\n- French: fr\n- German: de\n- Greek: el\n- Haitian Creole: ht\n- Hindi: hi\n- Hungarian: hu\n- Icelandic: is\n- Indonesian: id\n- Italian: it\n- Japanese: ja\n- Korean: ko\n- Latin: la\n- Latvian: lv\n- Macedonian: mk\n- Norwegian: no\n- Polish: pl\n- Portugues: pt\n- Romanian: ro\n- Russian: ru\n- Serbian: sr\n- Slovak: sk\n- Espanhol: es\n- Swahili: sw\n- Swedish: sv\n- Tamil: ta\n- Thai: th\n- Turkish: tr\n- Vietnamese:\xA0vi\n-\xA0Welsh:\xA0cy");
    return true;
  }
}, {
  'name': "mute",
  'aliases': ["mutar", "silenciar", "mutados", "listamutados"],
  'category': "admin",
  'description': "Gerencia usuários mutados no grupo",
  'usage': "mute [@usuario | lista]",
  'example': "mute @usuario\nmute lista",
  'menu': "admin",
  'permissions': _0x1bf710,
  'execute': async ({
    conn: _0x5e83a3,
    info: _0x415a09,
    args: _0x414545,
    command: _0xe409d9,
    from: _0x18771d,
    sender: _0x59d8ff,
    prefix: _0x51b74b,
    menc_os2: _0x3bec0b,
    numerodono: _0x3ecd40,
    botNumber: _0x594af0,
    mention: _0x27e692,
    reply: _0x2ef5ed,
    obterUsuariosMutados: _0x276be8,
    mutarUsuario: _0x1c422d,
    desmutarUsuario: _0x1676f4
  }) => {
    const _0x3e4256 = ["mutados", "listamutados"].includes(_0xe409d9) || _0x414545[0] && ["lista", "list"].includes(_0x414545[0].toLowerCase());
    if (_0x3e4256) {
      const _0x5b7852 = _0x276be8(_0x18771d);
      if (!_0x5b7852.length) {
        return _0x2ef5ed("📋 *Lista de Mutados*\n\n_Não há usuários mutados neste grupo._");
      }
      const _0x40ba16 = [];
      let _0x539398 = "🔇 *Lista de Usuários Mutados*\n\n";
      _0x5b7852.forEach((_0x50ac0c, _0x528a82) => {
        if (!_0x50ac0c.user_id) {
          return;
        }
        const _0x271cf5 = _0x50ac0c.user_id.split('@')[0];
        _0x539398 += _0x528a82 + 1 + ". @" + _0x271cf5 + (_0x50ac0c.motivo ? "\n └ _" + _0x50ac0c.motivo + '_' : '') + "\n";
        _0x40ba16.push(_0x50ac0c.user_id);
      });
      _0x539398 += "\n📊 *Total:* " + _0x40ba16.length + " usuário" + (_0x40ba16.length > 1 ? 's' : '');
      const _0x41ca98 = {
        text: _0x539398,
        mentions: _0x40ba16
      };
      const _0x1db2ff = {
        quoted: _0x415a09
      };
      return _0x5e83a3.sendMessage(_0x18771d, _0x41ca98, _0x1db2ff);
    }
    const _0x26ac2d = _0x3bec0b || _0x415a09.message?.["extendedTextMessage"]?.["contextInfo"]?.["participant"];
    if (!_0x26ac2d) {
      return _0x2ef5ed("🔇 *Sistema de Mute*\n\n*Como usar:*\n• `" + _0x51b74b + "mute @usuario` - Alterna status\n• `" + _0x51b74b + "mute` _respondendo msg_ - Alterna status\n• `" + _0x51b74b + "mute lista` - Ver mutados\n\n*Funcionamento:*\n• Toggle automático (muta/desmuta)\n• Mensagens de mutados são deletadas\n\n*Aliases:* mute, mutar, silenciar");
    }
    if (_0x3ecd40.includes(_0x26ac2d)) {
      return _0x2ef5ed("❌ Não é possível mutar o dono do bot.");
    }
    if (_0x26ac2d === _0x594af0) {
      return _0x2ef5ed("❌ Não é possível mutar o próprio bot.");
    }
    const _0x81b6e0 = _0x276be8(_0x18771d).some(_0x3a9180 => _0x3a9180.user_id === _0x26ac2d);
    const _0x5a3ada = _0x81b6e0 ? _0x1676f4(_0x18771d, _0x26ac2d) : _0x1c422d(_0x18771d, _0x26ac2d, _0x59d8ff);
    if (_0x5a3ada.sucesso) {
      const _0x7956bc = _0x81b6e0 ? '🔊' : '🔇';
      const _0x3ccf61 = _0x81b6e0 ? "desmutou" : "mutou";
      const _0x5b3cd0 = _0x81b6e0 ? "pode enviar mensagens novamente" : "terá mensagens deletadas";
      _0x27e692(_0x7956bc + " @" + _0x59d8ff.split('@')[0] + " " + _0x3ccf61 + " @" + _0x26ac2d.split('@')[0] + "\n\n_Este usuário " + _0x5b3cd0 + '._');
    } else {
      _0x2ef5ed("❌ " + _0x5a3ada.mensagem);
    }
  }
}, {
  'name': "listanegra",
  'aliases': ["listanegrag", "blacklist", "bloquear"],
  'category': "admin",
  'description': "Gerencia lista negra (banimento automático ao entrar) do grupo ou global",
  'usage': "listanegra [@usuario | número | lista]",
  'menu': ["admin", "principal"],
  'menuSection': "Proteção",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    info: _0x38ef7c,
    q: _0x350074,
    prefix: _0x1e7c0a,
    command: _0x2f393c,
    botNumber: _0x54250e,
    menc_os2: _0x56cb35,
    numerodono: _0x41a8da,
    nescessario: _0x2dc9dd,
    dataGp: _0xe94ed9,
    setGp: _0x10b244,
    fs: _0x3cbd05,
    SoDono: _0x3bbe26,
    mention: _0xddbe3d,
    reply: _0xdab0a0,
    path: _0x5e26b8,
    SNET: _0x1b2da8,
    isGroup: _0x141a2b,
    isGroupAdmins: _0x321408,
    isBotGroupAdmins: _0x24f501
  }) => {
    try {
      const _0x1a635e = _0x2f393c === "listanegrag";
      const _0x1bbb1c = _0x1a635e ? _0x2dc9dd.listanegraG : _0xe94ed9[0].listanegra;
      const _0x398376 = _0x1a635e ? "globalmente" : "neste grupo";
      const _0xeed2ff = _0x1a635e ? '🌐' : "🛡️";
      if (_0x1a635e && !_0x3bbe26) {
        return _0xdab0a0("❌ Apenas o dono pode gerenciar a lista negra global");
      }
      if (!_0x1a635e) {
        if (!_0x141a2b) {
          return _0xdab0a0("❌ Este comando só funciona em grupos");
        }
        if (!_0x321408) {
          return _0xdab0a0("❌ Apenas administradores podem gerenciar a lista negra");
        }
        if (!_0x24f501) {
          return _0xdab0a0("❌ Preciso ser administrador para banir usuários");
        }
      }
      const _0x243c2a = _0x48a307();
      if (!_0x243c2a) {
        return _0x57a390();
      }
      if ([_0x54250e, ..._0x41a8da].includes(_0x243c2a)) {
        return _0xdab0a0("❌ Não posso adicionar bot ou donos à lista negra");
      }
      return _0x9c1c18(_0x243c2a);
      function _0x48a307() {
        if (_0x56cb35) {
          return _0x56cb35;
        }
        if (_0x38ef7c.message?.["extendedTextMessage"]?.["contextInfo"]?.["participant"]) {
          return _0x38ef7c.message.extendedTextMessage.contextInfo.participant;
        }
        if (_0x350074.trim() && !["lista", "list"].includes(_0x350074.toLowerCase())) {
          const _0x483970 = _0x350074.replace(/[^\d]/g, '');
          return _0x483970.length >= 10 ? _0x483970 + _0x1b2da8 : null;
        }
        return null;
      }
      function _0x57a390() {
        if (["lista", "list"].includes(_0x350074.toLowerCase())) {
          if (!_0x1bbb1c.length) {
            return _0xdab0a0(_0xeed2ff + " *Lista Negra " + (_0x1a635e ? "Global" : "do Grupo") + "*\n\n✅ Lista vazia (nenhum usuário será banido)");
          }
          const _0x598524 = _0x1bbb1c.map((_0x304fcf, _0x3a6390) => _0x3a6390 + 1 + ". @" + _0x304fcf.split('@')[0] + " ⚔️").join("\n");
          const _0x1af8e3 = _0xeed2ff + " *Lista Negra " + (_0x1a635e ? "Global" : "do Grupo") + "*\n\n" + _0x598524 + "\n\n📊 Total na lista: " + _0x1bbb1c.length + "\n💡 Estes usuários serão banidos ao entrar";
          return _0xddbe3d(_0x1af8e3);
        }
        return _0xdab0a0(_0xeed2ff + " *Lista Negra " + (_0x1a635e ? "Global" : "do Grupo") + "*\n\n" + "⚔️ *Banimento automático ao entrar*\n\n" + "*Como usar:*\n" + ("• " + _0x1e7c0a + _0x2f393c + " @usuario\n") + ("• " + _0x1e7c0a + _0x2f393c + " 5521999999999\n") + ("• " + _0x1e7c0a + _0x2f393c + " lista\n\n") + "*Funcionamento:* Toggle automático\n" + "🚫 Na lista → será banido ao entrar\n" + "✅ Fora da lista → pode entrar normalmente");
      }
      function _0x9c1c18(_0x331571) {
        const _0x17bf7a = _0x1bbb1c.includes(_0x331571);
        const _0x245293 = _0x331571.split('@')[0];
        if (_0x17bf7a) {
          _0x1bbb1c.splice(_0x1bbb1c.indexOf(_0x331571), 1);
          _0x4d1943();
          return _0xddbe3d("✅ *REMOVIDO DA LISTA NEGRA*\n\n" + ("👤 @" + _0x245293 + "\n") + ("📍 Escopo: " + _0x398376 + "\n") + "🟢 Agora pode entrar no grupo normalmente");
        } else {
          _0x1bbb1c.push(_0x331571);
          _0x4d1943();
          return _0xddbe3d("🚫 *ADICIONADO À LISTA NEGRA*\n\n" + ("👤 @" + _0x245293 + "\n") + ("📍 Escopo: " + _0x398376 + "\n") + "⚔️ Será BANIDO automaticamente se tentar entrar");
        }
      }
      function _0x4d1943() {
        if (_0x1a635e) {
          _0x3cbd05.writeFileSync(_0x5e26b8.join(__dirname, "../../dados/nescessario.json"), JSON.stringify(_0x2dc9dd, null, "\t"));
        } else {
          _0x10b244(_0xe94ed9);
        }
      }
    } catch (_0x2cb676) {
      console.error("Erro no comando listanegra:", _0x2cb676);
      return _0xdab0a0("❌ Ocorreu um erro ao processar o comando");
    }
  }
}, {
  'name': "band",
  'aliases': [],
  'category': "admin",
  'description': "Remove um usuário do grupo (variante do ban)",
  'longDescription': "Remove um usuário do grupo. Esta é uma variante do comando ban que inclui animação de remoção.",
  'usage': "band @usuario",
  'example': "band @usuario",
  'menu': "admin",
  'menuSection': "Moderação",
  'permissions': _0x3d5428,
  'requirements': _0x26e724,
  'execute': async ({
    conn: _0x5a47ba,
    info: _0x2fa394,
    from: _0x24c2d0,
    sender: _0x4c5692,
    menc_os2: _0x513a35,
    menc_jid2: _0x247f02,
    IS_DELETE: _0x3d8f9f,
    botNumber: _0x4ef694,
    numerodono: _0x4e2ba3,
    groupMembers: _0xe02a15,
    Os_Returns: _0x296d1a,
    reply: _0x4ba484
  }) => {
    try {
      if (_0x296d1a(true, true, true)["true"]) {
        return _0x4ba484(_0x296d1a(true, true, true).txt);
      }
      if (!_0x513a35 || _0x247f02?.[1]) {
        return _0x4ba484("Marque a mensagem do usuário ou marque o @ dele.., lembre de só marcar um usuário...");
      }
      if (_0x3d8f9f) {
        setTimeout(() => {
          _0x5a47ba.sendMessage(_0x24c2d0, {
            'delete': {
              'remoteJid': _0x24c2d0,
              'fromMe': false,
              'id': _0x2fa394.key.id,
              'participant': _0x4c5692
            }
          });
        }, 500);
      }
      if (!JSON.stringify(_0xe02a15).includes(_0x513a35)) {
        return _0x4ba484("Este usuário já foi removido do grupo.");
      }
      if (_0x4ef694.includes(_0x513a35)) {
        return _0x4ba484("Não sou besta de remover eu mesmo né 🙁, mas estou decepcionado com você");
      }
      if (_0x4e2ba3.includes(_0x513a35)) {
        return _0x4ba484("Não posso remover meu dono 🤧");
      }
      await _0x5a47ba.sendMessage(_0x24c2d0, {
        'text': '@' + _0x513a35.split('@')[0] + " Foi [ REMOVIDO(A) COM SUCESSO ] - (Por motivos justos.) -",
        'mentions': [_0x513a35]
      });
      await _0x5a47ba.groupParticipantsUpdate(_0x24c2d0, [_0x513a35], "remove");
      return true;
    } catch (_0x4250af) {
      console.error("Erro ao banir usuário:", _0x4250af);
      const _0x42bad6 = {
        success: false,
        message: "Ocorreu um erro ao remover o usuário."
      };
      return _0x42bad6;
    }
  }
}, {
  'name': "ban",
  'aliases': ["banir", "kick", "avadakedavra"],
  'category': "admin",
  'description': "Remove um usuário do grupo",
  'longDescription': "Remove um usuário do grupo. Permite remover vários usuários de uma vez mencionando-os com @.",
  'usage': "ban @usuário",
  'example': "ban @user123",
  'menu': "admin",
  'menuSection': "Moderação",
  'permissions': _0x2e5cf8,
  'requirements': {},
  'execute': async ({
    conn: _0x1264a7,
    info: _0x208bcf,
    from: _0x5dd65c,
    args: _0x299ccf,
    q: _0x39b2f1,
    botNumber: _0xce2af4,
    TEXTOS_GERAL: _0x56ba57,
    numerodono: _0x364a3a,
    groupMembers: _0x787a78,
    SNET: _0x55f925,
    reply: _0x4f3212,
    sender: _0x5ce268,
    SoDono: _0x326ab3,
    dataGp: _0x410adb,
    groupAdmins: _0x46ec75,
    menc_os2: _0x562aa0,
    lotus_users: _0x553112
  }) => {
    try {
      const _0x57e8f9 = [...new Set(_0x39b2f1.includes('@') ? _0x299ccf.join(" ").replace(/@/g, '').split(" ").map(_0x3114a2 => _0x3114a2 + _0x55f925) : _0x562aa0 ? [_0x562aa0] : [])];
      if (!_0x57e8f9.length) {
        return _0x4f3212("❌ Marque a mensagem do usuário ou mencione @!");
      }
      const _0x205bb4 = new Set(_0x787a78.map(_0x530e90 => _0x530e90.id));
      const _0x5a02ab = new Set(_0x553112 || []);
      const _0x3e6d68 = new Set(_0x364a3a);
      const _0xe32c9d = _0x5b95e1 => {
        if (!_0x5b95e1) {
          return null;
        }
        return _0x5b95e1.replace(/:\d+/g, '').replace(/@s\.whatsapp\.net$/, '') + "@s.whatsapp.net";
      };
      const _0xccffde = [...(Array.isArray(_0xce2af4) ? _0xce2af4 : [_0xce2af4]), _0x1264a7.user?.['id'], _0xe32c9d(_0x1264a7.user?.['id'])].filter(Boolean);
      const _0x5ad896 = new Set(_0xccffde);
      const _0x46aa92 = {
        check: _0x5a02ab,
        icon: '👑',
        msg: "meu criador"
      };
      const _0x43eda8 = {
        check: _0x3e6d68,
        icon: "🛡️",
        msg: "meu dono"
      };
      const _0x323f3f = {
        check: _0x5ad896,
        icon: '🤖',
        msg: "a mim mesmo"
      };
      const _0x4cad92 = [_0x46aa92, _0x43eda8, _0x323f3f];
      const _0x184787 = {
        validos: [],
        erros: []
      };
      const _0x46131c = _0x57e8f9.reduce((_0xcff5f1, _0x2949bc) => {
        const _0x11cdd1 = _0xe32c9d(_0x2949bc);
        if (_0x5ad896.has(_0x2949bc) || _0x5ad896.has(_0x11cdd1)) {
          _0xcff5f1.erros.push("🤖 Não posso me remover do grupo: @" + _0x2949bc.split('@')[0]);
          return _0xcff5f1;
        }
        const _0x6eb4b1 = _0x4cad92.find(_0xe3f63a => _0xe3f63a.check.has(_0x2949bc));
        if (_0x6eb4b1) {
          _0xcff5f1.erros.push(_0x6eb4b1.icon + " Não posso remover " + _0x6eb4b1.msg + ": @" + _0x2949bc.split('@')[0]);
          return _0xcff5f1;
        }
        if (!_0x205bb4.has(_0x2949bc)) {
          _0xcff5f1.erros.push("❌ @" + _0x2949bc.split('@')[0] + " não está no grupo");
          return _0xcff5f1;
        }
        _0xcff5f1.validos.push(_0x2949bc);
        return _0xcff5f1;
      }, _0x184787);
      const _0x26f4d3 = _0x46131c.validos.filter(_0x2abe33 => _0x46ec75.includes(_0x2abe33));
      const _0x286986 = _0x410adb[0]?.["peradm"]?.["length"] > 0;
      if (_0x286986 && _0x26f4d3.length && !_0x410adb[0].peradm.includes(_0x5ce268) && !_0x326ab3 && !_0x208bcf.key.fromMe) {
        return _0x4f3212("⚠️ *ACESSO NEGADO*\n\nSem permissão para remover: " + _0x26f4d3.map(_0x4552c6 => '@' + _0x4552c6.split('@')[0]).join(", ") + "\n\n✅ Apenas administradores autorizados podem remover outros administradores.");
      }
      if (_0x46131c.erros.length) {
        await _0x1264a7.sendMessage(_0x5dd65c, {
          'text': "*🚫 USUÁRIOS NÃO REMOVIDOS:*\n\n" + _0x46131c.erros.join("\n"),
          'mentions': _0x57e8f9
        });
      }
      if (!_0x46131c.validos.length) {
        if (!_0x46131c.erros.length) {
          return _0x4f3212("❌ Nenhum usuário válido para remover.");
        }
        return;
      }
      await Promise.all([_0x1264a7.sendMessage(_0x5dd65c, {
        'text': _0x56ba57.COMANDO_BAN_MENSAGEM.replaceAll("#usuario#", _0x46131c.validos.map(_0x1a60db => '@' + _0x1a60db.split('@')[0]).join(", ")),
        'mentions': _0x46131c.validos
      }), _0x1264a7.groupParticipantsUpdate(_0x5dd65c, _0x46131c.validos, "remove")]);
      const _0x211fb5 = {
        success: true,
        removidos: _0x46131c.validos.length,
        erros: _0x46131c.erros.length
      };
      return _0x211fb5;
    } catch (_0x35547b) {
      console.error("❌ Erro ao banir usuários:", _0x35547b);
      const _0x1b9a8c = {
        success: false,
        message: "Erro ao banir usuários."
      };
      return _0x1b9a8c;
    }
  }
}, {
  'name': ["cargo", "promover", "rebaixar"],
  'aliases': [],
  'category': "admin",
  'description': "Gerencia cargos de administrador no grupo",
  'usage': "[cargo/promover/rebaixar] @usuário",
  'example': "cargo @user123",
  'menu': "admin",
  'permissions': _0x5c1850,
  'execute': async ({
    conn: _0x1134c5,
    info: _0x3b3ca5,
    from: _0x53f73b,
    command: _0x1883db,
    sender: _0x24b1f5,
    menc_os2: _0x1af223,
    groupMembers: _0x57086e,
    TEXTOS_GERAL: _0x443a31,
    SoDono: _0x20cede,
    dataGp: _0x1e9609,
    groupAdmins: _0x593980,
    botNumber: _0x1ff1e2,
    reply: _0x4b347b
  }) => {
    try {
      if (!_0x1af223) {
        return _0x4b347b("Marque a mensagem do usuário ou marque o @ dele... lembre de só marcar um usuário");
      }
      if (!JSON.stringify(_0x57086e).includes(_0x1af223)) {
        return _0x4b347b("Este usuário não está mais no grupo, não é possível gerenciar o cargo");
      }
      if (_0x1af223 === _0x1ff1e2) {
        return _0x4b347b("❌ Não é possível alterar o cargo do próprio bot.");
      }
      const _0x3f1ec9 = (_0x1e9609[0]?.["peradm"]?.["length"] ?? 0) > 0;
      if (_0x3f1ec9 && !_0x1e9609[0].peradm.includes(_0x24b1f5) && !_0x20cede && !_0x3b3ca5.key.fromMe) {
        return _0x4b347b("⚠️ *ACESSO NEGADO*\n\nApenas administradores com permissão especial podem gerenciar cargos.\nUse `!admgm` para ver a lista de administradores permitidos.");
      }
      const _0x411869 = _0x593980.includes(_0x1af223);
      const _0x2d71de = _0x1883db.toLowerCase();
      let _0x30ff20 = _0x2d71de === "promover" ? "promote" : _0x2d71de === "rebaixar" ? "demote" : _0x411869 ? "demote" : "promote";
      if (_0x2d71de === "promover" && _0x411869 || _0x2d71de === "rebaixar" && !_0x411869) {
        return _0x4b347b("Este usuário " + (_0x411869 ? "já é" : "não é") + " administrador do grupo.");
      }
      const _0xb8b046 = (_0x30ff20 === "demote" ? _0x443a31.COMANDO_REBAIXOU_MENSAGEM : _0x443a31.COMANDO_PROMOVEU_MENSAGEM).replaceAll("#usuario#", '@' + _0x1af223.split('@')[0]);
      const _0x3fc6ca = {
        text: _0xb8b046,
        mentions: [_0x1af223]
      };
      await _0x1134c5.sendMessage(_0x53f73b, _0x3fc6ca);
      await _0x1134c5.groupParticipantsUpdate(_0x53f73b, [_0x1af223], _0x30ff20);
      return true;
    } catch (_0x337e57) {
      console.error("Erro ao gerenciar cargo:", _0x337e57);
      return _0x4b347b("Ocorreu um erro ao gerenciar o cargo de administrador");
    }
  }
}, {
  'name': "sorteionumero",
  'aliases': ["sorteionumeros"],
  'category': "grupo",
  'description': "Sorteia números aleatórios",
  'longDescription': "Sorteia números aleatórios dentro de um intervalo definido. Permite sortear vários números de uma vez.",
  'usage': "sorteionumero [número máximo]¥[quantidade]",
  'example': "sorteionumero 30¥5",
  'menu': "grupo",
  'menuSection': "Diversão",
  'permissions': _0x36083b,
  'requirements': _0x4cbc38,
  'execute': async ({
    conn: _0x1f8b06,
    info: _0x395f08,
    from: _0x1d078f,
    q: _0x17204b,
    prefix: _0x4d3f4f,
    EmojiBot: _0x5c04f5,
    Os_Returns: _0x534f4b,
    reply: _0x41b3dc
  }) => {
    try {
      if (_0x534f4b(true, true, true)["true"]) {
        return _0x41b3dc(_0x534f4b(true, true, true).txt);
      }
      if (!_0x17204b.trim()) {
        return _0x41b3dc("Coloque algo no formato correto, exemplo: " + _0x4d3f4f + "sorteionumero 30¥5");
      }
      let [_0x5be2af, _0x126f05] = _0x17204b.split('¥');
      let _0x4120a4 = parseInt(_0x5be2af?.["trim"]());
      let _0x17ef31 = parseInt(_0x126f05?.["trim"]()) || 1;
      if (!_0x4120a4 || _0x4120a4 < 1) {
        return _0x41b3dc("O número máximo deve ser um valor válido maior que 0.");
      }
      if (_0x17ef31 < 1) {
        return _0x41b3dc("A quantidade de números sorteados deve ser no mínimo 1.");
      }
      if (_0x17ef31 > _0x4120a4) {
        return _0x41b3dc("A quantidade de números sorteados não pode ser maior que o número máximo.");
      }
      let _0x1ec9b3 = "🎉 " + _0x5c04f5 + " Parabéns aos números sorteados, por ganhar o sorteio 🎁\n\n";
      let _0x42c167 = [];
      for (let _0x5adda8 = 0; _0x5adda8 < _0x17ef31; _0x5adda8++) {
        let _0x535ab3 = Math.floor(Math.random() * _0x4120a4) + 1;
        while (_0x42c167.includes(_0x535ab3)) {
          _0x535ab3 = Math.floor(Math.random() * _0x4120a4) + 1;
        }
        _0x42c167.push(_0x535ab3);
        _0x1ec9b3 += '፝⃟' + _0x5c04f5 + "➣ Número: [ " + _0x535ab3 + " ]\n";
      }
      await _0x41b3dc(_0x1ec9b3);
      return true;
    } catch (_0x431628) {
      console.error("Erro ao realizar sorteio de números:", _0x431628);
      const _0x49993f = {
        success: false,
        message: "Deu erro, tente novamente :/"
      };
      return _0x49993f;
    }
  }
}, {
  'name': "sorteio",
  'aliases': ["sortear"],
  'category': "grupo",
  'description': "Sistema completo de sorteios no grupo",
  'usage': "sorteio [tipo] [parâmetros]",
  'example': "sorteio criar Prêmio de 50 reais",
  'permissions': _0x7dc07a,
  'execute': async ({
    conn: _0x190de1,
    from: _0xe6da01,
    q: _0x1b6139,
    prefix: _0x2c96f5,
    sender: _0x2989a3,
    isGroup: _0x21132a,
    isGroupAdmins: _0x258df5,
    isBotGroupAdmins: _0x498661,
    groupMetadata: _0x2a1dc5,
    menc_prt: _0x22d000,
    menc_jid: _0x37343e,
    fs: _0x2b2a39,
    BANCOP: _0x1995e3,
    mention: _0x34037c,
    reply: _0x26420a,
    path: _0x1883b5
  }) => {
    const _0x409f29 = _0x1883b5.join(__dirname, "../../dados/org/json/sorteios.json");
    const _0x289b9e = () => {
      try {
        return JSON.parse(_0x2b2a39.readFileSync(_0x409f29)) || {};
      } catch (_0x291037) {
        return {};
      }
    };
    const _0xd70cea = () => _0x258df5 || (_0x26420a("⚠️ Apenas administradores podem usar este comando."), false);
    const _0x1a3861 = () => _0x498661 || (_0x26420a("⚠️ Bot precisa ser admin para esta funcionalidade."), false);
    const _0x190e2e = _0x1da6e1 => _0x2a1dc5.participants.some(_0x452046 => _0x452046.id === _0x1da6e1);
    const _0x40e60f = (_0x416384, _0x2614ea, _0x56d515) => {
      if (_0x416384?.["includes"]("@s.whatsapp.net")) {
        return [_0x416384];
      }
      if (_0x2614ea?.["length"]) {
        return _0x2614ea.filter(_0x1e4c26 => _0x1e4c26.includes("@s.whatsapp.net"));
      }
      const _0x51f77c = _0x56d515?.["match"](/\d{8,}/g);
      return _0x51f77c ? _0x51f77c.map(_0x113a96 => _0x113a96 + "@s.whatsapp.net") : [];
    };
    const _0x13a745 = (_0x273ac8, _0x409bdc, _0x462acd = '⭐') => '╭─' + _0x273ac8 + "\n│" + _0x409bdc.split("\n").join("\n│") + "\n╰─────────────────";
    const _0x5cfd57 = _0x5eb535 => {
      const _0x5eda3a = _0x5eb535.filter(_0x190e2e);
      const _0x2ab1c5 = _0x5eb535.length - _0x5eda3a.length;
      if (_0x2ab1c5 > 0) {
        _0x26420a("🧹 " + _0x2ab1c5 + " participante(s) removido(s) (saíram do grupo)");
      }
      return _0x5eda3a;
    };
    if (!_0x1b6139.trim()) {
      const _0x3c517f = "🎲 *SISTEMA DE SORTEIOS* 🎲\n\n📋 *NORMAIS*\n• `" + _0x2c96f5 + "sorteio criar [prêmio]` - Criar público\n• `" + _0x2c96f5 + "sorteio admin [prêmio]` - Apenas admins\n• `" + _0x2c96f5 + "sorteio entrar` - Participar\n• `" + _0x2c96f5 + "sorteio add @user` - Adicionar\n• `" + _0x2c96f5 + "sorteio remove @user` - Remover\n• `" + _0x2c96f5 + "sorteio lista` - Ver participantes\n• `" + _0x2c96f5 + "sorteio finalizar` - Sortear\n• `" + _0x2c96f5 + "sorteio cancelar` - Cancelar\n\n⚡ *RÁPIDOS*\n• `" + _0x2c96f5 + "sorteio rapido [prêmio]` - Sortear entre todos\n• `" + _0x2c96f5 + "sorteio rapido [prêmio] x[num]` - Múltiplos\n\n🎭 *POR REAÇÃO*\n• `" + _0x2c96f5 + "sorteio react [prêmio]/[tempo]/[num]`\n• `" + _0x2c96f5 + "sorteio react-lista` - Ver participantes\n• `" + _0x2c96f5 + "sorteio react-fim` - Finalizar\n• `" + _0x2c96f5 + "sorteio react-cancelar` - Cancelar";
      return _0x26420a(_0x3c517f);
    }
    const _0x572256 = _0x1b6139.trim().split(" ");
    const _0x95f1b8 = _0x572256[0]?.["toLowerCase"]();
    const _0x12c3ef = _0x572256.slice(1).join(" ");
    const _0xac16b7 = {
      entrar: "participar",
      join: "participar",
      lista: "listar",
      list: "listar",
      participantes: "listar",
      add: "adicionar",
      remove: "remover",
      rem: "remover",
      finalizar: "encerrar",
      finish: "encerrar",
      end: "encerrar",
      cancelar: "cancel",
      admin: "criar_admin",
      "react-lista": "react_listar",
      "react-fim": "react_encerrar"
    };
    _0xac16b7["react-cancelar"] = "react_cancelar";
    const _0x5eac5d = _0xac16b7[_0x95f1b8] || _0x95f1b8;
    const _0x246418 = _0x289b9e();
    const _0x226f76 = {
      'criar': () => {
        if (!_0xd70cea() || !_0x12c3ef) {
          return _0x26420a("⚠️ Use: `" + _0x2c96f5 + "sorteio criar [prêmio]`");
        }
        if (_0x246418[_0xe6da01]) {
          return _0x26420a("🤖 Já existe sorteio: \"" + _0x246418[_0xe6da01].motivo + "\"");
        }
        _0x246418[_0xe6da01] = {
          'motivo': _0x12c3ef,
          'participantes': [],
          'data': new Date().toISOString(),
          'tipo': "normal",
          'criador': _0x2989a3
        };
        _0x2b2a39.writeFileSync(_0x409f29, JSON.stringify(_0x246418, null, 2));
        const _0x20c4bf = _0x13a745("SORTEIO CRIADO", "🎁 *Prêmio:* " + _0x12c3ef + "\n👤 *Criador:* @" + _0x2989a3.split('@')[0] + "\n\n🎫 Use `" + _0x2c96f5 + "sorteio entrar` para participar!", '✨');
        _0x34037c(_0x20c4bf);
      },
      'criar_admin': () => {
        if (!_0xd70cea() || !_0x12c3ef) {
          return _0x26420a("⚠️ Use: `" + _0x2c96f5 + "sorteio admin [prêmio]`");
        }
        if (_0x246418[_0xe6da01]) {
          return _0x26420a("🤖 Já existe sorteio: \"" + _0x246418[_0xe6da01].motivo + "\"");
        }
        _0x246418[_0xe6da01] = {
          'motivo': _0x12c3ef,
          'participantes': [],
          'data': new Date().toISOString(),
          'tipo': "admin",
          'criador': _0x2989a3
        };
        _0x2b2a39.writeFileSync(_0x409f29, JSON.stringify(_0x246418, null, 2));
        const _0x2200d6 = _0x13a745("SORTEIO EXCLUSIVO", "🎁 *Prêmio:* " + _0x12c3ef + "\n👑 *Tipo:* Apenas Administradores\n👤 *Criador:* @" + _0x2989a3.split('@')[0] + "\n\n⚠️ Use `" + _0x2c96f5 + "sorteio add @usuário`", '👑');
        _0x34037c(_0x2200d6);
      },
      'participar': () => {
        if (!_0x246418[_0xe6da01]) {
          return _0x26420a("⚠️ Não há sorteio ativo.");
        }
        if (_0x246418[_0xe6da01].tipo === "admin") {
          return _0x26420a("⚠️ Sorteio exclusivo para admins.");
        }
        if (_0x246418[_0xe6da01].participantes.includes(_0x2989a3)) {
          return _0x26420a("🤖 Você já está participando!");
        }
        if (!_0x190e2e(_0x2989a3)) {
          return _0x26420a("❌ Você não está no grupo.");
        }
        _0x246418[_0xe6da01].participantes.push(_0x2989a3);
        _0x2b2a39.writeFileSync(_0x409f29, JSON.stringify(_0x246418, null, 2));
        _0x26420a(_0x13a745("PARTICIPAÇÃO CONFIRMADA", "✅ Você entrou no sorteio!\n🎁 *Sorteio:* " + _0x246418[_0xe6da01].motivo + "\n📊 *Total:* " + _0x246418[_0xe6da01].participantes.length + " participantes", '✅'));
      },
      'adicionar': () => {
        if (!_0xd70cea() || !_0x246418[_0xe6da01]) {
          return _0x26420a("⚠️ Não há sorteio ativo ou você não é admin.");
        }
        const _0x22cb05 = _0x40e60f(_0x22d000, _0x37343e, _0x1b6139);
        if (!_0x22cb05.length) {
          return _0x26420a("⚠️ Use: `" + _0x2c96f5 + "sorteio add @user1 @user2`");
        }
        let _0x350207 = 0;
        _0x22cb05.forEach(_0x5d5079 => {
          if (_0x190e2e(_0x5d5079) && !_0x246418[_0xe6da01].participantes.includes(_0x5d5079)) {
            _0x246418[_0xe6da01].participantes.push(_0x5d5079);
            _0x350207++;
          }
        });
        _0x2b2a39.writeFileSync(_0x409f29, JSON.stringify(_0x246418, null, 2));
        _0x26420a("✅ " + _0x350207 + " participante(s) adicionado(s)!\n📊 Total: " + _0x246418[_0xe6da01].participantes.length);
      },
      'remover': () => {
        if (!_0xd70cea() || !_0x246418[_0xe6da01]) {
          return _0x26420a("⚠️ Não há sorteio ativo ou você não é admin.");
        }
        const _0x4783f4 = _0x40e60f(_0x22d000, _0x37343e, _0x1b6139);
        if (!_0x4783f4.length) {
          return _0x26420a("⚠️ Use: `" + _0x2c96f5 + "sorteio remove @user1`");
        }
        let _0x1cff9f = 0;
        _0x4783f4.forEach(_0x354dd5 => {
          const _0x169be4 = _0x246418[_0xe6da01].participantes.indexOf(_0x354dd5);
          if (_0x169be4 > -1) {
            _0x246418[_0xe6da01].participantes.splice(_0x169be4, 1);
            _0x1cff9f++;
          }
        });
        _0x2b2a39.writeFileSync(_0x409f29, JSON.stringify(_0x246418, null, 2));
        _0x26420a("➖ " + _0x1cff9f + " participante(s) removido(s)!\n📊 Total: " + _0x246418[_0xe6da01].participantes.length);
      },
      'listar': () => {
        if (!_0x246418[_0xe6da01]) {
          return _0x26420a("⚠️ Não há sorteio ativo.");
        }
        const _0x1f4c57 = _0x246418[_0xe6da01].participantes.length;
        _0x246418[_0xe6da01].participantes = _0x5cfd57(_0x246418[_0xe6da01].participantes);
        if (_0x1f4c57 !== _0x246418[_0xe6da01].participantes.length) {
          _0x2b2a39.writeFileSync(_0x409f29, JSON.stringify(_0x246418, null, 2));
        }
        const _0x6537eb = _0x246418[_0xe6da01].participantes.length;
        const _0x264794 = _0x6537eb > 0 ? _0x246418[_0xe6da01].participantes.map((_0x457d6b, _0x490459) => _0x490459 + 1 + ". @" + _0x457d6b.split('@')[0]).join("\n") : "Nenhum participante ainda";
        const _0x5423b9 = _0x13a745("PARTICIPANTES", "🎁 *Prêmio:* " + _0x246418[_0xe6da01].motivo + "\n📊 *Total:* " + _0x6537eb + "\n🏷️ *Tipo:* " + (_0x246418[_0xe6da01].tipo === "admin" ? "Admins" : "Público") + "\n\n" + _0x264794, '📋');
        _0x34037c(_0x5423b9);
      },
      'encerrar': () => {
        if (!_0xd70cea() || !_0x246418[_0xe6da01]) {
          return _0x26420a("⚠️ Não há sorteio ativo ou você não é admin.");
        }
        _0x246418[_0xe6da01].participantes = _0x5cfd57(_0x246418[_0xe6da01].participantes);
        if (_0x246418[_0xe6da01].participantes.length < 1) {
          delete _0x246418[_0xe6da01];
          _0x2b2a39.writeFileSync(_0x409f29, JSON.stringify(_0x246418, null, 2));
          return _0x26420a("❌ Sorteio cancelado: nenhum participante válido.");
        }
        const _0x3f1142 = _0x246418[_0xe6da01].participantes[Math.floor(Math.random() * _0x246418[_0xe6da01].participantes.length)];
        const _0x35ed6f = _0x246418[_0xe6da01].motivo;
        const _0x49f618 = _0x246418[_0xe6da01].participantes.length;
        delete _0x246418[_0xe6da01];
        _0x2b2a39.writeFileSync(_0x409f29, JSON.stringify(_0x246418, null, 2));
        const _0x23df8f = _0x13a745("🎉 GANHADOR! 🎉", "🎁 *Prêmio:* " + _0x35ed6f + "\n👥 *Participantes:* " + _0x49f618 + "\n📊 *Chance:* " + (100 / _0x49f618).toFixed(1) + "%\n\n🏆 *GANHADOR:* @" + _0x3f1142.split('@')[0] + "\n\n🎉 PARABÉNS!", '🎉');
        _0x34037c(_0x23df8f);
      },
      'cancelar': () => {
        if (!_0xd70cea() || !_0x246418[_0xe6da01]) {
          return _0x26420a("⚠️ Não há sorteio ativo ou você não é admin.");
        }
        const _0x3498a7 = _0x246418[_0xe6da01].motivo;
        const _0x574c6a = _0x246418[_0xe6da01].participantes.length;
        delete _0x246418[_0xe6da01];
        _0x2b2a39.writeFileSync(_0x409f29, JSON.stringify(_0x246418, null, 2));
        _0x26420a(_0x13a745("CANCELADO", "❌ Sorteio \"" + _0x3498a7 + "\" cancelado\n👥 " + _0x574c6a + " participantes afetados", '❌'));
      },
      'rapido': () => {
        if (!_0xd70cea() || !_0x1a3861()) {
          return;
        }
        if (!_0x12c3ef) {
          return _0x26420a("⚠️ Use: `" + _0x2c96f5 + "sorteio rapido [prêmio]` ou `" + _0x2c96f5 + "sorteio rapido [prêmio] x[num]`");
        }
        const [_0x38457c, _0x41ebdc] = _0x12c3ef.split(" x");
        const _0x57ee06 = parseInt(_0x41ebdc) || 1;
        if (_0x57ee06 < 1 || _0x57ee06 > _0x2a1dc5.participants.length) {
          return _0x26420a("⚠️ Número de ganhadores inválido.");
        }
        const _0xf67925 = [];
        const _0x4efeef = [..._0x2a1dc5.participants];
        for (let _0xe9b748 = 0; _0xe9b748 < _0x57ee06; _0xe9b748++) {
          const _0x1bbd08 = Math.floor(Math.random() * _0x4efeef.length);
          _0xf67925.push(_0x4efeef.splice(_0x1bbd08, 1)[0].id);
        }
        const _0x561856 = _0xf67925.map((_0x5330a2, _0x1a182a) => _0x1a182a + 1 + ". @" + _0x5330a2.split('@')[0]).join("\n");
        const _0x187665 = _0x13a745("⚡ SORTEIO RÁPIDO ⚡", "🎁 *Prêmio:* " + _0x38457c.trim() + "\n👥 *Pool:* " + _0x2a1dc5.participants.length + " membros\n🎯 *Ganhadores:* " + _0x57ee06 + "\n\n🏆 *RESULTADO:*\n" + _0x561856 + "\n\n🎉 Parabéns!", '⚡');
        _0x34037c(_0x187665);
      },
      'react': async () => {
        if (!_0xd70cea() || !_0x1a3861()) {
          return;
        }
        const _0x2ca4fd = _0x12c3ef?.["split"]('/');
        if (_0x2ca4fd?.["length"] !== 3) {
          return _0x26420a("⚠️ Use: `" + _0x2c96f5 + "sorteio react prêmio/tempo/ganhadores`\n\n💡 Exemplos:\n• `" + _0x2c96f5 + "sorteio react iPhone/10m/1`\n• `" + _0x2c96f5 + "sorteio react Premium/manual/2`");
        }
        const [_0xb15500, _0x472891, _0x59bbb0] = _0x2ca4fd.map(_0x1d05c2 => _0x1d05c2.trim());
        const _0x22e56a = parseInt(_0x59bbb0);
        if (isNaN(_0x22e56a) || _0x22e56a < 1) {
          return _0x26420a("⚠️ Número de ganhadores inválido.");
        }
        let _0x23e9ae = null;
        if (_0x472891.toLowerCase() !== "manual") {
          const _0x43e787 = _0x472891.match(/^(\d+)m?$/);
          if (!_0x43e787) {
            return _0x26420a("⚠️ Formato: 5m, 10m ou manual");
          }
          const _0x9ba63b = parseInt(_0x43e787[1]);
          if (_0x9ba63b < 1 || _0x9ba63b > 120) {
            return _0x26420a("⚠️ Tempo: 1-120 minutos.");
          }
          _0x23e9ae = _0x9ba63b * 60;
        }
        try {
          if (_0x1995e3.prepare("SELECT id FROM sorteios_react WHERE grupo_id = ?").get(_0xe6da01)) {
            return _0x26420a("⚠️ Já existe sorteio por reação ativo.");
          }
          const _0x36fda8 = _0x23e9ae ? Math.floor(_0x23e9ae / 60) + 'm' : "Manual";
          const _0x27fbef = _0x13a745("🎭 SORTEIO POR REAÇÃO 🎭", "🎁 *Prêmio:* " + _0xb15500 + "\n⏰ *Tempo:* " + _0x36fda8 + "\n🎯 *Ganhadores:* " + _0x22e56a + "\n\n⚠️ *COMO PARTICIPAR:*\nReaja a esta mensagem!\n\n🍀 Boa sorte!", '🎭');
          const {
            key: _0x271649
          } = await _0x190de1.sendMessage(_0xe6da01, {
            'text': _0x27fbef,
            'mentions': _0x2a1dc5.participants.map(_0x979fc5 => _0x979fc5.id)
          });
          const _0x407ef8 = _0x23e9ae ? Math.floor(Date.now() / 1000) + _0x23e9ae : null;
          _0x1995e3.prepare("\nINSERT INTO sorteios_react \n(grupo_id, mensagem_id, premio, duracao, quantidade_ganhadores, timestamp_criacao, finalizando) \nVALUES (?, ?, ?, ?, ?, ?, 0)\n").run(_0xe6da01, _0x271649.id, _0xb15500, _0x407ef8, _0x22e56a, Math.floor(Date.now() / 1000));
        } catch (_0x1fee5f) {
          console.error("Erro sorteio react:", _0x1fee5f);
          _0x26420a("⚠️ Erro ao criar sorteio.");
        }
      },
      'react_listar': () => {
        try {
          const _0x292173 = _0x1995e3.prepare("\nSELECT id, premio, quantidade_ganhadores, duracao \nFROM sorteios_react WHERE grupo_id = ?\n").get(_0xe6da01);
          if (!_0x292173) {
            return _0x26420a("⚠️ Nenhum sorteio por reação ativo.");
          }
          let _0x3effac = _0x1995e3.prepare("\nSELECT participante_id FROM sorteios_react_participantes WHERE sorteio_id = ?\n").all(_0x292173.id).map(_0x419d32 => _0x419d32.participante_id);
          const _0xeab1e7 = _0x3effac.filter(_0x190e2e);
          const _0x5cc7fa = _0x3effac.length - _0xeab1e7.length;
          if (_0x5cc7fa > 0) {
            _0x1995e3.prepare("DELETE FROM sorteios_react_participantes WHERE sorteio_id = ? AND participante_id NOT IN (" + (_0xeab1e7.map(() => '?').join(',') || "NULL") + ')').run(_0x292173.id, ..._0xeab1e7);
          }
          let _0x506371 = '';
          if (_0x292173.duracao) {
            const _0x2b259c = _0x292173.duracao - Math.floor(Date.now() / 1000);
            _0x506371 = _0x2b259c > 0 ? "\n⏰ *Restante:* " + Math.floor(_0x2b259c / 60) + "m " + _0x2b259c % 60 + 's' : "\n🚨 Tempo esgotado";
          } else {
            _0x506371 = "\n🔧 Manual";
          }
          const _0x5559a1 = _0xeab1e7.length;
          const _0x3f2906 = _0x5559a1 > 0 ? _0xeab1e7.slice(0, 15).map((_0x49ce7b, _0x24601e) => _0x24601e + 1 + ". @" + _0x49ce7b.split('@')[0]).join("\n") + (_0x5559a1 > 15 ? "\n... +" + (_0x5559a1 - 15) : '') : "Nenhum participante";
          const _0x2451c2 = _0x5cc7fa > 0 ? "\n🧹 " + _0x5cc7fa + " removido(s)" : '';
          const _0x409b19 = _0x13a745("🎭 PARTICIPANTES REAÇÃO", "🎁 *Prêmio:* " + _0x292173.premio + "\n🎯 *Ganhadores:* " + _0x292173.quantidade_ganhadores + _0x506371 + "\n📊 *Total:* " + _0x5559a1 + _0x2451c2 + "\n\n" + _0x3f2906, '📋');
          _0x34037c(_0x409b19);
        } catch (_0x5e9ec8) {
          console.error("Erro listar react:", _0x5e9ec8);
          _0x26420a("⚠️ Erro ao listar.");
        }
      },
      'react_encerrar': () => {
        if (!_0xd70cea() || !_0x1a3861()) {
          return;
        }
        try {
          const _0x3de9bf = _0x1995e3.prepare("\nSELECT id, premio, quantidade_ganhadores \nFROM sorteios_react WHERE grupo_id = ? AND finalizando = 0\n").get(_0xe6da01);
          if (!_0x3de9bf) {
            return _0x26420a("⚠️ Nenhum sorteio ativo.");
          }
          _0x1995e3.prepare("UPDATE sorteios_react SET finalizando = 1 WHERE id = ?").run(_0x3de9bf.id);
          let _0x1b9a7f = _0x1995e3.prepare("\nSELECT participante_id FROM sorteios_react_participantes WHERE sorteio_id = ?\n").all(_0x3de9bf.id).map(_0x3270ec => _0x3270ec.participante_id).filter(_0x190e2e);
          if (_0x1b9a7f.length === 0) {
            _0x1995e3.prepare("DELETE FROM sorteios_react WHERE id = ?").run(_0x3de9bf.id);
            return _0x26420a("❌ Sorteio cancelado - sem participantes válidos.");
          }
          const _0x59f497 = [];
          const _0x8b9fdb = [..._0x1b9a7f];
          for (let _0x33db2a = 0; _0x33db2a < _0x3de9bf.quantidade_ganhadores && _0x8b9fdb.length > 0; _0x33db2a++) {
            const _0x5f33db = Math.floor(Math.random() * _0x8b9fdb.length);
            _0x59f497.push(_0x8b9fdb.splice(_0x5f33db, 1)[0]);
          }
          const _0x4aad99 = _0x59f497.map((_0xa7cd3e, _0x5d049b) => _0x5d049b + 1 + ". @" + _0xa7cd3e.split('@')[0]).join("\n");
          const _0x394e3c = _0x13a745("🎉 REAÇÃO FINALIZADO 🎉", "🎁 *Prêmio:* " + _0x3de9bf.premio + "\n👥 *Participantes:* " + _0x1b9a7f.length + "\n🎯 *Sorteados:* " + _0x59f497.length + "\n\n🏆 *GANHADOR" + (_0x59f497.length > 1 ? 'ES' : '') + ":*\n" + _0x4aad99 + "\n\n🎉 Parabéns!", '🎉');
          _0x34037c(_0x394e3c);
          _0x1995e3.prepare("DELETE FROM sorteios_react WHERE id = ?").run(_0x3de9bf.id);
        } catch (_0x285c64) {
          console.error("Erro encerrar react:", _0x285c64);
          _0x26420a("⚠️ Erro ao encerrar.");
        }
      },
      'react_cancelar': () => {
        if (!_0xd70cea() || !_0x1a3861()) {
          return;
        }
        try {
          const _0x270388 = _0x1995e3.prepare("SELECT id, premio FROM sorteios_react WHERE grupo_id = ?").get(_0xe6da01);
          if (!_0x270388) {
            return _0x26420a("⚠️ Nenhum sorteio ativo.");
          }
          const _0x1f61ff = _0x1995e3.prepare("SELECT COUNT(*) as total FROM sorteios_react_participantes WHERE sorteio_id = ?").get(_0x270388.id).total;
          _0x1995e3.prepare("DELETE FROM sorteios_react WHERE id = ?").run(_0x270388.id);
          _0x26420a(_0x13a745("REAÇÃO CANCELADO", "❌ \"" + _0x270388.premio + "\" cancelado\n👥 " + _0x1f61ff + " participantes afetados", '❌'));
        } catch (_0x549eee) {
          console.error("Erro cancelar react:", _0x549eee);
          _0x26420a("⚠️ Erro ao cancelar.");
        }
      }
    };
    if (_0x226f76[_0x5eac5d]) {
      await _0x226f76[_0x5eac5d]();
    } else {
      _0x26420a("⚠️ Comando inválido: \"" + _0x95f1b8 + "\"\n\n💡 Use `" + _0x2c96f5 + "sorteio` para ver opções.");
    }
    return true;
  }
}, {
  'name': "grupo",
  'aliases': [],
  'category': "admin",
  'description': "Abre ou fecha o grupo",
  'longDescription': "Altera as configurações do grupo para permitir que apenas administradores ou todos os membros possam enviar mensagens.",
  'usage': "grupo [a/f] (a = abrir, f = fechar)",
  'example': "grupo a",
  'menu': "admin",
  'menuSection': "Gerenciamento",
  'permissions': _0x1bac23,
  'requirements': _0x3d8575,
  'execute': async ({
    conn: _0x305186,
    info: _0x2c9af,
    from: _0x1f12b6,
    args: _0x31f148,
    Os_Returns: _0x5703c2,
    TEXTOS_GERAL: _0x4e18eb,
    fs: _0x3ef442,
    reply: _0x3e7fcf,
    path: _0x582f9f
  }) => {
    if (_0x5703c2(true, true, true)["true"]) {
      return _0x3e7fcf(_0x5703c2(true, true, true).txt);
    }
    let _0xd68790 = async _0x596771 => {
      let _0x60385c = require("file-type");
      if (!_0x3ef442.existsSync(_0x596771)) {
        return;
      }
      try {
        let _0x3d73d7 = await _0x60385c.fromFile(_0x596771);
        if (!_0x3d73d7) {
          console.warn("Não foi possível determinar o tipo do arquivo: " + _0x596771);
          return;
        }
        if (_0x3d73d7.mime === "image/webp") {
          const _0x33ba2b = {
            url: _0x596771
          };
          const _0x3c333e = {
            sticker: _0x33ba2b
          };
          await _0x305186.sendMessage(_0x1f12b6, _0x3c333e);
        } else {
          if (_0x3d73d7.mime.startsWith("image/")) {
            let _0x4b39eb = _0x596771 + ".temp.webp";
            await new Promise((_0x24a0c4, _0x40ff20) => {
              exec("ffmpeg -i \"" + _0x596771 + "\" -y -vcodec libwebp -filter:v fps=fps=30 \"" + _0x4b39eb + "\"", _0x1f763d => {
                if (_0x1f763d) {
                  _0x40ff20("Erro ao converter para WebP: " + _0x1f763d.message);
                } else {
                  _0x24a0c4();
                }
              });
            });
            _0x3ef442.renameSync(_0x4b39eb, _0x596771);
            const _0x3135e7 = {
              url: _0x596771
            };
            const _0x501265 = {
              sticker: _0x3135e7
            };
            await _0x305186.sendMessage(_0x1f12b6, _0x501265);
          } else {
            console.warn("Arquivo " + _0x596771 + " não é suportado para envio como figurinha.");
          }
        }
      } catch (_0x38c51e) {
        console.error("Erro ao processar figurinha: " + _0x38c51e.message);
      }
    };
    const _0x4b52a4 = _0x582f9f.join(__dirname, "../../dados/midias/figs/AGP.webp");
    const _0x71599b = _0x582f9f.join(__dirname, "../../dados/midias/figs/FGP.webp");
    if (_0x31f148[0] === 'a') {
      _0x3e7fcf(_0x4e18eb?.["MENSAGEM_GRUPO_ABRIU"] || "*GRUPO ABERTO COM SUCESSO*");
      _0x305186.groupSettingUpdate(_0x1f12b6, "not_announcement");
      await _0xd68790(_0x4b52a4);
    } else if (_0x31f148[0] === 'f') {
      _0x3e7fcf(_0x4e18eb?.["MENSAGEM_GRUPO_FECHOU"] || "*GRUPO FECHADO COM SUCESSO*");
      _0x305186.groupSettingUpdate(_0x1f12b6, "announcement");
      await _0xd68790(_0x71599b);
    }
    return true;
  }
}, {
  'name': "grupoinfo",
  'aliases': ["infogrupo", "infogp", "gpinfo", "regras"],
  'category': "admin",
  'description': "Mostra informações detalhadas do grupo",
  'longDescription': "Exibe informações detalhadas sobre o grupo, incluindo nome, número de membros, administradores e descrição.",
  'usage': "grupoinfo",
  'example': "grupoinfo",
  'menu': "admin",
  'menuSection': "Informações",
  'permissions': _0x486945,
  'requirements': {},
  'execute': async ({
    conn: _0x26ee56,
    info: _0x484fcd,
    from: _0x4c990c,
    groupName: _0x406cd1,
    groupMembers: _0x4092ed,
    groupAdmins: _0x11588b,
    Os_Returns: _0x43e98b,
    groupMetadata: _0x516f34,
    reply: _0x3b5013
  }) => {
    if (_0x43e98b(true, true, true)["true"]) {
      return _0x3b5013(_0x43e98b(true, true, true).txt);
    }
    let _0x47b99b;
    try {
      _0x47b99b = await _0x26ee56.profilePictureUrl(_0x4c990c, "image");
    } catch {
      _0x47b99b = "https://i.ibb.co/6XGQd5g/6ca032835ed7a16748b6f.jpg";
    }
    var _0x57bb50 = (await _0x26ee56.groupMetadata(_0x4c990c)) || _0x516f34;
    const _0x44f4b4 = {
      "url": _0x47b99b
    };
    const _0x1213f6 = {
      image: _0x44f4b4,
      caption: "*NOME* : " + _0x406cd1 + "\n\n*MEMBRO* : " + _0x4092ed.length + "\n\n*ADMIN* : " + _0x11588b.length + (_0x57bb50?.["desc"] ? "\n\n\n*DESCRIÇÃO* : " + _0x57bb50?.["desc"] : '')
    };
    _0x1213f6.thumbnail = null;
    const _0x1ef208 = {
      quoted: _0x484fcd
    };
    _0x26ee56.sendMessage(_0x4c990c, _0x1213f6, _0x1ef208);
    return true;
  }
}, {
  'name': "totag",
  'aliases': ["cita", "hidetag", "totag2", "cita2", "hidetag2"],
  'category': "admin",
  'description': "Marca todos os membros do grupo discretamente",
  'longDescription': "Permite que administradores marquem todos os membros do grupo de forma discreta. Use totag para incluir \"Marcação do Adm\" ou adicione 2 ao final do comando para manter apenas o conteúdo original.",
  'usage': "totag/totag2 [texto]",
  'example': "totag Atenção a todos!",
  'menu': "admin",
  'menuSection': "Comunicação",
  'permissions': _0x1c674b,
  'requirements': {},
  'execute': async ({
    conn: _0x476f79,
    info: _0x28dfed,
    from: _0x1871ac,
    q: _0x5da57a,
    prefix: _0x36dd27,
    command: _0x91e2c0,
    sender2: _0x40b39d,
    isQuotedImage: _0x45e35e,
    isQuotedVideo: _0x42246d,
    isQuotedAudio: _0x1768d2,
    isQuotedDocument: _0x146652,
    isQuotedDocW: _0x5ce1c7,
    isQuotedSticker: _0x52dd62,
    isQuotedMsg: _0x5f13d2,
    groupMembers: _0x1a4016,
    reply: _0xa67d5a
  }) => {
    const _0x4e6f83 = {
      'debug': false,
      'modoTotag': !_0x91e2c0.endsWith('2'),
      'novoTexto': _0x5da57a && _0x5da57a.trim().length > 0,
      'memberIds': _0x1a4016.map(_0x38df54 => _0x38df54.id),
      'quotedInfo': _0x28dfed.message?.["extendedTextMessage"]?.["contextInfo"],
      'adminSignature': "Marcação do Adm: " + _0x40b39d
    };
    const _0x5bdf59 = {
      'debug': (_0xf2ffaf, _0x526f9b = null) => {},
      'info': (_0x32438e, _0x350c31 = null) => {},
      'error': (_0x29b6d7, _0x3621ef = null) => {},
      'success': _0x2d28e1 => {}
    };
    _0x5bdf59.info("Iniciando comando " + _0x91e2c0 + " no grupo " + _0x1871ac);
    const _0x4b7c71 = _0x4e6f83.quotedInfo?.["quotedMessage"];
    const _0x20007d = !!(_0x4e6f83.quotedInfo?.["stanzaId"] && _0x4e6f83.quotedInfo?.["participant"]);
    const _0x4e7bb9 = () => {
      _0x5bdf59.debug("Iniciando detecção de tipo de mídia...");
      const _0xbd8ab8 = {
        type: "image",
        flag: _0x45e35e,
        quoted: _0x4b7c71?.["imageMessage"],
        direct: _0x28dfed.message?.["imageMessage"]
      };
      const _0x2c1b55 = {
        type: "video",
        flag: _0x42246d,
        quoted: _0x4b7c71?.["videoMessage"],
        direct: _0x28dfed.message?.["videoMessage"]
      };
      const _0x284bc5 = {
        type: "document",
        flag: _0x146652,
        quoted: _0x4b7c71?.["documentMessage"],
        direct: _0x28dfed.message?.["documentMessage"]
      };
      const _0x5871fa = {
        type: "documentWithCaption",
        flag: _0x5ce1c7,
        quoted: _0x4b7c71?.["documentWithCaptionMessage"]?.["message"]?.["documentMessage"],
        direct: _0x28dfed.message?.["documentWithCaptionMessage"]?.["message"]?.["documentMessage"]
      };
      const _0x7b045 = {
        type: "sticker",
        flag: _0x52dd62,
        quoted: _0x4b7c71?.["stickerMessage"],
        direct: _0x28dfed.message?.["stickerMessage"]
      };
      const _0x4fa04f = {
        type: "audio",
        flag: _0x1768d2,
        quoted: _0x4b7c71?.["audioMessage"],
        direct: _0x28dfed.message?.["audioMessage"]
      };
      const _0x887805 = [_0xbd8ab8, _0x2c1b55, _0x284bc5, _0x5871fa, _0x7b045, _0x4fa04f];
      for (const _0x4e1221 of _0x887805) {
        if (_0x4e1221.flag && _0x4e1221.quoted) {
          _0x5bdf59.info("Detectado: " + _0x4e1221.type + " citada");
          _0x5bdf59.debug("Propriedades da " + _0x4e1221.type + ':', Object.keys(_0x4e1221.quoted));
          const _0x8dfbad = {
            type: _0x4e1221.type,
            data: _0x4e1221.quoted,
            source: "quoted"
          };
          return _0x8dfbad;
        }
        if (_0x4e1221.direct) {
          _0x5bdf59.info("Detectado: " + _0x4e1221.type + " direta");
          _0x5bdf59.debug("Propriedades da " + _0x4e1221.type + ':', Object.keys(_0x4e1221.direct));
          const _0xb29b79 = {
            type: _0x4e1221.type,
            data: _0x4e1221.direct,
            source: "direct"
          };
          return _0xb29b79;
        }
      }
      if (_0x20007d) {
        const _0x2a6ad4 = _0x4b7c71?.["conversation"] || _0x4b7c71?.["extendedTextMessage"]?.["text"];
        if (_0x2a6ad4) {
          _0x5bdf59.info("Detectado: texto citado");
          _0x5bdf59.debug("Conteúdo do texto:", _0x2a6ad4.substring(0, 50) + "...");
          const _0x11d17a = {
            type: "text",
            data: _0x2a6ad4,
            source: "quoted"
          };
          return _0x11d17a;
        }
      }
      _0x5bdf59.info("Detectado: texto direto ou padrão");
      const _0x139c85 = {
        type: "text",
        data: null,
        source: "direct"
      };
      return _0x139c85;
    };
    const _0x460931 = (_0x301dc1 = '') => {
      const _0x27ddeb = {
        originalCaption: _0x301dc1,
        novoTexto: _0x4e6f83.novoTexto
      };
      _0x5bdf59.debug("Construindo caption...", _0x27ddeb);
      if (_0x4e6f83.novoTexto) {
        const _0x410ebe = _0x4e6f83.modoTotag ? _0x4e6f83.adminSignature + "\n\n" + _0x5da57a : _0x5da57a;
        _0x5bdf59.debug("Caption criada com novo texto:", _0x410ebe);
        return _0x410ebe;
      }
      if (_0x301dc1) {
        const _0x242e9c = _0x301dc1.replace(new RegExp((_0x36dd27 + _0x91e2c0).replace(/[.*+?^${}()|[\]\\]/g, "\\$&"), 'gi'), _0x4e6f83.modoTotag ? _0x4e6f83.adminSignature + "\n\n" : '').trim();
        const _0x2937ae = _0x242e9c || (_0x4e6f83.modoTotag ? _0x4e6f83.adminSignature : '');
        _0x5bdf59.debug("Caption processada:", _0x2937ae);
        return _0x2937ae;
      }
      const _0x155577 = _0x4e6f83.modoTotag ? _0x4e6f83.adminSignature : '';
      _0x5bdf59.debug("Caption padrão:", _0x155577);
      return _0x155577;
    };
    const _0x4b29ae = _0xfdbe8f => {
      const _0x15cfb0 = {
        Prglg: "DELETE FROM controle_comandos WHERE escopo = ?"
      };
      _0x15cfb0.NidMc = "global";
      const {
        type: _0x2665fc,
        data: _0x34f9ca,
        source: _0x4f2f78
      } = _0xfdbe8f;
      _0x5bdf59.info("Construindo mensagem do tipo: " + _0x2665fc + " (" + _0x4f2f78 + ')');
      const _0x28f8fc = {
        mentions: _0x4e6f83.memberIds,
        contextInfo: {}
      };
      _0x28f8fc.contextInfo.mentionedJid = _0x4e6f83.memberIds;
      _0x5bdf59.debug("Configuração de menções:", {
        'totalMentions': _0x28f8fc.mentions.length,
        'primeirosMembros': _0x28f8fc.mentions.slice(0, 3)
      });
      let _0x30c887;
      switch (_0x2665fc) {
        case "image":
          _0x30c887 = {
            ..._0x34f9ca,
            'image': {
              'url': _0x34f9ca.url
            },
            'caption': _0x460931(_0x34f9ca.caption),
            ..._0x28f8fc
          };
          break;
        case "video":
          _0x30c887 = {
            ..._0x34f9ca,
            'video': {
              'url': _0x34f9ca.url
            },
            'caption': _0x460931(_0x34f9ca.caption),
            ..._0x28f8fc
          };
          break;
        case "document":
          const _0x19c12a = {
            ..._0x34f9ca,
            'document': {
              'url': _0x34f9ca.url
            },
            ..._0x28f8fc
          };
          _0x30c887 = _0x19c12a;
          break;
        case "documentWithCaption":
          _0x30c887 = {
            ..._0x34f9ca,
            'document': {
              'url': _0x34f9ca.url
            },
            'caption': _0x460931(_0x34f9ca.caption),
            ..._0x28f8fc
          };
          break;
        case "sticker":
          const _0x493bf8 = {
            ..._0x34f9ca,
            'sticker': {
              'url': _0x34f9ca.url
            },
            ..._0x28f8fc
          };
          _0x30c887 = _0x493bf8;
          break;
        case "audio":
          const _0x4b238d = {
            ..._0x34f9ca,
            'audio': {
              'url': _0x34f9ca.url
            },
            'ptt': true,
            ..._0x28f8fc
          };
          _0x30c887 = _0x4b238d;
          break;
        case "text":
        default:
          let _0x5ef8bd;
          if (_0x34f9ca && _0x4f2f78 === "quoted") {
            _0x5ef8bd = _0x4e6f83.novoTexto ? _0x4e6f83.modoTotag ? _0x4e6f83.adminSignature + "\n\n" + _0x5da57a : _0x5da57a : _0x34f9ca;
          } else {
            _0x5ef8bd = _0x4e6f83.novoTexto ? _0x4e6f83.modoTotag ? _0x4e6f83.adminSignature + "\n\n" + _0x5da57a : _0x5da57a : _0x4e6f83.modoTotag ? _0x4e6f83.adminSignature : "⚠️ Todos foram marcados";
          }
          const _0x14235b = {
            'text': _0x5ef8bd,
            ..._0x28f8fc
          };
          _0x30c887 = _0x14235b;
          break;
      }
      _0x5bdf59.debug("Estrutura da mensagem final:", Object.keys(_0x30c887));
      return _0x30c887;
    };
    const _0x55d6b8 = _0x2bd8db => {
      _0x5bdf59.debug("Validando mensagem...");
      if (!_0x2bd8db) {
        _0x5bdf59.error("Mensagem é null/undefined");
        return false;
      }
      if (!_0x2bd8db.mentions || _0x2bd8db.mentions.length === 0) {
        _0x5bdf59.error("Mensagem sem menções válidas");
        return false;
      }
      const _0x1b3e08 = _0x2bd8db.text || _0x2bd8db.image || _0x2bd8db.video || _0x2bd8db.document || _0x2bd8db.sticker || _0x2bd8db.audio;
      if (!_0x1b3e08) {
        _0x5bdf59.error("Mensagem sem conteúdo");
        return false;
      }
      _0x5bdf59.success("Mensagem validada com sucesso");
      return true;
    };
    try {
      const _0x50ee41 = _0x4e7bb9();
      const _0x3f509e = _0x4b29ae(_0x50ee41);
      if (!_0x55d6b8(_0x3f509e)) {
        _0x5bdf59.error("Falha na validação da mensagem");
        const _0x514f18 = {
          success: false,
          message: "Erro ao construir mensagem com menções."
        };
        return _0x514f18;
      }
      _0x5bdf59.info("Enviando mensagem...");
      await _0x476f79.sendMessage(_0x1871ac, _0x3f509e);
      _0x5bdf59.success("Mensagem enviada com sucesso!");
      return true;
    } catch (_0xe62de) {
      _0x5bdf59.error("Erro durante execução:", _0xe62de.message);
      console.error("Erro no comando totag:", _0xe62de);
      return _0xa67d5a("❌ Erro ao executar comando totag.");
    }
  }
}, {
  'name': "tagall",
  'aliases': [],
  'category': "admin",
  'description': "Marca todos os membros com menção do grupo",
  'longDescription': "Marca todos os membros do grupo usando menção de grupo, o que faz com que eles recebam notificação.",
  'usage': "tagall [mensagem opcional]",
  'example': "tagall Reunião em 10 minutos",
  'menu': "admin",
  'menuSection': "Comunicação",
  'permissions': _0x17c575,
  'requirements': {},
  'execute': async ({
    conn: _0x347959,
    info: _0x115faf,
    from: _0xff118f,
    q: _0x17cddb,
    isGroup: _0x12bad4,
    isGroupAdmins: _0x23ee33,
    isBotGroupAdmins: _0xf981b,
    reply: _0x581ac8
  }) => {
    if (!_0x12bad4) {
      return _0x581ac8("Este comando só pode ser usado em grupos.");
    }
    if (!_0x23ee33) {
      return _0x581ac8("Apenas administradores podem usar este comando.");
    }
    if (!_0xf981b) {
      return _0x581ac8("Preciso ser administrador para marcar todos.");
    }
    let {
      participants: _0x41221a
    } = await _0x347959.groupMetadata(_0xff118f);
    if (!_0x41221a.length) {
      return _0x581ac8("Não há participantes no grupo.");
    }
    await _0x347959.relayMessage(_0xff118f, {
      'extendedTextMessage': {
        'text': _0x17cddb.length ? '@' + _0xff118f + " " + _0x17cddb : '@' + _0xff118f + " Marcação geral!",
        'contextInfo': {
          'mentionedJid': _0x41221a.map(_0x4f9718 => _0x4f9718.id),
          'groupMentions': [{
            'groupJid': _0xff118f,
            'groupSubject': "Membros"
          }]
        }
      }
    }, {});
    return true;
  }
}, {
  'name': "marcar",
  'aliases': [],
  'category': "admin",
  'description': "Marca todos os membros normais do grupo",
  'longDescription': "Cria uma lista com todos os membros não administradores do grupo, marcando cada um para que recebam notificação.",
  'usage': "marcar [mensagem opcional]",
  'example': "marcar Reunião em 10 minutos!",
  'menu': "admin",
  'menuSection': "Comunicação",
  'permissions': _0x5a09b8,
  'requirements': {},
  'execute': async ({
    conn: _0x4b6a4,
    info: _0x4a4717,
    from: _0x76d3fa,
    q: _0x26a7ed,
    isGroup: _0xb12c2a,
    isGroupAdmins: _0x120eec,
    isBotGroupAdmins: _0x4ec2c0,
    groupName: _0x50bdae,
    groupMembers: _0x1db1fa,
    NomeDoBot: _0x5153a9,
    nescessario: _0x182dd7,
    mentions: _0x28a7a9,
    reply: _0x265461,
    groupAdmins: _0x451793
  }) => {
    async function _0x133894() {
      if (_0x182dd7.audiomarcar) {
        const _0x2625b9 = {
          url: _0x182dd7.audiomarcar
        };
        const _0x416398 = {
          audio: _0x2625b9,
          mimetype: "audio/mpeg",
          ptt: true
        };
        const _0x3f39a9 = {
          quoted: _0x4a4717
        };
        _0x4b6a4.sendMessage(_0x76d3fa, _0x416398, _0x3f39a9);
      }
      const _0x18410c = _0x1db1fa.filter(_0x3f995b => !_0x451793.includes(_0x3f995b.id)).map(_0x5c92bc => _0x5c92bc.id);
      let _0x4fb242 = [];
      blad = "\n𝑀𝐸𝑀𝐵𝑅𝑂𝑆 𝐶𝑂𝑀𝑈𝑀\n𝐵𝑂𝑇: " + _0x5153a9 + "\n\n-_- Do Grupo: " + _0x50bdae + " -_-" + (!_0x26a7ed ? '' : "\n\n~» Mensagem: " + _0x26a7ed) + "\n\n";
      for (let _0x25319f of _0x18410c) {
        blad += "✥➤ @" + _0x25319f.split('@')[0] + "\n\n";
        _0x4fb242.push(_0x25319f);
      }
      blam = JSON.stringify(_0x18410c);
      if (blam.length == 2) {
        return _0x265461("Olá Adm - Não contêm Membros comum no Grupo: " + _0x50bdae + ", apenas - [ ADMINISTRADORES ]");
      }
      _0x28a7a9(blad, _0x4fb242, true);
    }
    _0x133894()["catch"](_0x2f8882 => {
      console.log(_0x2f8882);
      return _0x265461("Erro ao marcar os membros");
    });
    return true;
  }
}, {
  'name': "marcar2",
  'aliases': [],
  'category': "admin",
  'description': "Marca todos os membros do grupo com formato alternativo",
  'longDescription': "Cria uma lista com todos os membros do grupo com um formato de menção alternativo.",
  'usage': "marcar2 [mensagem opcional]",
  'example': "marcar2 Atenção todos!",
  'menu': "admin",
  'menuSection': "Comunicação",
  'permissions': _0x380b53,
  'requirements': {},
  'execute': async ({
    conn: _0x441a4a,
    info: _0x53e166,
    from: _0xd4441,
    body: _0x20315f,
    args: _0x4ebb9a,
    prefix: _0x111d1a,
    isGroup: _0x5e3bfc,
    isGroupAdmins: _0x50d154,
    groupMembers: _0x21d44b,
    mentions: _0x5c5ba6,
    reply: _0x40dfed,
    Res_SoGrupo: _0x2449c7,
    Res_SoAdm: _0x4c605f
  }) => {
    try {
      if (!_0x5e3bfc) {
        return _0x40dfed(_0x2449c7);
      }
      if (!_0x50d154) {
        return _0x40dfed(_0x4c605f);
      }
      if (_0x4ebb9a.join(" ").includes('' + _0x111d1a)) {
        return _0x40dfed("Não pode utilizar comandos nesse comando");
      }
      members_id = [];
      teks = _0x4ebb9a.length > 1 ? _0x20315f.slice(8).trim() : '';
      teks += "\n\n";
      for (let _0x3cf0ff of _0x21d44b) {
        teks += "╠➥ @" + _0x3cf0ff.id.split('@')[0] + "\n";
        members_id.push(_0x3cf0ff.id);
      }
      _0x5c5ba6(teks, members_id, true);
      return true;
    } catch {
      const _0x3d5655 = {
        success: false,
        message: "ERROR!!"
      };
      return _0x3d5655;
    }
  }
}, {
  'name': "marcarwa",
  'aliases': [],
  'category': "admin",
  'description': "Lista os membros com link direto para WhatsApp",
  'longDescription': "Cria uma lista de todos os membros do grupo com links diretos para iniciar conversas no WhatsApp.",
  'usage': "marcarwa [mensagem opcional]",
  'example': "marcarwa Grupo de suporte técnico",
  'menu': "admin",
  'menuSection': "Comunicação",
  'permissions': _0xe9be0d,
  'requirements': {},
  'execute': async ({
    conn: _0x3c7174,
    info: _0x33b1be,
    from: _0x52845d,
    body: _0x274773,
    args: _0x2fb568,
    prefix: _0x798c6a,
    isGroup: _0x4d78be,
    isGroupAdmins: _0x406052,
    groupMembers: _0x1deca2,
    reply: _0x301eab,
    Res_SoGrupo: _0x33afe3,
    Res_SoAdm: _0x184ad3
  }) => {
    try {
      if (!_0x4d78be) {
        return _0x301eab(_0x33afe3);
      }
      if (!_0x406052) {
        return _0x301eab(_0x184ad3);
      }
      if (_0x2fb568.join(" ").includes('' + _0x798c6a)) {
        return _0x301eab("Não pode utilizar comandos nesse comando");
      }
      members_id = [];
      teks = _0x2fb568.length > 1 ? _0x274773.slice(10).trim() : '';
      teks += "\n\n";
      for (let _0x7dc28c of _0x1deca2) {
        teks += "╠➥ https://wa.me/" + _0x7dc28c.id.split('@')[0] + "\n";
        members_id.push(_0x7dc28c.id);
      }
      const _0x3f0b43 = {
        text: teks
      };
      const _0x250501 = {
        quoted: _0x33b1be
      };
      _0x3c7174.sendMessage(_0x52845d, _0x3f0b43, _0x250501);
      return true;
    } catch {
      const _0x3bcb57 = {
        success: false,
        message: "ERROR!!"
      };
      return _0x3bcb57;
    }
  }
}, {
  'name': "nomegp",
  'aliases': [],
  'category': "admin",
  'description': "Altera o nome do grupo",
  'longDescription': "Permite que administradores alterem o nome do grupo para um novo nome especificado.",
  'usage': "nomegp [novo nome]",
  'example': "nomegp Grupo de Estudos 2023",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x9084f0,
  'requirements': _0x200a40,
  'execute': async ({
    conn: _0x5b05d9,
    info: _0x816912,
    from: _0x3383ec,
    args: _0x5c2164,
    Os_Returns: _0xb26718,
    reply: _0xb0a47
  }) => {
    if (_0xb26718(true, true, true)["true"]) {
      return _0xb0a47(_0xb26718(true, true, true).txt);
    }
    blat = _0x5c2164.join(" ");
    _0x5b05d9.groupUpdateSubject(_0x3383ec, '' + blat);
    const _0x1a5aed = {
      text: "Sucesso, alterou o nome do grupo"
    };
    const _0x4fd67d = {
      quoted: _0x816912
    };
    _0x5b05d9.sendMessage(_0x3383ec, _0x1a5aed, _0x4fd67d);
    return true;
  }
}, {
  'name': "descgp",
  'aliases': ["descriçãogp"],
  'category': "admin",
  'description': "Altera a descrição do grupo",
  'longDescription': "Permite que administradores alterem a descrição do grupo para um novo texto especificado.",
  'usage': "descgp [nova descrição]",
  'example': "descgp Grupo dedicado a compartilhar conhecimentos",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x7047f2,
  'requirements': _0xb70597,
  'execute': async ({
    conn: _0x4a65d5,
    info: _0x3c8626,
    from: _0x3e42c6,
    args: _0x5e3a16,
    Os_Returns: _0x22a26c,
    reply: _0x2aa638
  }) => {
    if (_0x22a26c(true, true, true)["true"]) {
      return _0x2aa638(_0x22a26c(true, true, true).txt);
    }
    blabla = _0x5e3a16.join(" ");
    _0x4a65d5.groupUpdateDescription(_0x3e42c6, '' + blabla);
    const _0x469f72 = {
      text: "Sucesso, alterou a descrição do grupo"
    };
    const _0x3cc454 = {
      quoted: _0x3c8626
    };
    _0x4a65d5.sendMessage(_0x3e42c6, _0x469f72, _0x3cc454);
    return true;
  }
}, {
  'name': "linkgp",
  'aliases': [],
  'category': "admin",
  'description': "Mostra o link de convite do grupo",
  'longDescription': "Exibe o link de convite do grupo atual para que possa ser compartilhado com outros usuários.",
  'usage': "linkgp",
  'example': "linkgp",
  'menu': "admin",
  'menuSection': "Grupo",
  'permissions': _0x57d9f9,
  'requirements': {},
  'execute': async ({
    conn: _0xc8209b,
    info: _0x19fbe4,
    from: _0x1bc02b,
    groupName: _0x163be9,
    isGroup: _0x508c56,
    isGroupAdmins: _0x2a45c0,
    isBotGroupAdmins: _0x5382ca,
    SoDono: _0x26d2be,
    q: _0x5c93e6,
    reply: _0x2689cd,
    Res_SoAdm: _0x3b3067,
    Res_SoGrupo: _0x33e679,
    Res_BotADM: _0x148b5f
  }) => {
    if (_0x508c56) {
      try {
        ppurl = await _0xc8209b.profilePictureUrl(_0x1bc02b, "image");
      } catch {
        ppurl = "https://i.ibb.co/6XGQd5g/6ca032835ed7a16748b6f.jpg";
      }
      linkgp = await _0xc8209b.groupInviteCode(_0x1bc02b);
      const _0x215edd = {
        quoted: _0x19fbe4
      };
      _0xc8209b.sendMessage(_0x1bc02b, {
        'text': "https://chat.whatsapp.com/" + linkgp
      }, _0x215edd);
      return true;
    } else {
      if (!_0x508c56 && _0x26d2be) {
        linkgc = await _0xc8209b.groupInviteCode(_0x5c93e6.trim());
        _0x2689cd("https://chat.whatsapp.com/" + linkgc);
        return true;
      }
    }
  }
}, {
  'name': "recrutar",
  'aliases': [],
  'category': "admin",
  'description': "Envia convite do grupo para um usuário",
  'longDescription': "Envia o link de convite do grupo diretamente para um usuário específico via mensagem privada.",
  'usage': "recrutar número",
  'example': "recrutar 5511999999999",
  'menu': "admin",
  'menuSection': "Grupo",
  'permissions': _0x2df042,
  'requirements': _0x8dd19a,
  'execute': async ({
    conn: _0x58345a,
    from: _0xeb900b,
    q: _0x21f253,
    SNET: _0x463d37,
    Os_Returns: _0x1795d1,
    dataGp: _0x4a4baa,
    getTemaMenu: _0x2125e1,
    reply: _0x3a096d
  }) => {
    if (_0x1795d1(true, true, true)["true"]) {
      return _0x3a096d(_0x1795d1(true, true, true).txt);
    }
    rcrt = _0x21f253.replace(new RegExp("[()+-/ +/]", 'gi'), '') + _0x463d37;
    linkgc = await _0x58345a.groupInviteCode(_0xeb900b);
    const _0x2aa52b = _0x2125e1(_0x4a4baa);
    const _0x4ff965 = {
      url: _0x2aa52b.menu.url
    };
    _0x58345a.sendMessage(rcrt, {
      'image': _0x4ff965,
      'caption': "Clique no símbolo a cima da imagem para entrar no grupo...",
      'contextInfo': {
        'externalAdReply': {
          'title': "- Clique aqui para participar do grupo",
          'body': '',
          'reviewType': "PHOTO",
          'thumbnailUrl': _0x2aa52b.menu.url,
          'sourceUrl': "https://chat.whatsapp.com/" + linkgc,
          'mediaType': 0x2
        }
      }
    });
    _0x3a096d("Convite de recrutamento do usuário, foi enviado para o privado dele com sucesso...");
    return true;
  }
}, {
  'name': "anotar",
  'aliases': [],
  'category': "admin",
  'description': "Cria uma anotação no grupo",
  'longDescription': "Permite que administradores criem anotações no grupo que podem ser consultadas posteriormente por qualquer membro.",
  'usage': "anotar titulo|texto",
  'example': "anotar regras|Não enviar links, respeitar os membros...",
  'menu': "admin",
  'menuSection': "Utilidades",
  'permissions': _0x2a3480,
  'requirements': _0x33f2ab,
  'execute': async ({
    q: _0x132039,
    prefix: _0x5b3d7e,
    Os_Returns: _0x203ab7,
    anotar: _0x4f1425,
    fs: _0x123ff7,
    reply: _0x139b0b,
    path: _0x214f17
  }) => {
    if (_0x203ab7(true, true, true)["true"]) {
      return _0x139b0b(_0x203ab7(true, true, true).txt);
    }
    var [_0x29c215, _0x1956d3] = _0x132039.trim().split('|');
    if (!_0x29c215 || !_0x1956d3 || !_0x132039.trim().includes('|')) {
      return _0x139b0b("Digite o título da anotação e o texto que deseja anotar..\nExemplo: " + _0x5b3d7e + "anotar cachorro|Cachorros são bom pra comer na Venezuela...");
    }
    if (JSON.stringify(_0x4f1425).includes(from)) {
      var _0x271f28 = _0x4f1425.map(_0x1b7456 => _0x1b7456.grupo).indexOf(from);
      if (JSON.stringify(_0x4f1425[_0x271f28].puxar).includes(_0x29c215)) {
        var _0x167b54 = _0x4f1425[_0x271f28].puxar.map(_0x30ab6b => _0x30ab6b.nota).indexOf(_0x29c215);
        if (_0x4f1425[_0x271f28].puxar[_0x167b54].nota == _0x29c215) {
          return _0x139b0b("Esta anotação já está inclusa, utilize outro título.. Ou você pode tirar com\n" + _0x5b3d7e + "tirar_nota " + _0x29c215);
        }
      }
    }
    if (!JSON.stringify(_0x4f1425).includes(from)) {
      const _0x3d0554 = {
        nota: _0x29c215,
        anotacao: _0x1956d3
      };
      const _0x289044 = {
        grupo: from,
        puxar: [_0x3d0554]
      };
      _0x4f1425.push(_0x289044);
      const _0x31c454 = _0x214f17.join(__dirname, "../../dados/org/json/anotar.json");
      _0x123ff7.writeFileSync(_0x31c454, JSON.stringify(_0x4f1425));
      _0x139b0b("Anotação registrada com sucesso...");
    } else {
      const _0x23c13c = {
        nota: _0x29c215,
        anotacao: _0x1956d3
      };
      _0x4f1425[_0x271f28].puxar.push(_0x23c13c);
      _0x123ff7.writeFileSync(caminhan, JSON.stringify(_0x4f1425));
      _0x139b0b("Anotação registrada com sucesso...");
    }
    return true;
  }
}, {
  'name': "tirar_nota",
  'aliases': ["rmnota"],
  'category': "admin",
  'description': "Remove uma anotação do grupo",
  'longDescription': "Permite que administradores removam uma anotação previamente criada no grupo.",
  'usage': "tirar_nota [título]",
  'example': "tirar_nota regras",
  'menu': "admin",
  'menuSection': "Utilidades",
  'permissions': _0x162266,
  'requirements': _0x59aa87,
  'execute': async ({
    q: _0x36ddba,
    Os_Returns: _0x292d01,
    anotar: _0x4ee6eb,
    fs: _0x1d571e,
    reply: _0x26877f,
    path: _0x402e77
  }) => {
    if (_0x292d01(true, true, true)["true"]) {
      return _0x26877f(_0x292d01(true, true, true).txt);
    }
    if (!_0x36ddba.trim()) {
      return _0x26877f("Digite qual anotação deseja tirar pelo título..");
    }
    if (JSON.stringify(_0x4ee6eb).includes(from)) {
      var _0x100d93 = _0x4ee6eb.map(_0x213a46 => _0x213a46.grupo).indexOf(from);
      if (JSON.stringify(_0x4ee6eb[_0x100d93].puxar).includes(_0x36ddba)) {
        var _0x4711fa = _0x4ee6eb[_0x100d93].puxar.map(_0x147c25 => _0x147c25.nota).indexOf(_0x36ddba);
      }
    }
    if (0 > _0x4ee6eb[_0x100d93].puxar.map(_0x2fdc7a => _0x2fdc7a.nota).indexOf(_0x36ddba)) {
      return _0x26877f("Esta nota não está inclusa, verifique com atenção...");
    }
    const _0x11e937 = _0x402e77.join(__dirname, "../../dados/org/json/anotar.json");
    _0x4ee6eb[_0x100d93].puxar.splice(_0x4711fa, 1);
    _0x1d571e.writeFileSync(_0x11e937, JSON.stringify(_0x4ee6eb));
    _0x26877f("Anotação " + _0x36ddba + " tirada com sucesso...");
    return true;
  }
}, {
  'name': "rv-forca",
  'aliases': [],
  'category': "jogos",
  'description': "Reinicia o jogo da forca",
  'longDescription': "Reinicia o jogo da forca, permitindo começar uma nova partida.",
  'usage': "rv-forca",
  'example': "rv-forca",
  'menu': "jogos",
  'menuSection': "Jogos",
  'permissions': _0x4ff9d5,
  'requirements': {},
  'execute': async ({
    dataGp: _0x169395,
    prefix: _0x3b6c32,
    Os_Returns: _0x5a9770,
    rv_forca: _0x210238,
    reply: _0x1a77e9
  }) => {
    if (_0x169395[0].forca_inc == false) {
      return _0x1a77e9("O jogo não foi iniciado.\nDigite " + _0x3b6c32 + "iniciar_forca");
    }
    _0x210238();
    _0x1a77e9("Forca resetada com sucesso...");
    return true;
  }
}, {
  'name': "listlinks",
  'aliases': ["links", "listlink"],
  'category': "dono",
  'description': "Lista os links coletados pelo bot",
  'longDescription': "Exibe a lista de todos os links que foram coletados pelo sistema de recolher links do bot.",
  'usage': "listlinks",
  'example': "listlinks",
  'menu': "dono",
  'menuSection': "Links",
  'permissions': _0x288256,
  'requirements': {},
  'execute': async ({
    SoDono: _0x481bf2,
    recolherLNK: _0x38afde,
    reply: _0x4fe85e,
    Res_SoDono: _0x36ab33
  }) => {
    try {
      if (!_0x481bf2) {
        return _0x4fe85e(_0x36ab33);
      }
      LNK = "_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-\n\n";
      for (i = 0; i < _0x38afde.length; i++) {
        LNK += "Link - " + (i + 1) + " _- " + _0x38afde[i].Link + "\n\n";
      }
      _0x4fe85e(LNK);
      return true;
    } catch (_0x42e8bc) {
      const _0x6b0634 = {
        success: false,
        message: "Erro"
      };
      return _0x6b0634;
    }
  }
}, {
  'name': "recolherlink",
  'aliases': [],
  'category': "dono",
  'description': "Ativa/desativa a coleta global de links",
  'longDescription': "Ativa ou desativa o sistema que recolhe automaticamente links compartilhados em qualquer conversa.",
  'usage': "recolherlink",
  'example': "recolherlink",
  'menu': "dono",
  'menuSection': "Links",
  'permissions': _0xdb84a2,
  'requirements': {},
  'execute': async ({
    prefix: _0x553c3f,
    SoDono: _0x496ef7,
    nescessario: _0x563b2e,
    setNes: _0xb2a85a,
    reply: _0x4b5df5,
    Res_SoDono: _0x44cb26
  }) => {
    if (!_0x496ef7) {
      return _0x4b5df5(_0x44cb26);
    }
    _0x563b2e.isRecolherLink = !_0x563b2e.isRecolherLink;
    _0xb2a85a(_0x563b2e);
    _0x4b5df5(_0x563b2e.isRecolherLink ? "Sistema de recolher links e armazenar em " + _0x553c3f + "listlinks foi ativado, quiser limpar os link da lista, use " + _0x553c3f + "zerarlinks" : "Sistema desativado.");
    return true;
  }
}, {
  'name': "recolherlinkgp",
  'aliases': [],
  'category': "dono",
  'description': "Ativa/desativa a coleta de links no grupo atual",
  'longDescription': "Ativa ou desativa o sistema que recolhe automaticamente links compartilhados no grupo atual.",
  'usage': "recolherlinkgp",
  'example': "recolherlinkgp",
  'menu': "dono",
  'menuSection': "Links",
  'permissions': _0x2b1b4d,
  'requirements': {},
  'execute': async ({
    prefix: _0x398655,
    SoDono: _0x24f6dd,
    dataGp: _0x573d6b,
    setGp: _0x36128e,
    reply: _0x361c1c,
    Res_SoDono: _0x48256d
  }) => {
    if (!_0x24f6dd) {
      return _0x361c1c(_0x48256d);
    }
    _0x573d6b[0].recolherlinkgp = !_0x573d6b[0].recolherlinkgp;
    isRecolherlinksgp = !_0x573d6b[0].recolherlinkgp;
    _0x36128e(_0x573d6b);
    _0x361c1c(_0x573d6b[0]?.["recolherlinkgp"] ? "Sistema de recolher links por grupo e armazenar em " + _0x398655 + "listlinks foi ativado, quiser limpar os link da lista, use " + _0x398655 + "zerarlinks" : "Sistema desativado.");
    return true;
  }
}, {
  'name': "zerarlinks",
  'aliases': ["zerarlink"],
  'category': "dono",
  'description': "Limpa a lista de links coletados",
  'longDescription': "Remove todos os links da lista de links coletados pelo sistema de recolher links.",
  'usage': "zerarlinks",
  'example': "zerarlinks",
  'menu': "dono",
  'menuSection': "Links",
  'permissions': _0xecaba9,
  'requirements': {},
  'execute': async ({
    SoDono: _0x5b0add,
    recolherLNK: _0xd42a7d,
    fs: _0x27b16d,
    reply: _0x284cb3,
    Res_SoDono: _0x381d5f,
    path: _0x5350cf
  }) => {
    if (!_0x5b0add) {
      return _0x284cb3(_0x381d5f);
    }
    const _0x3f9e36 = _0x5350cf.join(__dirname, "./recolherLNK.json");
    _0xd42a7d.splice([]);
    _0x27b16d.writeFileSync(_0x3f9e36, JSON.stringify(_0xd42a7d, null, 2));
    _0x284cb3("Links do listlinks foi zerado com sucesso...");
    return true;
  }
}, {
  'name': ["figemoji", "figroblox", "figmeme", "figanime", "figcoreana", "figraiva", "figengracada", "figdesenho"],
  'aliases': [],
  'category': "sticker",
  'description': "Envia figurinhas aleatórias da categoria especificada",
  'longDescription': "Envia figurinhas aleatórias numeradas de 1 a 99 da categoria escolhida. Quantidade padrão é 1.",
  'usage': "figemoji [quantidade] ou figemoji lista",
  'example': "figemoji\nfigemoji 3\nfigemoji lista",
  'menu': "stickers",
  'menuSection': "Figurinhas",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x2fdd59,
    from: _0x34fbe2,
    q: _0x27eca9,
    args: _0x11d3d1,
    command: _0x1d9fc2,
    sleep: _0x3cbec3,
    reply: _0x475cd1
  }) => {
    const _0x326fba = {
      name: "figemoji",
      count: 0x66
    };
    const _0x5a9870 = {
      name: "figroblox",
      count: 0x15
    };
    const _0x3c678f = {
      name: "figmeme",
      count: 0x82
    };
    const _0x151758 = {
      name: "figanime",
      count: 0xb1
    };
    const _0x31d95f = {
      name: "figcoreana",
      count: 0x2b
    };
    const _0x4e8ea6 = {
      name: "figraiva",
      count: 0x1d
    };
    const _0x384e07 = {
      name: "figengracada",
      count: 0x19
    };
    const _0x3d3b44 = {
      name: "figdesenho",
      count: 0xba
    };
    const _0xdcdedb = {
      name: "fig"
    };
    _0xdcdedb.count = 0x66;
    const _0x5e22ea = {
      figemoji: _0x326fba,
      figroblox: _0x5a9870,
      figmeme: _0x3c678f,
      figanime: _0x151758,
      figcoreana: _0x31d95f,
      figraiva: _0x4e8ea6,
      figengracada: _0x384e07
    };
    _0x5e22ea.figdesenho = _0x3d3b44;
    _0x5e22ea.fig = _0xdcdedb;
    if (!_0x27eca9) {
      _0x27eca9 = '1';
    }
    if (_0x27eca9.toLowerCase() === "lista") {
      let _0x3243b9 = "*📁 Categorias disponíveis:*\n\n";
      Object.entries(_0x5e22ea).forEach(([_0x51cb24, _0x48550f]) => {
        _0x3243b9 += "• *" + _0x51cb24 + "* - " + _0x48550f.count + " figurinhas\n";
      });
      _0x3243b9 += "\n*Uso:* " + _0x1d9fc2 + " [quantidade]\n*Exemplos:*\n• " + _0x1d9fc2 + " (envia 1)\n• " + _0x1d9fc2 + " 3 (envia 3)\n• " + _0x1d9fc2 + " lista (mostra categorias)";
      return _0x475cd1(_0x3243b9);
    }
    const _0x51ad0c = parseInt(_0x27eca9.trim());
    if (isNaN(_0x51ad0c) || _0x51ad0c < 1) {
      return _0x475cd1("❌ Digite um número válido de figurinhas (mínimo 1).");
    }
    if (_0x51ad0c > 10) {
      return _0x475cd1("❌ Máximo de 10 figurinhas por vez.");
    }
    const _0x313344 = _0x5e22ea[_0x1d9fc2];
    if (!_0x313344) {
      return _0x475cd1("❌ Categoria não encontrada. Use 'lista' para ver categorias disponíveis.");
    }
    const _0x5cf1b6 = _0x313344.name;
    const _0x1eff5b = _0x313344.count;
    async function _0x45f62b() {
      try {
        const _0xc1571c = Math.floor(Math.random() * _0x1eff5b) + 1;
        const _0x1cae05 = "https://raw.githubusercontent.com/badDevelopper/figus2/refs/heads/main/" + _0x5cf1b6 + '/' + _0xc1571c + ".webp";
        const _0x3f9a91 = {
          url: _0x1cae05
        };
        const _0xa292e3 = {
          sticker: _0x3f9a91
        };
        await _0x2fdd59.sendMessage(_0x34fbe2, _0xa292e3);
        return true;
      } catch (_0xe7b495) {
        return false;
      }
    }
    try {
      if (_0x51ad0c > 1) {
        _0x475cd1("🎨 Enviando " + _0x51ad0c + " figurinha(s) da categoria *" + _0x5cf1b6 + "*...");
      }
      let _0x2bf440 = 0;
      for (let _0x2179b7 = 0; _0x2179b7 < _0x51ad0c; _0x2179b7++) {
        if (_0x2179b7 > 0) {
          await _0x3cbec3(1500);
        }
        const _0x31f573 = await _0x45f62b();
        if (_0x31f573) {
          _0x2bf440++;
        }
      }
      if (_0x2bf440 === 0) {
        return _0x475cd1("❌ Não foi possível enviar nenhuma figurinha. Tente novamente mais tarde.");
      } else {
        if (_0x2bf440 < _0x51ad0c && _0x51ad0c > 1) {
          return _0x475cd1("⚠️ Enviadas " + _0x2bf440 + " de " + _0x51ad0c + " figurinhas solicitadas.");
        }
      }
    } catch (_0x158041) {
      return _0x475cd1("❌ Erro interno. Tente novamente mais tarde.");
    }
    return true;
  }
}, {
  'name': "figurinhas",
  'aliases': [],
  'category': "sticker",
  'description': "Envia figurinhas aleatórias do repositório configurado",
  'longDescription': "Busca e envia figurinhas aleatórias do repositório GitHub configurado nas definições do bot.",
  'usage': "figurinhas [quantidade]",
  'example': "figurinhas 3",
  'menu': "stickers",
  'menuSection': "Figurinhas",
  'permissions': {},
  'requirements': _0x2181d0,
  'execute': async ({
    conn: _0x440f69,
    from: _0x6a41c5,
    q: _0xae2517,
    args: _0x35089c,
    nescessario: _0x3411a1,
    sleep: _0x3007d1,
    reply: _0x2337f4
  }) => {
    if (!_0xae2517) {
      return _0x2337f4("Insira a qnd de figu que deja que eu envie");
    }
    if (!Number(_0x35089c[0]) || Number(_0xae2517.trim()) > 5) {
      return _0x2337f4("Digite a quantidade de figurinhas que deseja que eu envie.. não pode mais de 5..");
    }
    const _0x478deb = _0x3411a1.donodorepo;
    const _0x55011a = _0x3411a1.pastadorepo;
    const _0x5f2f2e = _0x3411a1.pastacomfigu;
    async function _0x2ac96e() {
      fetch("https://api.github.com/repos/" + _0x478deb + '/' + _0x55011a + "/contents/" + _0x5f2f2e).then(_0x2f8cc0 => _0x2f8cc0.json()).then(_0x36614e => {
        const _0x575aba = Math.floor(Math.random() * _0x36614e.length);
        const _0x1926cd = {
          url: "https://raw.githubusercontent.com/" + _0x478deb + '/' + _0x55011a + "/main/" + _0x5f2f2e + '/' + _0x36614e[_0x575aba].name
        };
        const _0x281d91 = {
          sticker: _0x1926cd
        };
        _0x440f69.sendMessage(_0x6a41c5, _0x281d91);
      });
    }
    for (i = 0; i < _0xae2517; i++) {
      await _0x3007d1(2000);
      _0x2ac96e();
    }
    return true;
  }
}, {
  'name': "limpar_mortos-cnt",
  'aliases': [],
  'category': "dono",
  'description': "Remove usuários que saíram do grupo do contador",
  'longDescription': "Remove do contador de mensagens os dados de usuários que foram removidos ou saíram do grupo.",
  'usage': "limpar_mortos-cnt",
  'example': "limpar_mortos-cnt",
  'menu': "dono",
  'menuSection': "Gerenciamento",
  'permissions': _0x4c1b5d,
  'requirements': {},
  'execute': async ({
    from: _0x2f910c,
    groupMembers: _0x4f5bf5,
    SoDono: _0x27a6d7,
    isGroup: _0x53c5d1,
    countMessage: _0x9d8e27,
    removerDoContador: _0x21e608,
    reply: _0xaebc7a,
    Res_SoDono: _0x50715b
  }) => {
    if (!_0x27a6d7) {
      return _0xaebc7a(_0x50715b);
    }
    if (!_0x53c5d1) {
      return _0xaebc7a(_0x50715b);
    }
    try {
      let _0x3f161a = _0x9d8e27.findIndex(_0x33cbc4 => _0x33cbc4.groupId === _0x2f910c);
      if (_0x3f161a === -1) {
        return _0xaebc7a("*Grupo não encontrado no contador de mensagens*");
      }
      let _0x525d40 = _0x9d8e27[_0x3f161a].numbers;
      let _0x3b0902 = _0x4f5bf5.map(_0x24e7d9 => _0x24e7d9.id);
      let _0x4c0eb2 = [];
      for (let _0x370c05 of _0x525d40) {
        if (!_0x3b0902.includes(_0x370c05.id)) {
          _0x4c0eb2.push(_0x370c05);
        }
      }
      for (let _0x44b263 of _0x4c0eb2) {
        await _0x21e608(_0x2f910c, _0x44b263.id);
      }
      _0xaebc7a("Membros que foram removidos ou saíram do grupo foram retirados do contador de mensagens.");
      return true;
    } catch (_0x3b161b) {
      console.log(_0x3b161b);
      const _0x97ecfd = {
        success: false,
        message: "Ocorreu um erro ao limpar os dados."
      };
      return _0x97ecfd;
    }
  }
}, {
  'name': "tirar_docnt",
  'aliases': [],
  'category': "dono",
  'description': "Remove um usuário específico do contador",
  'longDescription': "Remove um usuário específico do contador de mensagens do grupo.",
  'usage': "tirar_docnt @usuário",
  'example': "tirar_docnt @membro",
  'menu': "dono",
  'menuSection': "Gerenciamento",
  'permissions': _0xf0d9b7,
  'requirements': _0x2d1f47,
  'execute': async ({
    from: _0x152687,
    menc_os2: _0x11ad11,
    SoDono: _0x118226,
    isGroup: _0x857127,
    removerDoContador: _0x278a2b,
    reply: _0xeeea1b,
    Res_SoDono: _0x3197d1
  }) => {
    if (!_0x118226) {
      return _0xeeea1b(_0x3197d1);
    }
    if (!_0x857127) {
      return _0xeeea1b(_0x3197d1);
    }
    await _0x278a2b(_0x152687, _0x11ad11);
    _0xeeea1b("Usuário tirado do contador de mensagens com sucesso...");
    return true;
  }
}, {
  'name': "anotacao",
  'aliases': ["anotacoes", "nota", "notas"],
  'category': "grupo",
  'description': "Mostra as anotações do grupo",
  'longDescription': "Exibe uma anotação específica ou lista todas as anotações disponíveis no grupo.",
  'usage': "anotacao [título]",
  'example': "anotacao regras",
  'menu': "grupo",
  'menuSection': "Informações",
  'permissions': _0x44e261,
  'requirements': {},
  'execute': async ({
    from: _0x1f9dab,
    q: _0x3fc5a5,
    command: _0x38c6e9,
    isGroup: _0x2565b3,
    anotar: _0x11ed27,
    mention: _0x5b9260,
    reply: _0xe39351,
    Res_SoGrupo: _0x496273
  }) => {
    if (!_0x2565b3) {
      return _0xe39351(_0x496273);
    }
    if (_0x38c6e9 == "anotacao" || _0x38c6e9 == "nota") {
      if (!_0x3fc5a5.trim()) {
        return _0xe39351("Digite o título da anotação que deseja puxar..");
      }
      if (!JSON.stringify(_0x11ed27).includes(_0x1f9dab)) {
        return _0xe39351("Este grupo não tem nenhuma anotação...");
      }
      var _0x2a1848 = _0x11ed27.map(_0x135beb => _0x135beb.grupo).indexOf(_0x1f9dab);
      if (!JSON.stringify(_0x11ed27[_0x2a1848].puxar).includes(_0x3fc5a5)) {
        return _0xe39351("Não contém nenhuma anotação com este título.");
      }
      var _0x3aec3a = _0x11ed27[_0x2a1848].puxar.map(_0xe2b721 => _0xe2b721.nota).indexOf(_0x3fc5a5.trim());
      _0x5b9260("〈 " + _0x11ed27[_0x2a1848].puxar[_0x3aec3a].anotacao + " 〉");
    } else {
      var _0x2a1848 = _0x11ed27.map(_0x5eade4 => _0x5eade4.grupo).indexOf(_0x1f9dab);
      if (_0x2a1848 < 0) {
        return _0xe39351("Este grupo não tem nenhuma anotação...");
      }
      var _0x2a1848 = _0x11ed27.map(_0x56fa12 => _0x56fa12.grupo).indexOf(_0x1f9dab);
      var _0x41b7d0 = _0x11ed27[_0x2a1848]?.["puxar"];
      txtin = "──────────────────\n\n";
      for (i = 0; i < _0x41b7d0?.["length"]; i++) {
        txtin += "↝ Anotação: ⟮ " + _0x11ed27[_0x2a1848]?.["puxar"][i]?.["nota"] + " ⟯ - 〈 " + _0x11ed27[_0x2a1848]?.["puxar"][i]?.["anotacao"] + " 〉\n\n";
      }
      txtin += "──────────────────\n\n";
      _0x5b9260(txtin);
    }
    return true;
  }
}, {
  'name': "download-link",
  'aliases': [],
  'category': "downloads",
  'description': "Baixa mídia a partir de um link direto",
  'longDescription': "Baixa e envia um arquivo de mídia (vídeo ou imagem) a partir de um link direto.",
  'usage': "download-link [url]",
  'example': "download-link https://exemplo.com/video.mp4",
  'menu': "downloads",
  'menuSection': "Mídia",
  'permissions': {},
  'requirements': _0x4184b3,
  'execute': async ({
    conn: _0x81873,
    info: _0x16106f,
    from: _0x26ed48,
    q: _0x51075c,
    reply: _0x28864c
  }) => {
    if (_0x51075c.includes("video") || _0x51075c.includes("mp4")) {
      const _0x3a2765 = {
        url: _0x51075c
      };
      const _0x257286 = {
        video: _0x3a2765,
        mimetype: "video/mp4"
      };
      const _0x5cf058 = {
        quoted: _0x16106f
      };
      _0x81873.sendMessage(_0x26ed48, _0x257286, _0x5cf058)["catch"](_0x1c86e7 => {
        _0x28864c("Erro, visualize se este link é válido...");
      });
    } else {
      if (_0x51075c.includes("webp") || _0x51075c.includes("jpg")) {
        const _0x553438 = {
          url: _0x51075c
        };
        const _0x3051fb = {
          image: _0x553438
        };
        const _0x3d62dc = {
          quoted: _0x16106f
        };
        _0x81873.sendMessage(_0x26ed48, _0x3051fb, _0x3d62dc)["catch"](_0xa00182 => {
          _0x28864c("Erro, visualize se este link é válido...");
        });
      }
    }
    return true;
  }
}, {
  'name': "ativarfuncoesdono",
  'aliases': ["ativacoes_dono"],
  'category': "dono",
  'description': "Mostra as funções disponíveis para o dono",
  'longDescription': "Exibe uma lista completa de todas as funções que o dono pode ativar ou desativar no bot, com seu status atual.",
  'usage': "ativarfuncoesdono",
  'example': "ativarfuncoesdono",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x1759d4,
  'requirements': {},
  'execute': async ({
    prefix: _0x33685d,
    SoDono: _0x8db698,
    nescessario: _0x5daf42,
    dataGp: _0x452f9c,
    reply: _0x45e09c,
    Res_SoDono: _0xcb1f10
  }) => {
    if (!_0x8db698) {
      return _0x45e09c(_0xcb1f10);
    }
    _0x45e09c("\n_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_\n\nQuiser saber as informações de como usar, e comandos que tiver junto com o comando que deseja, use \"" + _0x33685d + "info antipv\" o antipv é só exemplo, serve para os outros também...\n\n- Comando de Ativar / Desativar o bloqueador de quando ligarem pro bot, so\ndigitar o comando ligar, e denovo pra desligar: \n" + _0x33685d + "antiligar\nStatus: " + (_0x5daf42?.["anticall"] ? '✓' : '✕') + "\n\n- Comando para ativar ou desativar o visualizador de mensagem, visualizar\nmensagem de tudo, so digitar o comando pra ligar, e o comando novamente pra\ndesligar: \n" + _0x33685d + "visualizarmsg\nStatus: " + (_0x5daf42?.["visualizarmsg"] ? '✓' : '✕') + "\n\n- Comando de desativar o que mostra comandos dados no console, so digitar o\ncomando 1 vez para ativar, e digitar o comando novamente pra desativar:\n" + _0x33685d + "console\nStatus: " + (_0x5daf42?.["consoleoff"] ? '✓' : '✕') + "\n\n- Comando para ativar o bloqueador de quando algum usuário mande mensagem\nprivado do bot, seja bloqueado, o comando usado 1 vez, ele ativa, usado\nnovamente ele desativar:\n" + _0x33685d + "antipv\nStatus: " + (_0x5daf42?.["antipv"] ? '✓' : '✕') + "\n\n- Comando de falar que não pode mandar mensagem privado, para alterar a\nmensagem, so usar o comando " + _0x33685d + "msgantipv e coloque o que quer, para ativar\no comando é digitar ele uma vez, e digitar novamente para desativar: \n" + _0x33685d + "antipv2\nStatus: " + (_0x5daf42?.["antipv2"] ? '✓' : '✕') + "\n\n- Este terceiro antipv, ele apenas ignora qualquer coisa enviada no privado do bot, e também ignora comandos pedido.\nUse uma vez para ativar, e se quiser desativar, só usar novamente, Comando: " + _0x33685d + "antipv3\nStatus: " + (_0x5daf42?.["antipv3"] ? '✓' : '✕') + "\n\n- Comando de ativar e desativar o audio do menu:\n" + _0x33685d + "audio-menu\nStatus: " + (_0x5daf42?.["menu_audio"] ? '✓' : '✕') + "\n\n- Comando de ativar e desativar o verificado de marcação: \n" + _0x33685d + "verificado-global\nStatus: " + (_0x5daf42?.["verificado"] ? '✓' : '✕') + "\n\n- Comando de desativar o bot completamente para ninguém usar:\n" + _0x33685d + "botoff\nStatus: " + (_0x5daf42?.["botoff"] ? '✓' : '✕') + "\n\n- Comando de funcionar só comandos pra administrador:\n" + _0x33685d + "So_Adm\nStatus: " + (_0x452f9c[0]?.["soadm"] ? '✓' : '✕') + "\n\n- Comando para recolher link de grupos que o bot estiver:\n" + _0x33685d + "recolherlink\nStatus: " + (_0x5daf42?.["isRecolherLink"] ? '✓' : '✕') + "\n\n_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_\n");
    return true;
  }
}, {
  'name': "antipv",
  'aliases': ["modopv", "pvmode"],
  'category': "dono",
  'description': "Configura o sistema anti-privado do bot",
  'longDescription': "Configure como o bot deve responder a mensagens no privado, com várias opções desde ignorar até bloquear automaticamente.",
  'usage': "antipv [0-4]",
  'example': "antipv\nantipv 2",
  'menu': "dono",
  'menuSection': "Proteção",
  'permissions': _0x21e172,
  'requirements': {},
  'execute': async ({
    conn: _0x420aa1,
    from: _0x4c332d,
    sender: _0x4689ce,
    nescessario: _0x529c21,
    setNes: _0x11f386,
    createChoiceMenu: _0xf37bdc,
    reply: _0x1a76ec,
    args: _0xb55ade,
    prefix: _0x4d2b75,
    optionsBuffer: _0x43d8cc,
    getUniqueKey: _0x14045b
  }) => {
    const _0x27f9ec = {
      valor: 0x0,
      nome: "DESATIVAR",
      nomeEstado: "DESATIVADO",
      emoji: '✅',
      descricao: "O bot responderá normalmente a mensagens no privado."
    };
    const _0x1d00cb = {
      valor: 0x1,
      nome: "SÓ BLOQUEAR",
      nomeEstado: "SÓ BLOQUEIA",
      emoji: '🚫',
      descricao: "Bloqueia usuários que enviarem mensagens no privado sem aviso."
    };
    const _0x545cab = {
      valor: 0x2,
      nome: "MENSAGEM + BLOQUEAR",
      nomeEstado: "MENSAGEM + BLOQUEIA",
      emoji: '⛔',
      descricao: "Envia mensagem de aviso e depois bloqueia usuários."
    };
    const _0x144e5d = {
      valor: 0x3,
      nome: "SÓ MENSAGEM",
      nomeEstado: "SÓ MENSAGEM",
      emoji: '💬',
      descricao: "Apenas envia mensagem de aviso sem bloquear."
    };
    const _0x2a1289 = {
      valor: 0x4,
      nome: "SÓ IGNORAR",
      nomeEstado: "SÓ IGNORA",
      emoji: '🔇',
      descricao: "Ignora completamente mensagens no privado."
    };
    const _0x40a6d8 = [_0x27f9ec, _0x1d00cb, _0x545cab, _0x144e5d, _0x2a1289];
    if (typeof _0x529c21.antipvmode === "undefined") {
      if (_0x529c21.antipv) {
        _0x529c21.antipvmode = 2;
      } else {
        if (_0x529c21.antipv2) {
          _0x529c21.antipvmode = 3;
        } else {
          if (_0x529c21.antipv3) {
            _0x529c21.antipvmode = 4;
          } else {
            _0x529c21.antipvmode = 0;
          }
        }
      }
    }
    if (_0xb55ade.length > 0) {
      const _0xf9cc55 = parseInt(_0xb55ade[0]);
      if (isNaN(_0xf9cc55) || _0xf9cc55 < 0 || _0xf9cc55 > 4) {
        return _0x1a76ec("❌ Modo inválido! Use um número de 0 a 4");
      }
      _0x529c21.antipvmode = _0xf9cc55;
      _0x11f386(_0x529c21);
      const _0x3be207 = _0x40a6d8.find(_0x54e8e2 => _0x54e8e2.valor === _0xf9cc55);
      if (!_0x43d8cc[_0x14045b(_0x4c332d, _0x4689ce)]) {
        return _0x1a76ec(_0x3be207.emoji + " MODO ANTI-PV " + _0x3be207.nomeEstado + "!\n\n" + _0x3be207.descricao);
      }
      return true;
    }
    const _0x3432ac = _0x529c21.antipvmode || 0;
    let _0x5efe3c = _0x40a6d8.find(_0x25b8f7 => _0x25b8f7.valor === _0x3432ac) || _0x40a6d8[0];
    const _0x1654d4 = _0x40a6d8.filter(_0x1e11bb => _0x1e11bb.valor !== _0x3432ac);
    let _0x3e087b = "╭━⊱「 CONFIGURAÇÃO ANTI-PV 」⊰━╮\n┃\n┃ Modo atual: " + _0x5efe3c.emoji + " " + _0x5efe3c.nomeEstado + "\n┃ ➥ " + _0x5efe3c.descricao + "\n┃\n┃ Escolha um novo modo:\n┃";
    _0x1654d4.forEach((_0x454bb3, _0x4519d6) => {
      _0x3e087b += "\n┃ " + (_0x4519d6 + 1) + " - " + _0x454bb3.emoji + " " + _0x454bb3.nome;
    });
    _0x3e087b += "\n┃\n┃ 0 - Cancelar\n╰━━━⊱「 ANTI-PV 」⊰━━━╯";
    const _0x350481 = {};
    _0x1654d4.forEach((_0x56beca, _0x310d5a) => {
      const _0x399041 = {
        text: _0x56beca.emoji + " MODO ANTI-PV " + _0x56beca.nomeEstado + "!\n\n" + _0x56beca.descricao,
        command: _0x4d2b75 + "antipv " + _0x56beca.valor,
        edit: true
      };
      _0x350481['' + (_0x310d5a + 1)] = _0x399041;
    });
    const _0x5a7ad5 = {
      close: true,
      text: "✅ Configuração cancelada!",
      edit: true
    };
    _0x350481['0'] = _0x5a7ad5;
    await _0xf37bdc(_0x4c332d, _0x4689ce, _0x3e087b, _0x350481);
    return true;
  }
}, {
  'name': ["msgantipv", "msgantipv2"],
  'aliases': ["setmsgpv", "setmsgpv2", "pvmsg", "pvmsg2"],
  'category': "dono",
  'description': "Configura as mensagens do sistema anti-privado",
  'longDescription': "Define as mensagens que serão enviadas quando um usuário enviar mensagem para o bot no privado nos modos que utilizam mensagens.",
  'usage': "msgantipv [mensagem] ou msgantipv2 [mensagem]",
  'example': "msgantipv Bot não responde no privado e você será bloqueado\nmsgantipv2 Bot não responde no privado",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x2bc03f,
  'requirements': _0x177cb2,
  'execute': async ({
    command: _0x828c0d,
    q: _0x27e8e9,
    nescessario: _0x5edc5a,
    setNes: _0x1c90b0,
    reply: _0x158644
  }) => {
    const _0x5e5951 = _0x828c0d === "msgantipv2" || _0x828c0d === "setmsgpv2" || _0x828c0d === "pvmsg2";
    if (_0x5e5951) {
      _0x5edc5a.msgantipv2 = _0x27e8e9.trim();
      msgantipv2 = _0x27e8e9.trim();
      return _0x158644("✅ Mensagem do modo 3 (Só Mensagem) foi alterada para:\n\"" + _0x27e8e9.trim() + "\"");
    } else {
      _0x5edc5a.msgantipv1 = _0x27e8e9.trim();
      msgantipv1 = _0x27e8e9.trim();
      return _0x158644("✅ Mensagem do modo 2 (Mensagem + Bloqueia) foi alterada para:\n\"" + _0x27e8e9.trim() + "\"");
    }
    _0x1c90b0(_0x5edc5a);
    return true;
  }
}, {
  'name': "signo",
  'aliases': [],
  'category': "consultas",
  'description': "Mostra informações sobre um signo",
  'longDescription': "Consulta e exibe informações detalhadas sobre um signo zodiacal específico.",
  'usage': "signo [nome do signo]",
  'example': "signo virgem",
  'menu': "consultas",
  'menuSection': "Astrologia",
  'permissions': {},
  'requirements': _0x56cffe,
  'execute': async ({
    conn: _0x5ab4ad,
    from: _0x25839a,
    q: _0xf5237c,
    prefix: _0x31b043,
    command: _0xef1289,
    acessAPI: _0x3f1d7e,
    reply: _0x355f80
  }) => {
    try {
      if (!_0xf5237c.trim()) {
        return _0x355f80("Digite seu signo, exemplo: " + (_0x31b043 + _0xef1289) + " virgem");
      }
      ABC = await _0x3f1d7e.signo(_0xf5237c.trim());
      const _0x6234f0 = {
        url: ABC.img
      };
      const _0x2fd231 = {
        image: _0x6234f0,
        caption: "Signo: " + _0xf5237c + "\n\n" + ABC.title + "\n" + ABC.body
      };
      _0x5ab4ad.sendMessage(_0x25839a, _0x2fd231)["catch"](_0x31c83d => {
        return _0x355f80("Erro..");
      });
      return true;
    } catch (_0x31266f) {
      const _0x2fda18 = {
        success: false,
        message: "Erro.."
      };
      return _0x2fda18;
    }
  }
}, {
  'name': "moedas",
  'aliases': ["moeda"],
  'category': "consultas",
  'description': "Mostra cotações de moedas",
  'longDescription': "Exibe as cotações atuais de diversas moedas, criptomoedas e índices financeiros.",
  'usage': "moedas",
  'example': "moedas",
  'menu': "consultas",
  'menuSection': "Finanças",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    acessAPI: _0x281eb0,
    reply: _0x209db
  }) => {
    try {
      ABC = await _0x281eb0.moedas();
      _0x209db(ABC?.["dolar"] + "\n\n" + ABC?.["euro"] + "\n\n" + ABC?.["libra"] + "\n\n" + ABC?.["bitcoin"] + "\n\n" + ABC?.["ethereum"] + "\n\n" + ABC?.["bovespa"] + "\n\n" + ABC?.["ouro"]);
      return true;
    } catch {
      const _0x406682 = {
        success: false,
        message: "Erro, breve volta."
      };
      return _0x406682;
    }
  }
}, {
  'name': "esportenoticias",
  'aliases': ["esportenoticia", "espnoticia", "espnoticias", "noticiasesporte", "noticiaesporte", "noticiaesp", "noticiasesp", "esporte_noticias", "esporte_noticia", "esporte-noticias", "esporte-noticia"],
  'category': "consultas",
  'description': "Mostra notícias de esportes",
  'longDescription': "Busca e exibe as últimas notícias do mundo dos esportes.",
  'usage': "esportenoticias",
  'example': "esportenoticias",
  'menu': "consultas",
  'menuSection': "Notícias",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x3e3549,
    info: _0x14f923,
    from: _0x2bf895,
    acessAPI: _0x3c09ab,
    reply: _0x252a01
  }) => {
    _0x252a01("Aguarde, realizando ação..");
    try {
      ABC = await _0x3c09ab.esporte();
      AB = '';
      for (i = 1; i < ABC.length; i++) {
        AB += ABC[i].titulo + "\n\n";
      }
      const _0x12c8e0 = {
        url: ABC[0].img
      };
      const _0x4cb416 = {
        image: _0x12c8e0,
        caption: AB
      };
      const _0x53393d = {
        quoted: _0x14f923
      };
      _0x3e3549.sendMessage(_0x2bf895, _0x4cb416, _0x53393d);
      return true;
    } catch {
      const _0x5bb94c = {
        success: false,
        message: "Erro, tente novamente ou aguarde até voltar ao normal."
      };
      return _0x5bb94c;
    }
  }
}, {
  'name': "letra",
  'aliases': ["liryc", "letram", "letramusic", "letramusica", "letra_musica", "letrademusica"],
  'category': "consultas",
  'description': "Busca a letra de uma música",
  'longDescription': "Pesquisa e exibe a letra completa de uma música a partir do título informado.",
  'usage': "letra [nome da música]",
  'example': "letra Ela me traiu",
  'menu': "consultas",
  'menuSection': "Música",
  'permissions': {},
  'requirements': _0x2ca5ab,
  'execute': async ({
    q: _0x5ee8f9,
    prefix: _0x29e3bd,
    command: _0x50f6b6,
    Res_Aguarde: _0x4dc75d,
    acessAPI: _0xd4004f,
    reply: _0xc4dcf7
  }) => {
    if (!_0x5ee8f9.trim()) {
      return _0xc4dcf7("Exemplo: " + (_0x29e3bd + _0x50f6b6) + " Ela me traiu");
    }
    try {
      _0xc4dcf7(_0x4dc75d);
      const _0x15c53c = await _0xd4004f.letra_m(_0x5ee8f9.trim());
      _0xc4dcf7(" - Titulo: " + (_0x15c53c.titulo || "Erro...") + "\n\n - Compositor: " + (_0x15c53c.compositor || "Erro...") + "\n\n - Letra:\n\n" + (_0x15c53c.letra || "Erro..."));
      return true;
    } catch (_0x330b0f) {
      const _0x58c379 = {
        success: false,
        message: "Erro..."
      };
      return _0x58c379;
    }
  }
}, {
  'name': "aptoide_pesquisa",
  'aliases': [],
  'category': "downloads",
  'description': "Pesquisa aplicativos na Aptoide",
  'longDescription': "Realiza uma pesquisa de aplicativos na loja alternativa Aptoide.",
  'usage': "aptoide_pesquisa [nome do app]",
  'example': "aptoide_pesquisa WhatsApp",
  'menu': "downloads",
  'menuSection': "Apps",
  'permissions': {},
  'requirements': _0x10c314,
  'execute': async ({
    q: _0x2a4202,
    acessAPI: _0x4fa994,
    reply: _0x4f184d
  }) => {
    if (!_0x2a4202.trim()) {
      return _0x4f184d("Exemplo: WhatsApp");
    }
    try {
      abc = await _0x4fa994.aptoide_pesquisa(_0x2a4202.trim());
      _0x4f184d(abc);
      return true;
    } catch {
      const _0x3ed004 = {
        success: false,
        message: "Erro..."
      };
      return _0x3ed004;
    }
  }
}, {
  'name': "aptoide",
  'aliases': [],
  'category': "downloads",
  'description': "Baixa um aplicativo da Aptoide",
  'longDescription': "Baixa e envia um aplicativo da loja Aptoide a partir da URL fornecida.",
  'usage': "aptoide [link do app]",
  'example': "aptoide https://pt.aptoide.com/app/exemplo",
  'menu': "downloads",
  'menuSection': "Apps",
  'permissions': {},
  'requirements': _0x5eb461,
  'execute': async ({
    conn: _0x2f74f0,
    info: _0x6adda2,
    from: _0x281b9f,
    q: _0x33ff18,
    prefix: _0x524ed1,
    command: _0x13b38f,
    Res_Aguarde: _0x3e299f,
    acessAPI: _0x4a8acf,
    reply: _0x506b98
  }) => {
    if (!_0x33ff18.trim().includes("aptoide.com")) {
      return _0x506b98("Exemplo: " + (_0x524ed1 + _0x13b38f) + " link do aptoide\n\nUse o comando " + _0x524ed1 + "aptoide_pesquisa Exemplo: whatsapp, ae vai receber as url, pegue a url e use.");
    }
    _0x506b98(_0x3e299f);
    try {
      abc = await _0x4a8acf.aptoide(_0x33ff18.trim());
      const _0x421011 = {
        url: abc.link
      };
      const _0x574725 = {
        document: _0x421011,
        mimetype: "application/vnd.android.package-archive",
        fileName: abc.titulo
      };
      const _0x4f9345 = {
        quoted: _0x6adda2
      };
      _0x2f74f0.sendMessage(_0x281b9f, _0x574725, _0x4f9345);
      return true;
    } catch (_0x2cb8cb) {
      const _0x25bf95 = {
        success: false,
        message: "Erro..."
      };
      return _0x25bf95;
    }
  }
}, {
  'name': "playstore",
  'aliases': [],
  'category': "consultas",
  'description': "Pesquisa aplicativos na Play Store",
  'longDescription': "Realiza uma pesquisa de aplicativos na Google Play Store e exibe os resultados.",
  'usage': "playstore [nome do app]",
  'example': "playstore WhatsApp",
  'menu': "consultas",
  'menuSection': "Apps",
  'permissions': {},
  'requirements': _0x48cdad,
  'execute': async ({
    q: _0x437dcb,
    acessAPI: _0x41791d,
    reply: _0x17e7df
  }) => {
    try {
      if (_0x437dcb.length < 2) {
        return _0x17e7df("Cade o título do apk que deseja pesquisar?");
      }
      abc = await _0x41791d.playstore(_0x437dcb.trim());
      ABC = "Play Store pesquisa:\n\n";
      for (let _0x39a6e1 of abc.resultados) {
        ABC += " - NOME DO APK: " + _0x39a6e1.title + "\n - ID: " + _0x39a6e1.appId + "\n - URL: " + _0x39a6e1.url + "\n\n" + '-'.repeat(20) + "\n\n";
      }
      _0x17e7df(ABC);
      return true;
    } catch {
      const _0x36129c = {
        success: false,
        message: "Erro..."
      };
      return _0x36129c;
    }
  }
}, {
  'name': "logos1",
  'aliases': [],
  'category': "maker",
  'description': "Lista logos com 1 texto",
  'longDescription': "Exibe uma lista de todos os tipos de logos disponíveis que usam apenas um texto na criação.",
  'usage': "logos1 [texto]",
  'example': "logos1 Aleatory",
  'menu': "maker",
  'menuSection': "Logos",
  'permissions': {},
  'requirements': _0x3c2366,
  'execute': async ({
    q: _0x2a141c,
    prefix: _0x1fcb4c,
    reply: _0x58b06f
  }) => {
    if (!_0x2a141c.trim()) {
      return _0x58b06f("Exemplo: " + (_0x1fcb4c + command) + " Aleatory");
    }
    var _0x3b3954 = ["shadow", "metalgold", "cup", "txtborboleta", "cemiterio", "efeitoneon", "harryp", "lobometal", "neon2", "madeira", "lovemsg3", "coffecup", "coffecup2", "florwooden", "narutologo", "fire", "romantic", "smoke", "papel", "lovemsg", "lovemsg2", "fiction", "3dstone", "areia", "style", "blood", "pink", "cattxt", "neondevil", "carbon", "metalfire", "thunder", "vidro", "jokerlogo", "transformer", "demonfire", "jeans", "metalblue", "natal", "ossos", "asfalto", "break", "glitch2", "colaq", "neon3", "nuvem", "horror", "matrix", "berry", "luxury", "lava", "thunderv2", "neongreen", "neve", "neon", "neon1", "neon3d", "gelo", "neon3", "3dgold", "lapis", "toxic", "demongreen", "rainbow", "halloween", "angelwing", "hackneon", "fpsmascote", "equipemascote", "txtquadrinhos", "ffavatar", "mascotegame", "angelglx", "gizquadro", "wingeffect", "blackpink", "metalgold", "girlmascote", "logogame"];
    var _0xe2ec83 = [];
    for (var _0x113442 = 0; _0x113442 < _0x3b3954.length; _0x113442++) {
      _0xe2ec83.push({
        'title': _0x3b3954[_0x113442],
        'description': "Logo personalizada: " + (_0x113442 + 1),
        'rowId': _0x1fcb4c + _0x3b3954[_0x113442] + (" " + _0x2a141c)
      });
    }
    LGS = "LOGOS DE 1 TEXTO:\n\n";
    for (let _0xdaf111 of _0xe2ec83) {
      LGS += _0xdaf111.description + "\n\nLogo: " + _0xdaf111.title + "\n\nExemplo: " + _0xdaf111.rowId + "\n\n_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-\n\n";
    }
    _0x58b06f(LGS);
    return true;
  }
}, {
  'name': "amazon",
  'aliases': ["amazonsearch"],
  'category': "consultas",
  'description': "Pesquisa produtos na Amazon",
  'longDescription': "Realiza uma pesquisa de produtos na loja Amazon e exibe os resultados.",
  'usage': "amazon [nome do produto]",
  'example': "amazon fone redmi airdots 2",
  'menu': "consultas",
  'menuSection': "Compras",
  'permissions': {},
  'requirements': _0x1c3648,
  'execute': async ({
    q: _0x21def7,
    prefix: _0x7a4b1d,
    command: _0x5b6eba,
    Res_Aguarde: _0x5b4ca1,
    acessAPI: _0x219ca5,
    reply: _0x23ae95
  }) => {
    if (_0x21def7.trim().length < 4) {
      return _0x23ae95("Exemplo: " + (_0x7a4b1d + _0x5b6eba) + " fone redmi airdots 2");
    }
    try {
      _0x23ae95(_0x5b4ca1);
      ABC = await _0x219ca5.amazon(_0x21def7.trim());
      RST = "Pesquisa Amazon:\n\n";
      for (i = 0; i < (ABC.length > 40 ? 40 : ABC.length); i++) {
        RST += "( " + (i + 1) + " ) - Titulo: " + ABC[i].titulo + "\n- Preço: " + ABC[i].preco + "\n- Url: " + ABC[i].url + "\n" + '_'.repeat(27) + "\n\n";
      }
      _0x23ae95(RST);
      return true;
    } catch {
      const _0x4f9df1 = {
        success: false,
        message: "Erro, não foi possivel encontrar."
      };
      return _0x4f9df1;
    }
  }
}, {
  'name': "pesquisa",
  'aliases': ["pesquisar"],
  'category': "consultas",
  'description': "Realiza uma pesquisa na web",
  'longDescription': "Executa uma pesquisa na web e retorna os resultados encontrados.",
  'usage': "pesquisa [termo]",
  'example': "pesquisa como fazer um bolo",
  'menu': "consultas",
  'menuSection': "Internet",
  'permissions': {},
  'requirements': _0xc9f513,
  'execute': async ({
    conn: _0x52b839,
    info: _0x39c03f,
    from: _0x808176,
    q: _0x29174a,
    acessAPI: _0x282f50,
    reply: _0x9ac146
  }) => {
    try {
      bla = await _0x282f50.pesquisa(_0x29174a.trim());
      const _0x181b1c = {
        text: bla.msg
      };
      const _0x2f2b78 = {
        quoted: _0x39c03f
      };
      _0x52b839.sendMessage(_0x808176, _0x181b1c, _0x2f2b78);
      return true;
    } catch {
      const _0x2d3102 = {
        success: false,
        message: "Erro.."
      };
      return _0x2d3102;
    }
  }
}, {
  'name': "verificado-global",
  'aliases': [],
  'category': "dono",
  'description': "Ativa/desativa o verificado nos comandos",
  'longDescription': "Ativa ou desativa o símbolo de verificado em todos os comandos do bot.",
  'usage': "verificado-global",
  'example': "verificado-global",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x5a20f2,
  'requirements': {},
  'execute': async ({
    nescessario: _0x48dba9,
    setNes: _0x104637,
    isVerificado: _0x28ee2f,
    SoDono: _0x4de3aa,
    reply: _0x4d25ab,
    Res_SoDono: _0x1ea78f
  }) => {
    if (!_0x4de3aa) {
      return _0x4d25ab(_0x1ea78f);
    }
    if (!_0x28ee2f) {
      _0x48dba9.verificado = true;
      _0x104637(_0x48dba9);
      _0x4d25ab("- O Verificado foi Ativado de todos os comandos que tem, para tirar novamente só digitar o comando novamente..");
    } else if (_0x28ee2f) {
      _0x48dba9.verificado = false;
      _0x104637(_0x48dba9);
      _0x4d25ab("- O Verificado de todos os menu / comando, foi Desativado, para ativar novamente só digitar o comando novamente..");
    }
    return true;
  }
}, {
  'name': "audio-menu",
  'aliases': [],
  'category': "dono",
  'description': "Ativa/desativa o áudio no menu",
  'longDescription': "Ativa ou desativa o envio de áudio ao exibir o menu do bot.",
  'usage': "audio-menu",
  'example': "audio-menu",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x2d01b8,
  'requirements': {},
  'execute': async ({
    nescessario: _0x52e95c,
    setNes: _0x33e062,
    isAudioMenu: _0x571292,
    SoDono: _0x2621d9,
    reply: _0x45a1ef,
    Res_SoDono: _0x4144ff
  }) => {
    if (!_0x2621d9) {
      return _0x45a1ef(_0x4144ff);
    }
    if (!_0x571292) {
      _0x52e95c.menu_audio = true;
      _0x33e062(_0x52e95c);
      _0x45a1ef("- O Áudio foi ativado para o menu _- COM SUCESSO - _\n\nSe quiser Desativar - Só digitar o comando novamente");
    } else {
      if (_0x571292) {
        _0x52e95c.menu_audio = false;
        _0x33e062(_0x52e95c);
        _0x45a1ef("- O Áudio foi Desativado do menu _- COM SUCESSO - _\n\nSe quiser Ativar - Só digitar o comando novamente");
      }
    }
    return true;
  }
}, {
  'name': "console",
  'aliases': [],
  'category': "dono",
  'description': "Ativa/desativa o console do bot",
  'longDescription': "Ativa ou desativa a exibição de mensagens e comandos no console do bot, útil para evitar spam no Heroku.",
  'usage': "console",
  'example': "console",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0xcefef0,
  'requirements': {},
  'execute': async ({
    nescessario: _0x12c39b,
    setNes: _0x2655b1,
    isConsole: _0x22cd31,
    reply: _0x2db1bd
  }) => {
    if (!_0x22cd31) {
      _0x12c39b.consoleoff = true;
      _0x2655b1(_0x12c39b);
      _0x2db1bd("- O comando de tirar o console foi ativado _- COM SUCESSO - _ Agora não verá mais os comandos nem mensagem dadas no console, mas funcionará perfeitamente, ok?, é bom para evitar banimento de spam no heroku.\n\nSe quiser Desativar - Só digitar o comando novamente");
    } else if (_0x22cd31) {
      _0x12c39b.consoleoff = false;
      _0x2655b1(_0x12c39b);
      _0x2db1bd("- O comando de tirar o console foi Desativado_- COM SUCESSO - _ Agora verá os comandos e mensagens dadas no console, mas se for utilizar no heroku, recomendo ativar. é bom para evitar banimento de spam no heroku.\n\nSe quiser Ativar - Só digitar o comando novamente");
    }
    return true;
  }
}, {
  'name': "criador",
  'aliases': [],
  'category': "info",
  'description': "Mostra informações sobre o criador do bot",
  'longDescription': "Exibe informações detalhadas e contato do criador do bot.",
  'usage': "criador",
  'example': "criador",
  'menu': "info",
  'menuSection': "Bot",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x2aa1d3,
    info: _0x50989c,
    from: _0x402f76,
    NomeDoBot: _0x4855d4,
    Res_Aguarde: _0x13b1c6,
    dataGp: _0x832032,
    isGroup: _0x88ceb,
    prefix: _0x1b12d2,
    reply: _0x5084e7,
    lermais: _0x5a74f2
  }) => {
    const {
      temaManager: _0x241fd6
    } = require("./commandsManager");
    const _0x4c7b81 = _0x241fd6.menuImage("criador", _0x832032, _0x88ceb);
    const _0x33dc27 = "╭━━━━━◉ \n ╔┉✼┉═༺◈✼🪻✼◈༻═┉✼┉╗\n ║ *🪻𝐂𝐑𝐈𝐀𝐃𝐎𝐑🪻* \n ╚┉✼┉═༺◈✼🪻✼◈༻═┉✼┉╝\n╰━━━━━◉\n" + _0x5a74f2 + "\n𝐜𝐚𝐬𝐨 𝐪𝐮𝐞𝐢𝐫𝐚 𝐚𝐥𝐮𝐠𝐚𝐫 𝐨 𝐛𝐨𝐭 𝐨𝐮 𝐫𝐞𝐩𝐨𝐫𝐭𝐚𝐫 𝐚𝐥𝐠𝐮𝐦 𝐛𝐮𝐠 𝐨𝐮 𝐝𝐚 𝐬𝐮𝐚 𝐢𝐝𝐞𝐢𝐚/𝐚𝐯𝐚𝐥𝐢𝐚𝐜̧𝐚̃𝐨 𝐞́ 𝐬𝐨́ 𝐜𝐡𝐚𝐦𝐚𝐫\n╭═══════◉\n┆╔┉✼┉═༺◈✼🪻✼◈༻═┉✼┉╗\n┆║\n┆║✼🪻 *Bot: 🪻SUNG BOT🪻*\n┆║✼🪻 *Criador: Lotus*\n┆║✼🪻 *Wa me Do Criador:* wa.me/+5521972202744\n┆║✼🪻 *Grupo OFC Do Bot:* https://chat.whatsapp.com/GTXYQ9ipObnKfHU1jMPLII\n┆║\n┆╚┉✼┉═༺◈✼🪻✼◈༻═┉✼┉╝\n╰═══════◉";
    const _0x459497 = {
      ..._0x4c7b81
    };
    _0x459497.caption = _0x33dc27;
    const _0x350589 = {
      quoted: _0x50989c
    };
    await _0x2aa1d3.sendMessage(_0x402f76, _0x459497, _0x350589);
    return true;
  }
}, {
  'name': "configurar-bot",
  'aliases': [],
  'category': "info",
  'description': "Mostra opções de configuração do bot",
  'longDescription': "Exibe um menu com todas as opções de configuração disponíveis para o bot.",
  'usage': "configurar-bot",
  'example': "configurar-bot",
  'menu': "info",
  'menuSection': "Bot",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x4afb3f,
    from: _0x530148,
    prefix: _0x1c5ad9,
    info: _0x387fd2,
    lermais: _0x2dda30
  }) => {
    const _0x3aac8e = _0x2dda30 + "\n*📱GUIA DE CONFIGURAÇÃO DO BOT📱*\n \nPara configurar o bot como dono, siga os passos abaixo:\n\n*COMANDOS DEVEM SER UTILIZADOS PRIMEIRO PELO NUMERO DO BOT PARA TE DAR AUTORIZAÇÃO DE DONO*\n\nPrimeiro, inicie o bot e envie uma mensagem privada para o WhatsApp do bot com os seguintes comandos:\n\n╭────── *NOME DO BOT* ──────\n│ *Para alterar o nome do bot:*\n│ " + _0x1c5ad9 + "nome-bot [nome desejado]\n│ \n│ 👉 Você pode usar letras estilizadas\n╰───────────────────────────\n\n╭────── *SEU NICKNAME* ──────\n│ *Para definir o nickname do dono:*\n│ " + _0x1c5ad9 + "nick-dono [seu nickname]\n╰────────────────────────────\n\n╭────── *NÚMERO DO DONO* ──────\n│ *Para configurar seu número como dono:*\n│ " + _0x1c5ad9 + "numero-dono 55XXXXXXXXXX\n│ \n│ ⚠️ IMPORTANTE:\n│ • Digite o número completo sem espaços\n│ • Não inclua o \"+\" ou \"-\"\n│ • Não inclua o 9 da operadora\n│ • Use o formato idêntico ao WhatsApp\n│\n│ 💡 Esta configuração deve ser feita pelo\n│ próprio WhatsApp do bot, pois apenas\n│ ele é considerado dono até a configuração\n╰───────────────────────────────\n\n╭────── *PREFIXO* ──────\n│ *Para alterar o prefixo do bot:*\n│ " + _0x1c5ad9 + "prefixo-bot #\n│ \n│ 👉 Você pode usar qualquer símbolo\n│ Se seu prefixo atual é \"" + _0x1c5ad9 + "\", após\n│ a mudança ele será o novo símbolo escolhido\n╰────────────────────────\n\n╭────── *FOTO DO MENU* ──────\n│ *Para trocar a foto do menu:*\n│ " + _0x1c5ad9 + "fotomenu (em desenvolvimento)\n│ \n│ 👉 Basta marcar a imagem desejada\n│ com o comando acima\n╰─────────────────────────\n";
    const _0x1592e2 = {
      text: _0x3aac8e
    };
    const _0x241726 = {
      quoted: _0x387fd2
    };
    await _0x4afb3f.sendMessage(_0x530148, _0x1592e2, _0x241726);
    return true;
  }
}, {
  'name': "perfil",
  'aliases': [],
  'category': "social",
  'description': "Mostra o perfil do usuário",
  'longDescription': "Exibe um perfil detalhado do usuário com informações divertidas e aleatórias.",
  'usage': "perfil",
  'example': "perfil",
  'menu': "social",
  'menuSection': "Diversão",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x2b92c1,
    info: _0x5388bf,
    from: _0x527032,
    sender: _0x278ce3,
    sender2: _0xbf2d47,
    pushname: _0x4ab749,
    Res_Aguarde: _0xbc8f4,
    fs: _0x554935,
    palavrasc: _0x5122dd,
    reply: _0x4a6533,
    path: _0x57a4e6
  }) => {
    _0x4a6533(_0xbc8f4);
    try {
      let _0x5064a5;
      try {
        _0x5064a5 = await _0x2b92c1.profilePictureUrl(_0x278ce3.split('@')[0] + "@c.us", "image");
      } catch {
        _0x5064a5 = "https://i.ibb.co/6XGQd5g/6ca032835ed7a16748b6f.jpg";
      }
      var _0x425456 = _0x5122dd[Math.floor(Math.random() * _0x5122dd.length)];
      let _0x5b0d33 = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];
      let _0x2bb315 = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];
      let _0x5ad245 = _0x5b0d33[Math.floor(Math.random() * _0x5b0d33.length)];
      let _0x4d3d26 = _0x2bb315[Math.floor(Math.random() * _0x2bb315.length)];
      let _0x435f5f = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];
      let _0x12e3aa = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];
      let _0x2b434b = _0x435f5f[Math.floor(Math.random() * _0x435f5f.length)];
      let _0x24dda7 = _0x12e3aa[Math.floor(Math.random() * _0x12e3aa.length)];
      let _0xb3d471 = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];
      let _0x41408d = ['1', '2', '3', '4', '5', '6', '7', '8', '9'];
      let _0x762b4e = _0xb3d471[Math.floor(Math.random() * _0xb3d471.length)];
      let _0x5cdf9e = _0x41408d[Math.floor(Math.random() * _0x41408d.length)];
      let _0x2aeff7 = Math.ceil(Math.random() * 10000);
      const _0x18b15e = _0x57a4e6.join(__dirname, "../../dados/org/json/cmdperfil.json");
      let _0x3078f5 = JSON.parse(_0x554935.readFileSync(_0x18b15e, "utf8"));
      function _0x58f2b2() {
        let _0x3fd741 = Object.keys(_0x3078f5.elementosPerfil);
        let _0x68410b = [];
        _0x3fd741.sort(() => Math.random() - 0.5);
        let _0x4b0397 = _0x3fd741.slice(0, 5);
        _0x4b0397.forEach(_0x2f4900 => {
          let _0x456c81 = _0x3078f5.elementosPerfil[_0x2f4900][Math.floor(Math.random() * _0x3078f5.elementosPerfil[_0x2f4900].length)];
          let _0x265177 = _0x3078f5.emojis[_0x2f4900];
          let _0x5d7d48 = '*' + _0x2f4900 + '*';
          _0x68410b.push(_0x265177 + " " + _0x5d7d48 + ": " + _0x456c81);
        });
        return _0x68410b;
      }
      let _0x10c55c = _0x58f2b2();
      let _0xb8383f = _0x10c55c.join("\n");
      let _0x5f1cc8 = " 「 🔥 ~_*PERFIL*_~ 🌈 」\n🗒 *Nome* : *" + _0x4ab749 + "*\n🪀 *Número* : @" + _0xbf2d47 + "\n🐂 *Nível gado* : *" + _0x5ad245 + _0x4d3d26 + "%*\n📱 *Seu Célular* : " + (_0x5388bf.key.id.length > 21 ? "Android 🤣" : _0x5388bf.key.id.substring(0, 2) == '3A' ? "IOS😂😂😅" : "Zap zap web 😂😂☝🏼😅") + "\n😈 *Nível puta* : *" + _0x2b434b + _0x24dda7 + "%*\n😋 *Nível de gostosura* : *" + _0x762b4e + _0x5cdf9e + "%*\n🍼 *Valor do programa* : *R$" + _0x2aeff7 + "*\n" + _0xb8383f + "\n➻ *~_CONSELHO_~* :\n" + _0x425456;
      const _0x2f9e3f = {
        url: _0x5064a5
      };
      const _0x280332 = {
        image: _0x2f9e3f,
        caption: _0x5f1cc8,
        mentions: [_0x278ce3]
      };
      const _0x594340 = {
        quoted: _0x5388bf
      };
      _0x2b92c1.sendMessage(_0x527032, _0x280332, _0x594340);
      return true;
    } catch (_0xddfd45) {
      console.log(_0xddfd45);
      return false;
    }
  }
}, {
  'name': "conselhobiblico",
  'aliases': ["conselhosbiblico", "conselhosb", "conselhob"],
  'category': "religiao",
  'description': "Mostra um conselho bíblico aleatório",
  'longDescription': "Exibe um versículo ou conselho bíblico aleatório para inspiração espiritual.",
  'usage': "conselhobiblico",
  'example': "conselhobiblico",
  'menu': "social",
  'menuSection': "Religião",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x47699c,
    info: _0x3c41bc,
    from: _0x44479b,
    tempo: _0x52065b,
    pushname: _0x4c81cd,
    conselhob: _0x8399e5,
    NomeDoBot: _0x352455,
    groupName: _0x19e617
  }) => {
    var _0x156b89 = _0x8399e5[Math.floor(Math.random() * _0x8399e5.length)];
    jr = _0x52065b + " " + _0x4c81cd + " \n\nConselhos Bíblico para você: \n\n- " + _0x156b89 + " \n\n> Bot: " + _0x352455 + "\n> Grupo: " + _0x19e617;
    const _0x106e89 = {
      text: jr
    };
    const _0x3e0510 = {
      mentionedJid: jr
    };
    const _0x4a6cea = {
      quoted: _0x3c41bc,
      contextInfo: _0x3e0510
    };
    _0x47699c.sendMessage(_0x44479b, _0x106e89, _0x4a6cea);
    return true;
  }
}, {
  'name': "mediafire",
  'aliases': [],
  'category': "downloads",
  'description': "Baixa arquivos do Mediafire",
  'longDescription': "Baixa arquivos de links do Mediafire e envia como documento no chat.",
  'usage': "mediafire [link]",
  'example': "mediafire https://www.mediafire.com/file/exemplo",
  'menu': "downloads",
  'menuSection': "Arquivos",
  'permissions': {},
  'requirements': _0x3c8010,
  'execute': async ({
    conn: _0x87126d,
    from: _0x2b3127,
    q: _0x56ba00,
    acessAPI: _0x2b9562,
    reply: _0x401022
  }) => {
    try {
      if (!_0x56ba00.includes("mediafire.com")) {
        return _0x401022("Faltando o link do mediafire para download do arquivo, cade?");
      }
      ABC = await _0x2b9562.mediafire(_0x56ba00.trim());
      _0x401022("Enviando: " + ABC.resultado[0].nama + "\n\nPeso: " + ABC.resultado[0].size);
      const _0x52b5eb = {
        url: ABC.resultado[0].link
      };
      _0x87126d.sendMessage(_0x2b3127, {
        'document': _0x52b5eb,
        'mimetype': "application/" + ABC.resultado[0].mime,
        'fileName': ABC.resultado[0].nama
      })["catch"](_0x5bfed2 => {
        return _0x401022("Erro..");
      });
      return true;
    } catch (_0x383669) {
      const _0x35f061 = {
        success: false,
        message: "Erro.."
      };
      return _0x35f061;
    }
  }
}, {
  'name': "ler",
  'aliases': ["ocr", "lerfoto"],
  'category': "util",
  'description': "Extrai texto de imagens",
  'longDescription': "Utiliza OCR (Reconhecimento Óptico de Caracteres) para extrair texto de imagens.",
  'usage': "ler [marcar imagem]",
  'example': "ler [responder a uma imagem]",
  'menu': "utilidades",
  'menuSection': "Ferramentas",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x294931,
      isQuotedImage: _0x3d3e6a,
      info: _0x569f5c
    }) => {
      const _0x4c8a01 = {
        success: true
      };
      const _0x30c7b6 = {
        success: false,
        message: "Envie ou marque uma imagem para extrair o texto!"
      };
      return _0x294931 && !_0x569f5c.message.videoMessage || _0x3d3e6a ? _0x4c8a01 : _0x30c7b6;
    }
  },
  'execute': async ({
    conn: _0x297ced,
    info: _0x33735d,
    from: _0x3ed10c,
    isMedia: _0x373a81,
    isQuotedImage: _0x36bf0c,
    Res_Aguarde: _0xc48f5d,
    getFileBuffer: _0x363362,
    getExtension: _0x5db8bb,
    getRandom: _0x5da4b3,
    DLT_FL: _0x50a83b,
    reply: _0x160e77,
    fs: _0x2593ef
  }) => {
    try {
      const _0x3dd7fc = (_0x4a8c26, _0x41b40b = {}) => {
        return new Promise((_0x63dec6, _0x1c90b6) => {
          const {
            exec: _0x261705
          } = require("child_process");
          const _0x43d288 = _0x4b8489 => {
            const _0xd4f66b = ["--oem", _0x4b8489.oem || 1];
            const _0x3a0fcd = ["--psm", _0x4b8489.psm || 3];
            const _0x1924b3 = _0x4b8489.config ? Object.entries(_0x4b8489.config).map(([_0x27a645, _0x163087]) => ['-c', _0x27a645 + '=' + _0x163087]) : [];
            const _0x21415e = [_0xd4f66b, _0x3a0fcd, _0x1924b3];
            const _0x424a70 = _0x4b8489.lang ? ['-l', _0x4b8489.lang] : [];
            return [..._0x424a70, ..._0x21415e.flat()];
          };
          const _0x1a5a96 = _0x43d288(_0x41b40b);
          const _0x596a8b = _0x41b40b.binary || "tesseract";
          const _0x4ef16a = [_0x596a8b, "\"" + _0x4a8c26 + "\"", "stdout", ..._0x1a5a96].join(" ");
          _0x261705(_0x4ef16a, (_0x1a57c2, _0x1ef5eb, _0x328ffa) => {
            if (_0x1a57c2) {
              _0x1c90b6(_0x1a57c2);
            }
            _0x63dec6(_0x1ef5eb);
          });
        });
      };
      const _0x57fe9c = _0x36bf0c ? _0x33735d.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage : _0x33735d.message.imageMessage;
      const _0x354018 = _0x5da4b3('.' + (await _0x5db8bb(_0x57fe9c.mimetype)));
      const _0x4bcaa1 = await _0x363362(_0x57fe9c, "image");
      _0x2593ef.writeFileSync(_0x354018, _0x4bcaa1);
      _0x160e77(_0xc48f5d);
      const _0x10bcdc = await _0x3dd7fc(_0x354018, {
        'lang': "eng+ind",
        'oem': 0x1,
        'psm': 0x3
      });
      _0x160e77(_0x10bcdc.trim() || "Não foi possível identificar texto na imagem.");
      _0x50a83b(_0x354018);
      return true;
    } catch (_0x1a5ade) {
      _0x160e77("Erro ao processar imagem: " + _0x1a5ade.message);
      return false;
    }
  }
}, {
  'name': "getquoted",
  'aliases': ["getinfo", "get"],
  'category': "dev",
  'description': "Mostra informações da mensagem citada",
  'longDescription': "Exibe as informações detalhadas da mensagem citada em formato JSON.",
  'usage': "getquoted",
  'example': "getquoted",
  'menu': "dev",
  'menuSection': "Desenvolvimento",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    info: _0x1fae6b,
    reply: _0x468db2
  }) => {
    _0x468db2(JSON.stringify(_0x1fae6b.message.extendedTextMessage.contextInfo, null, 3));
    return true;
  }
}, {
  'name': "get-txt",
  'aliases': [],
  'category': "dev",
  'description': "Mostra o texto da mensagem citada",
  'longDescription': "Exibe o texto da mensagem citada em formato JSON.",
  'usage': "get-txt",
  'example': "get-txt",
  'menu': "dev",
  'menuSection': "Desenvolvimento",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    info: _0x3e5454,
    reply: _0x5aa5e7
  }) => {
    _0x5aa5e7(JSON.stringify(_0x3e5454.message.extendedTextMessage.contextInfo.quotedMessage.conversation, null, 2));
    return true;
  }
}, {
  'name': "vrcpf",
  'aliases': ["vr_cpf", "vr-cpf"],
  'category': "consultas",
  'description': "Verifica informações de um CPF",
  'longDescription': "Consulta e exibe informações associadas a um número de CPF.",
  'usage': "vrcpf [número]",
  'example': "vrcpf 12345678900",
  'menu': "consultas",
  'menuSection': "Documentos",
  'permissions': {},
  'requirements': _0x5d1c6d,
  'execute': async ({
    conn: _0x1e0f26,
    info: _0xfce93f,
    from: _0x4c4e5d,
    q: _0x4cd81e,
    acessAPI: _0x51ae80,
    reply: _0x4b47a2
  }) => {
    try {
      const _0x45745a = {
        quoted: _0xfce93f
      };
      _0x1e0f26.sendMessage(_0x4c4e5d, {
        'image': {
          'url': _0x51ae80.vrcpf(_0x4cd81e.trim())
        }
      }, _0x45745a);
      return true;
    } catch {
      const _0x3ead9d = {
        success: false,
        message: "Erro..."
      };
      return _0x3ead9d;
    }
  }
}, {
  'name': "gerarcpf",
  'aliases': [],
  'category': "util",
  'description': "Gera um CPF aleatório",
  'longDescription': "Gera um número de CPF aleatório com formato válido (apenas para fins de teste).",
  'usage': "gerarcpf",
  'example': "gerarcpf",
  'menu': "utilidades",
  'menuSection': "Geradores",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x379c62,
    info: _0x26dc66,
    from: _0x18afdd
  }) => {
    const _0x30c385 = {
      EfzKU: "6|1|3|4|2|5|0"
    };
    _0x30c385.SWhym = function (_0x4b00ca, _0x108c34) {
      return _0x4b00ca + _0x108c34;
    };
    _0x30c385.OIILA = function (_0x2fce02, _0x44d845) {
      return _0x2fce02 * _0x44d845;
    };
    _0x30c385.CTmdV = function (_0xed9fe6, _0x4a59cf) {
      return _0xed9fe6 + _0x4a59cf;
    };
    _0x30c385.YaAsA = function (_0x302dc5, _0x228cb3) {
      return _0x302dc5 + _0x228cb3;
    };
    cp1 = '' + _0x30c385.YaAsA(Math.floor(_0x30c385.OIILA(Math.random(), 300)), 600);
    cp2 = '' + _0x30c385.SWhym(Math.floor(_0x30c385.OIILA(Math.random(), 300)), 600);
    cp3 = '' + _0x30c385.CTmdV(Math.floor(_0x30c385.OIILA(Math.random(), 300)), 600);
    cp4 = '' + _0x30c385.SWhym(Math.floor(_0x30c385.OIILA(Math.random(), 30)), 60);
    cpf = cp1 + '.' + cp2 + '.' + cp3 + '-' + cp4;
    const _0x47b5cb = {
      text: "CPF gerado com sucesso : " + cpf
    };
    const _0x58b8a3 = {
      quoted: _0x26dc66
    };
    _0x379c62.sendMessage(_0x18afdd, _0x47b5cb, _0x58b8a3);
    return true;
  }
}, {
  'name': "cep",
  'aliases': [],
  'category': "consultas",
  'description': "Consulta informações de um CEP",
  'longDescription': "Busca e exibe informações detalhadas sobre um CEP informado.",
  'usage': "cep [número]",
  'example': "cep 01001000",
  'menu': "consultas",
  'menuSection': "Endereços",
  'permissions': {},
  'requirements': _0x6d41e8,
  'execute': async ({
    q: _0x5432f7,
    acessAPI: _0x3c5f05,
    reply: _0x123d0b
  }) => {
    try {
      if (!_0x5432f7.trim()) {
        return _0x123d0b("digite o CEP que deseja buscar informações..");
      }
      ABC = await _0x3c5f05.cep(_0x5432f7.trim());
      _0x123d0b("Cep: " + ABC.cep + "\nRua: " + ABC.rua + "\nComplemento: " + ABC.complemento + "\nBairro: " + ABC.vizinhança + "\nCidade: " + ABC.cidade + "\nEstado: " + ABC.estado + "\nGia: " + ABC.gia + "\nIbge: " + ABC.ibge + "\nddd: " + ABC.ddd + "\nSiafi: " + ABC.siafi);
      return true;
    } catch (_0xcdcb16) {
      const _0x3ea532 = {
        success: false,
        message: "Erro.."
      };
      return _0x3ea532;
    }
  }
}, {
  'name': "ddd",
  'aliases': [],
  'category': "consultas",
  'description': "Lista cidades de um DDD",
  'longDescription': "Busca e exibe a lista de cidades associadas a um código DDD informado.",
  'usage': "ddd [número]",
  'example': "ddd 11",
  'menu': "consultas",
  'menuSection': "Telefonia",
  'permissions': {},
  'requirements': _0x427ce7,
  'execute': async ({
    conn: _0x591c76,
    info: _0x1a447b,
    from: _0x1247b1,
    q: _0x4cdd71,
    body: _0x181242,
    prefix: _0x2f01e6,
    command: _0x7b5435,
    axios: _0x494138,
    reply: _0x333cbe
  }) => {
    if (args.length < 1) {
      return _0x333cbe("Use " + (_0x2f01e6 + _0x7b5435) + " 81");
    }
    ddd = _0x181242.slice(5);
    ddds = await _0x494138.get("https://brasilapi.com.br/api/ddd/v1/" + ddd);
    dddlist = "Lista de Cidades de " + ddds.data.state + " com este DDD " + _0x4cdd71 + ">\n\n";
    for (let _0x577017 = 0; _0x577017 < ddds.data.cities.length; _0x577017++) {
      dddlist += _0x577017 + 1 + " ⪧ *" + ddds.data.cities[_0x577017] + "*\n";
    }
    const _0x23131c = {
      text: dddlist
    };
    const _0xf5466a = {
      quoted: _0x1a447b
    };
    _0x591c76.sendMessage(_0x1247b1, _0x23131c, _0xf5466a);
    return true;
  }
}, {
  'name': "encurtalink",
  'aliases': [],
  'category': "util",
  'description': "Encurta URLs longas",
  'longDescription': "Converte URLs longas em versões curtas usando o serviço TinyURL.",
  'usage': "encurtalink [url]",
  'example': "encurtalink https://exemplo.com/pagina-com-url-muito-longa",
  'menu': "utilidades",
  'menuSection': "Internet",
  'permissions': {},
  'requirements': _0x31b94e,
  'execute': async ({
    args: _0x17db26,
    prefix: _0x28bcae,
    axios: _0x2fd4db,
    reply: _0x51e09b
  }) => {
    if (_0x17db26.length < 1) {
      return _0x51e09b("Exemplo:\n" + _0x28bcae + "encurtalink https://youtube.com/c/aleatoryconteudos");
    }
    try {
      link = _0x17db26[0];
      anu = await _0x2fd4db.get("https://tinyurl.com/api-create.php?url=" + link);
      _0x51e09b('' + anu.data);
      return true;
    } catch (_0x387194) {
      emror = String(_0x387194);
      const _0x12e0dc = {
        success: false,
        message: '' + _0x387194
      };
      return _0x12e0dc;
    }
  }
}, {
  'name': "calculadora",
  'aliases': ["calcular", "calc"],
  'category': "util",
  'description': "Calcula expressões matemáticas",
  'longDescription': "Realiza cálculos matemáticos a partir de expressões fornecidas pelo usuário.",
  'usage': "calculadora [expressão]",
  'example': "calculadora 2+2*3",
  'menu': "utilidades",
  'menuSection': "Ferramentas",
  'permissions': {},
  'requirements': _0x2c9c5b,
  'execute': async ({
    q: _0x58d219,
    reply: _0x2d6c9a
  }) => {
    try {
      rsp = _0x58d219.replace('x', '*').replace("\"", ':').replace(new RegExp("[()abcdefghijklmnopqrstwuvxyz]", 'gi'), '').replace('÷', '/');
      _0x2d6c9a(JSON.stringify(eval(rsp, null, "\t")));
      return true;
    } catch (_0x5a43f2) {
      const _0x74bee3 = {
        success: false,
        message: "Erro na expressão matemática"
      };
      return _0x74bee3;
    }
  }
}, {
  'name': "listatm",
  'aliases': [],
  'category': "dono",
  'description': "Lista os grupos/usuários registrados para transmissão",
  'longDescription': "Exibe a lista de todos os grupos e usuários registrados para receber mensagens de transmissão do bot.",
  'usage': "listatm",
  'example': "listatm",
  'menu': "dono",
  'menuSection': "Transmissão",
  'permissions': _0x18023f,
  'requirements': {},
  'execute': async ({
    from: _0x1fc198,
    BANCOP: _0x5ebca3,
    EmojiBot: _0x39a5ee,
    prefix: _0xccaef9,
    reply: _0x4448ce
  }) => {
    const _0x1aa75d = _0x5ebca3.prepare("SELECT * FROM transmissao ORDER BY id").all();
    if (_0x1aa75d.length === 0) {
      return _0x4448ce("Não contém nenhum registro de transmissão, utilize " + _0xccaef9 + "rgtm no grupo que deseja que ele receba as transmissões do bot..");
    }
    let _0x50f6bd = "╔═══❖•ೋ°" + _0x39a5ee + "°ೋ•❖═══╗\n";
    _0x50f6bd += "┇ *𝙻𝙸𝚂𝚃𝙰 𝙳𝙴 𝚃𝚁𝙰𝙽𝚂𝙼𝙸𝚂𝚂𝙰̃𝙾*\n";
    _0x50f6bd += "╚═══❖•ೋ°" + _0x39a5ee + "°ೋ•❖═══╝\n\n";
    _0x50f6bd += "╔═══❖•ೋ°" + _0x39a5ee + "°ೋ•❖═══╗\n";
    for (let _0x2f028b = 0; _0x2f028b < _0x1aa75d.length; _0x2f028b++) {
      _0x50f6bd += "┇ " + (_0x2f028b + 1) + " - *ID*: " + _0x1aa75d[_0x2f028b].destino_id + "\n";
      _0x50f6bd += "┇ ➥ " + _0x1aa75d[_0x2f028b].tipo + ": " + _0x1aa75d[_0x2f028b].nome + "\n";
      if (_0x2f028b < _0x1aa75d.length - 1) {
        _0x50f6bd += "┇ \n";
      }
    }
    _0x50f6bd += "╚═══❖•ೋ°" + _0x39a5ee + "°ೋ•❖═══╝";
    _0x4448ce(_0x50f6bd);
    return true;
  }
}, {
  'name': "rgtm",
  'aliases': [],
  'category': "dono",
  'description': "Registra o grupo/chat atual para transmissão",
  'longDescription': "Adiciona o grupo ou chat atual à lista de destinos que receberão mensagens de transmissão.",
  'usage': "rgtm",
  'example': "rgtm",
  'menu': "dono",
  'menuSection': "Transmissão",
  'permissions': _0x3dc151,
  'requirements': {},
  'execute': async ({
    from: _0x2c0f58,
    isGroup: _0x160afa,
    groupName: _0x5d8a09,
    pushname: _0x527480,
    BANCOP: _0x59c136,
    reply: _0x50d67d
  }) => {
    const _0x479518 = _0x59c136.prepare("SELECT COUNT(*) as count FROM transmissao WHERE destino_id = ?").get(_0x2c0f58);
    if (_0x479518 && _0x479518.count > 0) {
      return _0x50d67d("Este grupo/chat já está registrado na lista de transmissão");
    }
    const _0x2f5c10 = _0x160afa ? "Grupo" : "Usuário";
    const _0x4fc478 = _0x160afa ? _0x5d8a09 : _0x527480;
    const _0x46d997 = Math.floor(Date.now() / 1000);
    _0x59c136.prepare("INSERT INTO transmissao (destino_id, nome, tipo, data_registro) VALUES (?, ?, ?, ?)").run(_0x2c0f58, _0x4fc478, _0x2f5c10, _0x46d997);
    _0x50d67d("Registrado com sucesso, quando for realizada as transmissões, esse grupo/usuário estará na lista.");
    return true;
  }
}, {
  'name': "tirardatm",
  'aliases': [],
  'category': "dono",
  'description': "Remove um grupo/chat da lista de transmissão",
  'longDescription': "Remove um grupo ou chat da lista de destinos para transmissão, seja o atual ou um especificado por ID.",
  'usage': "tirardatm [ID opcional]",
  'example': "tirardatm",
  'menu': "dono",
  'menuSection': "Transmissão",
  'permissions': _0x45b138,
  'requirements': {},
  'execute': async ({
    from: _0x5cee8a,
    q: _0x272898,
    BANCOP: _0x374a6c,
    reply: _0x371f65
  }) => {
    const _0x296709 = _0x272898.trim().length > 4 ? _0x272898.trim() : _0x5cee8a;
    const _0x4e2a6d = _0x374a6c.prepare("SELECT COUNT(*) as count FROM transmissao WHERE destino_id = ?").get(_0x296709);
    if (!_0x4e2a6d || _0x4e2a6d.count === 0) {
      return _0x371f65("Este grupo/chat não está registrado na lista de transmissão");
    }
    _0x374a6c.prepare("DELETE FROM transmissao WHERE destino_id = ?").run(_0x296709);
    _0x371f65("Grupo/Usuário tirado da lista de transmissão com sucesso");
    return true;
  }
}, {
  'name': "fazertm",
  'aliases': ['tm'],
  'category': "dono",
  'description': "Envia mensagem para todos os grupos registrados",
  'longDescription': "Envia uma mensagem para todos os grupos e usuários registrados na lista de transmissão, com opções para delay, preview e limpeza de grupos inativos.",
  'usage': "fazertm [opções] [mensagem]",
  'example': "fazertm Olá a todos!",
  'menu': "dono",
  'menuSection': "Transmissão",
  'permissions': _0x3c3050,
  'requirements': {},
  'execute': async ({
    conn: _0x49393d,
    info: _0x338365,
    from: _0x1247aa,
    args: _0x347735,
    q: _0x23fe22,
    prefix: _0xfcb9fe,
    command: _0x3a1c4f,
    NickDono: _0x2a8f76,
    EmojiBot: _0xd75d31,
    isQuotedImage: _0x474622,
    isQuotedVideo: _0x33dd88,
    isQuotedMsg: _0x159738,
    isQuotedMsg2: _0x36d11b,
    isQuotedDocument: _0x3a8020,
    isQuotedDocW: _0x30146d,
    isQuotedAudio: _0x5d1b42,
    isQuotedSticker: _0x29cbfd,
    sleep: _0x42bdd6,
    reply: _0x4ec916,
    BANCOP: _0x1d70a8
  }) => {
    const _0x48bb80 = {
      'delay': _0x347735[0] === "-delay" ? parseInt(_0x347735[1]) : 1000,
      'preview': _0x347735[0] === "-preview",
      'clean': _0x347735[0] === "-clean"
    };
    let _0x17daa9 = Object.keys(await _0x49393d.groupFetchAllParticipating()).filter(_0x4e55f3 => _0x4e55f3.endsWith("@g.us"));
    let _0x19a2bd = _0x1d70a8.prepare("SELECT * FROM transmissao").all();
    let _0x30f192 = [];
    let _0x106e29 = _0x19a2bd.filter(_0x1702ad => {
      if (_0x1702ad.tipo === "Grupo" && !_0x17daa9.includes(_0x1702ad.destino_id)) {
        _0x30f192.push(_0x1702ad.destino_id);
        return false;
      }
      return true;
    });
    if (_0x48bb80.preview) {
      let _0x5931dd = "*Status dos Grupos*\n\n";
      _0x5931dd += "*Grupos Ativos:* " + _0x17daa9.length + "\n";
      _0x5931dd += "*Destinos Registrados:* " + _0x106e29.length + "\n";
      _0x5931dd += "*Grupos Removidos:* " + _0x30f192.length + "\n";
      if (_0x30f192.length > 0) {
        _0x5931dd += "\n*Grupos que serão removidos:*\n";
        _0x30f192.forEach(_0x46ea98 => {
          _0x5931dd += "> " + _0x46ea98 + "\n";
        });
      }
      const _0x2dc2dc = {
        text: _0x5931dd
      };
      return _0x49393d.sendMessage(_0x1247aa, _0x2dc2dc);
    }
    if (_0x48bb80.clean) {
      if (_0x30f192.length > 0) {
        _0x1d70a8.exec("BEGIN TRANSACTION");
        const _0xcf480c = _0x1d70a8.prepare("DELETE FROM transmissao WHERE destino_id = ?");
        for (const _0x5ad25d of _0x30f192) {
          _0xcf480c.run(_0x5ad25d);
        }
        _0x1d70a8.exec("COMMIT");
      }
      let _0x41baf1 = "*Limpeza de Grupos*\n\n";
      _0x41baf1 += "*Grupos Removidos:* " + _0x30f192.length + "\n";
      const _0x21a547 = {
        text: _0x41baf1
      };
      return _0x49393d.sendMessage(_0x1247aa, _0x21a547);
    }
    if (_0x106e29.length == 0) {
      return _0x49393d.sendMessage(_0x1247aa, {
        'text': "Não contém nenhum destino registrado para realizar transmissão"
      });
    }
    let _0x31eaa5 = '';
    var _0x10f0d2 = _0x338365.message?.["extendedTextMessage"]?.["contextInfo"]?.["quotedMessage"];
    var _0x2b5bcc = _0x474622 ? _0x10f0d2?.["imageMessage"] : _0x338365.message?.["imageMessage"];
    var _0x4d40ad = _0x33dd88 ? _0x10f0d2?.["videoMessage"] : _0x338365.message?.["videoMessage"];
    var _0xa70f3f = _0x159738 ? _0x10f0d2?.["textMessage"] : _0x338365.message?.["textMessage"];
    var _0x1c7fdd = _0x3a8020 ? _0x10f0d2?.["documentMessage"] : _0x338365.message?.["documentMessage"];
    var _0x524bfe = _0x30146d ? _0x10f0d2?.["documentWithCaptionMessage"]?.["message"]?.["documentMessage"] : _0x338365.message?.["documentWithCaptionMessage"]?.["message"]?.["documentMessage"];
    var _0x18378a = _0x5d1b42 ? _0x10f0d2.audioMessage : '';
    var _0x344af6 = _0x29cbfd ? _0x338365.message?.["extendedTextMessage"]?.["contextInfo"]?.["quotedMessage"]?.["stickerMessage"] : '';
    var _0x18b27d = "*TRANSMISSÃO DO DONO: " + _0x2a8f76 + "*\n\n";
    var _0xa70f3f = _0x159738 && !_0x18378a && !_0x344af6 && !_0x2b5bcc && !_0x4d40ad && !_0x1c7fdd && !_0x524bfe ? _0x18b27d + _0x10f0d2.conversation : _0x338365.message?.["conversation"];
    var _0x41fc56 = _0x36d11b && !_0x18378a && !_0x344af6 && !_0xa70f3f && !_0x2b5bcc && !_0x4d40ad && !_0x1c7fdd && !_0x524bfe ? _0x18b27d + _0x10f0d2.extendedTextMessage?.["text"] : _0x338365?.["message"]?.["extendedTextMessage"]?.["text"];
    if (_0x2b5bcc) {
      _0x31eaa5 = _0x2b5bcc;
      _0x2b5bcc.caption = _0x23fe22.length > 1 ? _0x18b27d + _0x23fe22 : _0x2b5bcc.caption.replace(new RegExp(_0xfcb9fe + _0x3a1c4f, 'gi'), _0x18b27d);
      _0x2b5bcc.image = {
        'url': _0x2b5bcc.url
      };
    } else {
      if (_0x4d40ad) {
        _0x31eaa5 = _0x4d40ad;
        _0x4d40ad.caption = _0x23fe22.length > 1 ? _0x18b27d + _0x23fe22 : _0x4d40ad.caption.replace(new RegExp(_0xfcb9fe + _0x3a1c4f, 'gi'), _0x18b27d);
        _0x4d40ad.video = {
          'url': _0x4d40ad.url
        };
      } else {
        if (_0xa70f3f) {
          black = {};
          black.text = _0xa70f3f.replace(new RegExp(_0xfcb9fe + _0x3a1c4f, 'gi'), _0x18b27d);
          _0x31eaa5 = black;
        } else {
          if (!_0x18378a && !_0x344af6 && _0x41fc56) {
            brown = {};
            brown.text = _0x41fc56.replace(new RegExp(_0xfcb9fe + _0x3a1c4f, 'gi'), _0x18b27d);
            _0x31eaa5 = brown;
          } else {
            if (_0x1c7fdd) {
              _0x31eaa5 = _0x1c7fdd;
              _0x1c7fdd.document = {
                'url': _0x1c7fdd.url
              };
            } else {
              if (_0x524bfe) {
                _0x31eaa5 = _0x524bfe;
                _0x524bfe.caption = _0x23fe22.length > 1 ? _0x18b27d + _0x23fe22 : _0x524bfe.caption.replace(new RegExp(_0xfcb9fe + _0x3a1c4f, 'gi'), _0x18b27d);
                _0x524bfe.document = {
                  'url': _0x524bfe.url
                };
              } else {
                if (_0x344af6) {
                  _0x31eaa5 = _0x344af6;
                  _0x344af6.sticker = {
                    'url': _0x344af6.url
                  };
                } else {
                  if (_0x18378a) {
                    _0x31eaa5 = _0x18378a;
                    _0x18378a.audio = {
                      'url': _0x18378a.url
                    };
                  }
                }
              }
            }
          }
        }
      }
    }
    let _0x45787a = 0;
    let _0x401278 = 0;
    let _0x18b031 = [];
    for (let _0x23d09a = 0; _0x23d09a < _0x106e29.length; _0x23d09a++) {
      try {
        await _0x49393d.sendMessage(_0x106e29[_0x23d09a].destino_id, _0x31eaa5);
        _0x45787a++;
      } catch (_0x3e58f2) {
        console.error("Erro ao enviar para " + _0x106e29[_0x23d09a].destino_id + ": " + _0x3e58f2);
        _0x401278++;
        _0x18b031.push(_0x106e29[_0x23d09a].destino_id);
      }
      await _0x42bdd6(_0x48bb80.delay);
    }
    const _0x1a4092 = "╔═══❖•ೋ°" + _0xd75d31 + "°ೋ•❖═══╗\n┇ *𝙻𝙸𝚂𝚃𝙰 𝙳𝙴 𝚃𝚁𝙰𝙽𝚂𝙼𝙸𝚂𝚂𝙰̃𝙾*\n╚═══❖•ೋ°" + _0xd75d31 + "°ೋ•❖═══╝\n\n╔═══❖•ೋ°" + _0xd75d31 + "°ೋ•❖═══╗\n┇ 1 - *𝚃𝙾𝚃𝙰𝙻 𝙳𝙴 𝙳𝙴𝚂𝚃𝙸𝙽𝙾𝚂*: " + _0x106e29.length + "\n┇ ➥ *𝙴𝙽𝚅𝙸𝙰𝙳𝙾𝚂*: " + _0x45787a + "\n┇ \n┇ 2 - *𝙴𝚁𝚁𝙾𝚂*: " + _0x401278 + "\n┇ ➥ *𝙳𝙴𝙻𝙰𝚈*: " + _0x48bb80.delay + "ms\n" + (_0x18b031.length > 0 ? "┇ \n┇ 3 - *𝙳𝙴𝚂𝚃𝙸𝙽𝙾𝚂 𝙲𝙾𝙼 𝙴𝚁𝚁𝙾*:\n┇ ➥ " + _0x18b031.join("\n┇ ➥ ") : '') + "\n╚═══❖•ೋ°" + _0xd75d31 + "°ೋ•❖═══╝";
    const _0xbd8ebf = {
      text: _0x1a4092
    };
    _0x49393d.sendMessage(_0x1247aa, _0xbd8ebf);
    return true;
  }
}, {
  'name': "reviverqr",
  'aliases': [],
  'category': "dono",
  'description': "Limpa o cache de sessões do bot e reinicia",
  'longDescription': "Remove os dados de sessão do bot para gerar um novo QR code de conexão, útil quando ocorrem problemas de conexão.",
  'usage': "reviverqr",
  'example': "reviverqr",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x240d8a,
  'requirements': {},
  'execute': async ({
    conn: _0x5142c3,
    info: _0x12fe19,
    from: _0x13af95,
    SoDono: _0x4765ef,
    reply: _0x4af4c6
  }) => {
    const {
      clearAllSessions: _0x2b2546
    } = require("../sticker/stickerType");
    try {
      await _0x2b2546();
      _0x4af4c6("Limpeza Realizada Com Sucesso ✅\n\nReiniciando...");
      setTimeout(() => {
        process.exit();
      }, 10000);
      return true;
    } catch (_0x30996d) {
      return {
        'success': false,
        'message': "ERRO!! Falha ao excluir entradas do banco de dados. Detalhes do erro: " + _0x30996d.message
      };
    }
  }
}, {
  'name': ["seradm", "sermembro"],
  'aliases': [],
  'category': "dono",
  'description': "Altera o status do dono no grupo (admin ou membro)",
  'longDescription': "Permite que o dono alterar seu status no grupo atual.",
  'usage': "seradm ou sermembro",
  'example': "seradm",
  'menu': "dono",
  'menuSection': "Utilitários",
  'permissions': _0x3f2ce3,
  'requirements': {},
  'execute': async ({
    conn: _0x499d6a,
    from: _0x2ac6fb,
    sender: _0x34cf84,
    sender2: _0x5345be,
    mentions: _0x84ef11,
    command: _0x4eaa7e
  }) => {
    const _0x57605a = _0x4eaa7e === "seradm" ? "promote" : "demote";
    const _0x289644 = _0x4eaa7e === "seradm" ? "administrador" : "membro comum";
    _0x84ef11('@' + _0x5345be + " Pronto - Agora você é um " + _0x289644 + '..', [_0x34cf84], true);
    _0x499d6a.groupParticipantsUpdate(_0x2ac6fb, [_0x34cf84], _0x57605a);
    return true;
  }
}, {
  'name': ["apresentar", "papof", "digt"],
  'aliases': ["apr", "regraspp"],
  'category': "grupo",
  'description': "Exibe diferentes tipos de mensagens para o grupo",
  'longDescription': "Comando unificado para exibir mensagens de apresentação, regras e interação no grupo.",
  'usage': "apresentar, papof ou digt",
  'example': "apresentar",
  'menu': "grupo",
  'menuSection': "Interação",
  'permissions': _0x3b1b1c,
  'requirements': {},
  'execute': async ({
    conn: _0xae381,
    from: _0x42b734,
    groupName: _0x16e36b,
    isGroupAdmins: _0x520c0c,
    Res_SoAdm: _0x502228,
    selo: _0x546186,
    command: _0x1b7756,
    reply: _0x505ff9
  }) => {
    if (_0x1b7756 === "papof" && !_0x520c0c) {
      return _0x505ff9(_0x502228);
    }
    const _0x28474b = {
      apresentar: "Bem vindo(a) ao grupo : " + _0x16e36b + "\n\n\n👾 •𝑬𝑵𝑻𝑹𝑶𝑼 𝑺𝑬 𝑨𝑷𝑹𝑬𝑺𝑬𝑵𝑻𝑨•\n📸 •F𝜣T𝜣\n👻 •N𝜣ME\n📌 •CID∆DE\n🗓️ •ID∆DE\n⚠️ •LEI∆ ∆S REGR∆S D𝜣 GRUP𝜣\n\n*APROVEITE O GRUPO!*"
    };
    _0x28474b.papof = "【᯽𒋨📷:𝑆𝑒 𝑎𝑝𝑟𝑒𝑠𝑒𝑛𝑡𝑒𝑚 𝑙𝑖𝑥𝑜𝑠🌚»°】\n𒋨·࣭࣪̇🔥ɴᴏᴍᴇ:\n𒋨·࣭࣪̇🔥ɪᴅᴀᴅᴇ:\n𒋨·࣭࣪̇🔥ʀᴀʙᴀ:\n*Aᴘʀᴇsᴇɴᴛᴇ-sᴇ sᴇ ǫᴜɪsᴇʀ.*\n𝙏𝘼𝙂𝙎➭᜔ׂ࠭ ⁸₈⁸|𝟖𝟖𝟖|𝟠𝟠𝟠| ེི⁸⁸⁸\n ──╌╌╌┈⊰★⊱┈╌╌╌┈─\n❌ ENTROU NO \nGRUPO INTERAJA, NÃO PRECISAMOS DE ENFEITES,INATIVOS SERAO REMOVIDOS ❌* \n\n/﹋<,︻╦╤─ ҉ - -----💥 \n/﹋ 🅴 🅱🅴🅼 🆅🅸🅽🅳🅾 🆂🅴🆄🆂 🅵🅸🅻🅷🅾🆂 🅳🅰 🅿🆄🆃🅰";
    _0x28474b.digt = "🔥↯𝐉𝐀 𝐄𝐍𝐓𝐑𝐀 𝐃𝐈𝐆𝐈𝐓𝐀𝐍𝐃𝐎 𝚽𝐈 ↯°🌚💕\n ི⋮ ྀ🌴⏝ ི⋮ ྀ🚸 ི⋮ ྀ⏝🌴 ི⋮ ྀ \n\n🐼🍧↯𝖠𝖰𝖴𝖨 𝖵𝖮𝖢𝖤̂ 𝖯𝖮𝖣𝖤 𝖲𝖤𝖱↯🍧🐻\nㅤㅤㅤㅤ◍۫❀⃘࣭࣭࣭࣭ٜꔷ⃔໑࣭࣭ٜ⟅◌ٜ🛸◌⟆࣭࣭ٜ໑⃕ꔷ⃘࣭࣭࣭࣭ٜ❀۫◍ི࣭࣭࣭࣭ ུ\n【✔】ᴘʀᴇᴛᴀ👩🏾‍🦱 【✔】ʙʀᴀɴᴄᴀ👩🏼\n【✔】ᴍᴀɢʀᴀ🍧【✔】ɢᴏʀᴅᴀ🍿\n【✔】ᴘᴏʙʀᴇ🪙 【✔】ʀɪᴄᴀ💳\n【✔】ʙᴀɪᴀɴᴀ💌【✔】ᴍᴀᴄᴏɴʜᴇɪʀᴀ🍁\n【✔】ᴏᴛᴀᴋᴜ🧧【✔】ᴇ-ɢɪʀʟ🦄\n【✔】ʟᴏʟɪ🍭【✔】ɢᴀᴅᴏ🐃\n【✔】ɢᴀʏ🏳️‍🌈 【✔】ʟᴇsʙɪᴄᴀ✂️\n【✔】ᴠᴀᴅɪᴀ💄【✔】ᴛʀᴀᴠᴇᴄᴏ🍌\n【✔】ɴɪɴɢᴜᴇᴍ ʟɪɢᴀ📵\n. ☪︎ • ☁︎. . •.\n【 𝐕𝐄𝐌 𝐆𝐀𝐋𝐄𝐑𝐀, 𝐒𝐄 𝐃𝐈𝐕𝐄𝐑𝐓𝐈𝐑 𝐄 𝐅𝐀𝐙𝐄𝐑 𝐏𝐀𝐑𝐓𝐄 𝐃𝐀\n 𝐅𝐀𝐌𝐈𝐋𝐈𝐀.】🥂";
    const _0x3b1f44 = {
      text: _0x28474b[_0x1b7756]
    };
    const _0x24c7ea = {
      quoted: _0x546186
    };
    _0xae381.sendMessage(_0x42b734, _0x3b1f44, _0x24c7ea);
    return true;
  }
}, {
  'name': "sairdogp",
  'aliases': [],
  'category': "dono",
  'description': "Faz o bot sair de um grupo específico",
  'longDescription': "Permite que o dono faça o bot sair de um grupo específico a partir do índice do grupo na lista.",
  'usage': "sairdogp [índice]",
  'example': "sairdogp 0",
  'menu': "dono",
  'menuSection': "Administração",
  'permissions': _0x43cd7e,
  'requirements': _0x5a9047,
  'execute': async ({
    conn: _0x417211,
    info: _0x29dd4a,
    from: _0x48e1f5,
    q: _0x2a844b,
    prefix: _0x1e17d5,
    SoDono: _0x4f9021,
    numerodono_ofc: _0x5d3072,
    reply: _0x246587,
    Res_SoDono: _0x3fd5d3
  }) => {
    if (!_0x4f9021) {
      return _0x246587(_0x3fd5d3);
    }
    if (!_0x2a844b.trim()) {
      return _0x246587("Você deve visualizar o comando " + _0x1e17d5 + "listagp e olhar de qual o grupo quer sair, e veja a numeração dele, e só digitar\nExemplo: " + _0x1e17d5 + "sairdogp 0\nesse comando é para o bot sair do grupo que deseja..");
    }
    var _0x1ba6d1 = await _0x417211.groupFetchAllParticipating();
    var _0x118232 = Object.entries(_0x1ba6d1).slice(0).map(_0x5314f4 => _0x5314f4[1]);
    var _0x5c4406 = _0x118232.map(_0xf347e2 => _0xf347e2);
    _0x5c4406.sort((_0x5a1a3f, _0x119659) => _0x5a1a3f[0] < _0x119659.length);
    try {
      const _0xceb445 = {
        text: "Irei sair do grupo, por ordem do meu dono, se quiserem alugar o bot por um preço bacana, chega no privado: https://wa.me/" + _0x5d3072
      };
      _0x417211.sendMessage(_0x5c4406[_0x2a844b].id, _0xceb445);
      setTimeout(() => {
        _0x417211.groupLeave(_0x5c4406[_0x2a844b].id);
      }, 5000);
    } catch (_0x544986) {
      _0x246587("Erro..");
    }
    _0x246587("Pronto meu dono, sair do grupo que você queria, em caso de dúvidas acione o comando listagp pra verificar..");
    return true;
  }
}, {
  'name': ["listagp", "linkgpid"],
  'aliases': [],
  'category': "dono",
  'description': "Lista grupos ou obtém link de grupo específico",
  'longDescription': "Lista todos os grupos onde o bot está presente, ou obtém o link de um grupo específico usando seu ID.",
  'usage': "listagp / linkgpid [id_do_grupo]",
  'example': "listagp / linkgpid 123456789@g.us",
  'menu': "dono",
  'menuSection': "Informações",
  'permissions': _0x2b3e08,
  'requirements': {},
  'execute': async ({
    conn: _0x2477a7,
    moment: _0x502e6d,
    reply: _0xab75b7,
    args: _0x36fab2,
    command: _0x4ffcb9,
    prefix: _0x344309
  }) => {
    if (_0x4ffcb9 === "linkgpid") {
      if (!_0x36fab2[0]) {
        return _0xab75b7("Por favor, forneça o ID do grupo.");
      }
      try {
        const _0x46a19e = _0x36fab2[0];
        const _0x7efe5a = await _0x2477a7.groupInviteCode(_0x46a19e);
        return _0xab75b7("*LINK DO GRUPO SOLICITADO*\n\n• *ID*: " + _0x46a19e + "\n• *Link*: https://chat.whatsapp.com/" + _0x7efe5a);
      } catch (_0xfaf64f) {
        return _0xab75b7("❌ *Erro ao obter o link*\nVerifique se o ID está correto e se o bot está no grupo.");
      }
    }
    let _0x21b6a0 = await _0x2477a7.groupFetchAllParticipating();
    let _0x36a292 = Object.entries(_0x21b6a0).slice(0).map(_0x1147c4 => _0x1147c4[1]);
    let _0x39e4a6 = _0x36a292.filter(_0x5a4234 => !_0x5a4234.isCommunity && !_0x5a4234.isCommunityAnnounce && !_0x5a4234.isReadOnly);
    let _0x11610e = _0x36a292.filter(_0x1e6c0e => _0x1e6c0e.isCommunity === true && !_0x1e6c0e.isCommunityAnnounce);
    let _0x37f447 = _0x36a292.filter(_0x33b4e6 => _0x33b4e6.isCommunityAnnounce === true);
    let _0x3db88b = _0x36a292.filter(_0x527434 => _0x527434.isReadOnly === true && !_0x527434.isCommunity && !_0x527434.isCommunityAnnounce);
    let _0x163506 = _0x36a292.filter(_0x134f63 => !_0x134f63.isCommunity && !_0x134f63.isCommunityAnnounce && !_0x134f63.isReadOnly && !_0x39e4a6.includes(_0x134f63));
    let _0x4a0dca = "*📋 LISTA COMPLETA DE GRUPOS*\n\n";
    _0x4a0dca += "💡 *DICA*: Use o comando *" + _0x344309 + "linkgpid [ID_GRUPO]* para obter o link de um grupo específico.\n\n";
    _0x4a0dca += "📊 *ESTATÍSTICAS*\n";
    _0x4a0dca += "🔹 *Total Geral*: " + _0x36a292.length + "\n";
    _0x4a0dca += "🔹 *Grupos Normais*: " + _0x39e4a6.length + "\n";
    _0x4a0dca += "🔹 *Comunidades*: " + _0x11610e.length + "\n";
    if (_0x37f447.length > 0) {
      _0x4a0dca += "🔹 *Canais de Anúncios*: " + _0x37f447.length + "\n";
    }
    if (_0x3db88b.length > 0) {
      _0x4a0dca += "🔹 *Grupos Só Leitura*: " + _0x3db88b.length + "\n";
    }
    if (_0x163506.length > 0) {
      _0x4a0dca += "🔹 *Outros Tipos*: " + _0x163506.length + "\n";
    }
    _0x4a0dca += "\n";
    if (_0x39e4a6.length > 0) {
      _0x4a0dca += "*━━━━━━━━ GRUPOS NORMAIS ━━━━━━━━*\n\n";
      for (let _0x33bbb1 = 0; _0x33bbb1 < _0x39e4a6.length; _0x33bbb1++) {
        _0x4a0dca += "*📱 Grupo " + (_0x33bbb1 + 1) + "*\n" + ("📝 *Nome*: " + _0x39e4a6[_0x33bbb1].subject + "\n") + ("🆔 *ID*: " + _0x39e4a6[_0x33bbb1].id + "\n") + ("📅 *Criado em*: " + _0x502e6d(_0x39e4a6[_0x33bbb1].creation * 1000).tz("America/Sao_Paulo").format("DD/MM/YYYY HH:mm:ss") + "\n") + ("👥 *Membros*: " + _0x39e4a6[_0x33bbb1].participants.length + "\n") + "━━━━━━━━━━━━━━━━━━━━\n\n";
      }
    }
    if (_0x11610e.length > 0) {
      _0x4a0dca += "*━━━━━━━ COMUNIDADES ━━━━━━━*\n\n";
      for (let _0x67f98d = 0; _0x67f98d < _0x11610e.length; _0x67f98d++) {
        _0x4a0dca += "*🌐 Comunidade " + (_0x67f98d + 1) + "*\n" + ("📝 *Nome*: " + _0x11610e[_0x67f98d].subject + "\n") + ("🆔 *ID*: " + _0x11610e[_0x67f98d].id + "\n") + ("📅 *Criado em*: " + _0x502e6d(_0x11610e[_0x67f98d].creation * 1000).tz("America/Sao_Paulo").format("DD/MM/YYYY HH:mm:ss") + "\n") + "━━━━━━━━━━━━━━━━━━━━\n\n";
      }
    }
    if (_0x37f447.length > 0) {
      _0x4a0dca += "*━━━━━ CANAIS DE ANÚNCIOS ━━━━━*\n\n";
      for (let _0x2d2b86 = 0; _0x2d2b86 < _0x37f447.length; _0x2d2b86++) {
        _0x4a0dca += "*📢 Canal " + (_0x2d2b86 + 1) + "*\n" + ("📝 *Nome*: " + _0x37f447[_0x2d2b86].subject + "\n") + ("🆔 *ID*: " + _0x37f447[_0x2d2b86].id + "\n") + ("📅 *Criado em*: " + _0x502e6d(_0x37f447[_0x2d2b86].creation * 1000).tz("America/Sao_Paulo").format("DD/MM/YYYY HH:mm:ss") + "\n") + "━━━━━━━━━━━━━━━━━━━━\n\n";
      }
    }
    if (_0x3db88b.length > 0) {
      _0x4a0dca += "*━━━━ GRUPOS SÓ LEITURA ━━━━*\n\n";
      for (let _0x2a04b0 = 0; _0x2a04b0 < _0x3db88b.length; _0x2a04b0++) {
        _0x4a0dca += "*👁️ Grupo " + (_0x2a04b0 + 1) + "*\n" + ("📝 *Nome*: " + _0x3db88b[_0x2a04b0].subject + "\n") + ("🆔 *ID*: " + _0x3db88b[_0x2a04b0].id + "\n") + ("📅 *Criado em*: " + _0x502e6d(_0x3db88b[_0x2a04b0].creation * 1000).tz("America/Sao_Paulo").format("DD/MM/YYYY HH:mm:ss") + "\n") + "━━━━━━━━━━━━━━━━━━━━\n\n";
      }
    }
    _0x4a0dca += "💡 *LEMBRE-SE*: Para obter o link de qualquer grupo, copie o ID e use o comando *" + _0x344309 + "linkgpid [ID_GRUPO]*";
    _0xab75b7(_0x4a0dca);
    return true;
  }
}, {
  'name': "dono",
  'aliases': ["odono", "infodono", "proprietario"],
  'category': "info",
  'description': "Mostra informações sobre o dono do bot",
  'longDescription': "Exibe uma mensagem com informações detalhadas sobre o dono do bot, incluindo contato e outros detalhes relevantes.",
  'usage': "dono",
  'example': "dono",
  'menu': ["principal", "info"],
  'menuSection': "Informações",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x3e8394,
    info: _0x2730c4,
    from: _0x205b4c,
    sender: _0x3cabb5,
    dataGp: _0x11f00d,
    isGroup: _0x19d91c,
    fs: _0x156739,
    path: _0x5791dd,
    Res_Aguarde: _0x96d8a9,
    reply: _0x562f74,
    uptime: _0x3510da
  }) => {
    try {
      await _0x562f74(_0x96d8a9);
      const {
        temaManager: _0x1585d7
      } = require("./commandsManager");
      const _0xed22ab = require("moment-timezone");
      const _0x3844bc = _0x5791dd.join(__dirname, "../../dados/settings.json");
      const _0x1e1dfb = JSON.parse(_0x156739.readFileSync(_0x3844bc, "utf8"));
      const _0x87fcb8 = _0x1585d7.getTemaMenu(_0x11f00d, _0x19d91c);
      const _0x5ad698 = _0x87fcb8.emoji || '🤖';
      const _0xca10f5 = _0x1585d7.menuImage("dono", _0x11f00d, _0x19d91c) || _0x1585d7.menuImage("proprietario", _0x11f00d, _0x19d91c);
      const _0x539203 = _0x510f6e => {
        const _0x5805e3 = Math.floor(_0x510f6e / 3600);
        const _0x82723d = Math.floor(_0x510f6e % 3600 / 60);
        const _0x5d3723 = Math.floor(_0x510f6e % 60);
        return _0x5805e3 + "h " + _0x82723d + "m " + _0x5d3723 + 's';
      };
      const _0x3991a4 = _0x539203(_0x3510da || process.uptime());
      const _0x414b4e = _0xed22ab().tz("America/Sao_Paulo").format("DD/MM/YYYY - HH:mm:ss");
      const _0x54ebf8 = "╭━━━━━━━━━━━━━━━━━━╮\n┃ 👑 𝐈𝐍𝐅𝐎 𝐃𝐎 𝐃𝐎𝐍𝐎 👑\n┃\n┃ " + _0x5ad698 + " 𝐁𝐨𝐭: " + _0x1e1dfb.NomeDoBot + "\n┃ 🎭 𝐃𝐨𝐧𝐨: " + _0x1e1dfb.NickDono + "\n┃ 📱 𝐍ú𝐦𝐞𝐫𝐨: +" + _0x1e1dfb.numerodono + "\n┃ ⚡ 𝐏𝐫𝐞𝐟𝐢𝐱𝐨: " + _0x1e1dfb.prefix + "\n┃\n┃ ⏰ 𝐎𝐧𝐥𝐢𝐧𝐞: " + _0x3991a4 + "\n┃ 📅 𝐃𝐚𝐭𝐚: " + _0x414b4e + "\n┃\n┃ ✨ 𝐄𝐦𝐨𝐣𝐢: " + _0x5ad698 + " | 𝐓𝐞𝐦𝐚: " + (_0x87fcb8.nomeTema || "Padrão") + "\n┃\n┃ 🌟 𝐒𝐎𝐁𝐑𝐄 𝐎 𝐁𝐎𝐓:\n┃ 🚀 Bot multifuncional completo\n┃ 🛡️ Sistema de proteção ativo\n┃ 🎮 Jogos, ferramentas e IA\n┃ 💎 Desenvolvido com dedicação\n┃\n┃ 📞 𝐂𝐎𝐍𝐓𝐀𝐓𝐎:\n┃ 💬 wa.me/" + _0x1e1dfb.numerodono + "\n┃ ⚡ Resposta rápida garantida\n┃ 🤝 Sempre pronto para ajudar\n╰━━━━━━━━━━━━━━━━━━╯";
      const _0x4f5a2c = {
        ..._0xca10f5
      };
      _0x4f5a2c.caption = _0x54ebf8;
      _0x4f5a2c.mentions = [_0x3cabb5];
      const _0x2bc987 = {
        quoted: _0x2730c4
      };
      await _0x3e8394.sendMessage(_0x205b4c, _0x4f5a2c, _0x2bc987);
      return true;
    } catch (_0x4a26e0) {
      console.error("Erro no comando dono:", _0x4a26e0);
      _0x562f74("❌ Erro ao carregar informações do dono.");
      return false;
    }
  }
}, {
  'name': "atividade",
  'aliases': ["atividades"],
  'category': "admin",
  'description': "Mostra a atividade dos membros no grupo",
  'menu': "admin",
  'permissions': _0x3fbc9e,
  'execute': async ({
    from: _0x2b37b1,
    countMessage: _0x1f1c14,
    mention: _0x45d27d,
    reply: _0x1c1dc8
  }) => {
    try {
      const _0x2f76d7 = _0x1f1c14.find(_0x2b3c3a => _0x2b3c3a.groupId === _0x2b37b1)?.["numbers"];
      if (!_0x2f76d7?.["length"]) {
        return _0x1c1dc8("*Nada foi encontrado*");
      }
      const _0x2e7d67 = (Array.isArray(_0x2f76d7) ? _0x2f76d7 : JSON.parse(_0x2f76d7)).filter(_0x201c13 => _0x201c13?.['id']?.["includes"]?.('@'));
      if (!_0x2e7d67.length) {
        return _0x1c1dc8("*Nenhum dado válido encontrado*");
      }
      _0x45d27d("*Atividade dos membros do grupo:*\n\n" + _0x2e7d67.map(_0x12dd17 => "*• Membro:* @" + _0x12dd17.id.split('@')[0] + "\n*• Comandos:* " + (_0x12dd17.cmd_messages || 0) + "\n*• Mensagens:* " + (_0x12dd17.messages || 0) + "\n*• Aparelho:* " + (_0x12dd17.aparelho || "Não informado") + "\n\n" + '─'.repeat(34) + "\n").join("\n"));
    } catch (_0x1e4d42) {
      _0x1c1dc8("Erro ao buscar atividades.");
    }
  }
}, {
  'name': "inativos",
  'aliases': ["inativo"],
  'category': "admin",
  'description': "Lista membros com poucas mensagens no grupo",
  'longDescription': "Mostra uma lista de membros do grupo que enviaram menos mensagens que o limite especificado, ordenados por número de mensagens.",
  'usage': "inativos [limite]",
  'example': "inativos 5",
  'menu': "admin",
  'menuSection': "Moderação",
  'permissions': _0x1b8b18,
  'requirements': _0x4962de,
  'execute': async ({
    conn: _0x4acc6e,
    info: _0x2e6c2e,
    from: _0x4973f5,
    q: _0x32666f,
    prefix: _0x4425af,
    command: _0x1b24f8,
    Os_Returns: _0x23aeab,
    groupAdmins: _0x131fc3,
    numerodono: _0x18f01c,
    botNumber: _0x597004,
    groupMembers: _0x36e0f5,
    countMessage: _0x13de51,
    LIMPARDOCNT_QUEMJASAIU: _0x67981c,
    EmojiBot: _0x2a373d,
    mention: _0x1c5c20,
    reply: _0x15e8c7
  }) => {
    if (_0x23aeab(true, true, true)["true"]) {
      return _0x15e8c7(_0x23aeab(true, true, true).txt);
    }
    if (_0x32666f.match(/[a-z]/i) || !_0x32666f || isNaN(_0x32666f)) {
      return _0x15e8c7("Exemplo: " + (_0x4425af + _0x1b24f8) + " 0\nIsso mostrará quantas pessoas têm 0 mensagens no grupo. Se usar 5, vai mostrar quantos usuários têm 5 mensagens ou menos.");
    }
    await _0x67981c();
    let _0x3b60e8 = _0x13de51?.["findIndex"](_0x276030 => _0x276030.groupId === _0x4973f5);
    if (_0x3b60e8 === -1) {
      return _0x15e8c7("Não foi possível localizar o grupo.");
    }
    let _0x1fb86e = [];
    let _0xf813a = parseInt(_0x32666f.trim());
    let _0x2f90b6 = _0x13de51[_0x3b60e8];
    let _0x1b1350 = Array.isArray(_0x2f90b6.numbers) ? _0x2f90b6.numbers : JSON.parse(_0x2f90b6.numbers);
    if (Array.isArray(_0x1b1350)) {
      for (let _0x28dad4 of _0x1b1350) if (_0x28dad4.messages <= _0xf813a && _0x28dad4.figus <= _0xf813a && _0x28dad4.cmd_messages <= _0xf813a && !_0x131fc3.includes(_0x28dad4.id) && !_0x18f01c.includes(_0x28dad4.id) && _0x28dad4.id != _0x597004 && _0x36e0f5.some(_0x43d8d7 => _0x43d8d7.id === _0x28dad4.id)) {
        _0x1fb86e.push({
          'id': _0x28dad4.id,
          'messages': _0x28dad4.messages
        });
      }
    }
    for (let _0xd47ff of _0x36e0f5) if (!_0x1b1350.find(_0x45c0f1 => _0x45c0f1.id === _0xd47ff.id) && _0xd47ff.id.length > 5 && !_0x18f01c.includes(_0xd47ff.id) && _0xd47ff.id != _0x597004 && !_0x1fb86e.some(_0x36c80c => _0x36c80c.id === _0xd47ff.id)) {
      _0x1fb86e.push({
        'id': _0xd47ff.id,
        'messages': 0x0
      });
    }
    if (_0x1fb86e.length == 0) {
      return _0x15e8c7("Não tem pessoas com " + _0x32666f + " mensagens.");
    }
    _0x1fb86e.sort((_0x37d066, _0x4091b6) => _0x4091b6.messages - _0x37d066.messages);
    let _0x20d748 = "Usuários com " + _0xf813a + " mensagem(ns) pra baixo (ordenados por mensagens):\n\n";
    _0x1fb86e.forEach((_0x419fe8, _0x10a439) => {
      _0x20d748 += _0x10a439 + 1 + " " + _0x2a373d + " Membro: @" + _0x419fe8.id.split('@')[0] + " - " + _0x419fe8.messages + "\n\n";
    });
    _0x1c5c20(_0x20d748);
    return true;
  }
}, {
  'name': "banghost",
  'aliases': [],
  'category': "dono",
  'description': "Remove membros inativos do grupo",
  'longDescription': "Remove membros do grupo que enviaram menos mensagens que o limite especificado, essencialmente removendo membros \"fantasmas\" ou inativos.",
  'usage': "banghost [limite]",
  'example': "banghost 0",
  'menu': "dono",
  'menuSection': "Moderação",
  'permissions': _0x3b3928,
  'requirements': _0x35d5be,
  'execute': async ({
    conn: _0x46dbb2,
    info: _0x23c759,
    from: _0x12d2c7,
    q: _0x49a441,
    SoDono: _0x17a48b,
    isGroup: _0x3de9d9,
    groupAdmins: _0x42c170,
    numerodono: _0x2a6f19,
    botNumber: _0x44fadb,
    groupMembers: _0x1f92dd,
    countMessage: _0x5a3d13,
    LIMPARDOCNT_QUEMJASAIU: _0x345004,
    prefix: _0x4fb613,
    command: _0x26ccda,
    reply: _0x28e98e,
    Res_SoGrupo: _0x753550,
    Res_SoDono: _0x50e203
  }) => {
    if (!_0x3de9d9) {
      return _0x28e98e(_0x753550);
    }
    if (!_0x17a48b) {
      return _0x28e98e(_0x50e203);
    }
    if (_0x49a441.match(/[a-z]/i) || !_0x49a441 || _0x49a441.length > 3) {
      return _0x28e98e("Digite a partir de quantas mensagens pra baixo você deseja remover (que não interaja no grupo).\nExemplo: " + (_0x4fb613 + _0x26ccda) + " 0");
    }
    await _0x345004();
    let _0x52374d = _0x5a3d13?.["findIndex"](_0x3f3f65 => _0x3f3f65.groupId === _0x12d2c7);
    if (_0x52374d === -1) {
      return _0x28e98e("Não foi possível localizar o grupo.");
    }
    let _0x322272 = [];
    let _0xa68588 = Math.floor(_0x49a441.trim());
    let _0x73d2d = _0x5a3d13[_0x52374d];
    let _0x7db910 = Array.isArray(_0x73d2d.numbers) ? _0x73d2d.numbers : JSON.parse(_0x73d2d.numbers);
    if (Array.isArray(_0x7db910)) {
      for (let _0x246d14 of _0x7db910) if (_0x246d14.messages <= _0xa68588 && _0x246d14.figus <= _0xa68588 && _0x246d14.cmd_messages <= _0xa68588 && !_0x42c170.includes(_0x246d14.id) && !_0x2a6f19.includes(_0x246d14.id) && _0x246d14.id != _0x44fadb && _0x1f92dd.some(_0x214f7a => _0x214f7a.id === _0x246d14.id)) {
        _0x322272.push(_0x246d14.id);
      }
    }
    for (let _0x3815d1 of _0x1f92dd) if (!_0x7db910.find(_0xa76dcf => _0xa76dcf.id === _0x3815d1.id) && _0x3815d1.id.length > 5 && !_0x2a6f19.includes(_0x3815d1.id) && _0x3815d1.id != _0x44fadb && !_0x322272.some(_0x12f275 => _0x12f275.id === _0x3815d1.id)) {
      _0x322272.push(_0x3815d1.id);
    }
    if (_0x322272.length == 0) {
      return _0x28e98e("Não tem mais pessoas com " + _0x49a441.trim() + " mensagem(ns) para eu remover..");
    }
    await _0x46dbb2.groupParticipantsUpdate(_0x12d2c7, _0x322272, "remove");
    return true;
  }
}, {
  'name': ["nome-bot", "nick-dono", "numero-dono", "prefixo-bot"],
  'aliases': ["setprefix", "setdono"],
  'category': "dono",
  'description': "Altera as configurações principais do bot",
  'longDescription': "Permite que o dono altere diversas configurações do bot como nome, prefixo, número do dono e apelido do dono.",
  'usage': "nome-bot [novo nome] / nick-dono [novo nick] / numero-dono [novo número] / prefixo-bot [novo prefixo]",
  'example': "nome-bot Bot Assistente",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x420ad4,
  'execute': async ({
    conn: _0x2c98d1,
    info: _0x3776ef,
    from: _0xd40de,
    q: _0x4e92cd,
    args: _0x3bfa7b,
    SoDono: _0x3899ee,
    isnit: _0x34fb05,
    setting: _0x2e9314,
    numerodono: _0x44c1a7,
    SNET: _0x546db7,
    verificarN: _0x2b530c,
    fs: _0x21bc96,
    reply: _0x48d32c,
    path: _0x277afd,
    command: _0x17ab16,
    attDnG: _0x5f34a3
  }) => {
    if (!_0x4e92cd || _0x3bfa7b.length < 1) {
      const _0x5770f8 = {
        "nome-bot": "❌ Digite o novo nome para o bot",
        "nick-dono": "❌ Digite o novo nick para o dono do bot",
        "numero-dono": "❌ Digite o novo número do dono",
        "prefixo-bot": "❌ Digite o novo prefixo para o bot"
      };
      return _0x48d32c(_0x5770f8[_0x17ab16] || "❌ Digite o valor necessário");
    }
    const _0x14cd5e = _0x277afd.join(__dirname, "../../dados/settings.json");
    switch (_0x17ab16) {
      case "nome-bot":
        _0x2e9314.NomeDoBot = _0x4e92cd.trim();
        _0x21bc96.writeFileSync(_0x14cd5e, JSON.stringify(_0x2e9314, null, 2));
        global.NomeDoBot = _0x4e92cd.trim();
        _0x48d32c("✅ O nome do seu bot foi alterado com sucesso para: *" + _0x4e92cd + '*');
        break;
      case "nick-dono":
        _0x2e9314.NickDono = _0x4e92cd.trim();
        _0x21bc96.writeFileSync(_0x14cd5e, JSON.stringify(_0x2e9314, null, 2));
        global.NickDono = _0x4e92cd.trim();
        _0x48d32c("✅ O Nick do Dono foi configurado para: *" + _0x4e92cd + '*');
        break;
      case "numero-dono":
        let _0x45a048 = _0x4e92cd.trim().replace(/[^\d]/g, '');
        if (!_0x45a048) {
          return _0x48d32c("❌ Insira um número válido.");
        }
        try {
          const [_0xefdd4] = await _0x2c98d1.onWhatsApp(_0x45a048);
          if (!_0xefdd4) {
            return _0x48d32c("❌ Este número não existe no WhatsApp.");
          }
          _0x48d32c("✅ Número verificado: " + _0x45a048 + " existe no WhatsApp.\n🔄 Atualizando configurações...");
          _0x2e9314.numerodono = _0x45a048;
          _0x21bc96.writeFileSync(_0x14cd5e, JSON.stringify(_0x2e9314, null, 2));
          global.numerodono_ofc = _0x45a048;
          global.nmrdn_dono2 = _0x45a048 + _0x546db7;
          if (Array.isArray(_0x44c1a7) && _0x44c1a7.length > 0) {
            _0x44c1a7[0] = _0x45a048 + _0x546db7;
          }
          if (typeof _0x5f34a3 === "function") {
            _0x5f34a3();
          }
          _0x48d32c("╭━━━━━━━━━━━━━━━━━━╮\n┃ ✅ 𝐍Ú𝐌𝐄𝐑𝐎 𝐀𝐓𝐔𝐀𝐋𝐈𝐙𝐀𝐃𝐎! ✅\n┃\n┃ 📱 Novo número: +" + _0x45a048 + "\n┃\n┃ 🔄 Atualizações realizadas:\n┃ • Arquivo settings.json ✅\n┃ • Variáveis globais ✅\n┃ • Permissões de dono ✅\n┃\n┃ 🎯 Teste agora mesmo usando\n┃ qualquer comando de dono!\n┃\n┃ 💡 Permissões aplicadas\n┃ em tempo real!\n╰━━━━━━━━━━━━━━━━━━╯");
        } catch (_0x405c46) {
          console.error("Erro ao verificar número:", _0x405c46);
          return _0x48d32c("❌ Erro ao verificar o número: " + _0x405c46.message);
        }
        break;
      case "prefixo-bot":
        _0x2e9314.prefix = _0x4e92cd;
        _0x21bc96.writeFileSync(_0x14cd5e, JSON.stringify(_0x2e9314, null, 2));
        global.prefix = _0x4e92cd;
        _0x48d32c("✅ O prefixo foi alterado com sucesso para: *" + _0x2e9314.prefix + '*');
        break;
    }
    return true;
  }
}, {
  'name': "fotomenu",
  'aliases': ["logosmenu", "atualizarlogo", "attlogo"],
  'category': "dono",
  'description': "Atualiza as logos do menu",
  'longDescription': "Permite atualizar URLs e tipos de logos para menus específicos ou todos os menus em um tema.",
  'usage': "fotomenu link|tipo",
  'example': "fotomenu https://exemplo.com/imagem.jpg|img",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x1aa929,
  'execute': async ({
    conn: _0x2b471d,
    q: _0x506aeb,
    from: _0x4c8311,
    sender: _0x2e4e39,
    fs: _0x3bdec0,
    path: _0x2fd501,
    prefix: _0xea7b77,
    createChoiceMenu: _0x2a7ad0,
    reply: _0x5abe8b,
    command: _0x541904
  }) => {
    try {
      if (_0x541904 === "attlogo") {
        const _0xfa4cfe = _0x506aeb.split('|');
        if (_0xfa4cfe.length !== 4) {
          return _0x5abe8b("❌ Formato inválido para attlogo. Uso correto: tema|menu_ou_todos|link|tipoArquivo");
        }
        const [_0x374870, _0x27392f, _0x32eebc, _0x296d58] = _0xfa4cfe;
        const _0x373ae3 = _0x2fd501.join(__dirname, "../../dados/temas/" + _0x374870 + ".json");
        const _0x200bde = await _0x3bdec0.promises.readFile(_0x373ae3, "utf8");
        const _0x191959 = JSON.parse(_0x200bde);
        if (_0x27392f === "todos") {
          for (const _0x83c0c3 of Object.keys(_0x191959)) {
            if (typeof _0x191959[_0x83c0c3] === "object" && _0x191959[_0x83c0c3] !== null && _0x83c0c3 !== "estiloMenu") {
              const _0x1a8fbc = {
                url: _0x32eebc,
                type: _0x296d58
              };
              _0x191959[_0x83c0c3] = _0x1a8fbc;
            }
          }
        } else {
          if (!_0x191959[_0x27392f]) {
            _0x191959[_0x27392f] = {};
          }
          _0x191959[_0x27392f].url = _0x32eebc;
          _0x191959[_0x27392f].type = _0x296d58;
        }
        await _0x3bdec0.promises.writeFile(_0x373ae3, JSON.stringify(_0x191959, null, 2));
        setTimeout(() => {
          process.exit();
        }, 2000);
        return true;
      }
      const _0x5853f3 = _0x506aeb.split('|').map(_0x482495 => _0x482495.trim());
      if (_0x5853f3.length < 2) {
        return _0x5abe8b("Formato inválido. Use: link|tipo (img, gif ou video)");
      }
      const [_0x14c78e, _0x274a6b] = _0x5853f3;
      if (!["img", "gif", "video"].includes(_0x274a6b)) {
        return _0x5abe8b("Tipo inválido. Use: img, gif ou video");
      }
      const _0x537b98 = _0x2fd501.join(__dirname, "../../dados/temas/");
      let _0x4a0777 = await _0x3bdec0.promises.readdir(_0x537b98);
      const _0x2d0aa9 = _0x4a0777.filter(_0x46e874 => _0x46e874.endsWith(".json"));
      const _0x160eee = await Promise.all(_0x2d0aa9.map(async _0x4ab42d => {
        try {
          const _0x531cac = await _0x3bdec0.promises.readFile('' + _0x537b98 + _0x4ab42d, "utf8");
          const _0xc618e4 = JSON.parse(_0x531cac);
          return {
            'arquivo': _0x4ab42d.replace(".json", ''),
            'nome': _0xc618e4.nomeTema || _0x4ab42d.replace(".json", '')
          };
        } catch (_0x36b598) {
          return {
            'arquivo': _0x4ab42d.replace(".json", ''),
            'nome': _0x4ab42d.replace(".json", ''),
            'erro': true
          };
        }
      }));
      const _0x30d305 = {};
      const _0x48a791 = {
        text: "╭━━━⊱「 🔄 ATUALIZAR LOGO 🔄 」⊰━━━╮\n┃\n┃ *Detalhes da Atualização:*\n┃ 🔗 Link: " + _0x14c78e + "\n┃ 📁 Tipo: " + _0x274a6b + "\n┃\n┃ *Selecione o tema que deseja editar:*\n┃",
        options: {}
      };
      _0x30d305.principal = _0x48a791;
      _0x160eee.forEach((_0x77d69e, _0x7185e6) => {
        const _0x1ffcd1 = (_0x7185e6 + 1).toString();
        _0x30d305.principal.text += "┃ " + _0x1ffcd1 + " - " + _0x77d69e.nome + "\n";
        const _0x3ad7ec = {
          submenu: "menu_" + _0x77d69e.arquivo
        };
        _0x30d305.principal.options[_0x1ffcd1] = _0x3ad7ec;
        const _0x1aa3b3 = {
          text: '',
          options: {}
        };
        _0x30d305["menu_" + _0x77d69e.arquivo] = _0x1aa3b3;
      });
      _0x30d305.principal.text += "┃\n┃ 0 - Cancelar\n┃\n╰━━━⊱「 𝐀𝐓𝐔𝐀𝐋𝐈𝐙𝐀𝐑 𝐋𝐎𝐆𝐎 」⊰━━━╯\n\nDigite uma opção:";
      const _0xf2a1a = {
        close: true,
        text: "❌ Operação cancelada!",
        edit: true
      };
      _0x30d305.principal.options['0'] = _0xf2a1a;
      for (const _0x41bee2 of _0x160eee) {
        const _0x9baf15 = '' + _0x537b98 + _0x41bee2.arquivo + ".json";
        const _0x47ebcd = await _0x3bdec0.promises.readFile(_0x9baf15, "utf8");
        const _0x33a1a1 = JSON.parse(_0x47ebcd);
        const _0xa1a82d = Object.keys(_0x33a1a1).filter(_0x465913 => typeof _0x33a1a1[_0x465913] === "object" && _0x33a1a1[_0x465913] !== null && _0x33a1a1[_0x465913].hasOwnProperty("url") && _0x465913 !== "estiloMenu");
        _0x30d305["menu_" + _0x41bee2.arquivo].text = "╭━━━⊱「 🔄 ATUALIZAR LOGO 🔄 」⊰━━━╮\n┃\n┃ *Tema:* " + (_0x33a1a1.nomeTema || _0x41bee2.arquivo) + "\n┃ *Detalhes da Atualização:*\n┃ 🔗 Link: " + _0x14c78e + "\n┃ 📁 Tipo: " + _0x274a6b + "\n┃\n┃ *Selecione qual menu deseja atualizar:*\n┃";
        _0x30d305["menu_" + _0x41bee2.arquivo].text += "┃ todos - Atualizar TODOS os menus\n";
        _0x30d305["menu_" + _0x41bee2.arquivo].options.todos = {
          'text': "✅ Todos os menus do tema *" + (_0x33a1a1.nomeTema || _0x41bee2.arquivo) + "* foram atualizados!\n\n🔗 Link: " + _0x14c78e + "\n📁 Tipo: " + _0x274a6b + "\n\n⏳ Reiniciando o bot para aplicar as alterações...",
          'command': _0xea7b77 + "attlogo " + _0x41bee2.arquivo + "|todos|" + _0x14c78e + '|' + _0x274a6b,
          'edit': true
        };
        _0xa1a82d.forEach((_0x110a33, _0x2efb5e) => {
          const _0x52ea05 = (_0x2efb5e + 1).toString();
          _0x30d305["menu_" + _0x41bee2.arquivo].text += "┃ " + _0x52ea05 + " - " + _0x110a33 + "\n";
          _0x30d305["menu_" + _0x41bee2.arquivo].options[_0x52ea05] = {
            'text': "✅ O menu *" + _0x110a33 + "* do tema *" + (_0x33a1a1.nomeTema || _0x41bee2.arquivo) + "* foi atualizado!\n\n🔗 Link: " + _0x14c78e + "\n📁 Tipo: " + _0x274a6b + "\n\n⏳ Reiniciando o bot para aplicar as alterações...",
            'command': _0xea7b77 + "attlogo " + _0x41bee2.arquivo + '|' + _0x110a33 + '|' + _0x14c78e + '|' + _0x274a6b,
            'edit': true
          };
        });
        _0x30d305["menu_" + _0x41bee2.arquivo].text += "┃\n┃ 0 - Voltar\n┃\n╰━━━⊱「 𝐌𝐄𝐍𝐔 " + _0x41bee2.arquivo.toUpperCase() + " 」⊰━━━╯\n\nDigite uma opção:";
        const _0x25cc4c = {
          back: true
        };
        _0x30d305["menu_" + _0x41bee2.arquivo].options['0'] = _0x25cc4c;
      }
      await _0x2a7ad0(_0x4c8311, _0x2e4e39, _0x30d305.principal.text, _0x30d305.principal.options, {
        'menus': _0x30d305,
        'history': ["principal"]
      });
      return true;
    } catch (_0x2810f3) {
      console.error("Erro no comando fotomenu:", _0x2810f3);
      return _0x5abe8b("❌ Ocorreu um erro: " + _0x2810f3.message);
    }
  }
}, {
  'name': "dono1",
  'aliases': ["dono2", "dono3", "dono4", "dono5", "dono6"],
  'category': "dono",
  'description': "Define um dono adicional do bot",
  'longDescription': "Permite definir ou alterar os números de donos adicionais do bot. O número do comando (dono1, dono2, etc.) determina qual posição de dono será alterada.",
  'usage': "dono[1-6] [número]",
  'example': "dono1 5511999999999",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x2671ed,
  'requirements': _0x27d661,
  'execute': async ({
    conn: _0x45394f,
    info: _0x180032,
    from: _0x49de66,
    q: _0xd5d7cf,
    command: _0x45fc7f,
    nescessario: _0x3c4d04,
    fs: _0x1934ea,
    mention: _0x3cee66,
    reply: _0x35fee5,
    path: _0x3b4250,
    SNET: _0x38c113,
    attDnG: _0x15f79f
  }) => {
    const _0x3cd36a = _0x3b4250.join(__dirname, "../../dados/nescessario.json");
    let _0x45f67a = _0xd5d7cf.trim().replaceAll('@', '');
    const _0x42259c = {
      dono1: "primeiro",
      dono2: "segundo",
      dono3: "terceiro",
      dono4: "quarto",
      dono5: "quinto",
      dono6: "sexto"
    };
    let _0x48f8cd = _0x42259c[_0x45fc7f] || _0x45fc7f;
    if (_0x45f67a === '.') {
      _0x3cee66("O " + _0x48f8cd + " dono foi removido com sucesso.");
      _0x3c4d04[_0x45fc7f] = '.';
      _0x1934ea.writeFileSync(_0x3cd36a, JSON.stringify(_0x3c4d04, null, 2), "utf8");
      global[_0x45fc7f] = '.';
      _0x15f79f(_0x3c4d04, _0x38c113);
      return true;
    }
    _0x45f67a = _0x45f67a.replace(/[^0-9]/g, '');
    if (!_0x45f67a || _0x45f67a.length === 0) {
      const _0x34e42b = {
        success: false,
        message: "Número inválido. Por favor, insira apenas números ou '.' para remover."
      };
      return _0x34e42b;
    }
    let _0x2e4db5 = _0x3c4d04[_0x45fc7f];
    if (_0x2e4db5 === '.') {
      _0x3cee66("O " + _0x48f8cd + " dono foi adicionado com sucesso como: " + _0x45f67a);
    } else {
      _0x3cee66("O " + _0x48f8cd + " dono foi alterado com sucesso de " + _0x2e4db5 + " para: " + _0x45f67a);
    }
    _0x3c4d04[_0x45fc7f] = _0x45f67a;
    _0x1934ea.writeFileSync(_0x3cd36a, JSON.stringify(_0x3c4d04, null, 2), "utf8");
    global[_0x45fc7f] = _0x45f67a;
    _0x15f79f(_0x3c4d04, _0x38c113);
    return true;
  }
}, {
  'name': "setprefixs",
  'aliases': [],
  'category': "dono",
  'description': "Altera o prefixo do bot",
  'longDescription': "Permite que o dono altere o prefixo de comandos utilizado pelo bot.",
  'usage': "setprefixs [novo prefixo]",
  'example': "setprefixs !",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x36c314,
  'requirements': _0x3b8c5d,
  'execute': async ({
    conn: _0x43a9f3,
    info: _0x3e8c18,
    from: _0x56b642,
    args: _0x44f60c,
    SoDono: _0x22ccbb,
    isnit: _0x572ab4,
    issupre: _0x2db51c,
    ischyt: _0x2aac24,
    setting: _0x4aeaca,
    fs: _0x243fd5,
    reply: _0x475f07,
    Res_SoDono: _0x3935bd,
    path: _0x408d17
  }) => {
    if (!_0x22ccbb && !_0x572ab4 && !_0x2db51c && !_0x2aac24 && !_0x3e8c18.key.fromMe) {
      return _0x475f07(_0x3935bd);
    }
    const _0x502993 = _0x408d17.join(__dirname, "../../dados/settings.json");
    prefix = _0x44f60c[0];
    _0x4aeaca.prefix = prefix;
    _0x243fd5.writeFileSync(_0x502993, JSON.stringify(_0x4aeaca, null, 2));
    _0x475f07("O prefixo foi alterado com sucesso para: " + prefix);
    return true;
  }
}, {
  'name': "nomegp",
  'aliases': [],
  'category': "admin",
  'description': "Altera o nome do grupo",
  'longDescription': "Permite que administradores alterem o nome do grupo para um novo nome especificado.",
  'usage': "nomegp [novo nome]",
  'example': "nomegp Grupo de Estudos 2023",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x400886,
  'requirements': _0x2ddcab,
  'execute': async ({
    conn: _0x491430,
    info: _0x29c20e,
    from: _0x28271e,
    body: _0x13757d,
    Os_Returns: _0x103255,
    reply: _0x159115
  }) => {
    if (_0x103255(true, true, true)["true"]) {
      return _0x159115(_0x103255(true, true, true).txt);
    }
    _0x491430.groupUpdateSubject(_0x28271e, '' + _0x13757d.slice(9));
    const _0x19eb7a = {
      text: "Sucesso, alterou o nome do grupo"
    };
    const _0x2f751a = {
      quoted: _0x29c20e
    };
    _0x491430.sendMessage(_0x28271e, _0x19eb7a, _0x2f751a);
    return true;
  }
}, {
  'name': "fotobot",
  'aliases': [],
  'category': "dono",
  'description': "Altera a foto de perfil do bot",
  'longDescription': "Permite que o dono altere a foto de perfil do bot, utilizando uma imagem enviada ou marcada.",
  'usage': "fotobot [marcar imagem]",
  'example': "fotobot [responder a uma imagem]",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x13634e,
  'requirements': {
    'customRequirement': ({
      isQuotedImage: _0x3103e9,
      prefix: _0x8658d2
    }) => {
      if (!_0x3103e9) {
        const _0x3f25d9 = {
          success: false,
          message: "Envie fotos com legendas " + _0x8658d2 + "fotobot ou tags de imagem que já foram enviadas"
        };
        return _0x3f25d9;
      }
      const _0xd9c8ea = {
        success: true
      };
      return _0xd9c8ea;
    }
  },
  'execute': async ({
    conn: _0xcfbae,
    info: _0xc7da24,
    from: _0x1ba4d5,
    SoDono: _0x36c7db,
    isnit: _0x38744c,
    issupre: _0x9d62b8,
    ischyt: _0x4d4a3d,
    isQuotedImage: _0xee46ec,
    botNumber: _0x2ae50d,
    getFileBuffer: _0x2c455b,
    prefix: _0x1a0b3a,
    reply: _0x1634b0,
    Res_SoDono: _0x527124
  }) => {
    if (!_0x36c7db && !_0x38744c && !_0x9d62b8 && !_0x4d4a3d && !_0xc7da24.key.fromMe) {
      return _0x1634b0(_0x527124);
    }
    if (!_0xee46ec) {
      return _0x1634b0("Envie fotos com legendas " + _0x1a0b3a + "fotobot ou tags de imagem que já foram enviadas");
    }
    buff = await _0x2c455b(_0xc7da24.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage, "image");
    _0xcfbae.updateProfilePicture(_0x2ae50d, buff);
    _0x1634b0("Obrigado pelo novo perfil😗");
    return true;
  }
}, {
  'name': "clonar",
  'aliases': [],
  'category': "dono",
  'description': "Clona a foto de perfil de um usuário para o bot",
  'longDescription': "Permite que o dono do bot copie a foto de perfil de um usuário para usar como foto do bot.",
  'usage': "clonar @usuário",
  'example': "clonar @membro",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x13d37a,
  'requirements': _0x186582,
  'execute': async ({
    conn: _0x120c43,
    info: _0x3f7c28,
    from: _0x4b911d,
    args: _0x426c68,
    SoDono: _0x317bb0,
    isnit: _0x2ed055,
    issupre: _0x45bfc4,
    ischyt: _0xe6e8f0,
    Os_Returns: _0x317eab,
    menc_jid2: _0x1c8bf7,
    groupMembers: _0x35e418,
    botNumber: _0x1a6d69,
    getBuffer: _0x4a210c,
    reply: _0x407f88,
    mentions: _0x234c06
  }) => {
    if (!_0x317bb0 && !_0x2ed055 && !_0x45bfc4 && !_0xe6e8f0) {
      return _0x407f88("Você quem é o proprietário?");
    }
    if (_0x317eab(true, true, true)["true"]) {
      return _0x407f88(_0x317eab(true, true, true).txt);
    }
    if (_0x426c68.length < 1) {
      return _0x407f88("Marque a pessoa que você quer clonar\n\n*EXEMPLO:* clone @");
    }
    if (!_0x1c8bf7[0] || _0x1c8bf7[1]) {
      return _0x407f88("Marque o @ do usuário para roubar a foto do perfil dele, para a do bot..");
    }
    let {
      jid: _0x15bd83,
      id: _0x4779c7,
      notify: _0x5da92a
    } = _0x35e418.find(_0x199d6a => _0x199d6a.id === _0x1c8bf7[0]);
    try {
      pp = await _0x120c43.profilePictureUrl(_0x4779c7);
      buffer = await _0x4a210c(pp);
      _0x120c43.updateProfilePicture(_0x1a6d69, buffer);
      _0x234c06("Foto do perfil atualizada com sucesso, usando a foto do perfil @" + _0x4779c7.split('@')[0], [_0x4779c7], true);
    } catch (_0xce05d9) {
      _0x407f88("Putz, deu erro, a pessoa deve estar sem foto 😔");
    }
    return true;
  }
}, {
  'name': "bcgp",
  'aliases': ["bcgc"],
  'category': "admin",
  'description': "Envia uma mensagem para todos os membros do grupo",
  'longDescription': "Permite que administradores enviem uma mensagem de transmissão para todos os membros do grupo individualmente.",
  'usage': "bcgp [mensagem]",
  'example': "bcgp Reunião importante hoje às 20h!",
  'menu': "admin",
  'menuSection': "Comunicação",
  'permissions': _0x12de54,
  'requirements': _0xdac606,
  'execute': async ({
    conn: _0x491b77,
    info: _0x172278,
    from: _0x586d5f,
    q: _0x31eaa4,
    body: _0x34e382,
    sender: _0x3f518e,
    groupName: _0x274a59,
    groupMembers: _0x492699,
    SoDono: _0x5273e3,
    isnit: _0x5deef8,
    issupre: _0x3410c7,
    ischyt: _0x15c2ae,
    isGroupAdmins: _0x15b821,
    isMedia: _0x1e2e5d,
    isQuotedImage: _0xf061b2,
    getFileBuffer: _0x5340a8,
    sendMess: _0x10a0ff,
    sleep: _0x39d49f,
    reply: _0x2f10c3,
    Res_SoDono: _0x21fec7,
    Res_SoAdm: _0xc5daef
  }) => {
    if (!_0x5273e3 && !_0x5deef8 && !_0x3410c7 && !_0x15c2ae && !_0x172278.key.fromMe) {
      return _0x2f10c3(_0x21fec7);
    }
    if (!_0x15b821) {
      return _0x2f10c3(_0xc5daef);
    }
    if (!_0x31eaa4.trim()) {
      return _0x2f10c3("Cade o texto?");
    }
    if (_0x1e2e5d && !_0x172278.message.videoMessage || _0xf061b2) {
      encmedia = await _0x5340a8(_0x172278.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage, "image");
      for (i = 0; i < _0x492699.length; i++) {
        await _0x39d49f(2000);
        const _0x3e0838 = {
          image: buff
        };
        _0x491b77.sendMessage(_0x492699[i].id, _0x3e0838, {
          'caption': "*「 TRANSMISSÃO 」*\n\nGrupo: " + _0x274a59 + "\n Número: wa.me/" + _0x3f518e.split('@')[0] + "\nMensagem : " + _0x34e382.slice(6)
        });
      }
      _0x2f10c3("Transmissão enviada..");
    } else {
      for (i = 0; i < _0x492699.length; i++) {
        await _0x39d49f(2000);
        _0x10a0ff(_0x492699[i].id, "*「 TRANSMISSÃO 」*\n\nGrupo : " + _0x274a59 + "\n Número : wa.me/" + _0x3f518e.split('@')[0] + "\nMensagem : " + _0x34e382.slice(6));
      }
      _0x2f10c3("Grupo de transmissão bem-sucedido");
    }
    return true;
  }
}, {
  'name': "getquoted",
  'aliases': [],
  'category': "dev",
  'description': "Mostra informações da mensagem citada",
  'longDescription': "Exibe as informações detalhadas de uma mensagem citada, útil para desenvolvedores do bot.",
  'usage': "getquoted",
  'example': "getquoted",
  'menu': "dev",
  'menuSection': "Desenvolvimento",
  'permissions': _0x28602c,
  'requirements': {},
  'execute': async ({
    conn: _0x10463c,
    info: _0x19e38c,
    from: _0x128d8a,
    reply: _0x548ad7
  }) => {
    _0x548ad7(JSON.stringify(_0x19e38c.message.extendedTextMessage.contextInfo, null, 3));
    return true;
  }
}, {
  'name': "donos",
  'aliases': [],
  'category': "info",
  'description': "Mostra a lista de donos do bot",
  'longDescription': "Exibe uma lista completa com todos os donos do bot e suas respectivas posições.",
  'usage': "donos",
  'example': "donos",
  'menu': "info",
  'menuSection': "Bot",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x12ff46,
    info: _0x2a5ba2,
    from: _0xe9c0f2,
    NomeDoBot: _0x1aa092,
    numerodono_ofc: _0x1fc48a,
    reply: _0x18bf04,
    nescessario: _0x437414,
    EmojiBot: _0x50700c
  }) => {
    const _0x5aed89 = _0x4283de => {
      if (!_0x4283de || _0x4283de === '' || _0x4283de === '.' || _0x4283de === "undefined" || _0x4283de === "null") {
        return "Não definido";
      }
      return "wa.me/" + _0x4283de;
    };
    _0x18bf04("╭━━━━━◉\n╔┉✼┉═༺◈✼" + _0x50700c + "✼◈༻═┉✼┉╗\n║ *HIERARQUIA DO " + _0x1aa092 + "*\n╚┉✼┉═༺◈✼" + _0x50700c + "✼◈༻═┉✼┉╝\n╰━━━━━◉\n\n👑 *PROPRIETÁRIO OFICIAL:* \n wa.me/" + _0x1fc48a + "\n\n╭─── *SUB-PROPRIETÁRIOS* ───\n│ 🔹 [ 1 ] " + _0x5aed89(_0x437414.dono1) + "\n│ 🔹 [ 2 ] " + _0x5aed89(_0x437414.dono2) + "\n│ 🔹 [ 3 ] " + _0x5aed89(_0x437414.dono3) + "\n│ 🔹 [ 4 ] " + _0x5aed89(_0x437414.dono4) + "\n│ 🔹 [ 5 ] " + _0x5aed89(_0x437414.dono5) + "\n│ 🔹 [ 6 ] " + _0x5aed89(_0x437414.dono6) + "\n╰────────────────────");
    return true;
  }
}, {
  'name': "admins",
  'aliases': ["listadmins", "listaadmins"],
  'category': "grupo",
  'description': "Lista todos os administradores do grupo",
  'longDescription': "Exibe uma lista numerada com todos os administradores do grupo atual.",
  'usage': "admins",
  'example': "admins",
  'menu': ["principal", "admin"],
  'menuSection': "Grupo",
  'permissions': _0x4cfd41,
  'requirements': {},
  'execute': async ({
    conn: _0x1cb975,
    info: _0x268cee,
    from: _0x445429,
    Res_SoGrupo: _0x4b9982,
    isGroup: _0x587c09,
    groupMetadata: _0x292320,
    groupAdmins: _0x2d908a,
    mentions: _0x3a46bf,
    reply: _0x172a15
  }) => {
    if (!_0x587c09) {
      return _0x172a15(_0x4b9982);
    }
    ytb = "Lista de admins do grupo *" + (_0x292320?.["subject"] || "Não foi posssivel puxar o nome.") + "*\nTotal : " + _0x2d908a.length + "\n\n";
    no = 0;
    for (let _0x474e25 of _0x2d908a) {
      no += 1;
      ytb += '[' + no.toString() + "] @" + _0x474e25.split('@')[0] + "\n";
    }
    _0x3a46bf(ytb, _0x2d908a, true);
    return true;
  }
}, {
  'name': "criartabela",
  'aliases': ["criartbl", "criartab"],
  'category': "admin",
  'description': "Cria uma tabela de texto no grupo",
  'longDescription': "Cria uma tabela personalizada com informações importantes que ficará salva para ser consultada pelos membros do grupo a qualquer momento.",
  'usage': "criartabela [texto da tabela]",
  'example': "criartabela Regras do grupo: 1. Sem flood 2. Respeitar os membros",
  'menu': "admin",
  'menuSection': "Utilidades",
  'permissions': _0x44c976,
  'requirements': _0x20bfe1,
  'execute': async ({
    conn: _0x1152cd,
    info: _0x580458,
    from: _0x421050,
    q: _0x1903fc,
    args: _0xd0dd08,
    fs: _0x203a9a,
    SoDono: _0x629b3a,
    isGroupAdmins: _0x53a2af,
    reply: _0x35ee4f,
    moment: _0x1cff41,
    path: _0x304deb
  }) => {
    if (!_0x53a2af && !_0x629b3a) {
      return _0x35ee4f("Só adm ou dono pode utilizar este comando.");
    }
    if (!_0x1903fc.trim()) {
      return _0x35ee4f("Digite o que deseja colocar na tabela do grupo..");
    }
    msgz = _0xd0dd08.join(" ");
    msgtmpol = _0x1cff41.tz("America/Sao_Paulo").format("HH:mm:ss");
    datinhaofc = _0x1cff41.tz("America/Sao_Paulo").format("DD/MM/YY");
    const _0x548fc4 = _0x304deb.join(__dirname, "../../dados/org/json/TABELA/tabela-" + _0x421050 + ".json");
    const _0x1df40b = {
      Horario: msgtmpol
    };
    _0x1df40b.Data = datinhaofc;
    _0x1df40b.Tabela = msgz;
    _0x203a9a.writeFileSync(_0x548fc4, JSON.stringify(_0x1df40b, null, 2));
    _0x35ee4f("Tabela do grupo foi criada com sucesso..");
    return true;
  }
}, {
  'name': "tabelagp",
  'aliases': ["tabeladogp", "tabelinha"],
  'category': "grupo",
  'description': "Mostra a tabela do grupo",
  'longDescription': "Exibe a tabela de informações salva anteriormente no grupo, contendo as informações cadastradas pelo administrador.",
  'usage': "tabelagp",
  'example': "tabelagp",
  'menu': "grupo",
  'menuSection': "Informações",
  'permissions': _0x195c4a,
  'requirements': {},
  'execute': async ({
    conn: _0x2edbf5,
    info: _0x381392,
    from: _0x32bd69,
    prefix: _0x24168f,
    fs: _0x3dbfe1,
    mention: _0xd50d26,
    reply: _0x154e81,
    path: _0x3746c2
  }) => {
    const _0x299091 = _0x3746c2.join(__dirname, "../../dados/org/json/TABELA/tabela-" + _0x32bd69 + ".json");
    if (!_0x3dbfe1.existsSync(_0x299091)) {
      const _0x3f3899 = {
        success: false,
        message: "Cade a tabela, cria ela com o comando\nExemplo : " + _0x24168f + "criartabela lindas do grupo : e etc .."
      };
      return _0x3f3899;
    }
    const _0x338717 = JSON.parse(_0x3dbfe1.readFileSync(_0x299091));
    blity = "- ⏰ Horário que criou a Tabela : " + _0x338717.Horario + "\n\n- 🗓️ Data que criou a Tabela : " + _0x338717.Data + "\n\n - Tabela : " + _0x338717.Tabela;
    _0xd50d26(blity);
    return true;
  }
}, {
  'name': ["ausente", "ativo", "listarafk", "statusafk"],
  'aliases': ["off", "afk", 'on', "voltei"],
  'category': "grupo",
  'description': "Sistema completo de gerenciamento AFK",
  'longDescription': "Sistema avançado para gerenciar status de ausência. Inclui definir ausência, voltar, listar usuários ausentes e verificar status.",
  'usage': "ausente [motivo] [global] | ativo | listarafk | statusafk [@usuario]",
  'example': "• ausente Reunião de trabalho\n• ausente Saindo para almoçar global\n• afk Voltarei em 1 hora g\n• ativo\n• voltei\n• on\n• listarafk\n• statusafk\n• statusafk @usuario",
  'menu': "grupo",
  'menuSection': "Status",
  'permissions': _0x475e17,
  'requirements': {},
  'execute': async ({
    conn: _0x520e0e,
    info: _0x178706,
    from: _0x2978d9,
    q: _0x46b219,
    sender: _0x44cd37,
    sender2: _0x4c31ea,
    prefix: _0x20f5c9,
    command: _0x3737ef,
    SoDono: _0x3479a2,
    isGroupAdmins: _0x222e51,
    DonoOficial: _0x38c2aa,
    BANCOP: _0x52030e,
    moment: _0x3e0907,
    reply: _0x1b2cf8,
    mention: _0x5b9052,
    menc_prt: _0x3d2d9a
  }) => {
    if (!_0x222e51 && !_0x3479a2) {
      return _0x1b2cf8("❌ Este comando é apenas para administradores ou dono.");
    }
    const _0x12570f = Math.floor(Date.now() / 1000);
    const _0x180664 = _0x3e0907.tz("America/Sao_Paulo").format("DD/MM/YYYY HH:mm:ss");
    const _0x14a09d = _0x57f1de => {
      const _0x4ee921 = Math.floor(Date.now() / 1000) - _0x57f1de;
      const _0x49efe3 = Math.floor(_0x4ee921 / 60);
      const _0x18ac3f = Math.floor(_0x49efe3 / 60);
      const _0x3f579c = Math.floor(_0x18ac3f / 24);
      return _0x3f579c > 0 ? _0x3f579c + "d " + _0x18ac3f % 24 + "h " + _0x49efe3 % 60 + 'm' : _0x18ac3f > 0 ? _0x18ac3f + "h " + _0x49efe3 % 60 + 'm' : _0x49efe3 + 'm';
    };
    try {
      if (["ausente", "off", "afk"].includes(_0x3737ef)) {
        if (!_0x46b219.trim()) {
          return _0x1b2cf8("❌ Digite o motivo da ausência!\n\n📝 *Exemplo:* `" + _0x20f5c9 + _0x3737ef + " Reunião de trabalho`\n💡 *Para ausência global:* `" + _0x20f5c9 + _0x3737ef + " motivo global`");
        }
        const _0x23ed04 = _0x46b219.trim().split(" ");
        const _0x4e8754 = ["global", 'g'].includes(_0x23ed04[_0x23ed04.length - 1].toLowerCase());
        const _0x22bf72 = (_0x4e8754 ? _0x23ed04.slice(0, -1).join(" ") : _0x46b219.trim()).replace(/[<>{}]/g, '');
        if (!_0x22bf72 || _0x22bf72.length > 200) {
          return _0x1b2cf8(_0x22bf72 ? "❌ O motivo da ausência deve ter no máximo 200 caracteres." : "❌ Digite um motivo válido para a ausência!");
        }
        if (_0x38c2aa) {
          if (_0x4e8754) {
            _0x52030e.prepare("INSERT OR REPLACE INTO sistema_afk (user_id, grupo_id, motivo, timestamp, is_dono) VALUES (?, NULL, ?, ?, 1)").run(_0x44cd37, _0x22bf72, _0x12570f);
            _0x1b2cf8("🔴 *DONO AUSENTE - GLOBAL*\n\n👑 *Admin:* @" + _0x4c31ea + "\n📝 *Motivo:* " + _0x22bf72 + "\n🕐 *Desde:* " + _0x180664 + "\n🌍 *Escopo:* Todos os grupos\n\n💡 *Use `" + _0x20f5c9 + "ativo` para voltar*");
          } else {
            _0x52030e.prepare("INSERT OR REPLACE INTO sistema_afk (user_id, grupo_id, motivo, timestamp, is_dono) VALUES (?, ?, ?, ?, 1)").run(_0x44cd37, _0x2978d9, _0x22bf72, _0x12570f);
            _0x1b2cf8("🔴 *DONO AUSENTE - GRUPO*\n\n👑 *Admin:* @" + _0x4c31ea + "\n📝 *Motivo:* " + _0x22bf72 + "\n🕐 *Desde:* " + _0x180664 + "\n🏠 *Escopo:* Apenas este grupo\n\n💡 *Use `" + _0x20f5c9 + "ativo` para voltar\n💡 *Para global use:* `" + _0x20f5c9 + "ausente motivo global`");
          }
        } else {
          if (_0x222e51) {
            if (_0x4e8754) {
              return _0x1b2cf8("❌ Apenas o dono pode definir ausência global. Use o comando sem 'global' para ausência no grupo.");
            }
            _0x52030e.prepare("INSERT OR REPLACE INTO sistema_afk (user_id, grupo_id, motivo, timestamp, is_dono) VALUES (?, ?, ?, ?, 0)").run(_0x44cd37, _0x2978d9, _0x22bf72, _0x12570f);
            _0x1b2cf8("🟡 *ADMIN AUSENTE*\n\n👮‍♂️ *Admin:* @" + _0x4c31ea + "\n📝 *Motivo:* " + _0x22bf72 + "\n🕐 *Desde:* " + _0x180664 + "\n🏠 *Escopo:* Apenas este grupo\n\n💡 *Use `" + _0x20f5c9 + "ativo` para voltar*");
          }
        }
      } else {
        if (["ativo", 'on', "voltei"].includes(_0x3737ef)) {
          if (_0x38c2aa) {
            const _0xa1a809 = _0x52030e.prepare("SELECT motivo, timestamp FROM sistema_afk WHERE user_id = ? AND is_dono = 1 AND grupo_id IS NULL").get(_0x44cd37);
            const _0x423130 = _0x52030e.prepare("SELECT motivo, timestamp FROM sistema_afk WHERE user_id = ? AND grupo_id = ? AND is_dono = 1").get(_0x44cd37, _0x2978d9);
            if (_0xa1a809) {
              _0x52030e.prepare("DELETE FROM sistema_afk WHERE user_id = ? AND is_dono = 1 AND grupo_id IS NULL").run(_0x44cd37);
              _0x1b2cf8("🟢 *DONO VOLTOU - GLOBAL!*\n\n👑 *Admin:* @" + _0x4c31ea + "\n⏱️ *Esteve ausente por:* " + _0x14a09d(_0xa1a809.timestamp) + "\n📝 *Último motivo:* " + _0xa1a809.motivo + "\n🌍 *Escopo:* Removido de todos os grupos\n\n✨ *Bem-vindo de volta!*");
            } else {
              if (_0x423130) {
                _0x52030e.prepare("DELETE FROM sistema_afk WHERE user_id = ? AND grupo_id = ? AND is_dono = 1").run(_0x44cd37, _0x2978d9);
                _0x1b2cf8("🟢 *DONO VOLTOU - GRUPO!*\n\n👑 *Admin:* @" + _0x4c31ea + "\n⏱️ *Esteve ausente por:* " + _0x14a09d(_0x423130.timestamp) + "\n📝 *Último motivo:* " + _0x423130.motivo + "\n🏠 *Escopo:* Apenas este grupo\n\n✨ *Bem-vindo de volta!*");
              } else {
                _0x1b2cf8("⚠️ Você não estava registrado como ausente.");
              }
            }
          } else {
            if (_0x222e51) {
              const _0xbc206e = _0x52030e.prepare("SELECT motivo, timestamp FROM sistema_afk WHERE user_id = ? AND grupo_id = ? AND is_dono = 0").get(_0x44cd37, _0x2978d9);
              if (_0x52030e.prepare("DELETE FROM sistema_afk WHERE user_id = ? AND grupo_id = ? AND is_dono = 0").run(_0x44cd37, _0x2978d9).changes > 0) {
                _0x1b2cf8("🟢 *ADMIN VOLTOU!*\n\n👮‍♂️ *Admin:* @" + _0x4c31ea + "\n⏱️ *Esteve ausente por:* " + _0x14a09d(_0xbc206e.timestamp) + "\n📝 *Último motivo:* " + _0xbc206e.motivo + "\n\n✨ *Bem-vindo de volta!*");
              } else {
                _0x1b2cf8("⚠️ Você não estava registrado como ausente neste grupo.");
              }
            }
          }
        } else {
          if (_0x3737ef === "listarafk") {
            const _0x4c50fe = _0x52030e.prepare("SELECT user_id, motivo, timestamp FROM sistema_afk WHERE is_dono = 1 AND grupo_id IS NULL").all();
            const _0x2f22ee = _0x52030e.prepare("SELECT user_id, motivo, timestamp FROM sistema_afk WHERE grupo_id = ? AND is_dono = 1").all(_0x2978d9);
            const _0x4f62dd = _0x52030e.prepare("SELECT user_id, motivo, timestamp FROM sistema_afk WHERE grupo_id = ? AND is_dono = 0").all(_0x2978d9);
            const _0x34ed9e = (_0x355c3c, _0x2fac80) => _0x355c3c.length ? _0x2fac80 + "\n" + _0x355c3c.map((_0x5429ed, _0x32ee80) => _0x32ee80 + 1 + ". @" + _0x5429ed.user_id.split('@')[0] + "\n   📝 " + _0x5429ed.motivo + "\n   ⏱️ Há " + _0x14a09d(_0x5429ed.timestamp) + "\n").join('') + "\n" : '';
            let _0x20f3b5 = "📋 *LISTA DE AUSENTES*\n\n" + _0x34ed9e(_0x4c50fe, "🌍 *DONOS AUSENTES (GLOBAL):*") + _0x34ed9e(_0x2f22ee, "👑 *DONOS AUSENTES (APENAS ESTE GRUPO):*") + _0x34ed9e(_0x4f62dd, "👮‍♂️ *ADMINS AUSENTES (ESTE GRUPO):*");
            const _0x304dfa = _0x4c50fe.length + _0x2f22ee.length + _0x4f62dd.length;
            _0x20f3b5 += _0x304dfa ? "📊 *Total:* " + _0x304dfa + " ausente(s)" : "🎉 *Nenhum administrador está ausente no momento!*";
            _0x5b9052(_0x20f3b5);
          } else {
            if (_0x3737ef === "statusafk") {
              const _0x2130a8 = _0x3d2d9a || (_0x46b219.includes('@') ? _0x46b219.replace('@', '').replace(/\D/g, '') + "@s.whatsapp.net" : _0x44cd37);
              const _0x5c36a0 = _0x52030e.prepare("SELECT motivo, timestamp FROM sistema_afk WHERE user_id = ? AND is_dono = 1 AND grupo_id IS NULL").get(_0x2130a8);
              const _0x4faa3d = _0x52030e.prepare("SELECT motivo, timestamp FROM sistema_afk WHERE user_id = ? AND grupo_id = ? AND is_dono = 1").get(_0x2130a8, _0x2978d9);
              const _0x14cd93 = _0x52030e.prepare("SELECT motivo, timestamp FROM sistema_afk WHERE user_id = ? AND grupo_id = ? AND is_dono = 0").get(_0x2130a8, _0x2978d9);
              const _0x110925 = _0x2130a8.split('@')[0];
              if (_0x5c36a0) {
                _0x1b2cf8("🔴 *STATUS: AUSENTE (DONO - GLOBAL)*\n\n👑 *Usuário:* @" + _0x110925 + "\n📝 *Motivo:* " + _0x5c36a0.motivo + "\n⏱️ *Ausente há:* " + _0x14a09d(_0x5c36a0.timestamp) + "\n🌍 *Escopo:* Global (todos os grupos)");
              } else {
                if (_0x4faa3d) {
                  _0x1b2cf8("🔴 *STATUS: AUSENTE (DONO - GRUPO)*\n\n👑 *Usuário:* @" + _0x110925 + "\n📝 *Motivo:* " + _0x4faa3d.motivo + "\n⏱️ *Ausente há:* " + _0x14a09d(_0x4faa3d.timestamp) + "\n🏠 *Escopo:* Apenas este grupo");
                } else {
                  if (_0x14cd93) {
                    _0x1b2cf8("🟡 *STATUS: AUSENTE (ADMIN)*\n\n👮‍♂️ *Usuário:* @" + _0x110925 + "\n📝 *Motivo:* " + _0x14cd93.motivo + "\n⏱️ *Ausente há:* " + _0x14a09d(_0x14cd93.timestamp) + "\n🏠 *Escopo:* Apenas este grupo");
                  } else {
                    _0x1b2cf8("🟢 *STATUS: ATIVO*\n\n✅ *Usuário:* @" + _0x110925 + "\n📱 *Estado:* Online/Disponível\n🎯 *Pode responder normalmente*");
                  }
                }
              }
            } else {
              _0x1b2cf8("❓ *SISTEMA AFK - AJUDA*\n\n🔴 *Ficar ausente (grupo):*\n`" + _0x20f5c9 + "ausente [motivo]`\n\n🌍 *Ficar ausente (global):*\n`" + _0x20f5c9 + "ausente [motivo] global`\n\n🟢 *Voltar ativo:*\n`" + _0x20f5c9 + "ativo`\n\n📋 *Listar ausentes:*\n`" + _0x20f5c9 + "listarafk`\n\n🔍 *Ver status:*\n`" + _0x20f5c9 + "statusafk [@usuario]`\n\n💡 *Aliases disponíveis:*\n• afk, off → ausente\n• on, voltei → ativo\n• g → global\n\n🎯 *Exemplos práticos:*\n• `" + _0x20f5c9 + "ausente Reunião` (só neste grupo)\n• `" + _0x20f5c9 + "ausente Viagem global` (todos os grupos)");
            }
          }
        }
      }
    } catch (_0x5dd290) {
      console.error("Erro no sistema AFK:", _0x5dd290);
      _0x1b2cf8("❌ Erro interno do sistema. Contate o desenvolvedor se persistir.");
    }
    return true;
  }
}, {
  'name': "addcmdgold",
  'aliases': [],
  'category': "admin",
  'description': "Adiciona um comando à lista de comandos Gold",
  'longDescription': "Adiciona um comando à lista de comandos Gold do grupo, que só poderão ser executados consumindo Gold do usuário.",
  'usage': "addcmdgold [comando]/[quantidade]",
  'example': "addcmdgold play/3",
  'menu': "admin",
  'menuSection': "Economia",
  'permissions': _0x1a4998,
  'requirements': _0xdf077a,
  'execute': async ({
    q: _0x29f58c,
    prefix: _0x28b4db,
    command: _0x4d4b20,
    dataGp: _0x13a9cb,
    setGp: _0x113554,
    Os_Returns: _0x49f36c,
    reply: _0x2c5a8a
  }) => {
    if (_0x49f36c(true, true, true)["true"]) {
      return _0x2c5a8a(_0x49f36c(true, true, true).txt);
    }
    let [_0x2ea24c, _0x27c3f1] = _0x29f58c.trim().toLowerCase().split('/');
    _0x2ea24c = _0x2ea24c.replace(_0x28b4db, '');
    if (_0x2ea24c && _0x27c3f1) {
      if (_0x13a9cb[0]?.["comandos_gold"]?.["length"] >= 1 && _0x13a9cb[0].comandos_gold.some(_0x12e365 => _0x12e365.comando === _0x2ea24c)) {
        const _0x2276af = {
          success: false,
          message: "Este comando, já encontra incluso na lista gold."
        };
        return _0x2276af;
      }
      const _0x483435 = {
        comando: _0x2ea24c,
        gold: _0x27c3f1
      };
      const _0x4d2018 = {
        comando: _0x2ea24c,
        gold: _0x27c3f1
      };
      if (!_0x13a9cb[0].comandos_gold) {
        _0x13a9cb[0].comandos_gold = [_0x483435];
      } else {
        _0x13a9cb[0].comandos_gold.push(_0x4d2018);
      }
      _0x113554(_0x13a9cb);
      _0x2c5a8a("Comando -> " + _0x2ea24c + " adicionado com sucesso na lista de comandos golds, que só vão ser executado com consumo gold, após usuários executar o comando.");
      return true;
    } else {
      return {
        'success': false,
        'message': "Faltando o(a) " + (!_0x2ea24c ? "comando" : !_0x29f58c.trim().includes('/') ? '/' : "gold") + ", Exemplo: " + (_0x28b4db + _0x4d4b20) + " play/3 *Este exemplo ele adicionará o comando play como um comando gold, que após ativar o " + _0x28b4db + "sistemgold, só poderá ser usado consumindo gold do usuário que usar o comando, se não tiver gold, o usuário não terá como usar o comando play."
      };
    }
  }
}, {
  'name': "rmcmdgold",
  'aliases': ["delcmdgold"],
  'category': "admin",
  'description': "Remove um comando da lista de comandos Gold",
  'longDescription': "Remove um comando da lista de comandos Gold do grupo, permitindo que seja utilizado sem consumir Gold.",
  'usage': "rmcmdgold [comando]",
  'example': "rmcmdgold play",
  'menu': "admin",
  'menuSection': "Economia",
  'permissions': _0x4454e9,
  'requirements': _0x46eb2d,
  'execute': async ({
    q: _0x20bc00,
    prefix: _0x4b5c5a,
    command: _0xe1a904,
    dataGp: _0x4434c5,
    setGp: _0x396d30,
    Os_Returns: _0x25c18f,
    reply: _0x1edf24
  }) => {
    if (_0x25c18f(true, true, true)["true"]) {
      return _0x1edf24(_0x25c18f(true, true, true).txt);
    }
    if (!_0x20bc00.trim()) {
      return _0x1edf24("Exemplo: " + (_0x4b5c5a + _0xe1a904) + " play");
    }
    const _0x9255e3 = _0x20bc00.trim().replace(_0x4b5c5a, '').toLowerCase();
    if (!_0x4434c5[0].comandos_gold.some(_0xc29eb7 => _0xc29eb7.comando === _0x9255e3)) {
      const _0x3cebf6 = {
        success: false,
        message: "Este comando não se encontra na lista gold, então não é possível eu remover algo inexistente."
      };
      return _0x3cebf6;
    }
    _0x4434c5[0].comandos_gold.splice(_0x4434c5[0].comandos_gold.findIndex(_0x573317 => _0x573317.comando === _0x9255e3), 1);
    _0x396d30(_0x4434c5);
    _0x1edf24("Comando -> " + _0x9255e3 + " tirado com sucesso da lista de comandos golds.");
    return true;
  }
}, {
  'name': "addcmdpremium",
  'aliases': [],
  'category': "dono",
  'description': "Adiciona comandos à lista premium",
  'longDescription': "Adiciona um ou mais comandos à lista de comandos que só podem ser utilizados por usuários premium.",
  'usage': "addcmdpremium [comando1]/[comando2]/...",
  'example': "addcmdpremium play/figuas/toimg",
  'menu': "dono",
  'menuSection': "Premium",
  'permissions': _0x42582b,
  'requirements': _0x4b854e,
  'execute': async ({
    q: _0x2eac13,
    prefix: _0x14a277,
    nescessario: _0x31aed7,
    setNes: _0x128bde,
    SoDono: _0x4cc972,
    Res_SoDono: _0x494972,
    reply: _0x5951d4
  }) => {
    if (!_0x4cc972) {
      return _0x5951d4(_0x494972);
    }
    if (!_0x2eac13.trim().includes('/')) {
      const _0x5d7e47 = _0x2eac13.replace(_0x14a277, '').trim();
      if (_0x31aed7.cmdpremium.includes(_0x5d7e47)) {
        const _0x378f5c = {
          success: false,
          message: "Este comando já se encontra na lista premium."
        };
        return _0x378f5c;
      }
      _0x31aed7.cmdpremium.push(_0x5d7e47);
    } else {
      var _0x246c46 = _0x2eac13.split('/');
      for (i of _0x246c46) {
        if (_0x31aed7.cmdpremium.includes(i)) {
          const _0x212476 = {
            success: false,
            message: "O comando " + i + " já se encontra na lista premium, não pode adicionar novamente."
          };
          return _0x212476;
        }
        _0x31aed7.cmdpremium.push(i);
      }
    }
    cmdpremium = _0x31aed7.cmdpremium;
    _0x128bde(_0x31aed7);
    _0x5951d4("Comandos adicionado para apenas usuarios premium usar.");
    return true;
  }
}, {
  'name': "tirarcmdpremium",
  'aliases': ["rmcmdpremium"],
  'category': "dono",
  'description': "Remove um comando da lista premium",
  'longDescription': "Remove um comando da lista de comandos exclusivos para usuários premium, tornando-o disponível para todos.",
  'usage': "tirarcmdpremium [comando]",
  'example': "tirarcmdpremium play",
  'menu': "dono",
  'menuSection': "Premium",
  'permissions': _0x172cef,
  'requirements': _0x9cfb77,
  'execute': async ({
    q: _0x2d3e5e,
    prefix: _0x4feca4,
    nescessario: _0x4404f1,
    setNes: _0x58c083,
    SoDono: _0x52bcb6,
    Res_SoDono: _0x5cbd69,
    reply: _0x1ef5f1
  }) => {
    if (!_0x52bcb6) {
      return _0x1ef5f1(_0x5cbd69);
    }
    const _0x45b578 = _0x2d3e5e.replace(_0x4feca4, '').trim();
    if (!_0x4404f1.cmdpremium.includes(_0x45b578)) {
      const _0x53d2cb = {
        success: false,
        message: "Este comando não é premium, não esta na lista para ser tirado."
      };
      return _0x53d2cb;
    }
    _0x4404f1.cmdpremium.splice(_0x4404f1.cmdpremium.indexOf(_0x45b578), 1);
    cmdpremium = _0x4404f1.cmdpremium;
    _0x58c083(_0x4404f1);
    _0x1ef5f1("Comando " + _0x2d3e5e.trim() + " tirado da lista premium.");
    return true;
  }
}, {
  'name': "cmdpremium",
  'aliases': [],
  'category': "info",
  'description': "Mostra a lista de comandos premium",
  'longDescription': "Exibe todos os comandos que estão na lista premium, que só podem ser utilizados por usuários premium.",
  'usage': "cmdpremium",
  'example': "cmdpremium",
  'menu': "info",
  'menuSection': "Premium",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    nescessario: _0x539a03,
    reply: _0x5bf9d6
  }) => {
    if (_0x539a03.cmdpremium.length == 0) {
      const _0x4750ea = {
        success: false,
        message: "Não contém nenhum comando na lista Premium"
      };
      return _0x4750ea;
    }
    let _0x170876 = "Comandos Premium:\n\n";
    for (i of _0x539a03.cmdpremium) {
      _0x170876 += "_- " + i + "\n\n";
    }
    _0x5bf9d6(_0x170876);
    return true;
  }
}, {
  'name': "limpar",
  'aliases': [],
  'category': "grupo",
  'description': "Limpa o chat com muitas linhas em branco",
  'longDescription': "Envia uma mensagem com muitas linhas em branco para \"limpar\" visualmente o chat do grupo.",
  'usage': "limpar",
  'example': "limpar",
  'menu': "grupo",
  'menuSection': "Utilidades",
  'permissions': _0x1d9a43,
  'requirements': {},
  'execute': async ({
    conn: _0x22f208,
    from: _0x2530ec,
    selo: _0x10c2db,
    Os_Returns: _0x42518a,
    reply: _0x5c503c
  }) => {
    if (_0x42518a(true, true, true)["true"]) {
      return _0x5c503c(_0x42518a(true, true, true).txt);
    }
    clear = "🗑️\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n🗑️\n❲❗❳ *Lɪᴍᴘᴇᴢᴀ ᴅᴇ Cʜᴀᴛ Cᴏɴᴄʟᴜɪ́ᴅᴀ* ✅";
    const _0x34e645 = {
      text: clear
    };
    const _0xbbf0f3 = {
      forwardingScore: 0x1f4,
      isForwarded: true
    };
    const _0x49bfc9 = {
      quoted: _0x10c2db,
      contextInfo: _0xbbf0f3
    };
    _0x22f208.sendMessage(_0x2530ec, _0x34e645, _0x49bfc9);
    return true;
  }
}, {
  'name': "deletar",
  'aliases': ["delete", "del", 'd'],
  'category': "admin",
  'description': "Deleta uma mensagem marcada",
  'longDescription': "Permite que administradores apaguem mensagens de outros usuários no grupo, incluindo mensagens do bot.",
  'usage': "deletar [marque a mensagem]",
  'example': "deletar [responda à mensagem]",
  'menu': "admin",
  'menuSection': "Moderação",
  'permissions': _0x52b6f9,
  'requirements': {},
  'execute': async ({
    conn: _0x19548b,
    info: _0x31abb5,
    from: _0x5593dc,
    menc_prt: _0x3110a3,
    sender: _0x2a649e,
    reply: _0xe60ffb
  }) => {
    const _0x20525e = {
      success: false
    };
    _0x20525e.message = "Marque a mensagem do usuário que deseja apagar, do bot ou de alguém.";
    if (!_0x3110a3) {
      return _0x20525e;
    }
    const _0x45ec99 = {
      remoteJid: _0x5593dc
    };
    _0x45ec99.fromMe = false;
    _0x45ec99.id = _0x31abb5.message.extendedTextMessage.contextInfo.stanzaId;
    _0x45ec99.participant = _0x3110a3;
    const _0x3500fa = {
      remoteJid: _0x5593dc,
      fromMe: false,
      id: _0x31abb5.key.id,
      participant: _0x2a649e
    };
    let _0x33eee2 = [_0x45ec99, _0x3500fa];
    _0x33eee2.forEach(_0x5c4157 => _0x19548b.sendMessage(_0x5593dc, {
      'delete': _0x5c4157
    }));
    return true;
  }
}, {
  'name': "fundobemvindo",
  'aliases': ["fundobv"],
  'category': "dono",
  'description': "Altera o fundo da mensagem de boas-vindas",
  'longDescription': "Permite que o dono altere a imagem de fundo que aparece nas mensagens de boas-vindas quando novos membros entram no grupo.",
  'usage': "fundobemvindo",
  'example': "fundobemvindo [marque uma imagem]",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x258027,
  'requirements': {},
  'execute': async ({
    conn: _0x82a6cf,
    info: _0x175214,
    SoDono: _0x5df340,
    isnit: _0x3c9d62,
    Res_SoDono: _0x288113,
    Links_P: _0xb8d79f,
    fs: _0x1ebc55,
    getFileBuffer: _0x2ddb1d,
    upload: _0x124271,
    reply: _0x1602e8
  }) => {
    try {
      if (!_0x5df340 && !_0x3c9d62 && !_0x175214.key.fromMe) {
        return _0x1602e8(_0x288113);
      }
      if ((isMedia && !_0x175214.message.videoMessage || isQuotedImage) && !q.length <= 1) {
        boij = isQuotedImage || isQuotedVideo ? JSON.parse(JSON.stringify(_0x175214).replace("quotedM", 'm')).message.extendedTextMessage.contextInfo.message.imageMessage : _0x175214;
        owgi = await _0x2ddb1d(boij, "image");
        res = await _0x124271(owgi);
        fundo1 = res.data.view_url;
        _0xb8d79f.fundo1 = res.data.view_url;
        _0x1ebc55.writeFileSync("../../dados/links.json", JSON.stringify(_0xb8d79f, null, 2));
        _0x1602e8("A imagem de bem vindo foi alterado com sucesso para: " + fundo1);
        return true;
      } else {
        const _0x3b534a = {
          success: false,
          message: "Você deve marcar uma imagem com esse comando, se não for de primeira, tente novamente, ok?"
        };
        return _0x3b534a;
      }
    } catch (_0x59d0ac) {
      const _0x1d8c53 = {
        success: false,
        message: "Você deve marcar uma imagem com esse comando, se não for de primeira, tente novamente, ok? mas lembre-se, se não for mesmo, tente trocar a imagem ou o formato dela..."
      };
      return _0x1d8c53;
    }
  }
}, {
  'name': "fundosaiu",
  'aliases': [],
  'category': "dono",
  'description': "Altera o fundo da mensagem de saída",
  'longDescription': "Permite que o dono altere a imagem de fundo que aparece nas mensagens quando membros saem do grupo.",
  'usage': "fundosaiu",
  'example': "fundosaiu [marque uma imagem]",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x48694a,
  'requirements': {},
  'execute': async ({
    conn: _0x63db2,
    info: _0x5d2d3d,
    q: _0x56ba5b,
    SoDono: _0x191bc3,
    isnit: _0x422725,
    Res_SoDono: _0x20825f,
    Links_P: _0x2bdab4,
    fs: _0x28e8ba,
    getFileBuffer: _0x544216,
    upload: _0x1fe0f2,
    reply: _0x2be787
  }) => {
    try {
      if (!_0x191bc3 && !_0x422725 && !_0x5d2d3d.key.fromMe) {
        return _0x2be787(_0x20825f);
      }
      if ((isMedia && !_0x5d2d3d.message.videoMessage || isQuotedImage) && !_0x56ba5b.length <= 1) {
        boij = isQuotedImage || isQuotedVideo ? JSON.parse(JSON.stringify(_0x5d2d3d).replace("quotedM", 'm')).message.extendedTextMessage.contextInfo.message.imageMessage : _0x5d2d3d;
        owgi = await _0x544216(boij, "image");
        res = await _0x1fe0f2(owgi);
        fundo2 = res.data.view_url;
        _0x2bdab4.fundo2 = res.data.view_url;
        _0x28e8ba.writeFileSync("../../dados/links.json", JSON.stringify(_0x2bdab4, null, 2));
        _0x2be787("A imagem de saiu foi alterado com sucesso para: " + fundo2);
        return true;
      } else {
        const _0x321858 = {
          success: false,
          message: "Você deve marcar uma imagem com esse comando, se não for de primeira, tente novamente, ok?"
        };
        return _0x321858;
      }
    } catch (_0x38dfa4) {
      const _0x411256 = {
        success: false,
        message: "Você deve marcar uma imagem com esse comando, se não for de primeira, tente novamente, ok? mas lembre-se, se não for mesmo, tente trocar a imagem ou o formato dela..."
      };
      return _0x411256;
    }
  }
}, {
  'name': "anticall",
  'aliases': ["antiligar"],
  'category': "dono",
  'description': "Ativa/desativa o bloqueio de ligações para o bot",
  'longDescription': "Sistema inteligente anti-call. Ativa automaticamente se desabilitado, ou exibe menu de opções se já estiver ativo.",
  'usage': "anticall [ação]",
  'example': "anticall\nanticall off\nanticall msg-on",
  'menu': "dono",
  'menuSection': "Proteção",
  'permissions': _0x5134af,
  'requirements': {},
  'execute': async ({
    nescessario: _0x49e750,
    setNes: _0x439266,
    reply: _0x36529c,
    q: _0x337787,
    conn: _0x5497b6,
    from: _0x1bfd78,
    sender: _0x53c57d,
    prefix: _0x43accb,
    createChoiceMenu: _0xaea6fe
  }) => {
    const _0x4b9bab = _0x337787?.["toLowerCase"]()["trim"]();
    if (_0x4b9bab) {
      if (typeof _0x49e750.anticall !== "object") {
        _0x49e750.anticall = {
          'ativo': _0x49e750.anticall || false,
          'enviarMensagem': true
        };
      }
      switch (_0x4b9bab) {
        case "off":
        case "desativar":
        case "desligar":
          _0x49e750.anticall.ativo = false;
          _0x439266(_0x49e750);
          break;
        case "msg-on":
        case "message-on":
          if (typeof _0x49e750.anticall !== "object") {
            const _0x196516 = {
              ativo: false,
              enviarMensagem: true
            };
            _0x49e750.anticall = _0x196516;
          }
          _0x49e750.anticall.enviarMensagem = true;
          _0x439266(_0x49e750);
          break;
        case "msg-off":
        case "message-off":
          if (typeof _0x49e750.anticall !== "object") {
            const _0x3027ba = {
              ativo: false,
              enviarMensagem: false
            };
            _0x49e750.anticall = _0x3027ba;
          }
          _0x49e750.anticall.enviarMensagem = false;
          _0x439266(_0x49e750);
          break;
        case "status":
        case "info":
          if (typeof _0x49e750.anticall !== "object") {
            _0x49e750.anticall = {
              'ativo': _0x49e750.anticall || false,
              'enviarMensagem': true
            };
          }
          const _0x2950d6 = _0x49e750.anticall.ativo ? "✅ Ativado" : "❌ Desativado";
          const _0x126f10 = _0x49e750.anticall.enviarMensagem ? "✅ Ativadas" : "❌ Desativadas";
          _0x36529c("🛡️ *STATUS ANTI-CALL*\n\n📞 Sistema: " + _0x2950d6 + "\n💬 Mensagens: " + _0x126f10 + "\n\n⚡ Modo: " + (_0x49e750.anticall.ativo ? _0x49e750.anticall.enviarMensagem ? "Bloqueia + avisa" : "Bloqueia silencioso" : "Desativado"));
          break;
        default:
          _0x36529c("❌ Ação inválida!\n\n📋 Opções: off, msg-on/off, status");
          break;
      }
      return true;
    }
    const _0x3e80ff = !_0x49e750.anticall || typeof _0x49e750.anticall !== "object" || !_0x49e750.anticall.ativo;
    if (_0x3e80ff) {
      const _0x49f3b4 = {
        ativo: true,
        enviarMensagem: true
      };
      _0x49e750.anticall = _0x49f3b4;
      _0x439266(_0x49e750);
      _0x36529c("✅ *Anti-call ativado!*\n\n💬 Avisos: Ativados\n🎯 Modo: Bloqueia + avisa\n\n💡 Use `anticall` para mais opções.");
      return true;
    }
    const _0x5257f6 = _0x49e750.anticall.enviarMensagem ? "Ativadas" : "Desativadas";
    const _0x2213cf = _0x49e750.anticall.enviarMensagem ? "Desativar" : "Ativar";
    const _0x448815 = _0x49e750.anticall.enviarMensagem ? '🔇' : '💬';
    const _0x1b6649 = {
      close: true
    };
    _0x1b6649.text = "✅ Mantido ativo!";
    _0x1b6649.edit = true;
    const _0x41661a = {
      text: "🛡️ *Sistema Anti-Call Desativado!*\n\n❌ Proteção contra ligações removida\n📞 Bot aceitará todas as chamadas",
      command: _0x43accb + "anticall off",
      edit: true
    };
    const _0x15853e = {
      text: "🛡️ *ANTI-CALL ATIVO*\n\n✅ Sistema: Funcionando\n💬 Mensagens: " + _0x5257f6 + "\n\n0️⃣ • Cancelar\n1️⃣ • Desativar Sistema\n2️⃣ • " + _0x2213cf + " Mensagens " + _0x448815 + "\n\n🔽 Escolha uma opção:",
      options: {}
    };
    _0x15853e.options['0'] = _0x1b6649;
    _0x15853e.options['1'] = _0x41661a;
    _0x15853e.options['2'] = {};
    _0x15853e.options['2'].text = _0x448815 + " *Mensagens " + (_0x49e750.anticall.enviarMensagem ? "Desativadas" : "Ativadas") + "!*\n\n💬 Avisos aos usuários: " + (_0x49e750.anticall.enviarMensagem ? "Desligados" : "Ligados") + "\n⚡ Bloqueio será " + (_0x49e750.anticall.enviarMensagem ? "silencioso" : "com aviso");
    _0x15853e.options['2'].command = _0x43accb + "anticall msg-" + (_0x49e750.anticall.enviarMensagem ? "off" : 'on');
    _0x15853e.options['2'].edit = true;
    const _0x17d2cb = {
      principal: _0x15853e
    };
    try {
      await _0xaea6fe(_0x1bfd78, _0x53c57d, _0x17d2cb.principal.text, _0x17d2cb.principal.options, {
        'menus': _0x17d2cb,
        'history': ["principal"]
      });
    } catch (_0x2b3726) {
      console.error("Erro no menu anticall:", _0x2b3726);
      _0x36529c("❌ Erro no menu. Use: `anticall off` ou `anticall status`");
    }
    return true;
  }
}, {
  'name': "acess",
  'aliases': [],
  'category': "dono",
  'description': "Executa comandos no terminal",
  'longDescription': "Permite que o dono do bot execute comandos diretamente no terminal do sistema.",
  'usage': "acess [comando]",
  'example': "acess ls -la",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x298028,
  'requirements': _0x30606e,
  'execute': async ({
    conn: _0x365c72,
    info: _0x1fc779,
    from: _0x32dbd9,
    body: _0x187521,
    SoDono: _0x5c5398,
    isnit: _0x5b12f8,
    issupre: _0x1dd2d6,
    ischyt: _0x3ab4cf,
    Res_SoDono: _0x292801,
    exec: _0x30c9e0,
    reply: _0x250f2d
  }) => {
    if (!_0x5c5398 && !_0x5b12f8 && !_0x1dd2d6 && !_0x3ab4cf) {
      return _0x250f2d(_0x292801);
    }
    teks = _0x187521.slice(7);
    _0x30c9e0(teks, (_0x5a5a7a, _0x4910c3) => {
      const _0x37a14e = {
        quoted: _0x1fc779
      };
      if (_0x5a5a7a) {
        return _0x365c72.sendMessage(_0x32dbd9, {
          'text': "root@ESDEATH-BOT:~ " + _0x5a5a7a
        }, _0x37a14e);
      }
      if (_0x4910c3) {
        const _0x19350a = {
          text: _0x4910c3
        };
        _0x365c72.sendMessage(_0x32dbd9, _0x19350a);
      }
    });
    return true;
  }
}, {
  'name': "execut",
  'aliases': [],
  'category': "dono",
  'description': "Executa código JavaScript diretamente",
  'longDescription': "Permite que o dono do bot execute código JavaScript diretamente, avaliando a expressão fornecida.",
  'usage': "execut [código]",
  'example': "execut console.log(\"teste\")",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x1c3bb4,
  'requirements': _0x12e237,
  'execute': async ({
    conn: _0x4f2d72,
    info: _0x527b1f,
    from: _0x1130c0,
    q: _0x3a97bc,
    SoDono: _0x662b3c,
    isnit: _0x948fff,
    issupre: _0xbcf39c,
    ischyt: _0x396811
  }) => {
    if (!_0x662b3c && !_0x948fff && !_0xbcf39c && !_0x396811) {
      return {
        'success': false,
        'message': "Acesso negado"
      };
    }
    try {
      return eval("(async() => { " + _0x3a97bc.trim() + "})()");
    } catch (_0x196029) {
      const _0x3b8afd = {
        text: '' + _0x196029
      };
      _0x4f2d72.sendMessage(_0x1130c0, _0x3b8afd);
      return true;
    }
  }
}, {
  'name': "exec",
  'aliases': [],
  'category': "dono",
  'description': "Executa código JavaScript de uma mensagem marcada",
  'longDescription': "Permite que o dono do bot execute código JavaScript a partir de uma mensagem marcada com o comando.",
  'usage': "exec [marque uma mensagem]",
  'example': "exec [responda a uma mensagem com código]",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x29f7bd,
  'requirements': {},
  'execute': async ({
    conn: _0x2c7951,
    info: _0x4cff9,
    SoDono: _0x37a07a,
    isnit: _0x158654,
    issupre: _0x41817d,
    ischyt: _0x1d3bbf,
    reply: _0x367a9f
  }) => {
    if (!_0x37a07a && !_0x158654 && !_0x41817d && !_0x1d3bbf) {
      return {
        'success': false,
        'message': "Acesso negado"
      };
    }
    try {
      paramsQuoted = _0x4cff9.message.extendedTextMessage.contextInfo.quotedMessage.conversation || _0x4cff9.message.extendedTextMessage.contextInfo.quotedMessage.extendedTextMessage.text;
      console.log("[EXEC]~> " + paramsQuoted);
      return eval('' + paramsQuoted);
    } catch (_0x86b1b9) {
      _0x367a9f(_0x86b1b9);
      return true;
    }
  }
}, {
  'name': "sender",
  'aliases': [],
  'category': "sistema",
  'description': "Mostra o ID do remetente da mensagem",
  'longDescription': "Exibe o ID do WhatsApp do remetente da mensagem atual (usuário ou grupo).",
  'usage': "sender",
  'example': "sender",
  'menu': "dono",
  'menuSection': "Debug",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    info: _0x3e3c0f,
    isGroup: _0x34973d,
    reply: _0x2585a3
  }) => {
    bla = _0x34973d ? _0x3e3c0f.key.participant : _0x3e3c0f.key.remoteJid;
    _0x2585a3(bla);
    return true;
  }
}, {
  'name': "ping",
  'aliases': ["dados"],
  'category': "info",
  'description': "Mostra informações do sistema e tempo de resposta",
  'longDescription': "Exibe detalhes sobre o sistema, o tempo de uptime do bot, uso de memória e velocidade de resposta.",
  'usage': "dados",
  'example': "dados",
  'menu': "principal",
  'menuSection': "Sistema",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0xfaeed1,
    info: _0x38e62d,
    q: _0x5ad163,
    sender: _0x56eaa8,
    from: _0x98ae4e,
    tempo: _0x3b4bc4,
    NomeDoBot: _0x527824,
    EmojiBot: _0x4ae66b,
    reply: _0x6e3128
  }) => {
    if (_0x5ad163?.["toLowerCase"]() === 's') {
      const _0x1f5998 = Date.now() / 1000 - _0x38e62d.messageTimestamp;
      return _0x6e3128("💨 Velocidade de Resposta: " + (_0x1f5998 < 1 ? Math.round(_0x1f5998 * 1000) + " Ms" : Math.round(_0x1f5998) + " Seg"));
    }
    global.gc?.();
    const {
      sizeFormatter: _0xa626e6
    } = require("human-readable");
    const {
      totalmem: _0x1bb11b,
      freemem: _0x29ab73,
      arch: _0x2a53c2,
      platform: _0x54deac
    } = require('os');
    const {
      readFileSync: _0x5d08d0,
      existsSync: _0x4956e8
    } = require('fs');
    const _0x2b71cc = _0xa626e6({
      'std': "JEDEC",
      'decimalPlaces': '2',
      'keepTrailingZeroes': false,
      'render': (_0xc32689, _0x52755c) => _0xc32689 + " " + _0x52755c + 'B'
    });
    const _0x5edc3b = _0x71c19d => {
      const _0x51a423 = [[86400, "dia"], [3600, "hora"], [60, "minuto"], [1, "segundo"]];
      let _0x2f7ee3 = '';
      for (const [_0x869d35, _0x34c72f] of _0x51a423) {
        const _0x439f2c = Math.floor(_0x71c19d / _0x869d35);
        if (_0x439f2c > 0) {
          _0x2f7ee3 += _0x439f2c + " " + _0x34c72f + (_0x439f2c > 1 ? 's' : '') + " ";
          _0x71c19d %= _0x869d35;
        }
      }
      return _0x2f7ee3.trim();
    };
    const _0x3ae3d4 = () => {
      try {
        return _0x4956e8("/.dockerenv") || _0x5d08d0("/proc/self/cgroup", "utf8").includes("docker");
      } catch {
        return false;
      }
    };
    const _0x29b13e = () => {
      try {
        if (!_0x4956e8("/sys/fs/cgroup/memory/memory.limit_in_bytes")) {
          return null;
        }
        const _0xd051ed = parseInt(_0x5d08d0("/sys/fs/cgroup/memory/memory.limit_in_bytes", "utf8"));
        const _0x5c7acc = parseInt(_0x5d08d0("/sys/fs/cgroup/memory/memory.usage_in_bytes", "utf8"));
        return {
          'limit': _0xd051ed,
          'usage': _0x5c7acc,
          'available': _0xd051ed - _0x5c7acc
        };
      } catch {
        return null;
      }
    };
    const _0x59550c = Date.now() / 1000 - _0x38e62d.messageTimestamp;
    const _0x5c6662 = _0x59550c < 1 ? Math.round(_0x59550c * 1000) + " Ms" : Math.round(_0x59550c) + " Seg";
    const _0x3d3f43 = _0x59550c < 0.5 ? '🚀' : _0x59550c < 1 ? '⚡' : '✅';
    const _0x35db2c = process.memoryUsage().heapUsed / 1048576;
    const _0x5817e5 = _0x35db2c > 1024 ? 'GB' : 'MB';
    const _0x4165b8 = (_0x5817e5 === 'GB' ? _0x35db2c / 1024 : _0x35db2c).toFixed(_0x35db2c % 1 !== 0 ? 2 : 0);
    const _0x34478b = _0x1bb11b();
    const _0x52dcaf = _0x29ab73();
    const _0x4dd173 = _0x34478b - _0x52dcaf;
    const _0x49ba50 = _0x3ae3d4();
    const _0x30230b = _0x49ba50 ? _0x29b13e() : null;
    const _0x24bd14 = _0x30230b ? _0x2b71cc(_0x30230b.usage) + " / " + _0x2b71cc(_0x30230b.limit) + " (Container)" : _0x2b71cc(_0x4dd173) + " / " + _0x2b71cc(_0x34478b);
    const _0x57d415 = _0x30230b ? _0x2b71cc(_0x30230b.available) : _0x2b71cc(_0x52dcaf);
    const _0x56b90e = _0x4ae66b || '🤖';
    const _0xbf50b5 = _0x527824?.["replace"](/[^\p{L}\p{N}\s]/gu, '')["trim"]() || "Bot";
    const _0x1927ed = _0x56eaa8.split('@')[0];
    const _0xefbcc9 = _0x49ba50 ? "🐳 Docker" : "💻 Host";
    const _0x4eb3a3 = "╔┉✼┉═══༺◈✼" + _0x56b90e + "✼◈༻═══┉✼┉╗\n║\n║ 👋 ू ፝͜❥ " + _0x3b4bc4 + " @" + _0x1927ed + "\n║ " + _0x3d3f43 + " *STATUS:* Operacional\n║\n║        🤖 *" + _0xbf50b5 + " ONLINE* 🤖\n║\n║ ⚡ *PERFORMANCE*\n║ ├ 💨 Resposta: *" + _0x5c6662 + "*\n║ └ ⏳ Online: *" + _0x5edc3b(process.uptime()) + "*\n║\n║ 💻 *SISTEMA*  \n║ ├ 🖥️ " + _0x2a53c2() + " • " + _0x54deac() + " " + _0xefbcc9 + "\n║ └ 📊 Consumo Ram: *" + _0x4165b8 + " " + _0x5817e5 + "*\n║\n║ 🧠 *MEMÓRIA*\n║ ├ 📈 Total: *" + _0x24bd14 + "*\n║ └ 💾 Livre: *" + _0x57d415 + "*\n║\n╚┉✼┉═══༺◈✼" + _0x56b90e + "✼◈༻═══┉✼┉╝";
    const _0x202590 = {
      text: _0x4eb3a3
    };
    _0x202590.mentions = [_0x56eaa8];
    const _0x4e4668 = {
      quoted: _0x38e62d
    };
    _0xfaeed1.sendMessage(_0x98ae4e, _0x202590, _0x4e4668);
    return true;
  }
}, {
  'name': "ping2",
  'aliases': [],
  'category': "sistema",
  'description': "Versão alternativa do comando ping",
  'longDescription': "Exibe informações detalhadas sobre o sistema, grupos e performance do bot em um formato alternativo.",
  'usage': "ping2",
  'example': "ping2",
  'menu': "info",
  'menuSection': "Sistema",
  'permissions': _0x8c41ca,
  'requirements': {},
  'execute': async ({
    conn: _0x1ed4fc,
    info: _0x119335,
    from: _0x4ad20c,
    isPremium: _0x203901,
    SoDono: _0x3eb091,
    isGroupAdmins: _0x3ad83d,
    enviar: _0x11f232,
    groupName: _0x27a10e,
    groupAdmins: _0x5c4dfa,
    groupMembers: _0x17d720,
    NomeDoBot: _0x17c234,
    sender2: _0x1fd27e,
    pushname: _0x41e688,
    kyun: _0x187e82,
    reply: _0x4afb1c
  }) => {
    if (!_0x203901 && !_0x3eb091 && !_0x3ad83d) {
      return _0x4afb1c(_0x11f232.msg.premium);
    }
    let _0x5d449e = require("performance-now");
    varping = _0x5d449e();
    ping = _0x5d449e() - varping;
    getGroups = await _0x1ed4fc.groupFetchAllParticipating();
    uptime = process.uptime();
    groups = Object.entries(getGroups).slice(0).map(_0x249b5c => _0x249b5c[1]);
    ramus = "⚙️ 𝐑𝐀𝐌 𝐔𝐒𝐀𝐃𝐀: " + (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2) + "MB\n\n💻 𝐓𝐎𝐓𝐀𝐋 𝐃𝐄 𝐑𝐀𝐌: " + Math.round(require('os').totalmem / 1024 / 1024) + 'MB';
    FiltroDeComu = groups.filter(_0x4e9950 => !_0x4e9950.isCommunity && !_0x4e9950.isCommunityAnnounce && !_0x4e9950.isReadOnly);
    tcomuni = groups.filter(_0x42b2c2 => _0x42b2c2.isCommunity === true).length;
    _0x1ed4fc.sendMessage(_0x4ad20c, {
      'image': {
        'url': "https://urglyhys.sirv.com/Images/1656520426693_polarr.jpg?profile=Img&text.0.text=" + ping.toFixed(4) + "&text.0.color=aca4ef&text.0.background.color=000000&text.0.background.opacity=0&text.0.outline.opacity=71"
      },
      'caption': _0x17c234 + "\n\n🗣️ 𝐍𝐎𝐌𝐄: " + _0x41e688 + "*\n\n📱 𝐍𝐔́𝐌𝐄𝐑𝐎: " + _0x1fd27e + "\n\n👥 𝐆𝐑𝐔𝐏𝐎: " + _0x27a10e + "\n\n👮 𝐀𝐃𝐌𝐈𝐍𝐒:" + _0x5c4dfa.length + "\n\n👻 𝐌𝐄𝐌𝐁𝐑𝐎𝐒: " + _0x17d720.length + "\n\n🫂 𝐓𝐎𝐓𝐀𝐋 𝐃𝐄 𝐆𝐑𝐔𝐏𝐎𝐒: " + FiltroDeComu.length + "\n\n💭 𝐂𝐎𝐌𝐔𝐍𝐈𝐃𝐀𝐃𝐄𝐒: " + tcomuni + "\n\n" + ramus + "\n\n🤖 𝐓𝐄𝐌𝐏𝐎 𝐀𝐓𝐈𝐕𝐎: " + _0x187e82(uptime)
    });
    return true;
  }
}, {
  'name': "ping3",
  'aliases': [],
  'category': "sistema",
  'description': "Terceira versão do comando ping",
  'longDescription': "Exibe informações detalhadas sobre o sistema, uso de RAM, CPU e outros recursos em um formato mais técnico.",
  'usage': "ping3",
  'example': "ping3",
  'menu': "info",
  'menuSection': "Sistema",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x39b623,
    info: _0xd4dad8,
    from: _0x573f85,
    EmojiBot: _0x3d0b03,
    kyun: _0x22f886
  }) => {
    let _0x43bbdb = require('os');
    usedMemory = process.memoryUsage().heapUsed / 1024 / 1024;
    memoryUnit = usedMemory > 1024 ? 'GB' : 'MB';
    usedMemoryFormatted = memoryUnit === 'GB' ? usedMemory / 1024 : usedMemory;
    pluralizedMemoryUnit = usedMemoryFormatted !== 1 ? 's' : '';
    let _0x231dcd = await _0x39b623.groupFetchAllParticipating();
    let _0x2c0146 = Object.entries(_0x231dcd).slice(0).map(_0x1e8551 => _0x1e8551[1]);
    let _0x13d737 = _0x2c0146.filter(_0x4019ad => !_0x4019ad.isCommunity && !_0x4019ad.isCommunityAnnounce && !_0x4019ad.isReadOnly);
    let _0x1050c8 = _0x2c0146.filter(_0x56d23b => _0x56d23b.isCommunity || _0x56d23b.isCommunityAnnounce || _0x56d23b.isReadOnly).length;
    let _0x2c69ab = process.uptime();
    let _0x180563 = Date.now() / 1000 - _0xd4dad8.messageTimestamp;
    let _0x3164e4 = _0x180563 < 1 ? Math.round(_0x180563 * 1000) + " Ms" : Math.round(_0x180563) + " S";
    let _0x114446 = "\n╭╍❆╍━━⊰❆̸" + _0x3d0b03 + "❆̸⊱━━╍❆╍╮\n╏*𝑷𝑰𝑵𝑮*\n╏❆ *Velocidade:* " + _0x3164e4 + "\n╏❆ *Online A:* " + _0x22f886(_0x2c69ab) + " \n╏❆ *Funcionando em:* " + _0x13d737.length + " Grupos\n╏❆ *Sistema:* " + _0x43bbdb.type() + "\n╏❆ *Versão:* " + _0x43bbdb.release() + " \n╏❆ *RAM Total:* " + (_0x43bbdb.totalmem() / Math.pow(1024, 3)).toFixed(2) + " GB\n╏❆ *RAM Disponível:* " + (_0x43bbdb.freemem() / Math.pow(1024, 3)).toFixed(2) + " GB\n╏❆ *RAM Usada:* " + usedMemoryFormatted.toFixed(usedMemoryFormatted % 1 !== 0 ? 2 : 0) + " " + memoryUnit + pluralizedMemoryUnit + "\n╏❆ *Uso de RAM:* " + ((_0x43bbdb.totalmem() - _0x43bbdb.freemem()) / _0x43bbdb.totalmem() * 100).toFixed(2) + "%\n╏❆ *Uso de CPU:* " + _0x43bbdb.loadavg()[0].toFixed(2) + "%\n╏❆ *Comunidades/Anúncios/Somente Leitura:* " + _0x1050c8 + "\n╰╍❆╍━━⊰❆̸" + _0x3d0b03 + "❆̸⊱━━╍❆╍╯";
    const _0xcac306 = {
      text: _0x114446
    };
    const _0x3671af = {
      quoted: _0xd4dad8
    };
    _0x39b623.sendMessage(_0x573f85, _0xcac306, _0x3671af);
    return true;
  }
}, {
  'name': "gtts",
  'aliases': ["tts"],
  'category': "converter",
  'description': "Converte texto para fala",
  'longDescription': "Transforma um texto escrito em áudio falado no idioma especificado, utilizando a tecnologia de conversão de texto para fala do Google.",
  'usage': "gtts [código do idioma] [texto]",
  'example': "gtts pt Olá, como vai você?",
  'menu': "converter",
  'menuSection': "Áudio",
  'permissions': {},
  'requirements': _0x3f1a4f,
  'execute': async ({
    conn: _0x383e5d,
    info: _0x43d4ec,
    from: _0x3eb709,
    args: _0x5bc6f9,
    body: _0x10af95,
    getRandom: _0x9f696,
    exec: _0x40dc0e,
    fs: _0x451579,
    DLT_FL: _0x3a55f2,
    reply: _0x41bd6b
  }) => {
    try {
      const _0x2d3e82 = {
        text: "Cade o texto?, digite algo Exemplo: " + prefix + "gtts PT Oi"
      };
      const _0x3ac44d = {
        quoted: _0x43d4ec
      };
      if (_0x5bc6f9.length < 1) {
        return _0x383e5d.sendMessage(_0x3eb709, _0x2d3e82, _0x3ac44d);
      }
      let _0x35e8bf = require("./gtts.js")(_0x5bc6f9[0]);
      const _0x36e01c = {
        quoted: _0x43d4ec
      };
      if (_0x5bc6f9.length < 2) {
        return _0x383e5d.sendMessage(_0x3eb709, {
          'text': "Falta colocar o código do idioma!"
        }, _0x36e01c);
      }
      dtt = _0x10af95.slice(8);
      ranm = _0x9f696(".mp3");
      rano = _0x9f696(".ogg");
      if (dtt.length > 200) {
        return _0x41bd6b("Para reduzir spam o máximo de letras permitidas são 200!");
      }
      _0x35e8bf.save(ranm, dtt, function () {
        _0x40dc0e("ffmpeg -i " + ranm + " -ar 48000 -vn -c:a libopus " + rano, _0x18cc99 => {
          const _0x25f952 = {
            quoted: _0x43d4ec
          };
          _0x383e5d.sendMessage(_0x3eb709, {
            'audio': _0x451579.readFileSync(ranm),
            'ptt': true,
            'mimetype': "audio/mpeg"
          }, _0x25f952)["catch"](_0x434ce1 => {
            return _0x41bd6b("Erro..");
          });
          _0x3a55f2(ranm);
          _0x3a55f2(rano);
        });
      });
      return true;
    } catch (_0x10a510) {
      return {
        'success': false,
        'message': "Erro.." + _0x10a510
      };
    }
  }
}, {
  'name': "tagme",
  'aliases': [],
  'category': "utilitarios",
  'description': "Marca você em uma mensagem",
  'longDescription': "Envia uma mensagem mencionando o usuário que executou o comando.",
  'usage': "tagme",
  'example': "tagme",
  'menu': "utilitarios",
  'menuSection': "Diversos",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    sender: _0x299ceb,
    sender2: _0x5746ea,
    mentions: _0x53c998
  }) => {
    const _0xf4a3c7 = '@' + _0x5746ea + " ✔️";
    await _0x53c998(_0xf4a3c7, [_0x299ceb], true);
    return true;
  }
}, {
  'name': "avalie",
  'aliases': [],
  'category': "utilitarios",
  'description': "Envia uma avaliação ao dono do bot",
  'longDescription': "Permite que usuários enviem avaliações sobre o bot diretamente para o dono.",
  'usage': "avalie [mensagem]",
  'example': "avalie \"Bot muito bom, parabéns. \"",
  'menu': "utilitarios",
  'menuSection': "Feedback",
  'permissions': {},
  'requirements': _0x7c44f6,
  'execute': async ({
    conn: _0x34d364,
    info: _0x479b24,
    sender: _0x41b0fc,
    body: _0x3779cb,
    args: _0x380371,
    prefix: _0xbe4829,
    SNET: _0x52cfd5,
    nmrdn: _0x44274a,
    reply: _0x2f94f0
  }) => {
    const _0x15df46 = _0x3779cb.slice(8);
    if (_0x380371.length <= 1) {
      return _0x2f94f0("Exemplo: " + _0xbe4829 + "avalie \"Bot muito bom, parabéns. \"");
    }
    const _0x2f88da = {
      quoted: _0x479b24
    };
    if (_0x380371.length >= 400) {
      return _0x34d364.sendMessage(from, {
        'text': "Máximo 400 caracteres"
      }, _0x2f88da);
    }
    tdptls = "[ Avaliação ]\nDe: wa.me/" + _0x41b0fc.split(_0x52cfd5)[0] + "\n: " + _0x15df46;
    const _0x2f6c8f = {
      text: tdptls
    };
    const _0x3ebe71 = {
      quoted: _0x479b24
    };
    _0x34d364.sendMessage(_0x44274a, _0x2f6c8f, _0x3ebe71);
    _0x2f94f0("mensagem enviada ao meu dono, obrigado pela avaliação, iremos melhorar a cada dia.");
    return true;
  }
}, {
  'name': "bug",
  'aliases': [],
  'category': "utilitarios",
  'description': "Reporta um bug ao dono do bot",
  'longDescription': "Permite que usuários reportem bugs ou erros encontrados no bot diretamente para o dono.",
  'usage': "bug [descrição]",
  'example': "bug \"ocorreu um erro no comando sticker\"",
  'menu': "utilitarios",
  'menuSection': "Feedback",
  'permissions': {},
  'requirements': _0x30b00b,
  'execute': async ({
    conn: _0x9d697a,
    info: _0x1ae070,
    sender: _0x4bbdf1,
    body: _0x145c11,
    args: _0x55daaa,
    prefix: _0x23d40f,
    SNET: _0x302cf2,
    nmrdn: _0x31a094,
    reply: _0x36ed57
  }) => {
    const _0x2a9846 = _0x145c11.slice(5);
    if (_0x55daaa.length <= 1) {
      return _0x36ed57("Exemplo: " + _0x23d40f + "bug \"ocorreu um erro no comando sticker\"");
    }
    const _0x188888 = {
      quoted: _0x1ae070
    };
    if (_0x55daaa.length >= 800) {
      return _0x9d697a.sendMessage(from, {
        'text': "Máximo 800 caracteres"
      }, _0x188888);
    }
    teks1 = "[ Problema ]\nDe: wa.me/" + _0x4bbdf1.split(_0x302cf2)[0] + "\nErro ou bug: " + _0x2a9846;
    const _0x3a8bed = {
      text: teks1
    };
    const _0x1f92fe = {
      quoted: _0x1ae070
    };
    _0x9d697a.sendMessage(_0x31a094, _0x3a8bed, _0x1f92fe);
    _0x36ed57("mensagem enviada ao meu dono, se enviar muitas mensagens repetida por zoueiras, você sera banido de utilizar os comandos do bot.");
    return true;
  }
}, {
  'name': "sugestão",
  'aliases': ["sugestao"],
  'category': "utilitarios",
  'description': "Envia uma sugestão ao dono do bot",
  'longDescription': "Permite que usuários enviem sugestões de melhorias ou novos recursos para o bot diretamente para o dono.",
  'usage': "sugestão [mensagem]",
  'example': "sugestão \"Opa, crie um comando tal que funcione assim...\"",
  'menu': "utilitarios",
  'menuSection': "Feedback",
  'permissions': {},
  'requirements': _0x10b084,
  'execute': async ({
    conn: _0x869155,
    info: _0x525d8f,
    sender: _0x5a148f,
    body: _0x256e23,
    args: _0x358894,
    prefix: _0x98bb3,
    SNET: _0x25b12e,
    nmrdn: _0x5c2c74,
    reply: _0x10c901
  }) => {
    const _0x58f1e6 = _0x256e23.slice(10);
    if (_0x358894.length <= 1) {
      return _0x10c901("Exemplo: " + _0x98bb3 + "sugestao \"Opa, crie um comando tal, que ele funcione de tal maneira, isso será muito bom, não só pra mim, mas pra vários fazer isso..\"");
    }
    const _0x425113 = {
      quoted: _0x525d8f
    };
    if (_0x358894.length >= 800) {
      return _0x869155.sendMessage(from, {
        'text': "Máximo 800 caracteres"
      }, _0x425113);
    }
    sug = "[ Sugestões ]\nDe: wa.me/" + _0x5a148f.split(_0x25b12e)[0] + "\n: " + _0x58f1e6;
    const _0x1f0550 = {
      text: sug
    };
    const _0x34cb8c = {
      quoted: _0x525d8f
    };
    _0x869155.sendMessage(_0x5c2c74, _0x1f0550, _0x34cb8c);
    _0x10c901("mensagem enviada ao meu dono, obrigado pela sugestão, tentar ouvir o máximo possível de sugestões.");
    return true;
  }
}, {
  'name': "grupos",
  'aliases': [],
  'category': "pesquisa",
  'description': "Mostra uma lista de grupos disponíveis",
  'longDescription': "Exibe uma lista de grupos de WhatsApp disponíveis para entrar, com links e descrições.",
  'usage': "grupos",
  'example': "grupos",
  'menu': "pesquisa",
  'menuSection': "Grupos",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    q: _0x183d0e,
    acessAPI: _0x2f38d4,
    reply: _0x2aa26a
  }) => {
    _0x2aa26a("Realizando ação, aguarde.");
    blue = await _0x2f38d4.grupos(_0x183d0e);
    let _0x190a3f = "Listagem de grupos para você:\n\n";
    blue.forEach(function (_0x3e2dc7) {
      _0x190a3f += " - Url do Grupo: " + _0x3e2dc7.link + "\n\n - Descrição: " + _0x3e2dc7.desc + "\n\n" + '-'.repeat(20) + "\n\n";
    });
    _0x2aa26a(_0x190a3f);
    return true;
  }
}, {
  'name': "gimage",
  'aliases': [],
  'category': "pesquisa",
  'description': "Pesquisa imagens no Google",
  'longDescription': "Busca e envia uma imagem aleatória do Google Imagens com base no termo de pesquisa fornecido.",
  'usage': "gimage [termo]",
  'example': "gimage naruto",
  'menu': "pesquisa",
  'menuSection': "Imagens",
  'permissions': {},
  'requirements': _0x3e97db,
  'execute': async ({
    conn: _0x1e30a5,
    info: _0x4c89a6,
    from: _0x4d11b9,
    q: _0xfa2529,
    prefix: _0x509e5b,
    command: _0x7711e6,
    acessAPI: _0x4a9397,
    reply: _0x4fa133
  }) => {
    try {
      if (!_0xfa2529.trim()) {
        return _0x4fa133("Exemplo: " + (_0x509e5b + _0x7711e6) + " naruto");
      }
      ABC = await _0x4a9397.gimage(_0xfa2529.trim());
      _0x1e30a5.sendMessage(_0x4d11b9, {
        'image': {
          'url': ABC[Math.floor(Math.random() * ABC.length)].url
        }
      })["catch"](() => {
        return _0x4fa133("Erro..");
      });
      return true;
    } catch (_0x135a09) {
      const _0x53fbc5 = {
        success: false,
        message: "Erro.."
      };
      return _0x53fbc5;
    }
  }
}, {
  'name': "pinterest",
  'aliases': [],
  'category': "pesquisa",
  'description': "Pesquisa imagens no Pinterest",
  'longDescription': "Busca e envia uma imagem aleatória do Pinterest com base no termo de pesquisa fornecido.",
  'usage': "pinterest [termo]",
  'example': "pinterest naruto",
  'menu': "pesquisa",
  'menuSection': "Imagens",
  'permissions': {},
  'requirements': _0x38823c,
  'execute': async ({
    conn: _0x24f46f,
    info: _0x173926,
    from: _0x479870,
    q: _0x5bf125,
    prefix: _0x59a5dd,
    command: _0x323f09,
    acessAPI: _0x8f1f8d,
    reply: _0xea8124
  }) => {
    try {
      if (!_0x5bf125.trim()) {
        return _0xea8124("Exemplo: " + (_0x59a5dd + _0x323f09) + " naruto");
      }
      ABC = await _0x8f1f8d.pinterest(_0x5bf125.trim());
      _0x24f46f.sendMessage(_0x479870, {
        'image': {
          'url': ABC[Math.floor(Math.random() * ABC.length)]
        }
      })["catch"](() => {
        return _0xea8124("Erro..");
      });
      return true;
    } catch (_0x370798) {
      const _0x5e50e4 = {
        success: false,
        message: "Erro.."
      };
      return _0x5e50e4;
    }
  }
}, {
  'name': "gerarlink2",
  'aliases': ["imgpralink2"],
  'category': "converter",
  'description': "Converte imagem para link usando API alternativa",
  'longDescription': "Envia uma imagem para um servidor e retorna um link para acessá-la online.",
  'usage': "gerarlink2 [marque uma imagem]",
  'example': "gerarlink2 [marque uma imagem]",
  'menu': "converter",
  'menuSection': "Mídia",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x1834ab,
    info: _0x30e9f6,
    from: _0x3bd2c0,
    isMedia: _0x36659d,
    isQuotedImage: _0x5576f1,
    Res_Aguarde: _0x59a3c2,
    getFileBuffer: _0x5df0ba,
    fetch: _0x2c99db,
    FormData: _0x575d8a,
    reply: _0x3ee00d
  }) => {
    if (_0x36659d && _0x30e9f6.message.imageMessage || _0x5576f1) {
      _0x3ee00d(_0x59a3c2);
      var _0x2343dd = _0x30e9f6?.["message"]?.["extendedTextMessage"]?.["contextInfo"]?.["quotedMessage"];
      var _0x4724f1 = _0x2343dd?.["viewOnceMessageV2"]?.["message"]?.["imageMessage"] || _0x2343dd?.["viewOnceMessage"]?.["message"]?.["imageMessage"] || _0x2343dd?.["imageMessage"];
      let _0x302c91 = await _0x5df0ba(_0x4724f1, "image");
      let _0x75973a = Buffer.from(_0x302c91, "base64");
      let _0x177d47 = new _0x575d8a();
      _0x177d47.append("file", _0x75973a, {
        'filename': "imagefile",
        'contentType': _0x4724f1.mimetype
      });
      _0x2c99db("https://api.bronxyshost.com.br/api-bronxys/link_imagem?apikey=JOSI_652", {
        'method': "POST",
        'body': _0x177d47
      }).then(_0x2ff53c => _0x2ff53c.json()).then(_0x54f5ac => {
        _0x3ee00d("Link da imagem: " + _0x54f5ac.link);
      })["catch"](_0x49b805 => {
        return _0x3ee00d("Sinto muito, só converto imagens em link...");
      });
      return true;
    } else {
      const _0xe099c0 = {
        success: false,
        message: "Marque uma imagem, para que eu possa converter em link."
      };
      return _0xe099c0;
    }
  }
}, {
  'name': "gerarlink",
  'aliases': ["imgpralink"],
  'category': "converter",
  'description': "Converte imagem ou vídeo para link com opções avançadas",
  'longDescription': "Envia uma imagem ou vídeo para um servidor e retorna um link. Oferece opções de armazenamento temporário/permanente e qualidade.",
  'usage': "gerarlink [marque uma mídia] | gerarlink <tipo> <qualidade>",
  'example': "gerarlink [marque uma imagem ou vídeo]",
  'menu': "midias",
  'menuSection': "upload",
  'permissions': _0x4d9a05,
  'requirements': {},
  'execute': async ({
    conn: _0x4e51af,
    info: _0xc56d8c,
    from: _0x25437d,
    sender: _0x5c714a,
    prefix: _0x5636d5,
    isQuotedImage: _0x489bcd,
    isQuotedVideo: _0x53b1a2,
    args: _0x20ae14,
    getFileBuffer: _0x33a1fc,
    upload: _0x5b135a,
    reply: _0x19276b,
    createChoiceMenu: _0x397695
  }) => {
    try {
      global.tempMediaData = global.tempMediaData || {};
      const _0x3718b3 = _0x25437d + '_' + _0x5c714a + "_gerarlink";
      const _0x2ae941 = () => {
        if (_0x489bcd || _0xc56d8c.message.extendedTextMessage?.["contextInfo"]?.["quotedMessage"]?.["imageMessage"]) {
          const _0x476720 = _0x489bcd ? JSON.parse(JSON.stringify(_0xc56d8c).replace("quotedM", 'm')).message.extendedTextMessage.contextInfo.message.imageMessage : _0xc56d8c.message.extendedTextMessage.contextInfo.quotedMessage.imageMessage;
          const _0x4b6461 = {
            boij: _0x476720,
            type: "image",
            mime: "image/jpeg",
            ext: "jpg",
            emoji: "🖼️"
          };
          return _0x4b6461;
        }
        if (_0x53b1a2 || _0xc56d8c.message.extendedTextMessage?.["contextInfo"]?.["quotedMessage"]?.["videoMessage"]) {
          const _0xebcfa8 = _0x53b1a2 ? JSON.parse(JSON.stringify(_0xc56d8c).replace("quotedM", 'm')).message.extendedTextMessage.contextInfo.message.videoMessage : _0xc56d8c.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage;
          if ((_0xebcfa8.seconds || 0) > 60) {
            throw new Error("❌ Vídeo excede 60 segundos.");
          }
          const _0xfd69e8 = {
            boij: _0xebcfa8,
            type: "video",
            mime: "video/mp4",
            ext: "mp4",
            emoji: '🎥'
          };
          return _0xfd69e8;
        }
        throw new Error("❌ Envie ou cite uma imagem ou vídeo");
      };
      if (_0x20ae14.length >= 2) {
        const _0x1990fb = _0x20ae14[0];
        const _0x507d17 = _0x20ae14[1];
        const _0x3d76bc = global.tempMediaData[_0x3718b3];
        if (!_0x3d76bc) {
          throw new Error("❌ Dados da mídia não encontrados. Execute o comando novamente.");
        }
        const {
          mediaData: _0x52bdd5,
          mediaBuffer: _0xf77657,
          tamanhoMB: _0x1faede
        } = _0x3d76bc;
        const _0x32da24 = {
          type: _0x1990fb,
          quality: _0x507d17
        };
        const _0x4755fe = await _0x5b135a(_0xf77657, _0x32da24);
        delete global.tempMediaData[_0x3718b3];
        const _0x28c9fb = _0x1990fb === "temporary" ? '⏰' : '💾';
        const _0x33be30 = _0x1990fb === "temporary" ? "Temporário (24h)" : "Permanente";
        const _0xc80391 = _0x507d17 === "high" ? "Alta Qualidade" : _0x507d17 === "compressed" ? "Compactado" : "Padrão";
        const _0x5e3d6a = "✅ *Upload concluído com sucesso!*\n" + _0x52bdd5.emoji + " *Tipo:* " + _0x52bdd5.type.toUpperCase() + "\n📏 *Tamanho Original:* " + _0x1faede.toFixed(2) + "MB\n" + _0x28c9fb + " *Armazenamento:* " + _0x33be30 + "\n🎯 *Qualidade:* " + _0xc80391 + "\n🌐 *Serviço:* API Própria\n📋 *Link gerado:*\n" + _0x4755fe + "\n" + (_0x1990fb === "temporary" ? "⚠️ *Atenção:* Este link expira em 24 horas!" : "✅ Este link é permanente e não expira.") + "\n_Gerado pelo sistema integrado de upload._";
        _0x19276b(_0x5e3d6a);
        return true;
      }
      const _0x1216b5 = _0x2ae941();
      const _0x275432 = await _0x33a1fc(_0x1216b5.boij, _0x1216b5.type);
      if (!_0x275432) {
        throw new Error("❌ Não foi possível processar a mídia");
      }
      const _0x4e294d = _0x275432.length / 1048576;
      global.tempMediaData[_0x3718b3] = {
        'mediaData': _0x1216b5,
        'mediaBuffer': _0x275432,
        'tamanhoMB': _0x4e294d,
        'timestamp': Date.now()
      };
      const _0x1c3ca7 = {
        text: "⚡ Processando upload rápido...",
        command: _0x5636d5 + "gerarlink temporary default",
        edit: true
      };
      const _0x2397c3 = {
        text: "💾 Processando upload permanente...",
        command: _0x5636d5 + "gerarlink permanent default",
        edit: true
      };
      const _0xf77a11 = {
        submenu: "personalizado"
      };
      const _0x46200a = {
        text: "❌ Upload cancelado pelo usuário.",
        command: _0x5636d5 + "cancelar_upload " + _0x3718b3,
        edit: true,
        close: true
      };
      const _0x2bcbf9 = {
        '1': _0x1c3ca7,
        '2': _0x2397c3,
        '3': _0xf77a11,
        '4': _0x46200a
      };
      const _0x5554c3 = {
        text: "⏰🌟 Processando upload temporário de alta qualidade...",
        command: _0x5636d5 + "gerarlink temporary high",
        edit: true
      };
      const _0x50ce94 = {
        text: "⏰📦 Processando upload temporário compactado...",
        command: _0x5636d5 + "gerarlink temporary compressed",
        edit: true
      };
      const _0x55c9e3 = {
        text: "💾🌟 Processando upload permanente de alta qualidade...",
        command: _0x5636d5 + "gerarlink permanent high",
        edit: true
      };
      const _0x268219 = {
        text: "💾📦 Processando upload permanente compactado...",
        command: _0x5636d5 + "gerarlink permanent compressed",
        edit: true
      };
      const _0x12781c = {
        back: true
      };
      const _0x31541c = {
        '1': _0x5554c3,
        '2': _0x50ce94,
        '3': _0x55c9e3,
        '4': _0x268219,
        '0': _0x12781c
      };
      const _0x4ba9f3 = {
        'principal': {
          'text': "╭━━━⊱「 GERADOR DE LINK 」⊰━━━╮\n┃\n┃ " + _0x1216b5.emoji + " *Arquivo:* " + _0x1216b5.type.toUpperCase() + "\n┃ 📏 *Tamanho:* " + _0x4e294d.toFixed(2) + "MB\n┃\n┃ ═══════════════════════\n┃\n┃ 1️⃣ - Upload Rápido ⚡\n┃ • Link temporário (24h), qualidade padrão\n┃\n┃ 2️⃣ - Upload Permanente 💾\n┃ • Link que não expira\n┃\n┃ 3️⃣ - Upload Personalizado ⚙️\n┃ • Escolher qualidade e tipo\n┃\n┃ 4️⃣ - Cancelar ❌\n┃ • Encerra o processo\n┃\n╰━━━⊱「 𝐔𝐏𝐋𝐎𝐀𝐃 」⊰━━━╯\n*Digite uma opção:*",
          'options': _0x2bcbf9
        },
        'personalizado': {
          'text': "╭━━━⊱「 UPLOAD PERSONALIZADO 」⊰━━━╮\n┃\n┃ " + _0x1216b5.emoji + " *Arquivo:* " + _0x1216b5.type.toUpperCase() + "\n┃ 📏 *Tamanho:* " + _0x4e294d.toFixed(2) + "MB\n┃\n┃ ═══════════════════════\n┃\n┃ 1️⃣ - Temporário + Alta Qualidade ⏰🌟\n┃ • Expira em 24h, máxima qualidade\n┃\n┃ 2️⃣ - Temporário + Compactado ⏰📦\n┃ • Expira em 24h, arquivo menor\n┃\n┃ 3️⃣ - Permanente + Alta Qualidade 💾🌟\n┃ • Armazenamento permanente\n┃ • Máxima qualidade possível\n┃\n┃ 4️⃣ - Permanente + Compactado 💾📦\n┃ • Armazenamento permanente\n┃ • Arquivo menor, boa qualidade\n┃\n┃ 0️⃣ - Voltar\n┃\n╰━━━⊱「 𝐏𝐄𝐑𝐒𝐎𝐍𝐀𝐋𝐈𝐙𝐀𝐑 」⊰━━━╯\n*Digite uma opção:*",
          'options': _0x31541c
        }
      };
      await _0x397695(_0x25437d, _0x5c714a, _0x4ba9f3.principal.text, _0x4ba9f3.principal.options, {
        'menus': _0x4ba9f3,
        'history': ["principal"],
        'timeout': 0xea60,
        'timeoutMessage': "⏰ Tempo esgotado. Upload cancelado.",
        'onTimeout': () => {
          delete global.tempMediaData[_0x3718b3];
        }
      });
      return true;
    } catch (_0xe0ef0e) {
      console.error("❌ Erro no comando gerarlink:", _0xe0ef0e);
      const _0x5dd026 = _0x25437d + '_' + _0x5c714a + "_gerarlink";
      if (global.tempMediaData && global.tempMediaData[_0x5dd026]) {
        delete global.tempMediaData[_0x5dd026];
      }
      let _0x4be180 = "❌ Erro ao processar comando.";
      if (_0xe0ef0e.message.includes("Vídeo excede")) {
        _0x4be180 += "\n\n⏱️ O vídeo deve ter no máximo 60 segundos.";
      } else {
        if (_0xe0ef0e.message.includes("muito grande")) {
          _0x4be180 += "\n\n📦 Arquivo muito grande. Máximo permitido: 20MB.";
        } else {
          if (_0xe0ef0e.message.includes("Envie ou cite")) {
            _0x4be180 += "\n\n📎 Você precisa enviar ou citar uma imagem ou vídeo.";
          } else {
            if (_0xe0ef0e.message.includes("processar a mídia")) {
              _0x4be180 += "\n\n🔧 Não foi possível processar a mídia. Tente novamente.";
            } else {
              _0x4be180 += "\n\n🔧 Detalhes: " + _0xe0ef0e.message;
            }
          }
        }
      }
      _0x19276b(_0x4be180);
    }
  }
}, {
  'name': "ytsearch",
  'aliases': [],
  'category': "pesquisa",
  'description': "Pesquisa vídeos no YouTube",
  'longDescription': "Busca e exibe resultados de vídeos do YouTube com base no termo de pesquisa fornecido, incluindo títulos, URLs e outras informações.",
  'usage': "ytsearch [termo]",
  'example': "ytsearch música relaxante",
  'menu': "pesquisa",
  'menuSection': "YouTube",
  'permissions': {},
  'requirements': _0x124122,
  'execute': async ({
    q: _0x34ae77,
    acessAPI: _0x30e9f7,
    reply: _0x296ea5
  }) => {
    try {
      if (!_0x34ae77.trim()) {
        return _0x296ea5("Digite o nome de algum vídeo ou música que deseja encontrar..");
      }
      AB = await _0x30e9f7.ytsearch(_0x34ae77.trim());
      ABC = "-\t".repeat(13) + "\n\n";
      for (var _0x137d09 of AB) {
        ABC += "Titulo: " + _0x137d09.titulo + "\nUrl: " + _0x137d09.url + "\nTempo: " + _0x137d09.tempo + "\nPostado: " + _0x137d09.postado + "\n\nDescrição: " + _0x137d09.desc + "\n\n";
        ABC += "-\t".repeat(13) + "\n\n";
      }
      _0x296ea5(ABC);
      return true;
    } catch (_0x18360f) {
      const _0xc217b5 = {
        success: false,
        message: "Erro...."
      };
      return _0xc217b5;
    }
  }
}, {
  'name': "votar_duelo",
  'aliases': ["votar_combate"],
  'category': "grupo",
  'description': "Vota em um participante do duelo",
  'longDescription': "Permite que usuários votem em um dos participantes de um duelo em andamento em um grupo.",
  'usage': "votar_duelo [número]/[id do grupo]",
  'example': "votar_duelo 553100000000/919999999999-1604595598",
  'menu': "grupo",
  'menuSection': "Entretenimento",
  'permissions': {},
  'requirements': _0x45fc5c,
  'execute': async ({
    sender: _0x22266d,
    q: _0x42879d,
    prefix: _0x1731af,
    fs: _0x838bfe,
    reply: _0x465648
  }) => {
    if (isGroup) {
      return _0x465648("Este comando só deve ser utilizado em privado após a votação ser iniciada em algum grupo, lá terá o exemplo..");
    }
    var [_0x330f75, _0x343ed3] = _0x42879d.trim().split('/');
    if (!_0x343ed3) {
      return _0x465648("Digite o comando " + _0x1731af + "votar no grupo que iniciou a votação para ver como votar no formato correto.");
    }
    if (!_0x838bfe.existsSync("../../dados/org/json/DUELO/duelo_" + _0x343ed3 + ".json")) {
      return _0x465648("Nenhum duelo foi iniciado nesse grupo..");
    }
    var _0x5995c9 = JSON.parse(_0x838bfe.readFileSync("../../dados/org/json/DUELO/duelo_" + _0x343ed3 + ".json"));
    if (_0x5995c9.voto_usu1.includes(_0x22266d)) {
      return _0x465648("Você já votou em alguem, então não pode votar novamente.");
    }
    if (_0x5995c9.voto_usu2.includes(_0x22266d)) {
      return _0x465648("Você já votou em alguem, então não pode votar novamente.");
    }
    if (_0x5995c9.usu1 == _0x330f75 + "@s.whatsapp.net") {
      _0x5995c9.voto_usu1.push(_0x22266d);
    } else {
      _0x5995c9.voto_usu2.push(_0x22266d);
    }
    _0x838bfe.writeFileSync("../../dados/org/json/DUELO/duelo_" + _0x343ed3 + ".json", JSON.stringify(_0x5995c9, null, 2));
    _0x465648("Votou com sucesso, agora só aguardar terminar, para ver os resultados 🙂.");
    return true;
  }
}, {
  'name': "votar",
  'aliases': ["como_votar"],
  'category': "grupo",
  'description': "Mostra como votar em um duelo",
  'longDescription': "Exibe instruções sobre como votar em um duelo que está em andamento, enviando os comandos necessários no privado do usuário.",
  'usage': "votar",
  'example': "votar",
  'menu': "grupo",
  'menuSection': "Entretenimento",
  'permissions': _0x5f38b7,
  'requirements': {},
  'execute': async ({
    conn: _0x322c69,
    sender: _0x1224a5,
    from: _0x5a92d5,
    fs: _0x16bce2,
    setting: _0x589751,
    prefix: _0xc13c68,
    Res_SoGrupo: _0x1fa55c,
    reply: _0x38301b
  }) => {
    if (!isGroup) {
      return _0x38301b(_0x1fa55c);
    }
    if (!_0x16bce2.existsSync("../../dados/org/json/DUELO/duelo_" + _0x5a92d5 + ".json")) {
      return _0x38301b("Nenhum duelo foi iniciado nesse grupo..");
    }
    _0x38301b("Como votar foi enviado no seu privado a explicação dos 2.");
    var _0x5c72d0 = JSON.parse(_0x16bce2.readFileSync("../../dados/org/json/DUELO/duelo_" + _0x5a92d5 + ".json"));
    const _0x5a1ef2 = {
      text: "Para votar no primeiro usario: \nUse o comando: " + _0x589751.prefix + "votar_duelo " + _0x5c72d0.usu1 + '/' + _0x5a92d5 + " \n\nPara votar no segundo usuario:\n\nUse o comando: " + _0x589751.prefix + "votar_duelo " + _0x5c72d0.usu2 + '/' + _0x5a92d5 + " \n"
    };
    _0x322c69.sendMessage(_0x1224a5, _0x5a1ef2);
    return true;
  }
}, {
  'name': "zerar_duelo",
  'aliases': ["zerar_combate"],
  'category': "admin",
  'description': "Cancela um duelo em andamento",
  'longDescription': "Cancela um duelo que está em andamento, removendo o arquivo de dados do duelo e permitindo criar um novo.",
  'usage': "zerar_duelo",
  'example': "zerar_duelo",
  'menu': "admin",
  'menuSection': "Entretenimento",
  'permissions': _0x57a57d,
  'requirements': {},
  'execute': async ({
    from: _0x120e4d,
    fs: _0x58e9f3,
    DLT_FL: _0x5b7f49,
    Res_SoGrupo: _0x520211,
    isGroup: _0x1f35c5,
    isGroupAdmins: _0x7c470c,
    reply: _0x4a5150
  }) => {
    if (!_0x1f35c5) {
      return _0x4a5150(_0x520211);
    }
    if (!_0x7c470c) {
      return _0x4a5150("Apenas administrador..");
    }
    if (!_0x58e9f3.existsSync("../../dados/org/json/DUELO/duelo_" + _0x120e4d + ".json")) {
      return _0x4a5150("Nenhum duelo foi iniciado nesse grupo..");
    }
    _0x5b7f49("../../dados/org/json/DUELO/duelo_" + _0x120e4d + ".json");
    _0x4a5150("Duelo resetado / cancelado..");
    return true;
  }
}, {
  'name': "zerarrank",
  'aliases': ["zerar_rank"],
  'category': "dono",
  'description': "Zera o contador de mensagens do grupo",
  'longDescription': "Remove todos os dados de contagem de mensagens do grupo atual. Comando exclusivo para o dono do bot.",
  'usage': "zerarrank",
  'example': "zerar_rank",
  'menu': "dono",
  'menuSection': "Administração",
  'permissions': _0x1c24b4,
  'requirements': {},
  'execute': async ({
    from: _0xf7d732,
    removerGrupoDoContador: _0x2184b,
    reply: _0x5cb7d7
  }) => {
    await _0x2184b(_0xf7d732);
    _0x5cb7d7("Rank de mensagem ( Contador de mensagens ), foi zerada com sucesso desse grupo.");
    return true;
  }
}, {
  'name': "terminar_votacao",
  'aliases': [],
  'category': "admin",
  'description': "Encerra a votação de um duelo e mostra o resultado",
  'longDescription': "Encerra a votação de um duelo previamente iniciado, conta os votos e exibe o resultado com uma imagem personalizada do vencedor.",
  'usage': "terminar_votacao",
  'example': "terminar_votacao",
  'menu': "admin",
  'menuSection': "Entretenimento",
  'permissions': _0x34bde2,
  'requirements': {},
  'execute': async ({
    conn: _0xf7bb0f,
    from: _0x15fc1c,
    sender: _0x1482fe,
    fs: _0x40108a,
    getBuffer: _0x23273d,
    upload: _0x24f213,
    acessAPI: _0xf7eb8a,
    setTimeout: _0x33bfdb,
    DLT_FL: _0x1b6173,
    Res_SoGrupo: _0x835426,
    isGroup: _0x3c6b71,
    isGroupAdmins: _0x434dd4,
    reply: _0x4ba368
  }) => {
    try {
      if (!_0x3c6b71) {
        return _0x4ba368(_0x835426);
      }
      if (!_0x434dd4) {
        return _0x4ba368("Apenas administrador..");
      }
      if (!_0x40108a.existsSync("../../dados/org/json/DUELO/duelo_" + _0x15fc1c + ".json")) {
        return _0x4ba368("Nenhum duelo foi iniciado nesse grupo..");
      }
      dl_JsOn = JSON.parse(_0x40108a.readFileSync("../../dados/org/json/DUELO/duelo_" + _0x15fc1c + ".json"));
      if (dl_JsOn.voto_usu1.length == dl_JsOn.voto_usu2.length) {
        return _0x4ba368("[ OBS ] - OS 2 USUARIOS TERMINARAM EMPATE, COM MESMA PONTUAÇÃO:\n\n1: " + dl_JsOn.voto_usu1.length + " Votos\n\n2: " + dl_JsOn.voto_usu2.length + " Votos\n\nEntão a decisão está na mão dos administradores, se vai refazer o duelo, ou decidir o ganhador de alguma fórma..");
      }
      let _0x142b3a = "[ Ganhador: @" + (dl_JsOn.voto_usu1.length > dl_JsOn.voto_usu2.length ? dl_JsOn.usu1.split('@')[0] : dl_JsOn.usu2.split('@')[0]) + " ]\n\nUsuário _- 1 - @" + dl_JsOn.usu1.split('@')[0] + "\n\nQuantidade de votos: " + dl_JsOn.voto_usu1.length + "\n_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-\n\nUsuário _- 2 - @" + dl_JsOn.usu2.split('@')[0] + "\n\nQuantidade de votos: " + dl_JsOn.voto_usu2.length + "\n";
      try {
        pfimg = await _0xf7bb0f.profilePictureUrl((dl_JsOn.voto_usu1.length > dl_JsOn.voto_usu2.length ? dl_JsOn.usu1.split('@')[0] : dl_JsOn.usu2.split('@')[0]) + "@c.us", "image");
      } catch {
        pfimg = "https://i.ibb.co/ZVkgpzp/b5427ea4b8701bc47e751.jpg";
      }
      bl1 = await _0x23273d(pfimg);
      bl_up = await _0x24f213(bl1);
      blar = await _0x23273d("https://eruakorl.sirv.com/josival-aleatory/ganhador.jpg?text.0.text=" + (dl_JsOn.voto_usu1.length > dl_JsOn.voto_usu2.length ? dl_JsOn.usu1.split('@')[0] : dl_JsOn.usu2.split('@')[0]) + "&text.0.position.gravity=center&text.0.position.y=22%25&text.0.size=62&text.0.color=000000&text.0.font.family=Source%20Serif%20Pro&text.0.font.weight=700&text.0.font.style=italic");
      bli = await _0x24f213(blar);
      _0xf7bb0f.sendMessage(_0x15fc1c, {
        'image': {
          'url': _0xf7eb8a.duelowin(bl_up, bli)
        },
        'caption': _0x142b3a,
        'mentions': [dl_JsOn.usu1, dl_JsOn.usu2]
      });
    } catch {
      _0x4ba368("Erro, tente novamente..");
    }
    U_S_US = "Usuarios que votou em: " + dl_JsOn.usu1.split('@')[0] + "\n\n";
    for (let _0x2c2c83 of dl_JsOn.voto_usu1) {
      U_S_US += "- ( https://wa.me/" + _0x2c2c83.split('@')[0] + " )\n\n";
    }
    U_S_US += "Usuarios que votou em: " + dl_JsOn.usu2.split('@')[0] + "\n\n";
    for (let _0x13528 of dl_JsOn.voto_usu2) {
      U_S_US += "- ( https://wa.me/" + _0x13528.split('@')[0] + " )\n";
    }
    const _0x2c3062 = {
      text: U_S_US
    };
    _0xf7bb0f.sendMessage(_0x1482fe, _0x2c3062);
    await _0x33bfdb(() => {
      _0x1b6173("../../dados/org/json/DUELO/duelo_" + _0x15fc1c + ".json");
    }, 30000);
    return true;
  }
}, {
  'name': "iniciar_votacao",
  'aliases': [],
  'category': "admin",
  'description': "Inicia a votação de um duelo",
  'longDescription': "Inicia a votação para um duelo previamente criado, permitindo que os membros do grupo votem em qual participante deve ganhar.",
  'usage': "iniciar_votacao",
  'example': "iniciar_votacao",
  'menu': "admin",
  'menuSection': "Entretenimento",
  'permissions': _0x4b857e,
  'requirements': {},
  'execute': async ({
    conn: _0x755285,
    from: _0x26e145,
    fs: _0x7215d0,
    botNumber: _0x52aaec,
    setting: _0x360b9d,
    prefix: _0x54c583,
    mention: _0x279ce5,
    Res_SoGrupo: _0x59be00,
    isGroup: _0x41666c,
    isGroupAdmins: _0x30f3ab,
    reply: _0x59f809
  }) => {
    if (!_0x41666c) {
      return _0x59f809(_0x59be00);
    }
    if (!_0x30f3ab) {
      return _0x59f809("Apenas administrador..");
    }
    if (!_0x7215d0.existsSync("../../dados/org/json/DUELO/duelo_" + _0x26e145 + ".json")) {
      return _0x59f809("Nenhum duelo foi iniciado nesse grupo..");
    }
    dl_JsOn = JSON.parse(_0x7215d0.readFileSync("../../dados/org/json/DUELO/duelo_" + _0x26e145 + ".json"));
    _0x279ce5("[ ATENÇÃO ] - Votação iniciada, prestem atenção.\n\n@" + dl_JsOn.usu1.split('@')[0] + "\nPara votar no primeiro usuario do duelo: \nhttps://wa.me/" + _0x52aaec.split('@')[0] + "?text=" + _0x360b9d.prefix + "votar_duelo%20" + dl_JsOn.usu1.split('@')[0] + '/' + _0x26e145 + "\n\n@" + dl_JsOn.usu2.split('@')[0] + "\nPara votar no segundo usuario do duelo:\nhttps://wa.me/" + _0x52aaec.split('@')[0] + "?text=" + _0x54c583 + "votar_duelo%20" + dl_JsOn.usu2.split('@')[0] + '/' + _0x26e145);
    return true;
  }
}, {
  'name': "duelo",
  'aliases': ["combate"],
  'category': "admin",
  'description': "Inicia um duelo entre dois membros do grupo",
  'longDescription': "Cria um duelo entre dois usuários do grupo, com imagem personalizada dos combatentes. Permite que outros membros votem no ganhador após o duelo ser iniciado.",
  'usage': "duelo @usuario1 @usuario2",
  'example': "duelo @usuario1 @usuario2",
  'menu': "admin",
  'menuSection': "Entretenimento",
  'permissions': _0xb9c829,
  'requirements': {},
  'execute': async ({
    conn: _0x325919,
    from: _0x2b33a3,
    menc_jid2: _0x40fa7c,
    fs: _0xd2e425,
    prefix: _0xa2d9b1,
    command: _0x53a7c9,
    getBuffer: _0x17f2b4,
    upload: _0x2b98a9,
    acessAPI: _0x508eba,
    sleep: _0x14952c,
    Res_SoGrupo: _0x7bb04b,
    isGroup: _0x3af22c,
    isGroupAdmins: _0x2e5130,
    reply: _0x40f693
  }) => {
    if (!_0x3af22c) {
      return _0x40f693(_0x7bb04b);
    }
    if (!_0x2e5130) {
      return _0x40f693("Apenas administrador..");
    }
    try {
      TXTEX = "Olá, para iniciar o duelo, você precisa marcar 2 pessoas.\nExemplo: " + (_0xa2d9b1 + _0x53a7c9) + " @fulano1 @fulano2.";
      if (!_0x40fa7c || _0x40fa7c?.["length"] > 2) {
        return _0x40f693(TXTEX);
      }
      try {
        pfimg = await _0x325919.profilePictureUrl(_0x40fa7c[0].split('@')[0] + "@c.us", "image");
      } catch {
        pfimg = "https://i.ibb.co/ZVkgpzp/b5427ea4b8701bc47e751.jpg";
      }
      bl1 = await _0x17f2b4(pfimg);
      bl_up = await _0x2b98a9(bl1);
      try {
        pfimg2 = await _0x325919.profilePictureUrl(_0x40fa7c[1].split('@')[0] + "@c.us", "image");
      } catch {
        pfimg2 = "https://i.ibb.co/ZVkgpzp/b5427ea4b8701bc47e751.jpg";
      }
      bl2 = await _0x17f2b4(pfimg2);
      bl_up2 = await _0x2b98a9(bl2);
      gtb = await _0x17f2b4("https://eruakorl.sirv.com/josival-aleatory/vs.jpg?text.0.text=" + _0x40fa7c[0].split('@')[0] + "&text.0.position.gravity=southwest&text.0.position.x=6%25&text.0.position.y=-2%25&text.0.size=32&text.0.color=ff0000&text.0.font.family=Source%20Serif%20Pro&text.0.font.weight=700&text.0.font.style=italic&text.0.background.opacity=100&text.1.text=" + _0x40fa7c[1].split('@')[0] + "&text.1.position.x=-7%25&text.1.position.y=-2%25&text.1.size=32&text.1.color=0022ff&text.1.font.family=Source%20Serif%20Pro&text.1.font.weight=700&text.1.font.style=italic");
      txtimg = await _0x2b98a9(gtb);
      _0x325919.sendMessage(_0x2b33a3, {
        'image': {
          'url': _0x508eba.duelo(bl_up, bl_up2, txtimg)
        },
        'caption': "[ ATENÇÃO ]:\n\n@" + _0x40fa7c[0].split('@')[0] + "\n\t\t\t\t\t~ VS ~\n@" + _0x40fa7c[1].split('@')[0] + "\n\n[ Combate iniciado ] - Respeitem os Combatentes. Os dois participantes irão combater no momento. Posteriormente um ADM vai iniciar a votação. Digitando: !iniciar_votação. Atenção a votação, avalie com responsabilidade. Não atrapalhem o momento do combate para não serem removidos.",
        'mentions': _0x40fa7c
      })["catch"](_0x19cfeb => {
        _0x40f693("Erro");
      });
      await _0x14952c(1000);
      const _0x539a6d = {
        usu1: _0x40fa7c[0],
        usu2: _0x40fa7c[1],
        iniciou: false,
        voto_usu1: [],
        voto_usu2: []
      };
      _0xd2e425.writeFileSync("../../dados/org/json/DUELO/duelo_" + _0x2b33a3 + ".json", JSON.stringify(_0x539a6d, null, 2));
      return true;
    } catch (_0x5b2f62) {
      console.log(_0x5b2f62);
      const _0x1c860d = {
        success: false,
        message: "Erro, tente novamente.."
      };
      return _0x1c860d;
    }
  }
}, {
  'name': 'qc',
  'aliases': ["fakechat"],
  'category': "sticker",
  'description': "Cria um sticker de chat falso",
  'longDescription': "Cria um sticker que simula uma mensagem de chat WhatsApp com o conteúdo especificado.",
  'usage': "qc [texto]",
  'example': "qc Olá, sou uma mensagem falsa",
  'menu': "sticker",
  'menuSection': "Criação",
  'permissions': _0x582fb9,
  'requirements': _0x29377d,
  'execute': async ({
    conn: _0x52fbf2,
    info: _0x4014f9,
    from: _0x4a95b5,
    q: _0x3e8e9f,
    sender: _0x2dc061,
    menc_os2: _0x25afd9,
    pushname: _0x56a94a,
    budy2: _0x5d47d3,
    Os_Returns: _0x355cb4,
    Res_Aguarde: _0x10d76f,
    FigAuthor: _0x1790de,
    axios: _0x4c5bcd,
    writeExifWebp: _0x4d5ddd,
    reply: _0x493494,
    contadorMsg: _0x3ba943
  }) => {
    if (!_0x3e8e9f) {
      return _0x493494("Precisa digitar algo...");
    }
    if (_0x5d47d3.includes('@')) {
      return _0x493494("Somente marcando uma mensagem ou fazendo sua própria sem marcar nada");
    }
    const _0x4c15f0 = async (_0x5e1b94, _0x53d076, _0x46b4e4) => {
      try {
        const _0x15833f = {
          url: _0x53d076
        };
        const {
          data: _0x45eacc
        } = await _0x4c5bcd.post("https://bot.lyo.su/quote/generate", {
          'type': "quote",
          'format': "image",
          'backgroundColor': "#1f2c34",
          'width': 0x200,
          'height': 0x300,
          'scale': 0x2,
          'messages': [{
            'entities': [],
            'avatar': true,
            'from': {
              'id': 0x1,
              'name': _0x5e1b94 || "Desconhecido",
              'photo': _0x15833f
            },
            'text': _0x46b4e4,
            'replyMessage': {}
          }]
        });
        return _0x45eacc.result;
      } catch (_0x1bf437) {
        console.error("fakechat: Erro na API de geração:", _0x1bf437?.["response"]?.["data"] || _0x1bf437.message);
        throw new Error("Erro ao gerar imagem do chat");
      }
    };
    try {
      const _0x190e26 = await _0x52fbf2.profilePictureUrl(_0x25afd9 || _0x2dc061)["catch"](() => "https://i.ibb.co/ZVkgpzp/b5427ea4b8701bc47e751.jpg");
      _0x493494(_0x10d76f);
      const _0x296518 = await _0x3ba943();
      const _0x4e16b9 = _0x296518.find(_0x3b28d9 => _0x3b28d9.groupId === _0x4a95b5);
      const _0x2200f4 = _0x4e16b9 ? JSON.parse(_0x4e16b9.numbers) : [];
      const _0x3461f4 = _0x2200f4.find(_0x2f079f => _0x2f079f.id === _0x25afd9);
      const _0x5582db = _0x3461f4?.["nick"] || _0x56a94a;
      const _0x1e975d = require("sharp");
      const _0x356b46 = await _0x4c15f0(_0x5582db, _0x190e26, _0x3e8e9f);
      if (!_0x356b46?.["image"]) {
        throw new Error("Falha ao obter imagem da API");
      }
      const _0xc50492 = {
        r: 0x0,
        g: 0x0,
        b: 0x0,
        alpha: 0x0
      };
      const _0x2ae630 = {
        packname: _0x1790de,
        author: _0x1790de
      };
      const _0x4e0bdf = await _0x1e975d(Buffer.from(_0x356b46.image, "base64")).resize(512, 512, {
        'fit': "contain",
        'background': _0xc50492
      }).toBuffer().then(_0x275143 => _0x4d5ddd(_0x275143, _0x2ae630))["catch"](_0x42ecf7 => {
        console.error("fakechat: Erro no processamento da imagem:", _0x42ecf7);
        throw new Error("Falha ao processar a imagem");
      });
      const _0x5abee1 = {
        sticker: _0x4e0bdf
      };
      await _0x52fbf2.sendMessage(_0x4a95b5, _0x5abee1);
      return true;
    } catch (_0x44b70f) {
      console.error("fakechat: Erro crítico:", _0x44b70f);
      const _0x3b84e5 = {
        success: false,
        message: "Erro ao processar o comando fakechat!"
      };
      return _0x3b84e5;
    }
  }
}, {
  'name': "kwai",
  'aliases': [],
  'category': "downloader",
  'description': "Baixa vídeos do Kwai",
  'longDescription': "Baixa vídeos do Kwai através do link compartilhado.",
  'usage': "kwai [link]",
  'example': "kwai https://kwai.com/...",
  'menu': "downloads",
  'menuSection': "Vídeos",
  'permissions': {},
  'requirements': _0x26b46f,
  'execute': async ({
    conn: _0x21242c,
    info: _0x4ced74,
    from: _0x508698,
    q: _0x384371,
    prefix: _0x3a2ff9,
    command: _0x34f688,
    Res_Aguarde: _0xece366,
    acessAPI: _0x138b70,
    reply: _0x5be79b
  }) => {
    if (!_0x384371.trim().includes("kwai")) {
      return _0x5be79b("Exemplo: " + (_0x3a2ff9 + _0x34f688) + " LINK DO KWAI");
    }
    _0x5be79b(_0xece366);
    try {
      const _0x17bea6 = {
        quoted: _0x4ced74
      };
      _0x21242c.sendMessage(_0x508698, {
        'video': {
          'url': _0x138b70.kwai_mp4(_0x384371.trim())
        },
        'mimetype': "video/mp4"
      }, _0x17bea6);
      return true;
    } catch {
      const _0x1a0cfd = {
        success: false,
        message: "Erro..."
      };
      return _0x1a0cfd;
    }
  }
}, {
  'name': "ifunny",
  'aliases': [],
  'category': "downloader",
  'description': "Baixa vídeos do iFunny",
  'longDescription': "Baixa vídeos do site/aplicativo iFunny através do link compartilhado.",
  'usage': "ifunny [link]",
  'example': "ifunny https://br.ifunny.co/video/w9Eaa2bOB?s=cl",
  'menu': "downloads",
  'menuSection': "Vídeos",
  'permissions': {},
  'requirements': _0x292cc0,
  'execute': async ({
    conn: _0x2863c0,
    info: _0x2a7c2c,
    from: _0x111c03,
    q: _0x51f180,
    prefix: _0x2a89bf,
    command: _0x3bd278,
    acessAPI: _0x2e1f30,
    reply: _0x28aed2
  }) => {
    if (!_0x51f180.trim()) {
      return _0x28aed2("Faltando link do ifunny, Exemplo: https://br.ifunny.co/video/w9Eaa2bOB?s=cl");
    }
    try {
      const _0x5316e7 = {
        quoted: _0x2a7c2c
      };
      _0x2863c0.sendMessage(_0x111c03, {
        'video': {
          'url': _0x2e1f30.ifunny_mp4(_0x51f180.trim())
        },
        'mimetype': "video/mp4"
      }, _0x5316e7);
      return true;
    } catch (_0x2cd9e1) {
      console.log(_0x2cd9e1);
      const _0x5df23b = {
        success: false,
        message: "Erro..."
      };
      return _0x5df23b;
    }
  }
}, {
  'name': "soundcloud",
  'aliases': ["sound"],
  'category': "downloader",
  'description': "Baixa músicas do SoundCloud",
  'longDescription': "Baixa músicas do SoundCloud através do link compartilhado.",
  'usage': "soundcloud [link]",
  'example': "soundcloud https://soundcloud.com/...",
  'menu': "downloads",
  'menuSection': "Músicas",
  'permissions': {},
  'requirements': _0x7d09c6,
  'execute': async ({
    conn: _0x235862,
    info: _0x31910a,
    from: _0x23f4e8,
    q: _0x1291ad,
    acessAPI: _0x53382f,
    reply: _0x43ad21
  }) => {
    if (!_0x1291ad.trim().includes("soundcloud")) {
      return _0x43ad21("Cadê o link do soundcloud?");
    }
    _0x43ad21("Aguarde, estou enviando...");
    try {
      const _0x306f52 = {
        quoted: _0x31910a
      };
      _0x235862.sendMessage(_0x23f4e8, {
        'audio': {
          'url': _0x53382f.soundcloud(_0x1291ad.trim())
        },
        'mimetype': "audio/mpeg"
      }, _0x306f52);
      return true;
    } catch (_0x15447a) {
      const _0x1e28c1 = {
        success: false,
        message: "Erro..."
      };
      return _0x1e28c1;
    }
  }
}, {
  'name': "spotify",
  'aliases': [],
  'category': "downloader",
  'description': "Baixa músicas do Spotify",
  'longDescription': "Baixa músicas do Spotify através do link compartilhado da faixa (não funciona com playlists).",
  'usage': "spotify [link]",
  'example': "spotify https://open.spotify.com/intl-pt/track/4m3mrHuttXhK58f6Tenai1",
  'menu': "downloads",
  'menuSection': "Músicas",
  'permissions': {},
  'requirements': _0x1653c7,
  'execute': async ({
    conn: _0x5c5529,
    info: _0x2a4289,
    from: _0x3ca97d,
    q: _0x112db7,
    prefix: _0x328c8f,
    command: _0x10caf0,
    Res_Aguarde: _0x3d63bf,
    acessAPI: _0x1f5b1b,
    reply: _0x16be19
  }) => {
    if (!_0x112db7.trim().includes("spotify")) {
      return _0x16be19("Cadê a url do spotiy? exemplo: " + (_0x328c8f + _0x10caf0) + " https://open.spotify.com/intl-pt/track/4m3mrHuttXhK58f6Tenai1\nNão baixo playlist, quiser pegar o link da música, acessa o site: https://open.spotify.com/search e pesquisa lá.");
    }
    _0x16be19(_0x3d63bf);
    try {
      const _0x267f2f = {
        quoted: _0x2a4289
      };
      _0x5c5529.sendMessage(_0x3ca97d, {
        'audio': {
          'url': _0x1f5b1b.spotify_mp3(_0x112db7.trim())
        },
        'mimetype': "audio/mpeg"
      }, _0x267f2f)["catch"](() => _0x16be19("Erro!"));
      return true;
    } catch {
      const _0xc00d1f = {
        success: false,
        message: "Erro..."
      };
      return _0xc00d1f;
    }
  }
}, {
  'name': "play",
  'aliases': [],
  'category': "downloader",
  'description': "Menu de download de músicas e vídeos",
  'longDescription': "Exibe um menu interativo para escolher entre baixar música, vídeo ou documento do YouTube.",
  'usage': "play [nome ou link]",
  'example': "play shape of you",
  'menu': "downloads",
  'menuSection': "Principal",
  'permissions': {},
  'requirements': _0x1458fb,
  'execute': async ({
    conn: _0x1d3934,
    info: _0x5607f3,
    from: _0x12bded,
    q: _0x5d5e70,
    sender: _0x2d7067,
    prefix: _0x5842f1,
    LIMPARDOCNT_QUEMJASAIU: _0x1dffda,
    getUniqueKey: _0x14d68a,
    optionsBuffer: _0x5505bd,
    flushOptionsBuffer: _0x4e30bd,
    createChoiceMenu: _0xb9e645,
    reply: _0x33615e
  }) => {
    if (!_0x5d5e70.trim()) {
      return _0x33615e("- Exemplo: " + _0x5842f1 + "play nome da música\na música será baixada, só basta escolher áudio ou vídeo, se não baixar, o YouTube privou de não baixarem, ou algo do tipo..");
    }
    await _0x1dffda();
    const _0x500d1f = _0x14d68a(_0x12bded, _0x2d7067);
    if (_0x5505bd[_0x500d1f]) {
      delete _0x5505bd[_0x500d1f];
      _0x4e30bd();
    }
    const _0x5c2ec3 = {
      command: _0x5842f1 + "play_audio " + _0x5d5e70,
      edit: true
    };
    const _0x1518a3 = {
      command: _0x5842f1 + "play_video " + _0x5d5e70,
      edit: true
    };
    const _0xdf469f = {
      command: _0x5842f1 + "playdoc " + _0x5d5e70,
      edit: true
    };
    const _0x75b8b8 = {
      '1': _0x5c2ec3,
      '2': _0x1518a3,
      '3': _0xdf469f
    };
    const _0x364077 = {
      text: "Qual Formato Vc Deseja Para O Download?\n\n1 - 🎧 𝑨𝑼𝑫𝑰𝑶 📀\n2 - 📽 𝑽𝑰𝑫𝑬𝑶 🖥\n3 - 📁 𝑫𝑶𝑪𝑼𝑴𝑬𝑵𝑻𝑶 📁\n\n*DIGITE O NÚMERO DA OPÇÃO*",
      options: _0x75b8b8
    };
    const _0x327d5c = {
      principal: _0x364077
    };
    await _0xb9e645(_0x12bded, _0x2d7067, _0x327d5c.principal.text, _0x327d5c.principal.options, {
      'menus': _0x327d5c,
      'history': ["principal"]
    });
    return true;
  }
}, {
  'name': "playdoc",
  'aliases': [],
  'category': "downloader",
  'description': "Baixa música como documento",
  'longDescription': "Baixa uma música do YouTube como um documento, útil para enviar músicas sem compressão.",
  'usage': "playdoc [nome ou link]",
  'example': "playdoc shape of you",
  'menu': "downloads",
  'menuSection': "Músicas",
  'permissions': {},
  'requirements': _0x38cc8d,
  'execute': async ({
    conn: _0x4a6d5c,
    info: _0x966b30,
    from: _0x365ea1,
    q: _0x4f4cde,
    prefix: _0xa8cc8f,
    dataGp: _0x128f99,
    getTemaMenu: _0x1d6dec,
    acessAPI: _0x23601c,
    reply: _0x636e6f
  }) => {
    try {
      if (!_0x4f4cde.trim()) {
        return _0x636e6f("- Exemplo: " + _0xa8cc8f + "play nome da música\na música será baixada, só basta escolher áudio ou vídeo, se não baixar, o YouTube privou de não baixarem, ou algo do tipo..");
      }
      data = await _0x23601c.ytsearch(_0x4f4cde.trim());
      if (data[0]?.["tempo"]?.["length"] >= 7) {
        return _0x636e6f("Desculpe, este video ou audio é muito grande, não poderei realizar este pedido, peça outra música abaixo de uma hora.");
      }
      var _0x121cc6 = "\n๖ۣ• Titulo: " + (data[0]?.["titulo"] || " Não encontrado.") + "\n๖ۣ• Tempo: " + (data[0]?.["tempo"] || " Não encontrado.") + "\n๖ۣ• Postado: " + (data[0]?.["postado"] || " Não encontrado.") + "\n๖ۣ• Descrição: " + (data[0]?.["desc"] || " Não encontrado.") + "\n\n■■■■■ 100%\n\nEnviando documento...\n\nSe deseja baixar o video, use " + _0xa8cc8f + "playmp4 " + _0x4f4cde.trim() + "\n\nSe deseja baixar o áudio, use " + _0xa8cc8f + "play " + _0x4f4cde.trim() + "\n";
      const _0x3aaba0 = _0x1d6dec(_0x128f99);
      const _0x4d536b = {
        url: data[0]?.["thumb"] || _0x3aaba0.menu.url
      };
      const _0x572678 = {
        image: _0x4d536b,
        caption: _0x121cc6
      };
      const _0xd92d19 = {
        quoted: _0x966b30
      };
      _0x4a6d5c.sendMessage(_0x365ea1, _0x572678, _0xd92d19);
      const _0xf04fc = {
        quoted: _0x966b30
      };
      _0x4a6d5c.sendMessage(_0x365ea1, {
        'document': {
          'url': _0x23601c.play(_0x4f4cde.trim(), true)
        },
        'mimetype': "audio/mpeg",
        'fileName': data[0]?.["titulo"] || "play.mp3"
      }, _0xf04fc)["catch"](_0x9f254 => {
        return _0x636e6f("Erro..");
      });
      return true;
    } catch (_0x357fad) {
      const _0x39ec88 = {
        success: false,
        message: "Seja mais específico, não deu pra encontrar com apenas isto... / Erro"
      };
      return _0x39ec88;
    }
  }
}, {
  'name': "playmp4",
  'aliases': ["play_video"],
  'category': "downloader",
  'description': "Baixa vídeo do YouTube",
  'longDescription': "Baixa vídeos do YouTube através de link ou busca por nome.",
  'usage': "playmp4 [nome ou link]",
  'example': "playmp4 shape of you",
  'menu': "downloads",
  'menuSection': "Vídeos",
  'permissions': {},
  'requirements': _0x3130ae,
  'execute': async ({
    conn: _0x49b9fd,
    info: _0x5d810a,
    from: _0x4f4a0f,
    q: _0x5b587d,
    prefix: _0xc34593,
    command: _0x1797f7,
    Res_Aguarde: _0x48bea9,
    acessAPI: _0x45b7d4,
    reply: _0xf82d48
  }) => {
    try {
      if (!_0x5b587d.trim()) {
        return _0xf82d48("Exemplo: " + (_0xc34593 + _0x1797f7) + " link ou nome");
      }
      _0xf82d48(_0x48bea9);
      data = await _0x45b7d4.ytsearch(_0x5b587d.trim());
      const _0x24fb0e = {
        quoted: _0x5d810a
      };
      _0x49b9fd.sendMessage(_0x4f4a0f, {
        'video': {
          'url': _0x45b7d4.play(_0x5b587d.trim(), false)
        },
        'mimetype': "video/mp4",
        'fileName': data[0]?.["titulo"] || "play.mp4"
      }, _0x24fb0e)["catch"](_0x4a60b6 => {
        return _0xf82d48("Erro..");
      });
      return true;
    } catch (_0x2bc920) {
      const _0x2711bb = {
        success: false,
        message: "Erro..."
      };
      return _0x2711bb;
    }
  }
}, {
  'name': "ytmp4",
  'aliases': ["play_mp4"],
  'category': "downloader",
  'description': "Baixa vídeo do YouTube",
  'longDescription': "Baixa vídeos do YouTube através de link ou busca por nome.",
  'usage': "ytmp4 [link ou nome]",
  'example': "ytmp4 shape of you",
  'menu': "downloads",
  'menuSection': "Vídeos",
  'permissions': {},
  'requirements': _0x4d3a9b,
  'execute': async ({
    conn: _0x2a040e,
    info: _0x5e39e0,
    from: _0x20e296,
    q: _0x31f058,
    prefix: _0x4878dc,
    command: _0x579b8f,
    Res_Aguarde: _0x2b3050,
    acessAPI: _0x2c91f4,
    reply: _0x2329d4
  }) => {
    try {
      if (!_0x31f058.trim()) {
        return _0x2329d4("Exemplo: " + (_0x4878dc + _0x579b8f) + " link ou nome");
      }
      _0x2329d4(_0x2b3050);
      data = await _0x2c91f4.ytsearch(_0x31f058.trim());
      const _0x127044 = {
        quoted: _0x5e39e0
      };
      _0x2a040e.sendMessage(_0x20e296, {
        'video': {
          'url': _0x2c91f4.play(_0x31f058.trim(), false)
        },
        'mimetype': "video/mp4",
        'fileName': data[0]?.["titulo"] || "play.mp4"
      }, _0x127044)["catch"](_0x6ae231 => {
        return _0x2329d4("Erro..");
      });
      return true;
    } catch (_0x502d65) {
      const _0x35fae0 = {
        success: false,
        message: "Erro..."
      };
      return _0x35fae0;
    }
  }
}, {
  'name': "play_audio",
  'aliases': ["ytmp3", "playaudio", "playmp3"],
  'category': "downloader",
  'description': "Baixa música do YouTube",
  'longDescription': "Busca e baixa áudio de músicas do YouTube pelo nome ou link.",
  'usage': "play_audio [nome ou link]",
  'example': "play_audio shape of you",
  'menu': "downloads",
  'menuSection': "Músicas",
  'permissions': {},
  'requirements': _0x251406,
  'execute': async ({
    conn: _0xb594ee,
    info: _0x486498,
    from: _0x1e9c0a,
    q: _0x20c031,
    sender: _0x3e3026,
    prefix: _0x5d15a3,
    Res_Aguarde: _0x3eb90a,
    pesytb: _0x198ce7,
    yts: _0x592041,
    acessAPI: _0x5adb5c,
    delay: _0x2f81c9,
    reply: _0x1ec9ba
  }) => {
    try {
      if (!_0x20c031?.["trim"]()) {
        return _0x1ec9ba("- Exemplo: " + _0x5d15a3 + "play nome da música\nA música será baixada, só basta escolher áudio ou vídeo, se não baixar, o YouTube privou de não baixarem, ou algo do tipo..");
      }
      const _0x3b8582 = _0x20c031.trim();
      const _0x35115b = await _0x198ce7(_0x3b8582)["catch"](() => null);
      if (!_0x35115b) {
        return _0x1ec9ba("❌ Erro ao buscar música. Tente novamente.");
      }
      const _0x138462 = await _0x592041(_0x35115b)["catch"](() => null);
      if (!_0x138462?.["videos"]?.[0]) {
        return _0x1ec9ba("❌ Nenhuma música encontrada. Tente ser mais específico.");
      }
      const _0x2c297b = _0x138462.videos[0];
      if (_0x2c297b.timestamp?.["length"] >= 9) {
        return _0x1ec9ba("⏰ Vídeo muito longo (+ 1h). Peça uma música menor.");
      }
      _0x1ec9ba(_0x3eb90a);
      const _0x38c607 = "๖ۣ• Título: " + (_0x2c297b.title || "Não encontrado") + "\n๖ۣ• Tempo: " + (_0x2c297b.timestamp || "Não encontrado") + "\n๖ۣ• Postado: " + (_0x2c297b.ago || "Não encontrado") + "\n๖ۣ• Canal: " + (_0x2c297b.author?.["name"] || "Não encontrado") + "\n๖ۣ• Descrição: " + (_0x2c297b.description || "Não encontrado") + "\n\n■■■■■ 100%\n\nEscolha uma opção...\n\nSe desejar baixar o vídeo, use " + _0x5d15a3 + "play_video " + _0x3b8582;
      try {
        const _0x5df507 = {
          quoted: _0x486498
        };
        const _0x2bd566 = {
          quoted: _0x486498
        };
        if (_0x2c297b.thumbnail) {
          await _0xb594ee.sendMessage(_0x1e9c0a, {
            'image': {
              'url': _0x2c297b.thumbnail
            },
            'caption': _0x38c607,
            'mentions': [_0x3e3026]
          }, _0x5df507);
        } else {
          await _0xb594ee.sendMessage(_0x1e9c0a, {
            ...require("./commandsManager").temaManager.menuImage("status1", dataGp, isGroup),
            'caption': _0x38c607,
            'mentions': [_0x3e3026]
          }, _0x2bd566);
        }
      } catch (_0x46c177) {
        console.log("Erro ao enviar info:", _0x46c177.message);
      }
      await _0x2f81c9(500);
      try {
        const _0x5829f5 = _0x5adb5c.play(_0x3b8582, true);
        if (!_0x5829f5) {
          throw new Error("URL inválida");
        }
        const _0x391183 = {
          url: _0x5829f5
        };
        const _0x5d7667 = {
          quoted: _0x486498
        };
        await _0xb594ee.sendMessage(_0x1e9c0a, {
          'audio': _0x391183,
          'mimetype': "audio/mpeg",
          'fileName': (_0x2c297b.title?.["replace"](/[^\w\s-]/g, '')["trim"]() || "audio") + ".mp3"
        }, _0x5d7667);
        const _0x56ad78 = {
          success: true
        };
        return _0x56ad78;
      } catch (_0x24a710) {
        console.log("Erro no áudio:", _0x24a710.message);
        return _0x1ec9ba("❌ Erro ao baixar/enviar o áudio. Tente novamente.");
      }
    } catch (_0x2543af) {
      console.log(_0x2543af);
      const _0x536bb3 = {
        success: false,
        message: "❌ Erro inesperado. Seja mais específico ou tente novamente."
      };
      return _0x536bb3;
    }
  }
}, {
  'name': "tiktok_video",
  'aliases': [],
  'category': "downloader",
  'description': "Baixa vídeos do TikTok",
  'longDescription': "Baixa vídeos do TikTok sem marca d'água através do link.",
  'usage': "tiktok_video [link]",
  'example': "tiktok_video https://vm.tiktok.com/...",
  'menu': "downloads",
  'menuSection': "Vídeos",
  'permissions': {},
  'requirements': _0xecc572,
  'execute': async ({
    conn: _0x3e05f8,
    info: _0x2406de,
    from: _0x1d332a,
    q: _0x59e672,
    prefix: _0x1db749,
    command: _0xac2de1,
    Res_Aguarde: _0x417c42,
    acessAPI: _0x454154,
    reply: _0x202054
  }) => {
    try {
      if (!_0x59e672.trim()) {
        return _0x202054("Exemplo: " + (_0x1db749 + _0xac2de1) + " link do Tiktok");
      }
      _0x202054(_0x417c42);
      const _0x37a7a7 = {
        quoted: _0x2406de
      };
      _0x3e05f8.sendMessage(_0x1d332a, {
        'video': {
          'url': _0x454154.tiktok(_0x59e672.trim())
        },
        'mimetype': "video/mp4",
        'caption': "Se deseja baixar em formato audio, use o comando: " + _0x1db749 + "tiktok_audio " + _0x59e672.trim()
      }, _0x37a7a7)["catch"](_0x39e948 => {
        return _0x202054("Erro..");
      });
      return true;
    } catch (_0x4ad3c5) {
      const _0x2526f4 = {
        success: false,
        message: "Erro..."
      };
      return _0x2526f4;
    }
  }
}, {
  'name': "tiktok_audio",
  'aliases': [],
  'category': "downloader",
  'description': "Baixa áudio do TikTok",
  'longDescription': "Extrai e baixa somente o áudio de vídeos do TikTok.",
  'usage': "tiktok_audio [link]",
  'example': "tiktok_audio https://vm.tiktok.com/...",
  'menu': "downloads",
  'menuSection': "Músicas",
  'permissions': {},
  'requirements': _0x1a33bd,
  'execute': async ({
    conn: _0x570897,
    info: _0x23859e,
    from: _0x1c9096,
    q: _0x2d8e6f,
    prefix: _0x334e55,
    command: _0x38e827,
    Res_Aguarde: _0x1e0bf8,
    acessAPI: _0x14374d,
    reply: _0x5b2e43
  }) => {
    try {
      if (!_0x2d8e6f.trim()) {
        return _0x5b2e43("Exemplo: " + (_0x334e55 + _0x38e827) + " link do Tiktok");
      }
      _0x5b2e43(_0x1e0bf8);
      const _0x440e1a = {
        quoted: _0x23859e
      };
      _0x570897.sendMessage(_0x1c9096, {
        'audio': {
          'url': _0x14374d.tiktok(_0x2d8e6f.trim())
        },
        'mimetype': "audio/mpeg"
      }, _0x440e1a)["catch"](_0x3d91be => {
        return _0x5b2e43("Erro..");
      });
      return true;
    } catch (_0x21f8f3) {
      const _0x4fcf0c = {
        success: false,
        message: "Erro..."
      };
      return _0x4fcf0c;
    }
  }
}, {
  'name': "face_video",
  'aliases': [],
  'category': "downloader",
  'description': "Baixa vídeos do Facebook",
  'longDescription': "Baixa vídeos do Facebook através do link.",
  'usage': "face_video [link]",
  'example': "face_video https://www.facebook.com/...",
  'menu': "downloads",
  'menuSection': "Vídeos",
  'permissions': {},
  'requirements': _0x46030d,
  'execute': async ({
    conn: _0x1e4809,
    info: _0x14f8f3,
    from: _0x5f24d6,
    q: _0x14ba9a,
    prefix: _0x455520,
    command: _0x3cb333,
    Res_Aguarde: _0x564545,
    acessAPI: _0x244ad5,
    reply: _0x2c60f6
  }) => {
    try {
      if (!_0x14ba9a.trim()) {
        return _0x2c60f6("Exemplo: " + (_0x455520 + _0x3cb333) + " o link do Facebook");
      }
      _0x2c60f6(_0x564545);
      _0x1e4809.sendMessage(_0x5f24d6, {
        'video': {
          'url': _0x244ad5.facebook(_0x14ba9a.trim(), false)
        },
        'mimetype': "video/mp4",
        'caption': "Se deseja baixar em formato audio, use o comando: " + _0x455520 + "face_audio " + _0x14ba9a.trim()
      })["catch"](_0x324b5e => {
        return _0x2c60f6("Erro..");
      });
      return true;
    } catch (_0x214751) {
      const _0x2a5e1b = {
        success: false,
        message: "Erro.."
      };
      return _0x2a5e1b;
    }
  }
}, {
  'name': "face_audio",
  'aliases': [],
  'category': "downloader",
  'description': "Baixa áudio de vídeos do Facebook",
  'longDescription': "Extrai e baixa somente o áudio de vídeos do Facebook.",
  'usage': "face_audio [link]",
  'example': "face_audio https://www.facebook.com/...",
  'menu': "downloads",
  'menuSection': "Músicas",
  'permissions': {},
  'requirements': _0x5a0c1c,
  'execute': async ({
    conn: _0x2292de,
    info: _0x193a2e,
    from: _0x34a3da,
    q: _0x3ef3e7,
    prefix: _0x2abf8c,
    command: _0x25a157,
    Res_Aguarde: _0x30becd,
    acessAPI: _0xdc9f93,
    reply: _0x38d3fe
  }) => {
    try {
      if (!_0x3ef3e7.trim()) {
        return _0x38d3fe("Exemplo: " + (_0x2abf8c + _0x25a157) + " o link do Facebook");
      }
      _0x38d3fe(_0x30becd);
      _0x2292de.sendMessage(_0x34a3da, {
        'audio': {
          'url': _0xdc9f93.facebook(_0x3ef3e7.trim(), true)
        },
        'mimetype': "audio/mpeg"
      })["catch"](_0x5e4aa2 => {
        return _0x38d3fe("Erro..");
      });
      return true;
    } catch (_0x164c88) {
      const _0x400c78 = {
        success: false,
        message: "Erro.."
      };
      return _0x400c78;
    }
  }
}, {
  'name': "twitter_video",
  'aliases': [],
  'category': "downloader",
  'description': "Baixa vídeos do Twitter",
  'longDescription': "Baixa vídeos do Twitter/X através do link.",
  'usage': "twitter_video [link]",
  'example': "twitter_video https://twitter.com/...",
  'menu': "downloads",
  'menuSection': "Vídeos",
  'permissions': {},
  'requirements': _0x25b4c1,
  'execute': async ({
    conn: _0x208083,
    info: _0x5a68bd,
    from: _0x55cf7a,
    q: _0x216d29,
    prefix: _0x43d9e7,
    command: _0x488d7b,
    Res_Aguarde: _0x3b7b4d,
    acessAPI: _0x51d7ad,
    reply: _0x305019
  }) => {
    try {
      if (!_0x216d29.trim()) {
        return _0x305019("Exemplo: " + (_0x43d9e7 + _0x488d7b) + " o link do Twitter");
      }
      _0x305019(_0x3b7b4d);
      _0x208083.sendMessage(_0x55cf7a, {
        'video': {
          'url': _0x51d7ad.twitter(_0x216d29.trim(), false)
        },
        'mimetype': "video/mp4",
        'caption': "Se deseja baixar em formato audio, use o comando: " + _0x43d9e7 + "twitter_audio " + _0x216d29.trim()
      })["catch"](_0x516b99 => {
        return _0x305019("Erro...");
      });
      return true;
    } catch (_0x503e40) {
      const _0x48e5aa = {
        success: false,
        message: "Erro.."
      };
      return _0x48e5aa;
    }
  }
}, {
  'name': "twitter_audio",
  'aliases': [],
  'category': "downloader",
  'description': "Baixa áudio de vídeos do Twitter",
  'longDescription': "Extrai e baixa somente o áudio de vídeos do Twitter/X.",
  'usage': "twitter_audio [link]",
  'example': "twitter_audio https://twitter.com/...",
  'menu': "downloads",
  'menuSection': "Músicas",
  'permissions': {},
  'requirements': _0x396612,
  'execute': async ({
    conn: _0x5aab61,
    info: _0x2b8928,
    from: _0x289671,
    q: _0x29381b,
    prefix: _0x2a5b3b,
    command: _0x5e21ff,
    Res_Aguarde: _0xb8eb29,
    acessAPI: _0x25ab5d,
    reply: _0x56f535
  }) => {
    try {
      if (!_0x29381b.trim()) {
        return _0x56f535("Exemplo: " + (_0x2a5b3b + _0x5e21ff) + " o link do Twitter");
      }
      _0x56f535(_0xb8eb29);
      _0x5aab61.sendMessage(_0x289671, {
        'audio': {
          'url': _0x25ab5d.twitter(_0x29381b.trim(), true)
        },
        'mimetype': "audio/mpeg"
      })["catch"](_0x4aadde => {
        return _0x56f535("Erro..");
      });
      return true;
    } catch (_0xb55d0) {
      const _0x3ac914 = {
        success: false,
        message: "Erro.."
      };
      return _0x3ac914;
    }
  }
}, {
  'name': "insta_video",
  'aliases': ["instagram_video"],
  'category': "downloader",
  'description': "Baixa vídeos do Instagram",
  'longDescription': "Baixa vídeos, fotos e stories do Instagram através do link.",
  'usage': "insta_video [link]",
  'example': "insta_video https://www.instagram.com/...",
  'menu': "downloads",
  'menuSection': "Vídeos",
  'permissions': {},
  'requirements': _0x2141ed,
  'execute': async ({
    conn: _0x39940c,
    info: _0x43744d,
    from: _0x37383f,
    q: _0x4ae838,
    prefix: _0x3b05d8,
    command: _0x4deacf,
    acessAPI: _0x15cb86,
    reply: _0x29c261
  }) => {
    try {
      if (_0x4ae838.length < 5) {
        return _0x29c261("Exemplo: " + (_0x3b05d8 + _0x4deacf) + " o link");
      }
      _0x29c261("Realizando ação..");
      ABC = await _0x15cb86.instagram(_0x4ae838.trim());
      let _0x473d1b = ABC.msg[0].type;
      var _0x35249d = _0x473d1b === "mp4" ? "video/mp4" : _0x473d1b === "webp" ? "image/webp" : _0x473d1b === "jpg" ? "image/jpeg" : _0x473d1b === "mp3" ? "audio/mpeg" : "video/mp4";
      const _0x598233 = {
        url: ABC.msg[0].url
      };
      const _0x4d40fc = {
        quoted: _0x43744d
      };
      _0x39940c.sendMessage(_0x37383f, {
        [_0x35249d.split('/')[0]]: _0x598233,
        'mimetype': _0x35249d,
        'caption': "Se deseja baixar no formato áudio, use o comando: " + _0x3b05d8 + "insta_audio " + _0x4ae838.trim()
      }, _0x4d40fc)["catch"](_0x160c34 => {
        return _0x29c261("Erro..");
      });
      return true;
    } catch (_0x470f76) {
      const _0xccdad4 = {
        success: false,
        message: "Erro.."
      };
      return _0xccdad4;
    }
  }
}, {
  'name': "insta_audio",
  'aliases': ["instagram_audio"],
  'category': "downloader",
  'description': "Baixa áudio de vídeos do Instagram",
  'longDescription': "Extrai e baixa somente o áudio de vídeos do Instagram.",
  'usage': "insta_audio [link]",
  'example': "insta_audio https://www.instagram.com/...",
  'menu': "downloads",
  'menuSection': "Músicas",
  'permissions': {},
  'requirements': _0x4b29cd,
  'execute': async ({
    conn: _0x257c0e,
    info: _0x3287e0,
    from: _0xd255fa,
    q: _0x45f3e5,
    prefix: _0x373ac1,
    command: _0x191f48,
    Res_Aguarde: _0x357820,
    acessAPI: _0x3785cf,
    reply: _0x19c70e
  }) => {
    try {
      if (!_0x45f3e5.trim()) {
        return _0x19c70e("Exemplo: " + (_0x373ac1 + _0x191f48) + " o link");
      }
      ABC = await _0x3785cf.instagram(_0x45f3e5.trim());
      _0x19c70e(_0x357820);
      let _0x213b77 = ABC.msg[0].type;
      var _0x46528e = _0x213b77 === "webp" ? "image/webp" : _0x213b77 === "jpg" ? "image/jpeg" : _0x213b77 === "mp3" ? "audio/mpeg" : "audio/mpeg";
      const _0x5b218c = {
        url: ABC.msg[0].url
      };
      const _0x4ccdec = {
        quoted: _0x3287e0
      };
      _0x257c0e.sendMessage(_0xd255fa, {
        [_0x46528e.split('/')[0]]: _0x5b218c,
        'mimetype': _0x46528e
      }, _0x4ccdec)["catch"](_0xc0f28c => {
        return _0x19c70e("Erro..");
      });
      return true;
    } catch (_0x3d5359) {
      const _0x50dd07 = {
        success: false,
        message: "Erro.."
      };
      return _0x50dd07;
    }
  }
}, {
  'name': 'bc',
  'aliases': ["bcgroup", "transmitir", "transmissão"],
  'category': "dono",
  'description': "Transmite uma mensagem para todos os grupos",
  'longDescription': "Envia uma mensagem para todos os grupos onde o bot está presente. Comando exclusivo para o dono do bot.",
  'usage': "bc [mensagem]",
  'example': "bc BOA VISTA",
  'menu': "dono",
  'menuSection': "Administração",
  'permissions': _0x5ca549,
  'requirements': _0x507b86,
  'execute': async ({
    conn: _0x36476d,
    info: _0x313494,
    q: _0x10c64d,
    prefix: _0x517eb0,
    command: _0x5c1a14,
    SoDono: _0x45fcd3,
    sleep: _0x3af24f,
    reply: _0x5f28cf
  }) => {
    if (!_0x45fcd3 && !_0x313494.key.fromMe) {
      return _0x5f28cf(Res_SoDono);
    }
    if (!_0x10c64d.trim()) {
      return _0x5f28cf("Texto onde?\n\nExemplo : " + (_0x517eb0 + _0x5c1a14) + " BOA VISTA");
    }
    let _0x1fd446 = await _0x36476d.groupFetchAllParticipating();
    let _0x3ba306 = Object.entries(_0x1fd446).map(_0xf1ff0a => _0xf1ff0a[1]);
    let _0x12794b = [];
    for (let _0xadf91e of _0x3ba306) {
      await _0x3af24f(1000);
      const _0xfb2c1e = {
        text: "「 TRANSMISSÃO DO BOT 」\n\n " + _0x10c64d
      };
      await _0x36476d.sendMessage(_0xadf91e.id, _0xfb2c1e);
      const _0x37d24a = {
        id: _0xadf91e.id,
        nome: _0xadf91e.subject
      };
      _0x12794b.push(_0x37d24a);
    }
    _0x5f28cf("Enviado com sucesso para os seguintes grupos:\n\n" + _0x12794b.map(_0x4a54aa => "ID: " + _0x4a54aa.id + "\nNome: " + _0x4a54aa.nome).join("\n\n"));
    return true;
  }
}, {
  'name': "celular",
  'aliases': [],
  'category': "pesquisa",
  'description': "Busca informações sobre um celular",
  'longDescription': "Pesquisa e retorna informações detalhadas sobre o modelo de celular especificado.",
  'usage': "celular [modelo]",
  'example': "celular galaxy a9 2018",
  'menu': "pesquisa",
  'menuSection': "Consultas",
  'permissions': {},
  'requirements': _0x39020b,
  'execute': async ({
    q: _0x9a7831,
    prefix: _0x16549a,
    command: _0x5e4db9,
    Res_Aguarde: _0x262871,
    acessAPI: _0x4dc591,
    reply: _0x4186f1
  }) => {
    try {
      if (!_0x9a7831.trim()) {
        return _0x4186f1("Exemplo: " + (_0x16549a + _0x5e4db9) + " galaxy a9 2018");
      }
      _0x4186f1(_0x262871);
      ABC = await _0x4dc591.celular(_0x9a7831.trim());
      _0x4186f1("📱 Celular: " + (ABC?.["celular"] || "Não encontrado") + "\n\nInformações:\n" + (ABC?.["resumo"] || ABC?.["infoc"] || "Não encontrado, seja mais específico, a marca e a versão"));
      return true;
    } catch (_0x2c1404) {
      const _0x55f833 = {
        success: false,
        message: "Erro..."
      };
      return _0x55f833;
    }
  }
}, {
  'name': "join",
  'aliases': ["entrar"],
  'category': "dono",
  'description': "Faz o bot entrar em um grupo",
  'longDescription': "Permite que o dono faça o bot entrar em um grupo através de um link de convite. Comando exclusivo para o dono do bot.",
  'usage': "join [link]",
  'example': "join https://chat.whatsapp.com/abcdefghijklmn",
  'menu': "dono",
  'menuSection': "Administração",
  'permissions': _0x406c77,
  'requirements': {},
  'execute': async ({
    conn: _0x14b2a,
    q: _0x5697e9,
    SoDono: _0x391da1,
    Res_SoDono: _0x321044,
    reply: _0x67c029
  }) => {
    const _0x45ee95 = _0x5697e9.trim();
    if (!_0x45ee95) {
      return _0x67c029("Insira um link de convite ao lado do comando.");
    }
    if (!_0x45ee95.includes("chat.whatsapp.com/")) {
      return _0x67c029("Ops, verifique o link que você inseriu.");
    }
    const _0x43a0cc = _0x45ee95.replace(/\?mode=.*$/, '');
    const _0xdd07f3 = _0x43a0cc.split("app.com/")[1];
    try {
      await _0x14b2a.groupAcceptInvite(_0xdd07f3);
      const _0x10ac46 = {
        success: true,
        message: "Bot entrou no grupo com sucesso!"
      };
      return _0x10ac46;
    } catch (_0xfbb68d) {
      const _0x54bd7f = String(_0xfbb68d);
      if (_0x54bd7f.includes("resource-limit")) {
        return {
          'success': false,
          'message': "O grupo já está com o alcance de 257 membros."
        };
      }
      if (_0x54bd7f.includes("not-authorized")) {
        return {
          'success': false,
          'message': "Não foi possível entrar no grupo.\nMotivo: Banimento."
        };
      }
      const _0x566e7f = {
        success: false,
        message: "Erro ao entrar no grupo."
      };
      return _0x566e7f;
    }
  }
}, {
  'name': "dononogrupo",
  'aliases': [],
  'category': "dono",
  'description': "O bot só funciona se o dono estiver no grupo",
  'longDescription': "Ativa ou desativa a restrição que faz o bot só funcionar se o dono estiver no grupo.",
  'usage': "dononogrupo",
  'example': "dononogrupo",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x218c70,
  'requirements': {},
  'execute': async ({
    SoDono: _0x327fcf,
    Res_SoDono: _0x8be5fb,
    nescessario: _0x2da119,
    setNes: _0x5af1e5,
    reply: _0x1a8e69
  }) => {
    if (!_0x327fcf) {
      return _0x1a8e69(_0x8be5fb);
    }
    _0x2da119.EstaNogrupo = !_0x2da119.EstaNogrupo;
    _0x5af1e5(_0x2da119);
    _0x1a8e69(_0x2da119?.["EstaNogrupo"] ? "🌀 Ativou com sucesso o recurso de o bot só funcionar quando o dono ( você ) estiver no grupo 📝 ( Obs: Use uma vez para ativar, e use novamente para desativar. )" : "‼️ Desativou com sucesso o recurso de de o bot só funcionar quando o dono ( você ) estiver no grupo ✔️ ( Obs: Use uma vez para ativar, e use novamente para desativar. )");
    return true;
  }
}, {
  'name': "anticallgp",
  'aliases': ["antigp", "antichamadasgp"],
  'category': "admin",
  'description': "Ativa/desativa o sistema que remove membros que fazem chamadas em grupo",
  'longDescription': "Quando ativado, o bot rejeitará chamadas em grupo e removerá automaticamente membros comuns que iniciarem chamadas. Administradores e donos do bot são isentos desta restrição.",
  'usage': "anticallgp",
  'example': "anticallgp",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x259963,
  'requirements': {},
  'execute': async ({
    Os_Returns: _0x24a38d,
    dataGp: _0x1e593f,
    setGp: _0x463e7f,
    reply: _0x2ba9c6,
    EmojiBot: _0x502dfb
  }) => {
    if (_0x24a38d(true, true, true)["true"]) {
      return _0x2ba9c6(_0x24a38d(true, true, true).txt);
    }
    if (_0x1e593f[0].anticallgp === undefined) {
      _0x1e593f[0].anticallgp = false;
    }
    _0x1e593f[0].anticallgp = !_0x1e593f[0].anticallgp;
    await _0x463e7f(_0x1e593f);
    const _0x856ffa = _0x1e593f[0].anticallgp;
    const _0x5db2e3 = _0x856ffa ? _0x502dfb + " *ANTI-CALL DE GRUPO ATIVADO* " + _0x502dfb + "\n\n• Usuários que iniciarem chamadas neste grupo serão removidos automaticamente\n• Administradores e donos do bot estão isentos desta restrição\n\n_Use o comando novamente para desativar_" : _0x502dfb + " *ANTI-CALL DE GRUPO DESATIVADO* " + _0x502dfb + "\n\nAgora todos os membros podem iniciar chamadas em grupo sem restrições.";
    _0x2ba9c6(_0x5db2e3);
    return true;
  }
}, {
  'name': "visualizarmsg",
  'aliases': [],
  'category': "dono",
  'description': "Ativa/desativa a visualização automática de mensagens",
  'longDescription': "Quando ativado, o bot visualizará automaticamente todas as mensagens recebidas em grupos e privado.",
  'usage': "visualizarmsg",
  'example': "visualizarmsg",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0xd00eed,
  'requirements': {},
  'execute': async ({
    SoDono: _0x1833b,
    nescessario: _0x20d1ea,
    setNes: _0x45749c,
    Res_SoDono: _0x1f2cac,
    reply: _0x5d44b4
  }) => {
    if (!_0x1833b) {
      return _0x5d44b4(_0x1f2cac);
    }
    _0x20d1ea.visualizarmsg = !_0x20d1ea.visualizarmsg;
    visualizarmsg = !_0x20d1ea.visualizarmsg;
    _0x45749c(_0x20d1ea);
    _0x5d44b4(_0x20d1ea?.["visualizarmsg"] ? "🌀 Ativou com sucesso o recurso de visualizar todas as mensagens enviada em grupos e privado 📝" : "‼️ Desativou com sucesso o recurso de visualizar todas as mensagens enviada em grupos e privado✔️");
    return true;
  }
}, {
  'name': "x9visuunica",
  'aliases': [],
  'category': "admin",
  'description': "Ativa/desativa revelação automática de visualização única",
  'longDescription': "Quando ativado, o bot revelará automaticamente mensagens de visualização única enviadas no grupo.",
  'usage': "x9visuunica",
  'example': "x9visuunica",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x4bdd51,
  'requirements': {},
  'execute': async ({
    Os_Returns: _0xa85e41,
    dataGp: _0x33d5b5,
    setGp: _0x3f74ad,
    reply: _0x29c78f
  }) => {
    if (_0xa85e41(true, true, true)["true"]) {
      return _0x29c78f(_0xa85e41(true, true, true).txt);
    }
    _0x33d5b5[0].visuUnica = !_0x33d5b5[0].visuUnica;
    _0x3f74ad(_0x33d5b5);
    _0x29c78f(_0x33d5b5[0]?.["visuUnica"] ? "🌀 Ativou com sucesso o recurso de revelar visu única neste grupo 📝 ( Obs: Use uma vez para ativar, e use novamente para desativar. )" : "‼️ Desativou com sucesso o recurso de revelar visu única neste grupo✔️ ( Obs: Use uma vez para ativar, e use novamente para desativar. )");
    return true;
  }
}, {
  'name': "autobaixar",
  'aliases': ["auto-baixar", "auto-download", "autodownload", "auto-downloader", "autodownloader"],
  'category': "admin",
  'description': "Ativa/desativa download automático de mídias",
  'longDescription': "Quando ativado, o bot baixará automaticamente mídias de plataformas como TikTok, Twitter, Instagram, Facebook, Spotify e também fará transcrição automática de áudios.",
  'usage': "autobaixar",
  'example': "autobaixar",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x4432b2,
  'requirements': {},
  'execute': async ({
    Os_Returns: _0x410e47,
    dataGp: _0x415c05,
    setGp: _0x5bb0d0,
    reply: _0x374ef3
  }) => {
    if (_0x410e47(true, true, true)["true"]) {
      return _0x374ef3(_0x410e47(true, true, true).txt);
    }
    _0x415c05[0].autobaixar = !_0x415c05[0].autobaixar;
    _0x5bb0d0(_0x415c05);
    _0x374ef3(_0x415c05[0]?.["autobaixar"] ? "-> Ativou com sucesso o recurso de baixar mídias automáticas, por exemplo: tiktok, twitter, instagram, facebook, spotify, transcrição de áudio automatico ( Obs: Use uma vez para ativar, e use novamente para desativar. )" : "‼️ -> Desativou com sucesso o recurso de baixar mídias automáticas, por exemplo: tiktok, twitter, instagram, facebook, spotify, transcrição de áudio automatico ✔️ ( Obs: Use uma vez para ativar, e use novamente para desativar. )");
    return true;
  }
}, {
  'name': "so_adm",
  'aliases': ["so-adm", "soadm"],
  'category': "admin",
  'description': "Restringe comandos apenas para administradores",
  'longDescription': "Quando ativado, apenas administradores poderão usar comandos do bot no grupo.",
  'usage': "so_adm",
  'example': "so_adm",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x55e020,
  'requirements': {},
  'execute': async ({
    Os_Returns: _0x36df11,
    dataGp: _0x245923,
    setGp: _0x561563,
    reply: _0x1d4cdb
  }) => {
    if (_0x36df11(true, true, true)["true"]) {
      return _0x1d4cdb(_0x36df11(true, true, true).txt);
    }
    _0x245923[0].soadm = !_0x245923[0].soadm;
    _0x561563(_0x245923);
    if (_0x245923[0].soadm) {
      _0x1d4cdb(" - Ativou com sucesso o recurso de só ADM utilizar comandos neste grupo 📝");
    } else {
      _0x1d4cdb("‼️ Desativou o recurso de Só ADM utilizar comandos neste grupo ✔️");
    }
    return true;
  }
}, {
  'name': ["limparavisos", "clearcache", "resetavisos"],
  'category': "admin",
  'menu': "admin",
  'menuSection': "configuracoes",
  'desc': "Limpa cache de avisos do modo só admins",
  'permissions': _0x54ffb8,
  async 'execute'({
    commandManager: _0xe111c9,
    from: _0x4606af,
    reply: _0x397354,
    SoDono: _0x292527
  }) {
    if (!_0xe111c9) {
      return _0x397354("❌ CommandManager não disponível!");
    }
    const _0x97eca = _0xe111c9.adminWarningCache?.["size"] || 0;
    if (_0x292527) {
      _0xe111c9.clearAllAdminWarningCache();
      _0x397354("✅ *Cache global de avisos limpo!*\n📊 Cache anterior: " + _0x97eca + " entradas\n🔄 Todos os usuários podem receber avisos novamente.");
    } else {
      _0xe111c9.clearAdminWarningCache(_0x4606af);
      _0x397354("✅ *Cache de avisos limpo para este grupo!*\n🔄 Usuários deste grupo podem receber avisos novamente.");
    }
  }
}, {
  'name': "prefixos",
  'aliases': [],
  'category': "grupo",
  'description': "Lista os prefixos adicionais do bot no grupo",
  'longDescription': "Mostra todos os prefixos adicionais configurados no grupo, além do prefixo principal.",
  'usage': "prefixos",
  'example': "prefixos",
  'menu': "grupo",
  'menuSection': "Informações",
  'permissions': _0x2fa964,
  'requirements': {},
  'execute': async ({
    isGroup: _0x3f5ad6,
    dataGp: _0x1ec1c3,
    groupName: _0x43d2d6,
    Res_SoGrupo: _0x5e94c1,
    reply: _0x4184fb
  }) => {
    if (!_0x3f5ad6) {
      return _0x4184fb(_0x5e94c1);
    }
    if (_0x1ec1c3[0].prefixos.length < 1) {
      return {
        'success': false,
        'message': "Não contem nenhum prefixo a + adicionado neste grupo."
      };
    }
    bla = "Lista de prefixos para uso do bot, no Grupo: " + _0x43d2d6 + "\n\n";
    for (i of _0x1ec1c3[0].prefixos) {
      bla += "Prefixo: " + i + "\n\n";
    }
    _0x4184fb(bla);
    return true;
  }
}, {
  'name': "add_prefixo",
  'aliases': [],
  'category': "admin",
  'description': "Adiciona um prefixo alternativo para o bot",
  'longDescription': "Adiciona um símbolo ou caractere adicional que poderá ser usado como prefixo para comandos do bot no grupo.",
  'usage': "add_prefixo [símbolo]",
  'example': "add_prefixo _",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x2b4728,
  'requirements': _0x22d0c1,
  'execute': async ({
    Os_Returns: _0x170ab7,
    q: _0x5b3f0f,
    prefix: _0x15a17a,
    command: _0x3583aa,
    isMultiP: _0x1d4b68,
    ANT_LTR_MD_EMJ: _0x1d68e1,
    dataGp: _0x3c6280,
    setGp: _0x9b8711,
    reply: _0x52a57e
  }) => {
    if (_0x170ab7(true, true, true)["true"]) {
      return _0x52a57e(_0x170ab7(true, true, true).txt);
    }
    if (!_0x1d4b68) {
      return _0x52a57e("Para usar este comando, você deve ativar o comando, multiprefix\nExemplo: " + _0x15a17a + "multiprefixo 1");
    }
    if (_0x1d68e1(_0x5b3f0f)) {
      return _0x52a57e("Não pode letra modificada, nem emoji..");
    }
    if (!_0x5b3f0f.trim()) {
      return _0x52a57e("Determine o novo prefixo, não pode espaço vazio...");
    }
    if (_0x5b3f0f.trim() > 1) {
      return _0x52a57e("Calma, o prefixo só pode ser um\nExemplo: " + (_0x15a17a + _0x3583aa) + " _\nAe o bot vai passar á responder _ como prefixo do bot..");
    }
    if (_0x3c6280[0].prefixos.indexOf(_0x5b3f0f.trim()) >= 0) {
      return _0x52a57e("Esse prefixo já se encontra incluso, procure ver na lista dos prefixos\nExemplo: " + _0x15a17a + "prefixos");
    }
    _0x3c6280[0].prefixos.push(_0x5b3f0f.trim());
    _0x9b8711(_0x3c6280);
    _0x52a57e("Prefixo " + _0x5b3f0f.trim() + " Adicionado com sucesso na lista de prefixos para uso do bot, neste grupo...");
    return true;
  }
}, {
  'name': "del_prefixo",
  'aliases': ["tirar_prefixo", "rm_prefixo"],
  'category': "admin",
  'description': "Remove um prefixo alternativo do bot",
  'longDescription': "Remove um prefixo adicional da lista de prefixos alternativos configurados para o grupo.",
  'usage': "del_prefixo [símbolo]",
  'example': "del_prefixo _",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x36bc1e,
  'requirements': _0x202bc9,
  'execute': async ({
    Os_Returns: _0x48d8ab,
    q: _0x2aa8ca,
    prefix: _0x11a7db,
    command: _0x400225,
    isMultiP: _0x78b73f,
    ANT_LTR_MD_EMJ: _0x1664c7,
    dataGp: _0x273225,
    setGp: _0x3fc06b,
    reply: _0x5b315f
  }) => {
    if (_0x48d8ab(true, true, true)["true"]) {
      return _0x5b315f(_0x48d8ab(true, true, true).txt);
    }
    if (!_0x78b73f) {
      return _0x5b315f("Para usar este comando, você deve ativar o comando, multiprefix\nExemplo: " + _0x11a7db + "multiprefixo 1");
    }
    if (_0x1664c7(_0x2aa8ca)) {
      return _0x5b315f("Não pode letra modificada, nem emoji..");
    }
    if (!_0x2aa8ca.trim()) {
      return _0x5b315f("Determine o prefixo que deseja tirar, não pode espaço vazio...");
    }
    if (_0x2aa8ca.trim() > 1) {
      return _0x5b315f("Calma, o prefixo só pode ser tirado um por vez\nExemplo: " + (_0x11a7db + _0x400225) + " _\nAe o bot não vai responder mais com _");
    }
    if (_0x273225[0].prefixos.indexOf(_0x2aa8ca.trim()) < 0) {
      return _0x5b315f("Esse prefixo não está incluso, procure ver na lista dos prefixos\nExemplo: " + _0x11a7db + "prefixos");
    }
    if (_0x273225[0].prefixos.length == 1) {
      return _0x5b315f("Adicione um prefixo para pode tirar este, tem que ter pelo menos 1 prefixo já incluso dentro do sistema para tirar outro.");
    }
    _0x273225[0].prefixos.splice(_0x273225[0].prefixos.indexOf(_0x2aa8ca.trim()), 1);
    _0x3fc06b(_0x273225);
    _0x5b315f("Prefixo " + _0x2aa8ca.trim() + " tirado com sucesso da lista de prefixos de uso deste grupo..");
    return true;
  }
}, {
  'name': "multiprefixo",
  'aliases': ["multiprefix"],
  'category': "admin",
  'description': "Ativa/desativa o uso de múltiplos prefixos",
  'longDescription': "Quando ativado, permite que o bot responda a comandos usando prefixos alternativos além do prefixo principal.",
  'usage': "multiprefixo",
  'example': "multiprefixo",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x90f294,
  'requirements': {},
  'execute': async ({
    isGroup: _0xa8a612,
    isGroupAdmins: _0xcdd698,
    SoDono: _0x50c6f6,
    isMultiP: _0x3d7d7f,
    dataGp: _0x59bcdc,
    setGp: _0x59f04d,
    Res_SoGrupo: _0x4c7bf2,
    Res_SoAdm: _0x2a2289,
    reply: _0x5401a6
  }) => {
    if (!_0xa8a612) {
      return _0x5401a6(_0x4c7bf2);
    }
    if (!_0xcdd698 && !_0x50c6f6) {
      return _0x5401a6(_0x2a2289);
    }
    if (!_0x3d7d7f) {
      _0x59bcdc[0].multiprefix = true;
      _0x59f04d(_0x59bcdc);
      _0x5401a6("🌀 Ativou com sucesso o recurso de multi prefixos neste grupo 📝");
    }
    if (_0x3d7d7f) {
      _0x59bcdc[0].multiprefix = false;
      _0x59f04d(_0x59bcdc);
      _0x5401a6("‼️ Desativou com sucesso o recurso de multi prefixos neste grupo✔️");
    }
    return true;
  }
}, {
  'name': "bemvindo",
  'aliases': ["welcome"],
  'category': "admin",
  'description': "Ativa/desativa as mensagens de boas-vindas",
  'longDescription': "Ativa ou desativa o sistema que envia mensagens de boas-vindas quando um novo membro entra no grupo.",
  'usage': "bemvindo",
  'example': "bemvindo",
  'menu': "admin",
  'menuSection': "Grupo",
  'permissions': _0x37bb0c,
  'requirements': {},
  'execute': async ({
    Os_Returns: _0x4da798,
    command: _0x527608,
    SoDono: _0x3aebe8,
    isBotGroupAdmins: _0x13feed,
    dataGp: _0x31ae9f,
    setGp: _0xc88715,
    Res_SoDono: _0xeee27,
    Res_BotADM: _0x35804c,
    reply: _0x4253b8
  }) => {
    if (_0x4da798(true, true, true)["true"]) {
      return _0x4253b8(_0x4da798(true, true, true).txt);
    }
    if (!_0x3aebe8 || !_0x13feed) {
      return _0x4253b8(!_0x3aebe8 ? _0xeee27 : _0x35804c);
    }
    let _0x13532b = _0x31ae9f[0].wellcome[0];
    let _0x1a5232 = _0x31ae9f[0].wellcome[1];
    if (_0x13532b.bemvindo1) {
      _0x13532b.bemvindo1 = false;
      _0xc88715(_0x31ae9f);
      return _0x4253b8("❌ Desativou o recurso \"bem-vindo\" neste grupo.");
    }
    let _0x11320a = _0x1a5232.bemvindo2;
    _0x13532b.bemvindo1 = true;
    if (_0x11320a) {
      _0x1a5232.bemvindo2 = false;
      _0xc88715(_0x31ae9f);
      return _0x4253b8("✅ O recurso \"bemvindo2\" foi desativado e o \"bem-vindo\" foi ativado em seu lugar.");
    }
    _0xc88715(_0x31ae9f);
    return _0x4253b8("✅ Ativou com sucesso o recurso \"bem-vindo\" neste grupo.");
  }
}, {
  'name': "bemvindo2",
  'aliases': ["welcome2"],
  'category': "admin",
  'description': "Ativa/desativa as mensagens de boas-vindas alternativas",
  'longDescription': "Ativa ou desativa o sistema de boas-vindas alternativo, que usa um formato de mensagem diferente do bemvindo padrão.",
  'usage': "bemvindo2",
  'example': "bemvindo2",
  'menu': "admin",
  'menuSection': "Grupo",
  'permissions': _0x5daa48,
  'requirements': {},
  'execute': async ({
    command: _0x34cc57,
    SoDono: _0x9eacae,
    isBotGroupAdmins: _0x55f091,
    dataGp: _0x3f6571,
    setGp: _0x2c92fd,
    Res_SoDono: _0x5d2ca0,
    Res_BotADM: _0x55e1a3,
    reply: _0x22d3ef
  }) => {
    if (!_0x9eacae || !_0x55f091) {
      return _0x22d3ef(!_0x9eacae ? _0x5d2ca0 : _0x55e1a3);
    }
    let _0x3ab45c = _0x3f6571[0].wellcome[1];
    let _0xb7ac33 = _0x3f6571[0].wellcome[0];
    if (_0x3ab45c.bemvindo2) {
      _0x3ab45c.bemvindo2 = false;
      _0x2c92fd(_0x3f6571);
      return _0x22d3ef("❌ Desativou o recurso \"bemvindo2\" neste grupo.");
    }
    let _0x1e79cb = _0xb7ac33.bemvindo1;
    _0x3ab45c.bemvindo2 = true;
    if (_0x1e79cb) {
      _0xb7ac33.bemvindo1 = false;
      _0x2c92fd(_0x3f6571);
      return _0x22d3ef("✅ O recurso \"bemvindo\" foi desativado e o \"bemvindo2\" foi ativado em seu lugar.");
    }
    _0x2c92fd(_0x3f6571);
    return _0x22d3ef("✅ Ativou com sucesso o recurso \"bemvindo2\" neste grupo.");
  }
}, {
  'name': ["legendabv", "legendasaiu", "legendabv2", "legendasaiu2"],
  'aliases': [],
  'category': "admin",
  'description': "Define mensagens de boas-vindas e saída",
  'longDescription': "Define as mensagens personalizadas que serão exibidas quando membros entrarem ou saírem do grupo para os modos bemvindo padrão e alternativo.",
  'usage': "legendabv/legendasaiu/legendabv2/legendasaiu2 [mensagem]",
  'example': "legendabv Olá #numerodele#, seja bem vindo ao grupo!",
  'menu': "admin",
  'menuSection': "Grupo",
  'permissions': _0x1b4c30,
  'requirements': _0x523ba9,
  'execute': async ({
    q: _0x15f4c4,
    command: _0x2d77e7,
    isWelkom: _0x4da59d,
    isWelkom2: _0x26572e,
    prefix: _0x1dbc98,
    dataGp: _0x387042,
    setGp: _0x52c2e0,
    reply: _0x4dda1a
  }) => {
    if (!_0x15f4c4.trim()) {
      return _0x4dda1a("*Escreva a mensagem de " + (_0x2d77e7.includes("saiu") ? "saída" : "boas-vindas") + '*');
    }
    let _0xb1d3a1 = _0x2d77e7.includes('2');
    let _0xd2a73f = _0x2d77e7.includes("saiu");
    let _0x27642d = _0xb1d3a1 ? 1 : 0;
    if (_0xb1d3a1 ? _0x26572e : _0x4da59d) {
      _0x387042[0].wellcome[_0x27642d][_0xd2a73f ? "legendasaiu" : "legendabv"] = _0x15f4c4.trim();
      _0x52c2e0(_0x387042);
      _0x4dda1a("*Mensagem de " + (_0xd2a73f ? "saída" : "boas vindas") + (_0xb1d3a1 ? '2' : '') + " definida com sucesso!*");
      return true;
    } else {
      const _0x403ef8 = {
        success: false,
        message: "Ative o " + _0x1dbc98 + "bemvindo" + (_0xb1d3a1 ? '2' : '') + " 1"
      };
      return _0x403ef8;
    }
  }
}, {
  'name': "legenda_estrangeiro",
  'aliases': ["legenda_estrangeiros"],
  'category': "admin",
  'description': "Define a mensagem exibida ao remover números estrangeiros",
  'longDescription': "Define a mensagem personalizada que será mostrada quando o bot remover um usuário com número estrangeiro quando o antifake está ativado.",
  'usage': "legenda_estrangeiro [mensagem]",
  'example': "legenda_estrangeiro Números estrangeiros não são permitidos aqui!",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x1ddbb9,
  'requirements': _0x4bf175,
  'execute': async ({
    Os_Returns: _0x4de6af,
    q: _0x21aa11,
    isAntifake: _0x57bf3a,
    dataGp: _0x2bacfe,
    setGp: _0x58e494,
    prefix: _0x4531c3,
    reply: _0x3180be
  }) => {
    if (_0x4de6af(true, true, true)["true"]) {
      return _0x3180be(_0x4de6af(true, true, true).txt);
    }
    if (!_0x21aa11.trim()) {
      return _0x3180be("*Escreva a mensagem de remoção de estrangeiros*");
    }
    if (_0x57bf3a) {
      _0x2bacfe[0].legenda_estrangeiro = _0x21aa11.trim();
      _0x58e494(_0x2bacfe);
      _0x3180be("*Mensagem de remoção de estrangeiros definida com sucesso!*");
      return true;
    } else {
      const _0x2bdb6c = {
        success: false,
        message: "Ative o antifake primeiro com " + _0x4531c3 + "antifake 1"
      };
      return _0x2bdb6c;
    }
  }
}, {
  'name': "legenda_listanegra",
  'aliases': ["legenda_listban"],
  'category': "admin",
  'description': "Define a mensagem exibida ao remover usuários da lista negra",
  'longDescription': "Define a mensagem personalizada que será mostrada quando o bot remover automaticamente um usuário que está na lista negra do grupo.",
  'usage': "legenda_listanegra [mensagem]",
  'example': "legenda_listanegra Você está na lista negra deste grupo!",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0xb4c96c,
  'requirements': _0x536c0e,
  'execute': async ({
    Os_Returns: _0x4dc69c,
    q: _0x2e21dc,
    dataGp: _0x1ca578,
    setGp: _0x5c05d5,
    reply: _0x10a530
  }) => {
    if (_0x4dc69c(true, true, true)["true"]) {
      return _0x10a530(_0x4dc69c(true, true, true).txt);
    }
    if (!_0x2e21dc.trim()) {
      return _0x10a530("*Escreva a mensagem de remoção de usuários que estiver na lista negra*");
    }
    _0x1ca578[0].legenda_listanegra = _0x2e21dc.trim();
    _0x5c05d5(_0x1ca578);
    _0x10a530("*Mensagem de remoção de usuários que se encontra na lista negra definida com sucesso!*");
    return true;
  }
}, {
  'name': "legenda_video",
  'aliases': [],
  'category': "admin",
  'description': "Define a mensagem exibida ao remover um usuário que envia vídeo",
  'longDescription': "Define a mensagem personalizada que será mostrada ao remover um usuário por enviar vídeo quando o anti-vídeo está ativado.",
  'usage': "legenda_video [mensagem]",
  'example': "legenda_video Vídeos não são permitidos neste grupo!",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x5afd55,
  'requirements': _0x31432b,
  'execute': async ({
    Os_Returns: _0x3fda10,
    q: _0x28e596,
    dataGp: _0x451e61,
    setGp: _0x57bdf1,
    reply: _0x262909
  }) => {
    if (_0x3fda10(true, true, true)["true"]) {
      return _0x262909(_0x3fda10(true, true, true).txt);
    }
    if (!_0x28e596.trim()) {
      return _0x262909("*Escreva a mensagem de remoção de quem enviar vídeos*");
    }
    _0x451e61[0].legenda_video = _0x28e596.trim();
    _0x57bdf1(_0x451e61);
    _0x262909("*Mensagem de remoção de video definida com sucesso!*");
    return true;
  }
}, {
  'name': "legenda_imagem",
  'aliases': [],
  'category': "admin",
  'description': "Define a mensagem exibida ao remover um usuário que envia imagem",
  'longDescription': "Define a mensagem personalizada que será mostrada ao remover um usuário por enviar imagem quando o anti-imagem está ativado.",
  'usage': "legenda_imagem [mensagem]",
  'example': "legenda_imagem Imagens não são permitidas neste grupo!",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x575da5,
  'requirements': _0x3235d9,
  'execute': async ({
    Os_Returns: _0x443545,
    q: _0x575914,
    dataGp: _0x5e0542,
    setGp: _0x8d57ec,
    reply: _0x18dfb5
  }) => {
    if (_0x443545(true, true, true)["true"]) {
      return _0x18dfb5(_0x443545(true, true, true).txt);
    }
    if (!_0x575914.trim()) {
      return _0x18dfb5("*Escreva a mensagem de remoção de quem enviar imagens*");
    }
    _0x5e0542[0].legenda_imagem = _0x575914.trim();
    _0x8d57ec(_0x5e0542);
    _0x18dfb5("*Mensagem de remoção de imagem definida com sucesso!*");
    return true;
  }
}, {
  'name': "legenda_documento",
  'aliases': [],
  'category': "admin",
  'description': "Define a mensagem exibida ao remover um usuário que envia documento",
  'longDescription': "Define a mensagem personalizada que será mostrada ao remover um usuário por enviar documento quando o anti-documento está ativado.",
  'usage': "legenda_documento [mensagem]",
  'example': "legenda_documento Documentos não são permitidos neste grupo!",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x5acd8e,
  'requirements': _0x35a028,
  'execute': async ({
    Os_Returns: _0x61ccf,
    q: _0x35a110,
    dataGp: _0x47258f,
    setGp: _0x22ec79,
    reply: _0x241b95
  }) => {
    if (_0x61ccf(true, true, true)["true"]) {
      return _0x241b95(_0x61ccf(true, true, true).txt);
    }
    if (!_0x35a110.trim()) {
      return _0x241b95("*Escreva a mensagem de remoção de quem enviar documentos*");
    }
    _0x47258f[0].legenda_documento = _0x35a110.trim();
    _0x22ec79(_0x47258f);
    _0x241b95("*Mensagem de remoção de Documento definida com sucesso!*");
    return true;
  }
}, {
  'name': "token_gpt",
  'aliases': [],
  'category': "dono",
  'description': "Define o token da API do OpenAI GPT",
  'longDescription': "Configura o token de acesso à API do OpenAI GPT para funcionalidades de inteligência artificial. Comando exclusivo para o dono do bot.",
  'usage': "token_gpt [token]",
  'example': "token_gpt sk-abcdef123456...",
  'menu': "dono",
  'menuSection': "Configuração",
  'permissions': _0x1716fc,
  'requirements': _0x5cb4c8,
  'execute': async ({
    q: _0x166bab,
    SoDono: _0x5d18f2,
    nescessario: _0x22d947,
    setNes: _0x114728,
    Res_SoDono: _0x59bd93,
    reply: _0x2edcb8
  }) => {
    if (!_0x5d18f2) {
      return _0x2edcb8(_0x59bd93);
    }
    _0x22d947.TOKEN_GPT = _0x166bab.trim();
    _0x114728(_0x22d947);
    _0x2edcb8("Token registrado com sucesso para o Chat Gpt, bom uso amigo(a)..");
    return true;
  }
}, {
  'name': "crimg",
  'aliases': ["superimg", "imgcr"],
  'category': 'ia',
  'description': "Cria imagens com inteligência artificial",
  'longDescription': "Utiliza a API do OpenAI DALL-E para gerar imagens a partir de descrições textuais.",
  'usage': "crimg [descrição da imagem]",
  'example': "crimg Gato usando óculos escuros em uma praia",
  'menu': "principal",
  'menuSection': 'IA',
  'permissions': {},
  'requirements': _0x44ee11,
  'execute': async ({
    conn: _0x30f4c2,
    info: _0x1476c9,
    from: _0xa46563,
    q: _0x10af96,
    prefix: _0x3265b7,
    TOKEN_GPT: _0x2ce89b,
    numerodono_ofc: _0x51147b,
    nescessario: _0x46a3c5,
    acessAPI: _0x38663a,
    mention: _0x50db88,
    reply: _0x2bd30b
  }) => {
    if (_0x2ce89b === 0) {
      return _0x50db88("Olá @" + _0x51147b + " tá faltando o token do gpt, vai no site: https://platform.openai.com/account/api-keys gera a key, ou manda alguma pessoa criar.. e usa o comando " + _0x3265b7 + "token_gpt e o token aqui, boa sorte..");
    }
    try {
      _0x2bd30b("Realizando pedido..");
      const _0x1a5386 = {
        quoted: _0x1476c9
      };
      _0x30f4c2.sendMessage(_0xa46563, {
        'image': {
          'url': _0x38663a.superimg(_0x10af96.trim(), _0x46a3c5.TOKEN_GPT)
        }
      }, _0x1a5386)["catch"](() => {
        return _0x2bd30b("Erro..");
      });
      return true;
    } catch {
      const _0xdfd759 = {
        success: false,
        message: "Erro.."
      };
      return _0xdfd759;
    }
  }
}, {
  'name': "pergunta",
  'aliases': ["openai", "gpt", "chatgpt"],
  'category': 'ia',
  'description': "Faz uma pergunta ao OpenAI GPT",
  'longDescription': "Envia uma pergunta ou pedido ao modelo de linguagem OpenAI GPT e retorna a resposta gerada pela IA.",
  'usage': "pergunta [sua pergunta]",
  'example': "pergunta Quantos anos para o plástico se decompor",
  'menu': "principal",
  'menuSection': 'IA',
  'permissions': {},
  'requirements': _0x165064,
  'execute': async ({
    q: _0x5bf4ee,
    prefix: _0xf11058,
    command: _0x319f2a,
    nescessario: _0x280177,
    acessAPI: _0x326642,
    reply: _0x1d0f19
  }) => {
    try {
      if (!_0x5bf4ee.trim()) {
        return _0x1d0f19("Faça uma pergunta, exemplo: " + (_0xf11058 + _0x319f2a) + " Quantos anos para o plástico se decompor.");
      }
      _0x1d0f19("Aguarde, criando / pesquisando sobre o que esta perguntando ou pedindo.");
      ABC = await _0x326642.gpt(_0x5bf4ee.trim(), _0x280177.TOKEN_GPT);
      _0x1d0f19("( " + ABC.msg + " )");
      return true;
    } catch {
      const _0x307a35 = {
        success: false,
        message: "Erro.."
      };
      return _0x307a35;
    }
  }
}, {
  'name': "simi",
  'aliases': [],
  'category': "conversa",
  'description': "Conversa com a inteligência artificial SimSimi",
  'longDescription': "Envia uma mensagem para o chatbot SimSimi e obtém uma resposta, simulando uma conversa natural.",
  'usage': "simi [mensagem]",
  'example': "simi Olá, como você está?",
  'menu': "principal",
  'menuSection': "Interação",
  'permissions': _0x1bc892,
  'requirements': _0x168094,
  'execute': async ({
    q: _0x2fc6a9,
    Res_SoGrupo: _0x4ac786,
    isGroup: _0x2c010f,
    fetchJson: _0x9cc5ae,
    reply: _0x4d811e
  }) => {
    if (!_0x2c010f) {
      return _0x4d811e(_0x4ac786);
    }
    try {
      if (!_0x2fc6a9?.["trim"]()) {
        return _0x4d811e("💬 Digite uma mensagem para conversar com a Simi");
      }
      const _0x2c4047 = "text=" + encodeURIComponent(_0x2fc6a9.trim()) + "&lc=pt";
      const _0x1909b9 = await _0x9cc5ae("https://api.simsimi.vn/v1/simtalk", {
        'method': "POST",
        'headers': {
          'content-type': "application/x-www-form-urlencoded"
        },
        'body': _0x2c4047
      })["catch"](_0x2da732 => {
        console.log("Erro ao buscar dados da API SimSimi:", _0x2da732);
        return null;
      });
      console.log("📦 Resposta bruta da API SimSimi:", _0x1909b9);
      if (!_0x1909b9) {
        return _0x4d811e("❌ Erro ao conectar com a Simi. Tente novamente.");
      }
      const _0x126ca6 = _0x1909b9.message || _0x1909b9.response || _0x1909b9.reply || _0x1909b9.answer;
      if (!_0x126ca6?.["trim"]()) {
        console.log("⚠️ Resposta vazia ou inesperada da API:", _0x1909b9);
        return _0x4d811e("🤖 Simi não conseguiu responder agora. Tente uma pergunta diferente.");
      }
      return _0x4d811e(_0x126ca6.trim());
    } catch (_0x4eed29) {
      console.log("❌ Erro no comando simi:", _0x4eed29.message);
      const _0x396720 = {
        success: false,
        message: "❌ Erro inesperado ao conversar com a Simi."
      };
      return _0x396720;
    }
  }
}, {
  'name': "simih",
  'aliases': [],
  'category': "admin",
  'description': "Ativa/desativa o modo SimSimi no grupo",
  'longDescription': "Quando ativado, o bot responderá automaticamente às mensagens do grupo utilizando a inteligência artificial SimSimi.",
  'usage': "simih",
  'example': "simih",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x1c7849,
  'requirements': {},
  'execute': async ({
    isGroupAdmins: _0xbdb427,
    dataGp: _0x1cf79a,
    setGp: _0x4ae55b,
    Res_SoAdm: _0x3e9b13,
    reply: _0x5b3dd4
  }) => {
    if (!_0xbdb427) {
      return _0x5b3dd4(_0x3e9b13);
    }
    _0x1cf79a[0].simi1 = !_0x1cf79a[0].simi1;
    _0x4ae55b(_0x1cf79a);
    _0x5b3dd4(_0x1cf79a[0]?.["simi1"] ? "Ativado com sucesso o modo simi neste grupo 😗.. ( Obs: Use o comando uma vez para ativar, e use novamente caso queira desligar. )" : "Desativado modo simi com sucesso neste grupo 😡️ ( Obs: Use o comando uma vez para ativar, e use novamente caso queira desligar. )");
    return true;
  }
}, {
  'name': "autofigu",
  'aliases': ["autosticker"],
  'category': "admin",
  'description': "Ativa/desativa a criação automática de figurinhas",
  'longDescription': "Quando ativado, o bot converterá automaticamente imagens e vídeos enviados no grupo em figurinhas.",
  'usage': "autofigu",
  'example': "autofigu",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x39b9a3,
  'requirements': {},
  'execute': async ({
    dataGp: _0x5842ab,
    setGp: _0x2cce61,
    reply: _0x4d8cfa
  }) => {
    _0x5842ab[0].autosticker = !_0x5842ab[0].autosticker;
    _0x2cce61(_0x5842ab);
    _0x4d8cfa(_0x5842ab[0]?.["autosticker"] ? "🌀 Ativou com sucesso o recurso de auto figurinhas neste grupo 📝 ( Obs: Use o comando uma vez para ativar, e use novamente caso queira desligar. )" : "‼️ Desativou com sucesso o recurso de auto figurinhas neste grupo✔️ ( Obs: Use o comando uma vez para ativar, e use novamente caso queira desligar. )");
    return true;
  }
}, {
  'name': "setativ",
  'aliases': ["configativ", "configurar"],
  'category': "administracao",
  'description': "Configura todos os recursos e modos do bot",
  'longDescription': "Configura recursos anti, modos (brincadeira, nsfw, gold, leveling, x9) e outros recursos do grupo",
  'usage': "setativ [tipo] [modo]",
  'example': "setativ img 1\nsetativ brincadeira 1\nsetativ bemvindo1 1",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x528812,
  'execute': async ({
    args: _0xf29c9d,
    reply: _0x549a4c,
    isGroup: _0x18bc6e,
    from: _0x25d16c,
    dataGp: _0xefd089,
    setGp: _0x521e46,
    prefix: _0x4e0286,
    conn: _0x231d27,
    levelSystem: _0x26d861,
    BANCOP: _0x5a5949,
    SoDono: _0xdbd5d0,
    sender: _0xf4ab35
  }) => {
    if (_0xf29c9d.length < 2) {
      return _0x549a4c("Uso correto: setativ [tipo] [modo]");
    }
    const _0x12a17e = _0xf29c9d[0].toLowerCase();
    const _0x2787da = parseInt(_0xf29c9d[1]);
    const _0x1ecc5f = {
      img: "antiimg",
      imagem: "antiimg",
      video: "antivideo",
      vídeo: "antivideo",
      audio: "antiaudio",
      áudio: "antiaudio",
      sticker: "antisticker",
      figurinha: "antisticker"
    };
    _0x1ecc5f.doc = "antidoc";
    _0x1ecc5f.documento = "antidoc";
    _0x1ecc5f.ctt = "antictt";
    _0x1ecc5f.contato = "antictt";
    _0x1ecc5f.loc = "antiloc";
    _0x1ecc5f.localização = "antiloc";
    _0x1ecc5f.link = "antilinkhard";
    _0x1ecc5f.linkhard = "antilinkhard";
    _0x1ecc5f.linkgp = "antilinkgp";
    _0x1ecc5f.mention = "antimention";
    _0x1ecc5f.marcação = "antimention";
    _0x1ecc5f.payment = "antipayment";
    _0x1ecc5f.pagamento = "antipayment";
    _0x1ecc5f.catalogo = "anticatalogo";
    _0x1ecc5f.catálogo = "anticatalogo";
    _0x1ecc5f.interactive = "antiinteractive";
    _0x1ecc5f.interativo = "antiinteractive";
    _0x1ecc5f.fake = "antifake";
    _0x1ecc5f.numerofake = "antifake";
    _0x1ecc5f.palavra = "antipalavrao";
    _0x1ecc5f.palavrao = "antipalavrao";
    _0x1ecc5f.palavrão = "antipalavrao";
    _0x1ecc5f.callgp = "anticallgp";
    _0x1ecc5f.chamadas = "anticallgp";
    _0x1ecc5f.charlimit = "charlimit";
    _0x1ecc5f.limitec = "charlimit";
    _0x1ecc5f.inativo = "diasInatividade";
    _0x1ecc5f.inativos = "diasInatividade";
    const _0x2ad610 = {
      brincadeira: "jogos",
      jogos: "jogos",
      nsfw: "nsfw",
      adulto: "nsfw",
      gold: "sistemgold",
      ouro: "sistemgold",
      leveling: "level",
      level: "level",
      xp: "level",
      x9: 'x9',
      monitor: 'x9',
      soadm: "soadm",
      limitarcmd: "Limitar_CMD",
      bemvindo: "wellcome",
      bemvindo1: "wellcome",
      bemvindo2: "wellcome",
      simi1: "simi1",
      simih: "simi1",
      simi2: "simi2",
      simih2: "simi2",
      autorepo: "autoresposta",
      autoresposta: "autoresposta",
      autofigu: "autosticker",
      autofigurinha: "autosticker",
      autobaixar: "autobaixar",
      saudacao: "saudacao",
      saudação: "saudacao",
      welcomemsg: "saudacao",
      boasvindas: "saudacao",
      x9_deleted: "x9_deleted",
      x9_deletadas: "x9_deleted",
      x9_editadas: "x9_edited"
    };
    _0x2ad610.x9_edited = "x9_edited";
    _0x2ad610.x9_link = "x9_link";
    _0x2ad610.x9_linkgp = "x9_link";
    _0x2ad610.x9_cargos = "x9_roles";
    _0x2ad610.x9_roles = "x9_roles";
    _0x2ad610.x9_promocao = "x9_roles";
    _0x2ad610.x9_rebaixamento = "x9_roles";
    _0x2ad610.x9_solicitacoes = "x9_requests";
    _0x2ad610.x9_requests = "x9_requests";
    _0x2ad610.x9_rejeicoes = "x9_requests";
    _0x2ad610.x9_fixadas = "x9_pinned";
    _0x2ad610.x9_pinned = "x9_pinned";
    _0x2ad610.x9_pin = "x9_pinned";
    if (_0x1ecc5f[_0x12a17e]) {
      const _0x27c6dc = _0x1ecc5f[_0x12a17e];
      const _0xf34677 = ["antiimg", "antivideo", "antiaudio", "antisticker", "antidoc", "antictt", "antiloc", "antilinkhard", "antilinkgp"];
      const _0x49d412 = ["antimention", "antipayment", "anticatalogo", "antiinteractive", "antifake", "antipalavrao", "anticallgp"];
      if (_0xf34677.includes(_0x27c6dc) && (isNaN(_0x2787da) || _0x2787da < 0 || _0x2787da > 3)) {
        return _0x549a4c("Modo inválido para este tipo. Use:\n0 = Desativar\n1 = Apagar e banir\n2 = Só apagar\n3 = Advertência");
      }
      if (_0x49d412.includes(_0x27c6dc) && (isNaN(_0x2787da) || _0x2787da !== 0 && _0x2787da !== 1)) {
        return _0x549a4c("Modo inválido para este tipo. Use:\n0 = Desativar\n1 = Ativar (banir direto)");
      }
      if (_0x27c6dc === "diasInatividade" && ![0, 1, 3, 5, 7].includes(_0x2787da)) {
        return _0x549a4c("Valor inválido para dias de inatividade. Use:\n0 = Desativar\n1, 3, 5 ou 7 = Dias para banimento");
      }
      if (_0x27c6dc === "charlimit") {
        const _0x2e227e = {
          quantidade: null
        };
        if (!_0xefd089[0].hasOwnProperty("limitec")) {
          _0xefd089[0].limitec = _0x2e227e;
        }
        if (_0x2787da > 0) {
          const _0x400866 = _0xf29c9d[2] ? parseInt(_0xf29c9d[2]) : 4000;
          if (_0xf29c9d[2] && (isNaN(_0x400866) || _0x400866 < 100 || _0x400866 > 50000)) {
            return _0x549a4c("Limite inválido. Use um valor entre 100 e 50000 caracteres.");
          }
          _0xefd089[0].limitec.quantidade = _0x400866;
        } else {
          _0xefd089[0].limitec.quantidade = null;
        }
        await _0x521e46(_0xefd089);
        return true;
      }
      if (_0x27c6dc === "diasInatividade") {
        _0xefd089[0].diasInatividade = _0x2787da;
        await _0x521e46(_0xefd089);
        return true;
      }
      if (_0x27c6dc === "antilinkgp" || _0x27c6dc === "antilinkhard") {
        const _0x2858e0 = _0x27c6dc === "antilinkgp" ? "antilinkhard" : "antilinkgp";
        if (_0x2787da > 0) {
          _0xefd089[0][_0x2858e0] = 0;
        }
        _0xefd089[0][_0x27c6dc] = _0x2787da;
        await _0x521e46(_0xefd089);
        return true;
      }
      if (_0x27c6dc === "antipalavrao") {
        const _0x221b33 = {
          modo: 0x0,
          palavras: []
        };
        if (!_0xefd089[0].hasOwnProperty("antipalavrao")) {
          _0xefd089[0].antipalavrao = _0x221b33;
        }
        _0xefd089[0].antipalavrao.modo = _0x2787da === 1 ? 1 : _0x2787da;
        await _0x521e46(_0xefd089);
        return true;
      }
      if (_0x49d412.includes(_0x27c6dc)) {
        _0xefd089[0][_0x27c6dc] = _0x2787da > 0;
        await _0x521e46(_0xefd089);
        return true;
      }
      if (_0xf34677.includes(_0x27c6dc)) {
        _0xefd089[0][_0x27c6dc] = _0x2787da;
        await _0x521e46(_0xefd089);
        return true;
      }
      return true;
    }
    if (_0x2ad610[_0x12a17e]) {
      const _0x3d17da = _0x2ad610[_0x12a17e];
      ["jogos", "nsfw", "level"].forEach(_0x5622e6 => {
        if (!_0xefd089[0].hasOwnProperty(_0x5622e6)) {
          _0xefd089[0][_0x5622e6] = false;
        }
      });
      if (!_0xefd089[0].hasOwnProperty("sistemgold") || typeof _0xefd089[0].sistemgold !== "number") {
        _0xefd089[0].sistemgold = 0;
      }
      ["soadm", "Limitar_CMD", "simi1", "simi2", "autoresposta", "autosticker", "autobaixar"].forEach(_0x7a7204 => {
        if (!_0xefd089[0].hasOwnProperty(_0x7a7204)) {
          _0xefd089[0][_0x7a7204] = false;
        }
      });
      const _0x1ed3d6 = {
        bemvindo1: false
      };
      const _0x299d5b = {
        bemvindo2: false
      };
      if (!_0xefd089[0].wellcome || !Array.isArray(_0xefd089[0].wellcome)) {
        _0xefd089[0].wellcome = [_0x1ed3d6, _0x299d5b];
      }
      const _0x402a5b = {
        ativo: false,
        modo: null
      };
      if (!_0xefd089[0].hasOwnProperty("saudacao")) {
        _0xefd089[0].saudacao = _0x402a5b;
      }
      if (typeof _0xefd089[0].saudacao === "boolean") {
        _0xefd089[0].saudacao = {
          'ativo': _0xefd089[0].saudacao,
          'modo': _0xefd089[0].saudacao ? "texto" : null
        };
      }
      if (_0x3d17da === 'x9') {
        if (isNaN(_0x2787da) || _0x2787da !== 0 && _0x2787da !== 1) {
          return _0x549a4c("Modo inválido. Use:\n0 = Desativar\n1 = Ativar");
        }
        if (_0x2787da === 1) {
          const _0x5a3e92 = {
            deletedMessages: true,
            editedMessages: true,
            linkReset: true,
            roleChanges: true,
            rejectedRequests: true,
            pinnedMessages: true
          };
          const _0x44c89e = {
            ativo: true,
            config: _0x5a3e92
          };
          _0xefd089[0].x9 = _0x44c89e;
          await _0x521e46(_0xefd089);
          _0x549a4c("✅ Modo X9 ATIVADO!\n🔧 Todas as 6 funções foram ativadas automaticamente.\n\n💡 Use o menu X9 para personalizar as funções individualmente.");
          return true;
        } else {
          _0xefd089[0].x9 = false;
          await _0x521e46(_0xefd089);
          _0x549a4c("❌ Modo X9 DESATIVADO!");
          return true;
        }
      }
      if (_0x3d17da.startsWith("x9_")) {
        if (!(_0xefd089[0].x9 && typeof _0xefd089[0].x9 === "object" && _0xefd089[0].x9.ativo !== undefined && _0xefd089[0].x9.config && typeof _0xefd089[0].x9.config === "object")) {
          return _0x549a4c("❌ X9 não está ativo! Ative primeiro com: setativ x9 1");
        }
        if (isNaN(_0x2787da) || _0x2787da !== 0 && _0x2787da !== 1) {
          return _0x549a4c("Modo inválido. Use:\n0 = Desativar função\n1 = Ativar função");
        }
        const _0x282b28 = {
          x9_deleted: "deletedMessages",
          x9_edited: "editedMessages",
          x9_link: "linkReset",
          x9_roles: "roleChanges",
          x9_requests: "rejectedRequests",
          x9_pinned: "pinnedMessages"
        };
        const _0x4cdad0 = {
          x9_deleted: "Mensagens Deletadas",
          x9_edited: "Mensagens Editadas",
          x9_link: "Reset de Link",
          x9_roles: "Mudanças de Cargo",
          x9_requests: "Solicitações Rejeitadas",
          x9_pinned: "Mensagens Fixadas"
        };
        const _0x45927e = _0x282b28[_0x3d17da];
        const _0x3ac7c1 = _0x4cdad0[_0x3d17da];
        if (_0x45927e) {
          _0xefd089[0].x9.config[_0x45927e] = _0x2787da > 0;
          await _0x521e46(_0xefd089);
          _0x549a4c((_0x2787da > 0 ? '✅' : '❌') + " " + _0x3ac7c1 + " " + (_0x2787da > 0 ? "ATIVADA" : "DESATIVADA") + '!');
          return true;
        }
      }
      if (isNaN(_0x2787da) || _0x2787da !== 0 && _0x2787da !== 1) {
        return _0x549a4c("Modo inválido. Use:\n0 = Desativar\n1 = Ativar");
      }
      if (_0x3d17da === "sistemgold") {
        _0xefd089[0].sistemgold = _0x2787da;
        await _0x521e46(_0xefd089);
        return true;
      }
      if (_0x3d17da === "level") {
        if (_0x26d861) {
          try {
            if (_0x2787da === 1) {
              await _0x26d861.setLevelingStatus(_0x25d16c, true, "militar");
              _0xefd089[0].level = true;
            } else {
              await _0x26d861.setLevelingStatus(_0x25d16c, false);
              _0xefd089[0].level = false;
            }
          } catch (_0x3a8095) {
            _0xefd089[0].level = _0x2787da > 0;
          }
        } else {
          _0xefd089[0].level = _0x2787da > 0;
        }
        await _0x521e46(_0xefd089);
        return true;
      }
      if (_0x3d17da === "wellcome") {
        if (!_0xdbd5d0) {
          return _0x549a4c("❌ Apenas o dono pode configurar os recursos de bem-vindo!");
        }
        if (_0x12a17e === "bemvindo1") {
          const _0x590678 = _0xefd089[0].wellcome[1].bemvindo2;
          _0xefd089[0].wellcome[0].bemvindo1 = _0x2787da > 0;
          if (_0x2787da > 0 && _0x590678) {
            _0xefd089[0].wellcome[1].bemvindo2 = false;
          }
          await _0x521e46(_0xefd089);
          return true;
        }
        if (_0x12a17e === "bemvindo2") {
          const _0x2d4320 = _0xefd089[0].wellcome[0].bemvindo1;
          _0xefd089[0].wellcome[1].bemvindo2 = _0x2787da > 0;
          if (_0x2787da > 0 && _0x2d4320) {
            _0xefd089[0].wellcome[0].bemvindo1 = false;
          }
          await _0x521e46(_0xefd089);
          return true;
        }
      }
      if (_0x3d17da === "saudacao") {
        if (_0x2787da === 0) {
          _0xefd089[0].saudacao.ativo = false;
          _0xefd089[0].saudacao.modo = null;
        } else {
          if (_0xf29c9d[2] === "texto") {
            _0xefd089[0].saudacao.ativo = true;
            _0xefd089[0].saudacao.modo = "texto";
          } else if (_0xf29c9d[2] === "audio" || _0xf29c9d[2] === "áudio") {
            _0xefd089[0].saudacao.ativo = true;
            _0xefd089[0].saudacao.modo = "audio";
          } else {
            _0xefd089[0].saudacao.ativo = true;
            _0xefd089[0].saudacao.modo = "texto";
          }
        }
        await _0x521e46(_0xefd089);
        return true;
      }
      _0xefd089[0][_0x3d17da] = _0x2787da > 0;
      await _0x521e46(_0xefd089);
      return true;
    }
    return _0x549a4c("Tipo inválido. Tipos disponíveis:\n\n*ANTI (modos 0-3):* img, video, audio, sticker, doc, ctt, loc, link, linkgp\n\n*ANTI (ativar/desativar):* mention, payment, catalogo, interactive, fake, palavra, callgp\n\n*ESPECIAIS:* charlimit, inativo\n\n*MODOS:* brincadeira, nsfw, gold, leveling, x9\n\n*X9 FUNÇÕES:* x9_deleted, x9_edited, x9_link, x9_roles, x9_requests, x9_pinned\n\n*RECURSOS:* soadm, limitarcmd, bemvindo1, bemvindo2, simi1, simi2, autorepo, autofigu, autobaixar, saudacao");
  }
}, {
  'name': "ativacoes",
  'aliases': ["ativ", "config", "configuracoes"],
  'category': "administracao",
  'description': "Menu para configurar todos os recursos e modos",
  'longDescription': "Menu interativo para configurar recursos anti, modos do bot e outros recursos do grupo",
  'usage': "ativacoes",
  'example': "ativacoes",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x33f4c7,
  'execute': async ({
    conn: _0x176665,
    info: _0x238cb5,
    from: _0x1fd218,
    sender: _0x2cd7f4,
    dataGp: _0x315fb0,
    setGp: _0x58957a,
    prefix: _0x2c222e,
    createChoiceMenu: _0x2c66fe,
    reply: _0x3d74b8,
    levelSystem: _0x273d9d,
    BANCOP: _0x5abbb3,
    SoDono: _0x3cd0fc
  }) => {
    function _0x30f62d(_0x32ceb5) {
      if (!(_0x32ceb5[0].x9 && typeof _0x32ceb5[0].x9 === "object" && _0x32ceb5[0].x9.ativo !== undefined && _0x32ceb5[0].x9.config && typeof _0x32ceb5[0].x9.config === "object")) {
        return 0;
      }
      const _0x74f808 = _0x32ceb5[0].x9.config;
      return Object.values(_0x74f808).filter(Boolean).length;
    }
    function _0x39835d(_0x5037bd) {
      if (!(_0x5037bd[0].x9 && typeof _0x5037bd[0].x9 === "object" && _0x5037bd[0].x9.ativo !== undefined && _0x5037bd[0].x9.config && typeof _0x5037bd[0].x9.config === "object")) {
        return false;
      }
      return _0x5037bd[0].x9.ativo;
    }
    const _0x4a4baf = {
      quantidade: 0xfa0
    };
    if (!_0x315fb0[0].hasOwnProperty("limitec")) {
      _0x315fb0[0].limitec = _0x4a4baf;
    }
    const _0xe5819e = {
      modo: 0x0,
      palavras: []
    };
    if (!_0x315fb0[0].hasOwnProperty("antipalavrao")) {
      _0x315fb0[0].antipalavrao = _0xe5819e;
    }
    if (!_0x315fb0[0].hasOwnProperty("advertencias")) {
      _0x315fb0[0].advertencias = [];
    }
    if (_0x315fb0[0].anticallgp === undefined) {
      _0x315fb0[0].anticallgp = false;
    }
    ["jogos", "nsfw", "level"].forEach(_0x43378e => {
      if (!_0x315fb0[0].hasOwnProperty(_0x43378e)) {
        _0x315fb0[0][_0x43378e] = false;
      }
    });
    if (!_0x315fb0[0].hasOwnProperty("sistemgold") || typeof _0x315fb0[0].sistemgold !== "number") {
      _0x315fb0[0].sistemgold = 0;
    }
    ["soadm", "Limitar_CMD", "simi1", "simi2", "autoresposta", "autosticker", "autobaixar"].forEach(_0x523a1e => {
      if (!_0x315fb0[0].hasOwnProperty(_0x523a1e)) {
        _0x315fb0[0][_0x523a1e] = false;
      }
    });
    const _0x3651ee = {
      bemvindo1: false
    };
    const _0x445085 = {
      bemvindo2: false
    };
    if (!_0x315fb0[0].wellcome || !Array.isArray(_0x315fb0[0].wellcome)) {
      _0x315fb0[0].wellcome = [_0x3651ee, _0x445085];
    }
    const _0x447351 = {
      ativo: false,
      modo: null
    };
    if (!_0x315fb0[0].hasOwnProperty("saudacao")) {
      _0x315fb0[0].saudacao = _0x447351;
    }
    if (typeof _0x315fb0[0].saudacao === "boolean") {
      _0x315fb0[0].saudacao = {
        'ativo': _0x315fb0[0].saudacao,
        'modo': _0x315fb0[0].saudacao ? "texto" : null
      };
    }
    const _0x1babb5 = _0x222870 => {
      const _0x50c33c = parseInt(_0x315fb0[0][_0x222870]) || 0;
      return {
        'isActive': _0x50c33c > 0,
        'emoji': _0x50c33c > 0 ? '✅' : '❌',
        'mode': ["DESATIVADO", "APAGAR E BANIR", "SOMENTE APAGAR", "ADVERTÊNCIA"][parseInt(_0x50c33c) || 0]
      };
    };
    const _0x286266 = (_0x34e677, _0x261da2 = "normal") => {
      let _0x496531 = _0x261da2 === "fake" ? _0x315fb0[0][_0x34e677] : _0x315fb0[0][_0x34e677] > 0 || _0x315fb0[0][_0x34e677] === true;
      return {
        'isActive': _0x496531,
        'emoji': _0x496531 ? '✅' : '❌'
      };
    };
    const _0x402213 = _0x57e952 => {
      switch (_0x57e952) {
        case "charlimit":
          const _0x5ec7eb = _0x315fb0[0]?.["limitec"]?.["quantidade"] > 0;
          return {
            'isActive': _0x5ec7eb,
            'emoji': _0x5ec7eb ? '✅' : '❌',
            'extra': _0x5ec7eb ? " (" + _0x315fb0[0].limitec.quantidade + ')' : ''
          };
        case "inativo":
          const _0x1c4390 = _0x315fb0[0].diasInatividade || 0;
          const _0x195a83 = _0x1c4390 > 0;
          return {
            'isActive': _0x195a83,
            'emoji': _0x195a83 ? '✅' : '❌',
            'extra': _0x195a83 ? " (" + _0x1c4390 + 'd)' : ''
          };
        case "palavra":
          const _0xf8bbb2 = (_0x315fb0[0]?.["antipalavrao"]?.["modo"] || 0) > 0;
          const _0x50ba8a = _0x315fb0[0]?.["antipalavrao"]?.["palavras"]?.["length"] || 0;
          return {
            'isActive': _0xf8bbb2,
            'emoji': _0xf8bbb2 ? '✅' : '❌',
            'extra': _0xf8bbb2 ? " (" + _0x50ba8a + ')' : ''
          };
        case "advertencias":
          const _0x50bca1 = _0x315fb0[0].advertencias?.["length"] || 0;
          return {
            'isActive': _0x50bca1 > 0,
            'emoji': _0x50bca1 > 0 ? '⚠️' : '📋',
            'extra': " (" + _0x50bca1 + ')'
          };
        default:
          const _0x1a280a = {
            isActive: false,
            emoji: '❌',
            extra: ''
          };
          return _0x1a280a;
      }
    };
    const _0x2edf1d = (_0x3e3a4c, _0x36001 = null) => {
      if (_0x36001) {
        return _0x315fb0[0][_0x3e3a4c]?.[_0x36001[0]]?.[_0x36001[1]] || false;
      }
      if (_0x3e3a4c === "sistemgold") {
        return _0x315fb0[0][_0x3e3a4c] > 0;
      }
      return _0x315fb0[0][_0x3e3a4c] || false;
    };
    let _0x49be5c = false;
    if (_0x273d9d) {
      try {
        _0x49be5c = await _0x273d9d.isLevelingEnabled(_0x1fd218);
      } catch (_0x44495f) {
        _0x49be5c = _0x315fb0[0].level;
      }
    } else {
      _0x49be5c = _0x315fb0[0].level;
    }
    function _0xbe3679(_0x2b72e8, _0x51b9e8, _0x64123c) {
      const _0x467dd2 = parseInt(_0x315fb0[0][_0x64123c]) || 0;
      const _0x5b913a = ["DESATIVADO", "APAGAR E BANIR", "SOMENTE APAGAR", "ADVERTÊNCIA"][parseInt(_0x467dd2) || 0];
      const _0x3c4b04 = ["╭⊱「 " + ("ANTI " + _0x51b9e8) + " 」⊰╮\n┃", "┃ Status atual: " + _0x5b913a, '┃', _0x467dd2 !== 0 ? "┃ 1 - Desativar" : null, _0x467dd2 !== 1 ? "┃ " + (_0x467dd2 !== 0 ? '2' : '1') + " - Apagar e banir" : null, _0x467dd2 !== 2 ? "┃ " + (_0x467dd2 === 0 ? '2' : _0x467dd2 === 1 ? '2' : '3') + " - Somente apagar" : null, _0x467dd2 !== 3 ? "┃ " + (_0x467dd2 === 0 ? '3' : _0x467dd2 <= 2 ? '3' : '4') + " - Advertência (3x)" : null, '┃', "┃ 0 - Voltar ao menu principal", "┃\n╰━⊱「 " + ("ANTI " + _0x51b9e8) + " 」⊰━╯"].filter(Boolean).join("\n");
      const _0x157632 = {
        submenu: "principal"
      };
      const _0x43edc0 = {
        '0': _0x157632
      };
      let _0x2ce476 = 1;
      const _0x443240 = {
        text: "✅ Anti " + _0x51b9e8 + " DESATIVADO!",
        command: _0x2c222e + "setativ " + _0x2b72e8 + " 0",
        edit: true
      };
      if (_0x467dd2 !== 0) {
        _0x43edc0[String(_0x2ce476++)] = _0x443240;
      }
      const _0x31c732 = {
        text: "✅ Anti " + _0x51b9e8 + " configurado para APAGAR E BANIR!",
        command: _0x2c222e + "setativ " + _0x2b72e8 + " 1",
        edit: true
      };
      if (_0x467dd2 !== 1) {
        _0x43edc0[String(_0x2ce476++)] = _0x31c732;
      }
      const _0x1b98f7 = {
        text: "✅ Anti " + _0x51b9e8 + " configurado para SOMENTE APAGAR!",
        command: _0x2c222e + "setativ " + _0x2b72e8 + " 2",
        edit: true
      };
      if (_0x467dd2 !== 2) {
        _0x43edc0[String(_0x2ce476++)] = _0x1b98f7;
      }
      const _0x5eeb9d = {
        text: "✅ Anti " + _0x51b9e8 + " configurado para ADVERTÊNCIA!",
        command: _0x2c222e + "setativ " + _0x2b72e8 + " 3",
        edit: true
      };
      if (_0x467dd2 !== 3) {
        _0x43edc0[String(_0x2ce476++)] = _0x5eeb9d;
      }
      const _0xd06b6c = {
        text: _0x3c4b04,
        options: _0x43edc0
      };
      return _0xd06b6c;
    }
    function _0x4462e7() {
      const _0x409e11 = _0x315fb0[0]?.["limitec"]?.["quantidade"] > 0;
      const _0x25814c = _0x315fb0[0]?.["limitec"]?.["quantidade"] || 4000;
      const _0x374adf = ["╭⊱「 LIMITE DE CARACTERES 」⊰╮\n┃", "┃ Status: " + (_0x409e11 ? "ATIVADO" : "DESATIVADO"), _0x409e11 ? "┃ Limite atual: " + _0x25814c + " caracteres" : null, '┃', !_0x409e11 ? "┃ 1 - Ativar com 200 caracteres" : null, !_0x409e11 ? "┃ 2 - Ativar com 400 caracteres" : null, !_0x409e11 ? "┃ 3 - Ativar com 1000 caracteres" : null, !_0x409e11 ? "┃ 4 - Ativar com 4000 caracteres" : null, !_0x409e11 ? "┃ 5 - Ativar com 10000 caracteres" : null, _0x409e11 ? "┃ 1 - Desativar" : null, _0x409e11 ? "┃ 2 - Alterar para 200 caracteres" : null, _0x409e11 ? "┃ 3 - Alterar para 400 caracteres" : null, _0x409e11 ? "┃ 4 - Alterar para 1000 caracteres" : null, _0x409e11 ? "┃ 5 - Alterar para 4000 caracteres" : null, _0x409e11 ? "┃ 6 - Alterar para 10000 caracteres" : null, '┃', "┃ 0 - Voltar ao menu principal", "┃\n╰━⊱「 LIMITE CARACTERES 」⊰━╯"].filter(Boolean).join("\n");
      const _0x145df1 = [200, 400, 1000, 4000, 10000];
      const _0x229134 = {
        submenu: "principal"
      };
      const _0x348906 = {
        '0': _0x229134
      };
      if (!_0x409e11) {
        _0x145df1.forEach((_0x4dd5b1, _0x1f669c) => _0x348906[String(_0x1f669c + 1)] = {
          'text': "✅ Limite de caracteres ATIVADO com " + _0x4dd5b1 + " caracteres!",
          'command': _0x2c222e + "setativ charlimit 1 " + _0x4dd5b1,
          'edit': true
        });
      } else {
        const _0x391f7d = {
          text: "✅ Limite de caracteres DESATIVADO!",
          command: _0x2c222e + "setativ charlimit 0",
          edit: true
        };
        _0x348906['1'] = _0x391f7d;
        _0x145df1.forEach((_0x5f3181, _0xfd7fa3) => {
          if (_0x5f3181 !== _0x25814c) {
            _0x348906[String(_0xfd7fa3 + 2)] = {
              'text': "✅ Limite alterado para " + _0x5f3181 + " caracteres!",
              'command': _0x2c222e + "setativ charlimit 1 " + _0x5f3181,
              'edit': true
            };
          }
        });
      }
      const _0x145040 = {
        text: _0x374adf,
        options: _0x348906
      };
      return _0x145040;
    }
    function _0x40ce6a() {
      const _0xed2d4b = _0x315fb0[0].diasInatividade || 0;
      const _0x40abe8 = _0xed2d4b > 0;
      const _0x43b642 = [1, 3, 5, 7];
      const _0x4d4420 = ["╭⊱「 ANTI INATIVOS 」⊰╮\n┃", "┃ Status: " + (_0x40abe8 ? "ATIVADO" : "DESATIVADO"), _0x40abe8 ? "┃ Dias para banimento: " + _0xed2d4b + " dias" : null, '┃', !_0x40abe8 ? _0x43b642.map((_0x33e6c3, _0x449531) => "┃ " + (_0x449531 + 1) + " - Ativar com " + _0x33e6c3 + " " + (_0x33e6c3 === 1 ? "dia" : "dias")).join("\n┃ ") : null, _0x40abe8 ? "┃ 1 - Desativar" : null, _0x40abe8 ? _0x43b642.filter(_0x591ce7 => _0x591ce7 !== _0xed2d4b).map((_0x1e2b3c, _0x50236c) => "┃ " + (_0x50236c + 2) + " - Alterar para " + _0x1e2b3c + " " + (_0x1e2b3c === 1 ? "dia" : "dias")).join("\n┃ ") : null, '┃', "┃ 0 - Voltar ao menu principal", "┃\n╰━⊱「 ANTI INATIVOS 」⊰━╯"].filter(Boolean).join("\n").replace(/\n┃ \n/g, "\n");
      const _0x4902cc = {
        submenu: "principal"
      };
      const _0x5e1a1e = {
        '0': _0x4902cc
      };
      if (!_0x40abe8) {
        _0x43b642.forEach((_0x584d22, _0xc1790f) => _0x5e1a1e[String(_0xc1790f + 1)] = {
          'text': "✅ Anti inativos ATIVADO!\n⏰ Tempo: " + _0x584d22 + " " + (_0x584d22 === 1 ? "dia" : "dias") + " de inatividade",
          'command': _0x2c222e + "setativ inativo " + _0x584d22,
          'edit': true
        });
      } else {
        const _0x30c319 = {
          text: "✅ Anti inativos DESATIVADO!",
          command: _0x2c222e + "setativ inativo 0",
          edit: true
        };
        _0x5e1a1e['1'] = _0x30c319;
        let _0x259f8c = 2;
        _0x43b642.forEach(_0x282cc4 => {
          if (_0x282cc4 !== _0xed2d4b) {
            _0x5e1a1e[String(_0x259f8c++)] = {
              'text': "✅ Tempo alterado para " + _0x282cc4 + " " + (_0x282cc4 === 1 ? "dia" : "dias") + '!',
              'command': _0x2c222e + "setativ inativo " + _0x282cc4,
              'edit': true
            };
          }
        });
      }
      const _0x458e15 = {
        "text": _0x4d4420,
        options: _0x5e1a1e
      };
      return _0x458e15;
    }
    function _0x2c5d72() {
      const _0x36014d = _0x315fb0[0]?.["antipalavrao"]?.["modo"] || 0;
      const _0x17c57d = _0x315fb0[0]?.["antipalavrao"]?.["palavras"]?.["length"] || 0;
      const _0xb9d2ed = _0x36014d > 0;
      const _0x48b313 = ["╭⊱「 ANTI PALAVRÃO 」⊰╮\n┃", "┃ Status: " + (_0xb9d2ed ? "ATIVADO (banir direto)" : "DESATIVADO"), "┃ Palavras cadastradas: " + _0x17c57d, '┃', "┃ " + (!_0xb9d2ed ? "1 - Ativar (banir direto)" : "1 - Desativar"), "┃ 2 - Gerenciar palavras", '┃', "┃ 0 - Voltar ao menu principal", "┃\n╰━⊱「 ANTI PALAVRÃO 」⊰━╯"].join("\n");
      const _0x42038e = {
        submenu: "principal"
      };
      const _0x4e5f57 = {
        text: _0xb9d2ed ? "✅ Anti Palavrão DESATIVADO!" : "✅ Anti Palavrão ATIVADO!\n⚠️ Violações resultarão em banimento automático",
        command: _0x2c222e + "setativ palavra " + (_0xb9d2ed ? '0' : '1'),
        edit: true
      };
      const _0x525b58 = {
        submenu: "gerenciar_palavras"
      };
      const _0x4c36ee = {
        '0': _0x42038e,
        '1': _0x4e5f57,
        '2': _0x525b58
      };
      const _0x16b4f2 = {
        text: _0x48b313,
        options: _0x4c36ee
      };
      return _0x16b4f2;
    }
    function _0x454554() {
      const _0x5307d0 = _0x315fb0[0]?.["antipalavrao"]?.["palavras"] || [];
      const _0x413825 = _0x5307d0.length > 0 ? _0x5307d0.slice(0, 8).join(", ") + (_0x5307d0.length > 8 ? " e mais " + (_0x5307d0.length - 8) : '') : "Nenhuma palavra cadastrada";
      const _0x490446 = ["╭⊱「 GERENCIAR PALAVRAS 」⊰╮\n┃", "┃ Total: " + _0x5307d0.length + " palavras", "┃ Lista: " + _0x413825, '┃', "┃ 1 - Adicionar palavra", "┃ 2 - Remover palavra", "┃ 3 - Ver todas as palavras", "┃ 4 - Limpar todas", '┃', "┃ 0 - Voltar", "┃\n╰━⊱「 PALAVRAS PROIBIDAS 」⊰━╯"].join("\n");
      const _0x2765a0 = {
        submenu: "palavra"
      };
      const _0x34f328 = {
        text: "Para adicionar palavra:\n" + _0x2c222e + "addpalavra [palavra]\n\nExemplo: " + _0x2c222e + "addpalavra idiota",
        edit: true
      };
      const _0x95aa3d = {
        text: "Para remover palavra:\n" + _0x2c222e + "delpalavra [palavra]\n\nExemplo: " + _0x2c222e + "delpalavra idiota"
      };
      _0x95aa3d.edit = true;
      const _0x4d5df8 = {
        '0': _0x2765a0,
        '1': _0x34f328,
        '2': _0x95aa3d,
        '3': {
          'text': "📝 Palavras cadastradas: " + (_0x5307d0.length > 0 ? _0x5307d0.join(", ") : "Nenhuma"),
          'edit': true
        },
        '4': {
          'text': "✅ Todas as palavras foram removidas!",
          'command': _0x2c222e + "limparpalavrões",
          'edit': true
        }
      };
      const _0x1c7acb = {
        text: _0x490446,
        options: _0x4d5df8
      };
      return _0x1c7acb;
    }
    function _0x21d3cb() {
      const _0x31ed3d = _0x315fb0[0].advertencias || [];
      const _0x3abc48 = _0x31ed3d.length;
      const _0x5bb2bc = ["╭⊱「 GERENCIAR ADVERTÊNCIAS 」⊰╮\n┃", "┃ Total de usuários: " + _0x3abc48, '┃', "┃ 1 - Ver lista completa", "┃ 2 - Remover advertência individual", "┃ 3 - Limpar todas as advertências", '┃', "┃ 0 - Voltar ao menu principal", "┃\n╰━⊱「 ADVERTÊNCIAS 」⊰━╯"].join("\n");
      const _0x2df7db = {
        submenu: "principal"
      };
      const _0x1756ab = {
        submenu: "lista_advertencias"
      };
      const _0x46444f = {
        text: "📋 REMOVER ADVERTÊNCIA INDIVIDUAL:\n\n• Mencionando usuário:\n" + _0x2c222e + "removeradv @usuario\n\n• Respondendo mensagem:\nResponda uma mensagem do usuário:\n" + _0x2c222e + "removeradv\n\n💡 O usuário perderá todas suas advertências",
        edit: true
      };
      const _0x421776 = {
        text: "✅ Todas as advertências foram removidas!",
        command: _0x2c222e + "clearwarnings",
        edit: true
      };
      const _0x5b9df8 = {
        '0': _0x2df7db
      };
      _0x5b9df8['1'] = _0x1756ab;
      _0x5b9df8['2'] = _0x46444f;
      _0x5b9df8['3'] = _0x421776;
      const _0x5e2888 = {
        text: _0x5bb2bc,
        options: _0x5b9df8
      };
      return _0x5e2888;
    }
    function _0x5263e5() {
      const _0x198cc4 = _0x315fb0[0].advertencias || [];
      if (_0x198cc4.length === 0) {
        return {
          'text': ["╭⊱「 LISTA DE ADVERTÊNCIAS 」⊰╮\n┃", "┃ Nenhum usuário foi advertido", '┃', "┃ 0 - Voltar", "┃\n╰━⊱「 SEM ADVERTÊNCIAS 」⊰━╯"].join("\n"),
          'options': {
            '0': {
              'submenu': "advertencias"
            }
          }
        };
      }
      const _0x4fa480 = _0x198cc4.slice(0, 10).map((_0x58eac5, _0x2d6dc7) => {
        const _0x4f4d68 = _0x58eac5.id.split('@')[0];
        return "┃ " + (_0x2d6dc7 + 1) + ". @" + _0x4f4d68 + " (" + _0x58eac5.count + 'x)';
      }).join("\n");
      const _0x1e9f49 = ["╭⊱「 LISTA DE ADVERTÊNCIAS 」⊰╮\n┃", "┃ Total: " + _0x198cc4.length + " usuários", '┃', _0x4fa480, _0x198cc4.length > 10 ? "┃ ... e mais " + (_0x198cc4.length - 10) + " usuários" : null, '┃', "┃ 0 - Voltar", "┃\n╰━⊱「 LISTA ADVERTÊNCIAS 」⊰━╯"].filter(Boolean).join("\n");
      const _0x247657 = {
        submenu: "advertencias"
      };
      const _0xe213cc = {
        '0': _0x247657
      };
      const _0x5ccec2 = {
        text: _0x1e9f49,
        options: _0xe213cc
      };
      return _0x5ccec2;
    }
    function _0x56032c() {
      const _0x4fa7e5 = _0x315fb0[0].saudacao;
      const _0x4a6b58 = !_0x4fa7e5.ativo ? "❌ Desativado" : _0x4fa7e5.modo === "texto" ? "✅ Ativo (📝 Texto)" : "✅ Ativo (🔊 Áudio)";
      if (!_0x4fa7e5.ativo) {
        const _0x5dbbf9 = ["╭⊱「 CONFIG SAUDAÇÃO 」⊰╮\n┃", "┃ Status atual: " + _0x4a6b58, '┃', "┃ 1 - 📝 Ativar modo Texto", "┃ 2 - 🔊 Ativar modo Áudio", '┃', "┃ 0 - Voltar ao menu principal", "┃\n╰━⊱「 SAUDAÇÃO 」⊰━╯"].join("\n");
        const _0x29fc93 = {
          submenu: "principal"
        };
        const _0xb79c45 = {
          text: "✅ Saudação ativada em modo TEXTO!\n💡 O bot responderá com frases de bom dia/boa tarde/boa noite.",
          command: _0x2c222e + "setativ saudacao 1 texto",
          edit: true
        };
        const _0x1ae1c1 = {
          text: "✅ Saudação ativada em modo ÁUDIO!\n💡 O bot responderá com áudios de bom dia/boa tarde/boa noite.",
          command: _0x2c222e + "setativ saudacao 1 audio",
          edit: true
        };
        const _0x42f6f6 = {
          '0': _0x29fc93,
          '1': _0xb79c45,
          '2': _0x1ae1c1
        };
        const _0x48e9f5 = {
          text: _0x5dbbf9,
          options: _0x42f6f6
        };
        return _0x48e9f5;
      } else {
        const _0x3e39c3 = _0x4fa7e5.modo === "texto" ? "áudio" : "texto";
        const _0x4697f8 = _0x4fa7e5.modo === "texto" ? '🔊' : '📝';
        const _0x33196e = _0x4fa7e5.modo === "texto" ? "audio" : "texto";
        const _0x2f5c08 = ["╭⊱「 CONFIG SAUDAÇÃO 」⊰╮\n┃", "┃ Status atual: " + _0x4a6b58, '┃', "┃ 1 - ❌ Desativar Saudação", "┃ 2 - " + _0x4697f8 + " Trocar para modo " + _0x3e39c3, '┃', "┃ 0 - Voltar ao menu principal", "┃\n╰━⊱「 SAUDAÇÃO 」⊰━╯"].join("\n");
        const _0x1c6b30 = {
          submenu: "principal"
        };
        const _0x3df6a8 = {
          text: "❌ Saudação DESATIVADA com sucesso!\n📝 O bot não responderá mais às saudações.",
          command: _0x2c222e + "setativ saudacao 0",
          edit: true
        };
        const _0x2ec859 = {
          '0': _0x1c6b30,
          '1': _0x3df6a8,
          '2': {
            'text': "🔄 Modo da saudação alterado para " + _0x3e39c3.toUpperCase() + "!\n💡 Agora o bot responderá em modo " + _0x3e39c3 + '.',
            'command': _0x2c222e + "setativ saudacao 1 " + _0x33196e,
            'edit': true
          }
        };
        const _0x23b9e0 = {
          text: _0x2f5c08,
          options: _0x2ec859
        };
        return _0x23b9e0;
      }
    }
    function _0x53639c() {
      if (!(_0x315fb0[0].x9 && typeof _0x315fb0[0].x9 === "object" && _0x315fb0[0].x9.ativo !== undefined && _0x315fb0[0].x9.config && typeof _0x315fb0[0].x9.config === "object")) {
        return {
          'text': ["╭⊱「 MODO X9 」⊰╮\n┃", "┃ Status: ❌ DESATIVADO", '┃', "┃ O modo X9 monitora atividades do grupo:", "┃ • Mensagens deletadas/editadas", "┃ • Reset de link do grupo", "┃ • Mudanças de cargo (promoção/rebaixamento)", "┃ • Solicitações de entrada rejeitadas", "┃ • Mensagens fixadas/desfixadas", '┃', "┃ 1 - ✅ Ativar X9 (todas as funções)", '┃', "┃ 0 - Voltar ao menu principal", "┃\n╰━⊱「 X9 MONITOR 」⊰━╯"].join("\n"),
          'options': {
            '0': {
              'submenu': "principal"
            },
            '1': {
              'text': "✅ Modo X9 ATIVADO!\n🔧 Todas as 6 funções foram ativadas automaticamente.\n\n💡 Use este menu para personalizar as funções individualmente.",
              'command': _0x2c222e + "setativ x9 1",
              'edit': true
            }
          }
        };
      }
      const _0x26cf7d = _0x315fb0[0].x9.config;
      const _0x5bd344 = Object.values(_0x26cf7d).filter(Boolean).length;
      const _0x1915cc = _0x494a2f => {
        const _0x10144c = {
          deletedMessages: "🗑️"
        };
        _0x10144c.editedMessages = '✏️';
        _0x10144c.linkReset = '🔗';
        _0x10144c.roleChanges = '👑';
        _0x10144c.rejectedRequests = '❌';
        _0x10144c.pinnedMessages = '📌';
        return _0x10144c[_0x494a2f] || '⚙️';
      };
      return {
        'text': ["╭⊱「 CONFIGURAÇÕES X9 」⊰╮\n┃", "┃ Status: ✅ ATIVADO", "┃ Funções ativas: " + _0x5bd344 + '/6', '┃', "┃ 🎯 CONTROLE GERAL:", "┃ 1 - ❌ Desativar X9 completamente", '┃', "┃ 📋 FUNÇÕES INDIVIDUAIS:", "┃ 2 - " + (_0x26cf7d[_0x1d327c] ? '✅' : '❌') + " Mensagens Deletadas " + _0x1915cc("deletedMessages"), "┃ 3 - " + (_0x26cf7d[_0x1d327c] ? '✅' : '❌') + " Mensagens Editadas " + _0x1915cc("editedMessages"), "┃ 4 - " + (_0x26cf7d[_0x1d327c] ? '✅' : '❌') + " Reset de Link " + _0x1915cc("linkReset"), "┃ 5 - " + (_0x26cf7d[_0x1d327c] ? '✅' : '❌') + " Mudanças de Cargo " + _0x1915cc("roleChanges"), "┃ 6 - " + (_0x26cf7d[_0x1d327c] ? '✅' : '❌') + " Solicitações Rejeitadas " + _0x1915cc("rejectedRequests"), "┃ 7 - " + (_0x26cf7d[_0x1d327c] ? '✅' : '❌') + " Mensagens Fixadas " + _0x1915cc("pinnedMessages"), '┃', "┃ 🔄 AÇÕES RÁPIDAS:", "┃ 8 - ✅ Ativar todas as funções", "┃ 9 - ❌ Desativar todas as funções", '┃', "┃ 0 - Voltar ao menu principal", "┃\n╰━⊱「 X9 MONITOR 」⊰━╯"].join("\n"),
        'options': {
          '0': {
            'submenu': "principal"
          },
          '1': {
            'text': "❌ Modo X9 DESATIVADO completamente!",
            'command': _0x2c222e + "setativ x9 0",
            'edit': true
          },
          '2': {
            'text': _0x26cf7d.deletedMessages ? "❌ Mensagens Deletadas DESATIVADAS!" : "✅ Mensagens Deletadas ATIVADAS!",
            'command': _0x2c222e + "setativ x9_deleted " + (_0x26cf7d.deletedMessages ? '0' : '1'),
            'edit': true
          },
          '3': {
            'text': _0x26cf7d.editedMessages ? "❌ Mensagens Editadas DESATIVADAS!" : "✅ Mensagens Editadas ATIVADAS!",
            'command': _0x2c222e + "setativ x9_edited " + (_0x26cf7d.editedMessages ? '0' : '1'),
            'edit': true
          },
          '4': {
            'text': _0x26cf7d.linkReset ? "❌ Reset de Link DESATIVADO!" : "✅ Reset de Link ATIVADO!",
            'command': _0x2c222e + "setativ x9_link " + (_0x26cf7d.linkReset ? '0' : '1'),
            'edit': true
          },
          '5': {
            'text': _0x26cf7d.roleChanges ? "❌ Mudanças de Cargo DESATIVADAS!" : "✅ Mudanças de Cargo ATIVADAS!",
            'command': _0x2c222e + "setativ x9_roles " + (_0x26cf7d.roleChanges ? '0' : '1'),
            'edit': true
          },
          '6': {
            'text': _0x26cf7d.rejectedRequests ? "❌ Solicitações Rejeitadas DESATIVADAS!" : "✅ Solicitações Rejeitadas ATIVADAS!",
            'command': _0x2c222e + "setativ x9_requests " + (_0x26cf7d.rejectedRequests ? '0' : '1'),
            'edit': true
          },
          '7': {
            'text': _0x26cf7d.pinnedMessages ? "❌ Mensagens Fixadas DESATIVADAS!" : "✅ Mensagens Fixadas ATIVADAS!",
            'command': _0x2c222e + "setativ x9_pinned " + (_0x26cf7d.pinnedMessages ? '0' : '1'),
            'edit': true
          },
          '8': {
            'text': "✅ Todas as funções X9 ATIVADAS!",
            'command': _0x2c222e + "setativ x9_deleted 1 && " + _0x2c222e + "setativ x9_edited 1 && " + _0x2c222e + "setativ x9_link 1 && " + _0x2c222e + "setativ x9_roles 1 && " + _0x2c222e + "setativ x9_requests 1 && " + _0x2c222e + "setativ x9_pinned 1",
            'edit': true
          },
          '9': {
            'text': "❌ Todas as funções X9 DESATIVADAS!\n💡 O X9 continua ativo, mas sem nenhuma função.",
            'command': _0x2c222e + "setativ x9_deleted 0 && " + _0x2c222e + "setativ x9_edited 0 && " + _0x2c222e + "setativ x9_link 0 && " + _0x2c222e + "setativ x9_roles 0 && " + _0x2c222e + "setativ x9_requests 0 && " + _0x2c222e + "setativ x9_pinned 0",
            'edit': true
          }
        }
      };
    }
    const _0x32ca42 = _0x1babb5("antiimg");
    const _0x5ea9ff = _0x1babb5("antivideo");
    const _0xe2bcc3 = _0x1babb5("antiaudio");
    const _0x299422 = _0x1babb5("antisticker");
    const _0x19aa3b = _0x1babb5("antidoc");
    const _0x3f04de = _0x1babb5("antictt");
    const _0x45e7c6 = _0x1babb5("antiloc");
    const _0x16e6c3 = _0x1babb5("antilinkhard");
    const _0x12a0f8 = _0x1babb5("antilinkgp");
    const _0x4764ec = _0x286266("antimention");
    const _0x28cc3f = _0x286266("antipayment");
    const _0x4ed0c6 = _0x286266("anticatalogo");
    const _0x145866 = _0x286266("antiinteractive");
    const _0x37f4e = _0x286266("antifake", "fake");
    const _0x428098 = _0x286266("anticallgp");
    const _0x3410f1 = _0x402213("charlimit");
    const _0x2e7983 = _0x402213("inativo");
    const _0x3114fa = _0x402213("palavra");
    const _0x1eb58a = _0x402213("advertencias");
    const _0x3a9f80 = _0x2edf1d("jogos");
    const _0xdd88d6 = _0x2edf1d("nsfw");
    const _0x1af3ce = _0x2edf1d("sistemgold");
    const _0x14ba1d = _0x2edf1d("soadm");
    const _0x5e7fda = _0x2edf1d("Limitar_CMD");
    const _0x514dea = _0x2edf1d("wellcome", [0, "bemvindo1"]);
    const _0x25c33b = _0x2edf1d("wellcome", [1, "bemvindo2"]);
    const _0x33a961 = _0x2edf1d("simi1");
    const _0x55af6e = _0x2edf1d("simi2");
    const _0x30bb49 = _0x2edf1d("autoresposta");
    const _0x55afb3 = _0x2edf1d("autosticker");
    const _0x1ebd1c = _0x2edf1d("autobaixar");
    const _0x38abd9 = _0x39835d(_0x315fb0);
    const _0x196241 = _0x30f62d(_0x315fb0);
    const _0x3dce5e = _0x38abd9 ? "✅🕵️ Modo X9 (" + _0x196241 + "/6 funções)" : "❌🕵️ Modo X9";
    const _0x215613 = () => {
      const _0x3f3d39 = _0x315fb0[0].saudacao;
      const _0x29f7de = {
        emoji: '❌',
        extra: ''
      };
      if (!_0x3f3d39.ativo) {
        return _0x29f7de;
      }
      return {
        'emoji': '✅',
        'extra': _0x3f3d39.modo === "texto" ? " (📝)" : " (🔊)"
      };
    };
    const _0x1daca0 = _0x215613();
    const _0x50d044 = {
      submenu: 'x9'
    };
    const _0x14e28d = {
      'principal': {
        'text': ["╭⊱「 ATIVAÇÕES E CONFIGURAÇÕES 」⊰╮\n┃", '┃', "┃ 🎯 MODOS DO BOT:", "┃ 1 - " + (_0x3a9f80 ? '✅' : '❌') + "🎮 Modo Brincadeira", "┃ 2 - " + (_0xdd88d6 ? '✅' : '❌') + "🔞 Modo NSFW", "┃ 3 - " + (_0x1af3ce ? '✅' : '❌') + "💰 Modo Gold", "┃ 4 - " + (_0x49be5c ? '✅' : '❌') + "⬆️ Modo Leveling", "┃ 5 - " + _0x3dce5e, '┃', "┃ 📋 ANTIS COM MODOS:", "┃ 6 - " + _0x32ca42.emoji + " Anti Imagem 🖼️", "┃ 7 - " + _0x5ea9ff.emoji + " Anti Vídeo 🎥", "┃ 8 - " + _0xe2bcc3.emoji + " Anti Áudio 🔊", "┃ 9 - " + _0x299422.emoji + " Anti Sticker 🎭", "┃ 10 - " + _0x19aa3b.emoji + " Anti Documento 📄", "┃ 11 - " + _0x3f04de.emoji + " Anti Contato 👤", "┃ 12 - " + _0x45e7c6.emoji + " Anti Localização 📍", "┃ 13 - " + _0x16e6c3.emoji + " Anti Link Geral 🔗", "┃ 14 - " + _0x12a0f8.emoji + " Anti Link de Grupo 🔗", '┃', "┃ ⚡ ANTIS TOGGLE:", "┃ 15 - " + _0x4764ec.emoji + " Anti Marcação 🏷️", "┃ 16 - " + _0x28cc3f.emoji + " Anti Pagamento 💰", "┃ 17 - " + _0x4ed0c6.emoji + " Anti Catálogo 🛒", "┃ 18 - " + _0x145866.emoji + " Anti Interativo 📱", "┃ 19 - " + _0x37f4e.emoji + " Anti Número Fake 🌐", "┃ 20 - " + _0x3114fa.emoji + " Anti Palavrão 🤬" + _0x3114fa.extra, "┃ 21 - " + _0x428098.emoji + " Anti Chamadas 📞", '┃', "┃ ⚙️ ESPECIAIS:", "┃ 22 - " + _0x3410f1.emoji + " Limite de Caracteres ✉️" + _0x3410f1.extra, "┃ 23 - " + _0x2e7983.emoji + " Anti Inativos ⏰" + _0x2e7983.extra, "┃ 24 - " + _0x1eb58a.emoji + " Gerenciar Advertências" + _0x1eb58a.extra, '┃', "┃ 🔧 OUTROS RECURSOS:", "┃ 25 - " + (_0x14ba1d ? '✅' : '❌') + "🔒 Só Administradores", "┃ 26 - " + (_0x5e7fda ? '✅' : '❌') + "🔄 Limitar Comando", "┃ 27 - " + (_0x514dea ? '✅' : '❌') + "👋 Bem Vindo 1 " + (_0x3cd0fc ? '' : '🔒'), "┃ 28 - " + (_0x25c33b ? '✅' : '❌') + "🎊 Bem Vindo 2 " + (_0x3cd0fc ? '' : '🔒'), "┃ 29 - " + (_0x33a961 ? '✅' : '❌') + "🤖 Simi 1", "┃ 30 - " + (_0x55af6e ? '✅' : '❌') + "🗣️ Simi 2", "┃ 31 - " + (_0x30bb49 ? '✅' : '❌') + "💬 Auto Resposta", "┃ 32 - " + (_0x55afb3 ? '✅' : '❌') + "🖼️ Auto Figurinha", "┃ 33 - " + (_0x1ebd1c ? '✅' : '❌') + "⬇️ Auto Baixar", "┃ 34 - " + _0x1daca0.emoji + "👋 Saudação" + _0x1daca0.extra, '┃', "┃ 0 - Finalizar", "┃\n╰━⊱「 CONFIGURAÇÕES 」⊰━╯"].join("\n"),
        'options': {
          '0': {
            'close': true,
            'text': "✅ Configuração finalizada!",
            'edit': true
          },
          '1': {
            'text': _0x3a9f80 ? "❌ Modo BRINCADEIRA DESATIVADO!" : "✅ Modo BRINCADEIRA ATIVADO!",
            'command': _0x2c222e + "setativ brincadeira " + (_0x3a9f80 ? '0' : '1'),
            'edit': true
          },
          '2': {
            'text': _0xdd88d6 ? "❌ Modo NSFW DESATIVADO!" : "✅ Modo NSFW ATIVADO!",
            'command': _0x2c222e + "setativ nsfw " + (_0xdd88d6 ? '0' : '1'),
            'edit': true
          },
          '3': {
            'text': _0x1af3ce ? "❌ Modo GOLD DESATIVADO!" : "✅ Modo GOLD ATIVADO!",
            'command': _0x2c222e + "setativ gold " + (_0x1af3ce ? '0' : '1'),
            'edit': true
          },
          '4': {
            'text': _0x49be5c ? "❌ Modo LEVELING DESATIVADO!" : "✅ Modo LEVELING ATIVADO!",
            'command': _0x2c222e + "setativ leveling " + (_0x49be5c ? '0' : '1'),
            'edit': true
          },
          '5': _0x50d044,
          '6': {
            'submenu': "img"
          },
          '7': {
            'submenu': "video"
          },
          '8': {
            'submenu': "audio"
          },
          '9': {
            'submenu': "sticker"
          },
          '10': {
            'submenu': "doc"
          },
          '11': {
            'submenu': "ctt"
          },
          '12': {
            'submenu': "loc"
          },
          '13': {
            'submenu': "link"
          },
          '14': {
            'submenu': "linkgp"
          },
          '15': {
            'text': _0x4764ec.isActive ? "❌ Anti Marcação DESATIVADO!" : "✅ Anti Marcação ATIVADO!\n⚠️ Violações resultarão em banimento automático",
            'command': _0x2c222e + "setativ mention " + (_0x4764ec.isActive ? '0' : '1'),
            'edit': true
          },
          '16': {
            'text': _0x28cc3f.isActive ? "❌ Anti Pagamento DESATIVADO!" : "✅ Anti Pagamento ATIVADO!\n⚠️ Violações resultarão em banimento automático",
            'command': _0x2c222e + "setativ payment " + (_0x28cc3f.isActive ? '0' : '1'),
            'edit': true
          },
          '17': {
            'text': _0x4ed0c6.isActive ? "❌ Anti Catálogo DESATIVADO!" : "✅ Anti Catálogo ATIVADO!\n⚠️ Violações resultarão em banimento automático",
            'command': _0x2c222e + "setativ catalogo " + (_0x4ed0c6.isActive ? '0' : '1'),
            'edit': true
          },
          '18': {
            'text': _0x145866.isActive ? "❌ Anti Interativo DESATIVADO!" : "✅ Anti Interativo ATIVADO!\n⚠️ Violações resultarão em banimento automático",
            'command': _0x2c222e + "setativ interactive " + (_0x145866.isActive ? '0' : '1'),
            'edit': true
          },
          '19': {
            'text': _0x37f4e.isActive ? "❌ Anti Número Fake DESATIVADO!" : "✅ Anti Número Fake ATIVADO!\n⚠️ Violações resultarão em banimento automático",
            'command': _0x2c222e + "setativ fake " + (_0x37f4e.isActive ? '0' : '1'),
            'edit': true
          },
          '20': {
            'submenu': "palavra"
          },
          '21': {
            'text': _0x428098.isActive ? "❌ Anti Chamadas DESATIVADO!" : "✅ Anti Chamadas ATIVADO!\n⚠️ Violações resultarão em banimento automático",
            'command': _0x2c222e + "setativ callgp " + (_0x428098.isActive ? '0' : '1'),
            'edit': true
          },
          '22': {
            'submenu': "charlimit"
          },
          '23': {
            'submenu': "inativo"
          },
          '24': {
            'submenu': "advertencias"
          },
          '25': {
            'text': _0x14ba1d ? "❌ SÓ ADMINISTRADORES DESATIVADO!" : "✅ SÓ ADMINISTRADORES ATIVADO!",
            'command': _0x2c222e + "setativ soadm " + (_0x14ba1d ? '0' : '1'),
            'edit': true
          },
          '26': {
            'text': _0x5e7fda ? "❌ LIMITAR COMANDO DESATIVADO!" : "✅ LIMITAR COMANDO ATIVADO!",
            'command': _0x2c222e + "setativ limitarcmd " + (_0x5e7fda ? '0' : '1'),
            'edit': true
          },
          '27': _0x3cd0fc ? {
            'text': _0x514dea ? "❌ BEM VINDO 1 DESATIVADO!" : "✅ BEM VINDO 1 ATIVADO!",
            'command': _0x2c222e + "setativ bemvindo1 " + (_0x514dea ? '0' : '1'),
            'edit': true
          } : {
            'text': "❌ Apenas o dono pode configurar os recursos de bem-vindo!",
            'edit': true
          },
          '28': _0x3cd0fc ? {
            'text': _0x25c33b ? "❌ BEM VINDO 2 DESATIVADO!" : "✅ BEM VINDO 2 ATIVADO!",
            'command': _0x2c222e + "setativ bemvindo2 " + (_0x25c33b ? '0' : '1'),
            'edit': true
          } : {
            'text': "❌ Apenas o dono pode configurar os recursos de bem-vindo!",
            'edit': true
          },
          '29': {
            'text': _0x33a961 ? "❌ SIMI 1 DESATIVADO!" : "✅ SIMI 1 ATIVADO!",
            'command': _0x2c222e + "setativ simi1 " + (_0x33a961 ? '0' : '1'),
            'edit': true
          },
          '30': {
            'text': _0x55af6e ? "❌ SIMI 2 DESATIVADO!" : "✅ SIMI 2 ATIVADO!",
            'command': _0x2c222e + "setativ simi2 " + (_0x55af6e ? '0' : '1'),
            'edit': true
          },
          '31': {
            'text': _0x30bb49 ? "❌ AUTO RESPOSTA DESATIVADO!" : "✅ AUTO RESPOSTA ATIVADO!",
            'command': _0x2c222e + "setativ autorepo " + (_0x30bb49 ? '0' : '1'),
            'edit': true
          },
          '32': {
            'text': _0x55afb3 ? "❌ AUTO FIGURINHA DESATIVADO!" : "✅ AUTO FIGURINHA ATIVADO!",
            'command': _0x2c222e + "setativ autofigu " + (_0x55afb3 ? '0' : '1'),
            'edit': true
          },
          '33': {
            'text': _0x1ebd1c ? "❌ AUTO BAIXAR DESATIVADO!" : "✅ AUTO BAIXAR ATIVADO!",
            'command': _0x2c222e + "setativ autobaixar " + (_0x1ebd1c ? '0' : '1'),
            'edit': true
          },
          '34': {
            'submenu': "saudacao"
          }
        }
      },
      'x9': _0x53639c(),
      'img': _0xbe3679("img", "IMAGEM", "antiimg"),
      'video': _0xbe3679("video", "VÍDEO", "antivideo"),
      'audio': _0xbe3679("audio", "ÁUDIO", "antiaudio"),
      'sticker': _0xbe3679("sticker", "STICKER", "antisticker"),
      'doc': _0xbe3679("doc", "DOCUMENTO", "antidoc"),
      'ctt': _0xbe3679("ctt", "CONTATO", "antictt"),
      'loc': _0xbe3679("loc", "LOCALIZAÇÃO", "antiloc"),
      'link': _0xbe3679("link", "LINK GERAL", "antilinkhard"),
      'linkgp': _0xbe3679("linkgp", "LINK DE GRUPO", "antilinkgp"),
      'charlimit': _0x4462e7(),
      'inativo': _0x40ce6a(),
      'palavra': _0x2c5d72(),
      'gerenciar_palavras': _0x454554(),
      'advertencias': _0x21d3cb(),
      'lista_advertencias': _0x5263e5(),
      'saudacao': _0x56032c()
    };
    await _0x2c66fe(_0x1fd218, _0x2cd7f4, _0x14e28d.principal.text, _0x14e28d.principal.options, {
      'menus': _0x14e28d,
      'history': ["principal"]
    });
    return true;
  }
}, {
  'name': "setmsgban",
  'aliases': ["configmsgban", "msgban", "mensagensban"],
  'category': "administracao",
  'description': "Configura as mensagens de banimento automático",
  'longDescription': "Menu interativo para configurar quando as mensagens de banimento são exibidas (lista negra, antifake, etc.)",
  'usage': "setmsgban [tipo]",
  'example': "setmsgban\nsetmsgban listanegra\nsetmsgban antifake",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x385027,
  'execute': async ({
    conn: _0x20d98d,
    q: _0x96900c,
    from: _0x56a209,
    sender: _0xcd877,
    dataGp: _0x11b9bc,
    setGp: _0xebd96f,
    prefix: _0x497f3a,
    createChoiceMenu: _0xa4d10e,
    reply: _0x482e9b,
    groupName: _0x173623
  }) => {
    if (!_0x11b9bc[0].hasOwnProperty("msgBanimento")) {
      const _0x121060 = {
        listanegra: true,
        antifake: true,
        listanegraEspera: true,
        antifakeEspera: true
      };
      _0x11b9bc[0].msgBanimento = _0x121060;
      await _0xebd96f(_0x11b9bc);
    }
    const _0xbcef3b = _0x11b9bc[0].msgBanimento;
    const _0x528328 = _0x96900c.trim()?.["toLowerCase"]();
    const _0x24c0fc = async _0xbc33bd => {
      _0xbc33bd.forEach(_0x43d4c8 => _0xbcef3b[_0x43d4c8] = !_0xbcef3b[_0x43d4c8]);
      await _0xebd96f(_0x11b9bc);
    };
    const _0x4b59d2 = {
      'listanegra': () => _0x24c0fc(["listanegra", "listanegraEspera"]),
      'lista-negra': () => _0x24c0fc(["listanegra", "listanegraEspera"]),
      'ln': () => _0x24c0fc(["listanegra", "listanegraEspera"]),
      'antifake': () => _0x24c0fc(["antifake", "antifakeEspera"]),
      'anti-fake': () => _0x24c0fc(["antifake", "antifakeEspera"]),
      'af': () => _0x24c0fc(["antifake", "antifakeEspera"]),
      'todas': () => _0x24c0fc(["listanegra", "listanegraEspera", "antifake", "antifakeEspera"]),
      'all': () => _0x24c0fc(["listanegra", "listanegraEspera", "antifake", "antifakeEspera"]),
      'todos': () => _0x24c0fc(["listanegra", "listanegraEspera", "antifake", "antifakeEspera"]),
      'listanegra-entrada': () => _0x24c0fc(["listanegra"]),
      'listanegra-solicitacao': () => _0x24c0fc(["listanegraEspera"]),
      'antifake-entrada': () => _0x24c0fc(["antifake"]),
      'antifake-solicitacao': () => _0x24c0fc(["antifakeEspera"])
    };
    if (_0x528328 && _0x4b59d2[_0x528328]) {
      await _0x4b59d2[_0x528328]();
      return;
    }
    const _0x53bc5d = _0xbcef3b.listanegra && _0xbcef3b.listanegraEspera && _0xbcef3b.antifake && _0xbcef3b.antifakeEspera;
    const _0x5f447a = {
      text: "╭━⊱「 CONFIG MSGS DE BAN 」⊰━╮\n┃ \n┃ 🎯 *CONTROLE DE MENSAGENS:*\n┃ \n┃ 1 - 🚫 Lista Negra\n┃Entrada: " + (_0xbcef3b.listanegra ? '✅' : '❌') + " Solicitação: " + (_0xbcef3b.listanegraEspera ? '✅' : '❌') + "\n┃ \n┃ 2 - 🌍 Antifake\n┃Entrada: " + (_0xbcef3b.antifake ? '✅' : '❌') + " Solicitação: " + (_0xbcef3b.antifakeEspera ? '✅' : '❌') + "\n┃ \n┃ 3 - ⚡ " + (_0x53bc5d ? "Desativar" : "Ativar") + " Todas\n┃ \n┃ 0 - Cancelar\n┃ \n╰━━━⊱「 𝐌𝐒𝐆𝐒 𝐃𝐄 𝐁𝐀𝐍 」⊰━━━╯\n\nDigite uma opção:",
      options: {}
    };
    _0x5f447a.options['1'] = {};
    _0x5f447a.options['2'] = {};
    _0x5f447a.options['3'] = {};
    _0x5f447a.options['0'] = {};
    _0x5f447a.options['1'].submenu = "listanegra";
    _0x5f447a.options['2'].submenu = "antifake";
    _0x5f447a.options['3'].text = (_0x53bc5d ? '❌' : '✅') + " Todas as mensagens de banimento foram " + (_0x53bc5d ? "DESATIVADAS" : "ATIVADAS") + '!';
    _0x5f447a.options['3'].command = _0x497f3a + "setmsgban todas";
    _0x5f447a.options['3'].edit = true;
    _0x5f447a.options['0'].close = true;
    _0x5f447a.options['0'].text = "✅ Configuração cancelada!";
    _0x5f447a.options['0'].edit = true;
    const _0x1f5771 = {
      text: "╭━⊱「 LISTA NEGRA 」⊰━╮\n┃ \n┃ 🚫 *CONTROLE LISTA NEGRA*\n┃ \n┃ 1 - Entrada Direta: " + (_0xbcef3b.listanegra ? '✅' : '❌') + "\n┃(Quando alguém é adicionado)\n┃ \n┃ 2 - Solicitação: " + (_0xbcef3b.listanegraEspera ? '✅' : '❌') + "\n┃(Quando alguém solicita entrar)\n┃ \n┃ 0 - Voltar ao menu principal\n┃ \n╰━⊱「 𝐋𝐈𝐒𝐓𝐀 𝐍𝐄𝐆𝐑𝐀 」⊰━╯",
      options: {}
    };
    _0x1f5771.options['1'] = {};
    _0x1f5771.options['2'] = {};
    _0x1f5771.options['0'] = {};
    _0x1f5771.options['1'].text = (_0xbcef3b.listanegra ? '❌' : '✅') + " Mensagem Lista Negra (Entrada) " + (_0xbcef3b.listanegra ? "DESATIVADA" : "ATIVADA") + '!';
    _0x1f5771.options['1'].command = _0x497f3a + "setmsgban listanegra-entrada";
    _0x1f5771.options['1'].edit = true;
    _0x1f5771.options['2'].text = (_0xbcef3b.listanegraEspera ? '❌' : '✅') + " Mensagem Lista Negra (Solicitação) " + (_0xbcef3b.listanegraEspera ? "DESATIVADA" : "ATIVADA") + '!';
    _0x1f5771.options['2'].command = _0x497f3a + "setmsgban listanegra-solicitacao";
    _0x1f5771.options['2'].edit = true;
    _0x1f5771.options['0'].submenu = "principal";
    const _0x279781 = {
      text: "╭━⊱「 ANTIFAKE 」⊰━╮\n┃ \n┃ 🌍 *CONTROLE ANTIFAKE*\n┃ \n┃ 1 - Entrada Direta: " + (_0xbcef3b.antifake ? '✅' : '❌') + "\n┃(Quando alguém é adicionado)\n┃ \n┃ 2 - Solicitação: " + (_0xbcef3b.antifakeEspera ? '✅' : '❌') + "\n┃(Quando alguém solicita entrar)\n┃ \n┃ 0 - Voltar ao menu principal\n┃ \n╰━⊱「 𝐀𝐍𝐓𝐈𝐅𝐀𝐊𝐄 」⊰━╯"
    };
    _0x279781.options = {};
    _0x279781.options['1'] = {};
    _0x279781.options['2'] = {};
    _0x279781.options['0'] = {};
    _0x279781.options['1'].text = (_0xbcef3b.antifake ? '❌' : '✅') + " Mensagem Antifake (Entrada) " + (_0xbcef3b.antifake ? "DESATIVADA" : "ATIVADA") + '!';
    _0x279781.options['1'].command = _0x497f3a + "setmsgban antifake-entrada";
    _0x279781.options['1'].edit = true;
    _0x279781.options['2'].text = (_0xbcef3b.antifakeEspera ? '❌' : '✅') + " Mensagem Antifake (Solicitação) " + (_0xbcef3b.antifakeEspera ? "DESATIVADA" : "ATIVADA") + '!';
    _0x279781.options['2'].command = _0x497f3a + "setmsgban antifake-solicitacao";
    _0x279781.options['2'].edit = true;
    _0x279781.options['0'].submenu = "principal";
    const _0x29cb11 = {
      principal: _0x5f447a,
      listanegra: _0x1f5771,
      antifake: _0x279781
    };
    await _0xa4d10e(_0x56a209, _0xcd877, _0x29cb11.principal.text, _0x29cb11.principal.options, {
      'menus': _0x29cb11,
      'history': ["principal"]
    });
    return true;
  }
}, {
  'name': ["bangp", "unbangp"],
  'aliases': ["bangrupo", "desbangrupo"],
  'category': "dono",
  'description': "Bane/desbane um grupo de usar o bot",
  'longDescription': "Proíbe ou permite que um grupo utilize os comandos do bot. Use \"bangp\" para banir e \"unbangp\" para desbanir. Comando exclusivo para o dono do bot.",
  'usage': "bangp | unbangp",
  'example': "bangp ou unbangp",
  'menu': "dono",
  'menuSection': "Grupos",
  'permissions': _0x854b63,
  'requirements': {},
  'execute': async ({
    isBanchat: _0x323555,
    dataGp: _0x144a8c,
    setGp: _0x126e3e,
    reply: _0x4e121c,
    command: _0x421ee7,
    from: _0x410664,
    groupName: _0x523552
  }) => {
    const _0x4dd1d6 = !_0x323555;
    _0x144a8c[0].bangp = _0x4dd1d6;
    await _0x126e3e(_0x144a8c);
    const _0x514895 = _0x4dd1d6 ? '🚫' : '✅';
    const _0x2a1cbc = _0x4dd1d6 ? "BANIDO" : "DESBANIDO";
    const _0x5f5842 = _0x4dd1d6 ? "⚠️ Todos os comandos foram desabilitados\n⚡ Somente o dono pode executar comandos" : "🎉 Comandos reativados com sucesso\n⚡ Todos os membros podem usar comandos";
    _0x4e121c(_0x514895 + " *GRUPO " + _0x2a1cbc + "*\n📝 Grupo: " + (_0x523552 || "N/A") + "\n🆔 ID: " + _0x410664 + "\n" + _0x5f5842);
    return true;
  }
}, {
  'name': ["boton", "botoff"],
  'aliases': ["ativarbot", "desativarbot", "togglebot"],
  'category': "dono",
  'description': "Alterna o funcionamento do bot (toggle)",
  'longDescription': "Alterna entre ativar e desativar as funções do bot. Se o bot estiver desativado, será ativado. Se estiver ativado, será desativado. Funciona como um interruptor.",
  'usage': "boton | botoff",
  'example': "boton (alterna o estado do bot)",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x23580f,
  'requirements': {},
  'execute': async ({
    nescessario: _0x5e6c7d,
    setNes: _0x21c352,
    reply: _0x37442a
  }) => {
    const _0x2bac26 = !_0x5e6c7d.botoff;
    _0x5e6c7d.botoff = _0x2bac26;
    _0x21c352(_0x5e6c7d);
    const _0x3e4861 = _0x2bac26 ? '🔴' : '🟢';
    const _0xc3b008 = _0x2bac26 ? "DESATIVADO" : "ATIVADO";
    const _0x240f9d = _0x2bac26 ? "⚠️ Funções desabilitadas\n🚫 Apenas o dono pode usar comandos" : "✅ Todas as funções habilitadas\n🎉 Membros podem usar comandos normalmente";
    _0x37442a(_0x3e4861 + " *BOT " + _0xc3b008 + "*\n\n" + _0x240f9d + "\n\n⚡ Status alterado com sucesso!");
    return true;
  }
}, {
  'name': ["addpalavra", "delpalavra", "listapalavrao", "limparpalavras"],
  'aliases': ["limparpalavrões", "listapalavra", "listpalavra"],
  'category': "admin",
  'description': "Gerencia palavras na lista de palavrões bloqueados",
  'longDescription': "Adiciona, remove, lista ou limpa palavras da lista de palavrões bloqueados pelo filtro antipalavrão.",
  'usage': "addpalavra [palavra] | delpalavra [palavra] | listapalavrao | limparpalavras",
  'example': "addpalavra palavrão",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x4e4636,
  'requirements': {},
  'execute': async ({
    command: _0x58b33e,
    q: _0x1ac608,
    args: _0x12f298,
    prefix: _0x435482,
    isGroupAdmins: _0x4bea9f,
    dataGp: _0x196527,
    setGp: _0x4c6d2d,
    Res_SoAdm: _0x60fe79,
    reply: _0x5e3a91
  }) => {
    if (!_0x196527[0].hasOwnProperty("antipalavrao")) {
      const _0x4dbe4e = {
        modo: 0x0,
        palavras: []
      };
      _0x196527[0].antipalavrao = _0x4dbe4e;
    }
    const _0x34a27b = _0x196527[0].antipalavrao.modo > 0;
    const _0x4eb449 = _0x196527[0].antipalavrao.palavras || [];
    const _0x3cb27d = _0x58b33e.toLowerCase();
    if (["listapalavrao", "listapalavra", "listpalavra"].includes(_0x3cb27d)) {
      if (!_0x34a27b) {
        return _0x5e3a91("Anti palavrão atualmente está desativado!");
      }
      if (_0x4eb449.length === 0) {
        return _0x5e3a91("Não há palavras cadastradas na lista de palavrões.");
      }
      let _0x1e592c = "📝 Lista de palavrões bloqueados\n";
      _0x1e592c += "Total: " + _0x4eb449.length + "\n\n";
      for (let _0x3a9069 of _0x4eb449) {
        _0x1e592c += "➸ " + _0x3a9069 + "\n";
      }
      await _0x5e3a91(_0x1e592c);
      return true;
    }
    if (!_0x4bea9f) {
      return _0x5e3a91(_0x60fe79);
    }
    if (_0x3cb27d === "addpalavra") {
      if (!_0x34a27b) {
        return _0x5e3a91("Anti palavrão está desativado, você precisa usar o comando " + _0x435482 + "setanti palavra 1");
      }
      if (_0x12f298.length < 1) {
        return _0x5e3a91("Use assim: " + _0x435482 + "addpalavra [palavrão]. Exemplo: " + _0x435482 + "addpalavra palavrão");
      }
      const _0x3a582a = _0x1ac608.trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, '');
      if (_0x3a582a.length < 2) {
        return _0x5e3a91("A palavra deve ter pelo menos 2 caracteres");
      }
      if (_0x4eb449.includes(_0x3a582a)) {
        return _0x5e3a91("Esta palavra já está na lista de palavrões");
      }
      _0x196527[0].antipalavrao.palavras.push(_0x3a582a);
      await _0x4c6d2d(_0x196527);
      return _0x5e3a91("✅ Palavra \"" + _0x3a582a + "\" adicionada à lista com sucesso!");
    }
    if (_0x3cb27d === "delpalavra") {
      if (!_0x34a27b) {
        return _0x5e3a91("Anti palavrão está desativado!");
      }
      if (_0x12f298.length < 1) {
        return _0x5e3a91("Use assim: " + _0x435482 + "delpalavra [palavrão]. Exemplo: " + _0x435482 + "delpalavra palavrão");
      }
      const _0xf3991e = _0x1ac608.trim().toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, '');
      if (!_0x4eb449.includes(_0xf3991e)) {
        return _0x5e3a91("Esta palavra não está na lista de palavrões");
      }
      const _0x3e28f1 = _0x196527[0].antipalavrao.palavras.indexOf(_0xf3991e);
      _0x196527[0].antipalavrao.palavras.splice(_0x3e28f1, 1);
      await _0x4c6d2d(_0x196527);
      return _0x5e3a91("✅ Palavra \"" + _0xf3991e + "\" removida da lista com sucesso!");
    }
    if (["limparpalavras", "limparpalavrões"].includes(_0x3cb27d)) {
      if (!_0x34a27b) {
        return _0x5e3a91("Anti palavrão está desativado!");
      }
      if (_0x4eb449.length === 0) {
        return _0x5e3a91("Não há palavras cadastradas para remover.");
      }
      _0x196527[0].antipalavrao.palavras = [];
      await _0x4c6d2d(_0x196527);
      return _0x5e3a91("✅ Todas as palavras foram removidas da lista com sucesso!");
    }
    return _0x5e3a91("Comando não reconhecido. Use " + _0x435482 + "addpalavra, " + _0x435482 + "delpalavra, " + _0x435482 + "listapalavrao ou " + _0x435482 + "limparpalavras");
  }
}, {
  'name': "limitecaracteres",
  'aliases': ["limiteflood", "limitcaracteres"],
  'category': "admin",
  'description': "Ativa/desativa o limite de caracteres por mensagem",
  'longDescription': "Ativa ou desativa a restrição ao número de caracteres por mensagem para evitar flood no grupo.",
  'usage': "limitecaracteres",
  'example': "limitecaracteres",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0x27f5d9,
  'requirements': {},
  'execute': async ({
    Os_Returns: _0x236ab1,
    dataGp: _0x276e5,
    setGp: _0x5e1fce,
    reply: _0xeb3e8f
  }) => {
    if (_0x236ab1(true, true, true)["true"]) {
      return _0xeb3e8f(_0x236ab1(true, true, true).txt);
    }
    _0x276e5[0].limitec.active = !_0x276e5[0].limitec.active;
    _0x5e1fce(_0x276e5);
    _0xeb3e8f(_0x276e5[0].limitec.active ? "✔️ O recurso limite de caracteres foi ativado nesse grupo, para desativar, só usar o comando novamente." : "O recurso limite de caracteres foi desativado nesse grupo, para ativar, só usar o comando novamente.");
    return true;
  }
}, {
  'name': "limitec",
  'aliases': [],
  'category': "admin",
  'description': "Define o limite de caracteres para o grupo",
  'longDescription': "Configura quantos caracteres serão permitidos por mensagem quando o limite de caracteres estiver ativado.",
  'usage': "limitec [quantidade]",
  'example': "limitec 5000",
  'menu': "admin",
  'menuSection': "Proteção",
  'permissions': _0xfdaf8d,
  'requirements': _0x30cd99,
  'execute': async ({
    q: _0x17745d,
    prefix: _0x11f669,
    command: _0x1a1c44,
    SoDono: _0x58b0bd,
    isnit: _0x1d74c9,
    ischyt: _0x2c735c,
    isAntiFlood: _0x5144b5,
    dataGp: _0x81b931,
    setGp: _0x8bf8cf,
    Res_SoDono: _0x2fed33,
    reply: _0x1f91bb
  }) => {
    if (!_0x58b0bd && !_0x1d74c9 && !_0x2c735c) {
      return _0x1f91bb(_0x2fed33);
    }
    if (!_0x5144b5) {
      return _0x1f91bb("Ative este recurso primeiro " + _0x11f669 + "limitecaracteres");
    }
    if (!_0x17745d.trim()) {
      return _0x1f91bb("Cade a quantidade? Ex: " + (_0x11f669 + _0x1a1c44) + " 5000");
    }
    if (isNaN(_0x17745d) == true) {
      return _0x1f91bb("Digite apenas números");
    }
    _0x81b931[0].limitec.quantidade = _0x17745d;
    _0x8bf8cf(_0x81b931);
    _0x1f91bb("Foi alterado o limite de caracteres para: " + _0x17745d);
    return true;
  }
}, {
  'name': "limitec_global",
  'aliases': [],
  'category': "dono",
  'description': "Define o limite global de caracteres",
  'longDescription': "Configura um limite de caracteres que será aplicado a todos os grupos onde o bot está presente.",
  'usage': "limitec_global [quantidade]",
  'example': "limitec_global 5000",
  'menu': "dono",
  'menuSection': "Proteção",
  'permissions': _0x4391fa,
  'requirements': _0x2ecab6,
  'execute': async ({
    q: _0x236c1d,
    fs: _0x2979c5,
    prefix: _0x5d1793,
    command: _0x1e5ef8,
    SoDono: _0x5e2241,
    isnit: _0x446926,
    ischyt: _0x1de1a7,
    Res_SoDono: _0x44ca20,
    reply: _0x4f2ba5
  }) => {
    if (!_0x5e2241 && !_0x446926 && !_0x1de1a7) {
      return _0x4f2ba5(_0x44ca20);
    }
    if (!_0x236c1d.trim()) {
      return _0x4f2ba5("Cade a quantidade? Ex: " + (_0x5d1793 + _0x1e5ef8) + " 5000");
    }
    if (isNaN(_0x236c1d) == true) {
      return _0x4f2ba5("Digite apenas números");
    }
    const _0x1419c6 = {
      limitefl: _0x236c1d
    };
    _0x2979c5.writeFileSync("../../dados/usuarios/flood.json", JSON.stringify(_0x1419c6, null, "\t"));
    _0x4f2ba5("Foi adicionado um limite global de caracteres de: " + _0x236c1d);
    return true;
  }
}, {
  'name': "status",
  'aliases': ["configuracoes", "configurar", "config", "painel"],
  'category': "admin",
  'description': "Mostra o status das configurações do grupo",
  'longDescription': "Exibe todas as configurações do grupo de forma organizada, facilitando o gerenciamento das funções do bot.",
  'usage': "status",
  'example': "status",
  'menu': "admin",
  'menuSection': "Configuração",
  'permissions': _0x1e2811,
  'requirements': {},
  'execute': async ({
    conn: _0x2fb0ad,
    info: _0x2bf5df,
    from: _0x3420a2,
    sender: _0x1162e9,
    groupName: _0x59da87,
    dataGp: _0x9061d3,
    setGp: _0x54b0c0,
    prefix: _0x4967f3,
    reply: _0x1f361c,
    isGroup: _0x2ca669,
    isGroupAdmins: _0x68b6dd,
    SoDono: _0x5b5a97,
    levelSystem: _0xbd8693,
    BANCOP: _0x1860af
  }) => {
    if (_0xbd8693) {
      _0xbd8693.init(_0x1860af);
    }
    function _0x1676da(_0x3eac67) {
      if (typeof _0x3eac67 === "number") {
        return _0x3eac67 > 0 ? '✅' : '❌';
      }
      return _0x3eac67 ? '✅' : '❌';
    }
    const _0x2cc4fe = {
      active: false,
      quantidade: 0xfa0
    };
    const _0x1ec459 = {
      campo: "limitec",
      valor: _0x2cc4fe
    };
    const _0x5553d8 = {
      modo: 0x0,
      palavras: []
    };
    const _0x3bbe2e = {
      campo: "antipalavrao",
      valor: _0x5553d8
    };
    const _0x3be213 = {
      campo: "jogos",
      valor: false
    };
    const _0x38b466 = {
      campo: "nsfw",
      valor: false
    };
    const _0x1ba668 = {
      campo: "sistemgold",
      valor: 0x0
    };
    const _0x3c4a22 = {
      campo: "level"
    };
    _0x3c4a22.valor = false;
    const _0x1a989d = {
      campo: "diasInatividade",
      valor: 0x0
    };
    const _0x469aa8 = {
      ativo: false,
      modo: null
    };
    const _0x5f12d5 = {
      campo: "saudacao",
      valor: _0x469aa8
    };
    const _0x15b4a9 = [_0x1ec459, _0x3bbe2e, _0x3be213, _0x38b466, _0x1ba668, _0x3c4a22, _0x1a989d, _0x5f12d5];
    for (const _0x1fa7fd of _0x15b4a9) {
      if (!_0x9061d3[0].hasOwnProperty(_0x1fa7fd.campo)) {
        _0x9061d3[0][_0x1fa7fd.campo] = _0x1fa7fd.valor;
      }
    }
    if (typeof _0x9061d3[0].saudacao === "boolean") {
      _0x9061d3[0].saudacao = {
        'ativo': _0x9061d3[0].saudacao,
        'modo': _0x9061d3[0].saudacao ? "texto" : null
      };
    }
    const _0x50d979 = {
      nome: "IMAGEM",
      emoji: "🖼️",
      campo: "antiimg"
    };
    const _0x5960d4 = {
      nome: "VÍDEO",
      emoji: '🎥',
      campo: "antivideo"
    };
    const _0x12e9d5 = {
      nome: "ÁUDIO",
      emoji: '🔊',
      campo: "antiaudio"
    };
    const _0x265d81 = {
      nome: "STICKER",
      emoji: '🎭',
      campo: "antisticker"
    };
    const _0x16de32 = {
      nome: "DOCUMENTO",
      emoji: '📄',
      campo: "antidoc"
    };
    const _0x393844 = {
      nome: "CONTATO",
      emoji: '👤',
      campo: "antictt"
    };
    const _0x3c9fa6 = {
      nome: "LOCALIZAÇÃO",
      emoji: '📍',
      campo: "antiloc"
    };
    const _0x263235 = {
      nome: "CATÁLOGO",
      emoji: '🛒',
      campo: "anticatalogo"
    };
    const _0x382cf7 = {
      nome: "LINK DE GRUPO",
      emoji: '🔗',
      campo: "antilinkgp"
    };
    const _0x484ff5 = {
      nome: "LINK GERAL",
      emoji: '🔗',
      campo: "antilinkhard"
    };
    const _0x891653 = {
      nome: "MARCAÇÃO",
      emoji: "🏷️",
      campo: "antimention"
    };
    const _0x4af89c = {
      nome: "PAGAMENTO",
      emoji: '💰',
      campo: "antipayment"
    };
    const _0xfa7a90 = {
      nome: "INTERATIVO",
      emoji: '📱',
      campo: "antiinteractive"
    };
    const _0x3a8a4f = {
      nome: "NÚMERO FAKE",
      emoji: '🌐',
      campo: "antifake"
    };
    const _0x540a3b = {
      nome: "ANTI ROUBO",
      emoji: '🔒',
      campo: "antiroubo"
    };
    const _0x508b4c = {
      nome: "PALAVRÃO",
      emoji: '🤬',
      campo: "antipalavrao"
    };
    const _0x58a112 = {
      nome: "CHAMADAS",
      emoji: '📞',
      campo: "anticallgp"
    };
    const _0x13d857 = {
      img: _0x50d979,
      video: _0x5960d4,
      audio: _0x12e9d5,
      sticker: _0x265d81,
      doc: _0x16de32,
      ctt: _0x393844,
      loc: _0x3c9fa6,
      catalogo: _0x263235,
      linkgp: _0x382cf7,
      linkhard: _0x484ff5,
      mention: _0x891653,
      payment: _0x4af89c,
      interactive: _0xfa7a90,
      fake: _0x3a8a4f,
      roubo: _0x540a3b,
      palavra: _0x508b4c,
      callgp: _0x58a112
    };
    const _0x522ae0 = {
      dbKey: "jogos",
      nome: "BRINCADEIRA",
      emoji: '🎮'
    };
    const _0x13b474 = {
      "dbKey": "nsfw",
      "nome": "NSFW",
      "emoji": '🔞'
    };
    const _0x3a3b07 = {
      dbKey: "sistemgold",
      nome: "GOLD"
    };
    _0x3a3b07.emoji = '💰';
    const _0xd416e5 = {
      dbKey: "level",
      nome: "LEVELING",
      emoji: '⬆️'
    };
    const _0x1d8e9c = {
      dbKey: 'x9',
      nome: 'X9',
      emoji: "🕵️"
    };
    const _0x4f3c0d = {
      dbKey: "autoresposta",
      nome: "AUTORESPOSTA",
      emoji: '🤖'
    };
    const _0x5ed86a = {
      brincadeira: _0x522ae0,
      nsfw: _0x13b474,
      gold: _0x3a3b07,
      leveling: _0xd416e5,
      x9: _0x1d8e9c,
      autoresposta: _0x4f3c0d
    };
    let _0x319403 = false;
    if (_0xbd8693) {
      try {
        _0x319403 = await _0xbd8693.isLevelingEnabled(_0x3420a2);
      } catch (_0x2c06f3) {
        console.error("Erro ao verificar status de leveling:", _0x2c06f3);
        _0x319403 = _0x9061d3[0].level;
      }
    } else {
      _0x319403 = _0x9061d3[0].level;
    }
    const _0x46c3f6 = {
      "ANTI RECURSOS": [],
      "MODOS DO BOT": [],
      "OUTROS RECURSOS": []
    };
    for (const [_0x40071f, _0x4bedb4] of Object.entries(_0x13d857)) {
      if (_0x40071f === "palavra") {
        const _0x13a24b = _0x9061d3[0]?.["antipalavrao"]?.["modo"] || 0;
        const _0x41b6e6 = _0x13a24b > 0 ? "✅ (BANIR DIRETO)" : '❌';
        const _0x11a7e8 = _0x9061d3[0]?.["antipalavrao"]?.["palavras"]?.["length"] || 0;
        _0x46c3f6["ANTI RECURSOS"].push("┃ " + _0x4bedb4.emoji + " Anti " + _0x4bedb4.nome + ": " + _0x41b6e6 + " " + (_0x11a7e8 > 0 ? '(' + _0x11a7e8 + " palavras)" : ''));
      } else {
        if (_0x40071f === "roubo") {
          const _0x5c08b6 = _0x9061d3[0]?.[_0x4bedb4.campo] ? '✅' : '❌';
          _0x46c3f6["ANTI RECURSOS"].push("┃ " + _0x4bedb4.emoji + " " + _0x4bedb4.nome + ": " + _0x5c08b6);
        } else {
          if (["mention", "payment", "interactive", "fake", "callgp"].includes(_0x40071f)) {
            const _0x93f80c = _0x9061d3[0][_0x4bedb4.campo];
            const _0x33f4ba = (typeof _0x93f80c === "boolean" ? _0x93f80c : _0x93f80c > 0) ? "✅ (BANIR DIRETO)" : '❌';
            _0x46c3f6["ANTI RECURSOS"].push("┃ " + _0x4bedb4.emoji + " Anti " + _0x4bedb4.nome + ": " + _0x33f4ba);
          } else {
            const _0x266d26 = parseInt(_0x9061d3[0][_0x4bedb4.campo]) || 0;
            const _0x6dfb11 = _0x266d26 > 0 ? "✅ (" + ["❌ DESATIVADO", "⚠️ APAGAR E BANIR", "🔄 SOMENTE APAGAR", "⚠️ ADVERTÊNCIA"][parseInt(_0x266d26) || 0].split(" ")[1] + ')' : '❌';
            _0x46c3f6["ANTI RECURSOS"].push("┃ " + _0x4bedb4.emoji + " Anti " + _0x4bedb4.nome + ": " + _0x6dfb11);
          }
        }
      }
    }
    const _0x2ebf59 = _0x9061d3[0]?.["diasInatividade"] || 0;
    const _0x15ae2b = _0x2ebf59 > 0 ? "✅ (" + _0x2ebf59 + " dias)" : '❌';
    _0x46c3f6["ANTI RECURSOS"].push("┃ ⏰ Anti Inativos: " + _0x15ae2b);
    const _0x1a23c1 = _0x9061d3[0]?.["limitec"]?.["quantidade"];
    const _0x15334d = _0x1a23c1 > 0 ? "✅ (" + _0x1a23c1 + ')' : '❌';
    _0x46c3f6["ANTI RECURSOS"].push("┃ ✉️ Limite de Caracteres: " + _0x15334d);
    for (const [_0x447aba, _0xe3b97d] of Object.entries(_0x5ed86a)) {
      let _0x411f1f;
      if (_0x447aba === "gold") {
        _0x411f1f = _0x9061d3[0][_0xe3b97d.dbKey] > 0 ? '✅' : '❌';
      } else if (_0x447aba === "leveling") {
        _0x411f1f = _0x319403 ? '✅' : '❌';
      } else {
        _0x411f1f = _0x9061d3[0][_0xe3b97d.dbKey] ? '✅' : '❌';
      }
      _0x46c3f6["MODOS DO BOT"].push("┃ " + _0xe3b97d.emoji + " Modo " + _0xe3b97d.nome + ": " + _0x411f1f);
    }
    const _0x42760a = {
      ativo: false,
      modo: null
    };
    const _0x5d4b22 = _0x9061d3[0]?.["saudacao"] || _0x42760a;
    let _0x3bdd4a;
    if (!_0x5d4b22.ativo) {
      _0x3bdd4a = '❌';
    } else {
      const _0x2ea5a9 = _0x5d4b22.modo === "texto" ? "📝 TEXTO" : "🔊 ÁUDIO";
      _0x3bdd4a = "✅ (" + _0x2ea5a9 + ')';
    }
    _0x46c3f6["MODOS DO BOT"].push("┃ 👋 Saudação: " + _0x3bdd4a);
    _0x46c3f6["OUTROS RECURSOS"].push("┃ 🔒 Só Administradores: " + _0x1676da(_0x9061d3[0]?.["soadm"]));
    _0x46c3f6["OUTROS RECURSOS"].push("┃ 🔄 Limitar Comando: " + _0x1676da(_0x9061d3[0]?.["Limitar_CMD"]));
    _0x46c3f6["OUTROS RECURSOS"].push("┃ 👋 Bem Vindo 1: " + _0x1676da(_0x9061d3[0]?.["wellcome"]?.[0]?.["bemvindo1"]));
    _0x46c3f6["OUTROS RECURSOS"].push("┃ 🎊 Bem Vindo 2: " + _0x1676da(_0x9061d3[0]?.["wellcome"]?.[1]?.["bemvindo2"]));
    _0x46c3f6["OUTROS RECURSOS"].push("┃ 🤖 Simi 1: " + _0x1676da(_0x9061d3[0]?.["simi1"]));
    _0x46c3f6["OUTROS RECURSOS"].push("┃ 🗣️ Simi 2: " + _0x1676da(_0x9061d3[0]?.["simi2"]));
    _0x46c3f6["OUTROS RECURSOS"].push("┃ 💬 Auto Resposta: " + _0x1676da(_0x9061d3[0]?.["autorepo"]));
    _0x46c3f6["OUTROS RECURSOS"].push("┃ 🖼️ Auto Figurinha: " + _0x1676da(_0x9061d3[0]?.["autosticker"]));
    _0x46c3f6["OUTROS RECURSOS"].push("┃ ⬇️ Auto Baixar: " + _0x1676da(_0x9061d3[0]?.["autobaixar"]));
    let _0x3b6923 = "╭━━━⊱「 PAINEL DE CONFIGS 」⊰━━━╮\n┃";
    _0x3b6923 += "\n┃ 📊 *Grupo:* " + _0x59da87;
    for (const [_0x572864, _0x46e0ea] of Object.entries(_0x46c3f6)) {
      _0x3b6923 += "\n┃\n┃ 📌 *" + _0x572864 + '*';
      _0x3b6923 += "\n" + _0x46e0ea.join("\n");
    }
    _0x3b6923 += "\n┃\n┃ 🔧 *COMANDOS PARA CONFIGURAR:*";
    _0x3b6923 += "\n┃ • " + _0x4967f3 + "antirecursos - Configurar Anti Recursos";
    _0x3b6923 += "\n┃ • " + _0x4967f3 + "modos - Configurar Modos e Outros Recursos";
    _0x3b6923 += "\n┃ • " + _0x4967f3 + "saudacao - Configurar Saudação";
    _0x3b6923 += "\n┃\n╰━━━⊱「 𝐂𝐎𝐍𝐅𝐈𝐆𝐔𝐑𝐀𝐂𝐎𝐄𝐒 」⊰━━━╯";
    return _0x1f361c(_0x3b6923);
  }
}, {
  'name': "reiniciar",
  'aliases': [],
  'category': "dono",
  'description': "Reinicia o bot",
  'longDescription': "Reinicia o bot completamente. Comando exclusivo para o dono do bot.",
  'usage': "reiniciar",
  'example': "reiniciar",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x36e24c,
  'requirements': {},
  'execute': async ({
    SoDono: _0x86771e,
    reply: _0x1f71da
  }) => {
    const _0x2b4a86 = {
      success: false,
      message: "Apenas o dono pode usar este comando"
    };
    if (!_0x86771e) {
      return _0x2b4a86;
    }
    setTimeout(async () => {
      _0x1f71da("Reiniciando..");
      setTimeout(async () => {
        process.exit();
      }, 1200);
    }, 1000);
    return true;
  }
}, {
  'name': "emoji",
  'aliases': ["semoji"],
  'category': "sticker",
  'description': "Converte emoji para sticker",
  'longDescription': "Converte um emoji para sticker no estilo da plataforma especificada.",
  'usage': "emoji 😊/whatsapp",
  'example': "emoji 🥺/apple",
  'menu': "sticker",
  'menuSection': "Conversão",
  'permissions': {},
  'requirements': _0x1ed0dc,
  'execute': async ({
    conn: _0x4ab791,
    info: _0xc92221,
    from: _0x32d22c,
    q: _0x24d5e4,
    prefix: _0x124489,
    acessAPI: _0xcab9b4,
    sendStickerFromUrl: _0x18c6d9,
    reply: _0x3fec2e
  }) => {
    try {
      if (!_0x24d5e4.trim()) {
        return _0x3fec2e("Exemplo: " + _0x124489 + "emoji ☹️/whatsapp");
      }
      var [_0x4f31f8, _0x30840c] = _0x24d5e4.split('/');
      var _0x80d69b = await _0xcab9b4.semoji(_0x4f31f8, _0x30840c);
      _0x18c6d9(_0x32d22c, _0x80d69b.rst);
      return true;
    } catch (_0x1aa2c6) {
      return {
        'success': false,
        'message': "Erro.." + _0x1aa2c6
      };
    }
  }
}, {
  'name': "emoji-mix",
  'aliases': ["emojimix"],
  'category': "sticker",
  'description': "Mistura dois emojis em um sticker",
  'longDescription': "Cria um sticker combinando dois emojis diferentes em uma única imagem.",
  'usage': "emoji-mix 😈+😇",
  'example': "emojimix 😂+😭",
  'menu': "sticker",
  'menuSection': "Conversão",
  'permissions': {},
  'requirements': _0x383ac7,
  'execute': async ({
    conn: _0x28e1af,
    info: _0x864060,
    from: _0x27fd32,
    q: _0x83dca3,
    command: _0xa605cf,
    prefix: _0x5d775f,
    acessAPI: _0x3054ec,
    Res_Aguarde: _0x2642fd,
    sendStickerFromUrl: _0x1a8301,
    reply: _0x257ba6
  }) => {
    var [_0x5bb0a7, _0x5b6b12] = _0x83dca3.trim().split('+');
    if (!_0x83dca3.includes('+')) {
      return _0x257ba6("Olá, está faltando o +\nExemplo: " + (_0x5d775f + _0xa605cf) + " 👿+😇");
    }
    try {
      _0x257ba6(_0x2642fd);
      _0x1a8301(_0x27fd32, _0x3054ec.emojimix(_0x5bb0a7, _0x5b6b12));
      return true;
    } catch (_0x45483a) {
      const _0xe70ed9 = {
        success: false,
        message: "*Ops não foi possivel fazer esse mix de emoji / Ou ocorreu algum problema no sistema..*"
      };
      return _0xe70ed9;
    }
  }
}, {
  'name': "sfundo",
  'aliases': [],
  'category': "imagem",
  'description': "Remove o fundo de uma imagem",
  'longDescription': "Processa uma imagem para remover o fundo, deixando apenas o objeto principal.",
  'usage': "sfundo [marque uma imagem]",
  'example': "sfundo",
  'menu': "imagem",
  'menuSection': "Edição",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x3949ec,
    info: _0x165195,
    from: _0x2ed05e,
    prefix: _0x1ea367,
    isMedia: _0x8c913e,
    acessAPI: _0x4ec753,
    Res_Aguarde: _0x57d9cd,
    upload: _0x278f3f,
    getFileBuffer: _0x4b9d4c,
    reply: _0xe4390f
  }) => {
    if (!_0x8c913e && !_0x165195.message.videoMessage || isQuotedImage) {
      _0xe4390f(_0x57d9cd);
      try {
        var _0x113886 = _0x165195?.["message"]?.["extendedTextMessage"]?.["contextInfo"]?.["quotedMessage"];
        var _0x8896d4 = _0x113886?.["viewOnceMessageV2"]?.["message"]?.["imageMessage"] || _0x113886?.["viewOnceMessage"]?.["message"]?.["imageMessage"] || _0x113886?.["imageMessage"];
        let _0x3dfb9b = await _0x4b9d4c(_0x8896d4, "image");
        var _0xa8f295 = await _0x278f3f(_0x3dfb9b);
        _0x3949ec.sendMessage(_0x2ed05e, {
          'image': {
            'url': _0x4ec753.sfundo(_0xa8f295.data.view.url)
          }
        });
        return true;
      } catch (_0x36fffe) {
        const _0x42dd72 = {
          success: false,
          message: "Erro, tente falar com o suporte, para saber o que ocorreu..."
        };
        return _0x42dd72;
      }
    } else {
      const _0x44ffd3 = {
        success: false,
        message: "Você tem que enviar uma imagem no whatsapp, e marcar com " + _0x1ea367 + "sfundo"
      };
      return _0x44ffd3;
    }
  }
}, {
  'name': "rename",
  'aliases': ["roubar"],
  'category': "sticker",
  'description': "Renomeia um sticker",
  'longDescription': "Altera o nome do pacote e autor de um sticker existente.",
  'usage': "rename nome/autor",
  'example': "rename MyPack/Author",
  'menu': "sticker",
  'menuSection': "Edição",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x31dbd5,
    info: _0x550fa9,
    from: _0x1eebf5,
    q: _0x3f3f7e,
    command: _0x41c53a,
    prefix: _0x5bcf00,
    getFileBuffer: _0x53f712,
    isQuotedSticker: _0x5f8d13,
    writeExifWebp: _0x15e34f,
    reply: _0x429af3
  }) => {
    try {
      if (!_0x5f8d13) {
        return _0x429af3("Marque uma figurinha...");
      }
      let _0x412003 = await _0x53f712(_0x550fa9.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, "sticker");
      let [_0x3b902f, _0x57c5ce] = _0x3f3f7e.split('/');
      if (!_0x3b902f) {
        return {
          'success': false,
          'message': "*Por favor escreva o formato correto: " + (_0x5bcf00 + _0x41c53a) + " nome/doAutor*"
        };
      }
      if (!_0x57c5ce) {
        _0x57c5ce = '‏';
      }
      const _0xc1056c = {
        packname: _0x3b902f,
        author: _0x57c5ce
      };
      let _0x10da33 = await _0x15e34f(_0x412003, _0xc1056c);
      if (!_0x10da33 || _0x10da33.length === 0) {
        const _0x1ab1d1 = {
          success: false,
          message: "Erro ao renomear a figurinha."
        };
        return _0x1ab1d1;
      }
      const _0x198d49 = {
        sticker: _0x10da33
      };
      const _0x4e5e5e = {
        quoted: _0x550fa9
      };
      await _0x31dbd5.sendMessage(_0x1eebf5, _0x198d49, _0x4e5e5e);
      return true;
    } catch (_0x2adb2a) {
      console.error("Erro ao renomear a figurinha:", _0x2adb2a);
      const _0x1fb34b = {
        success: false,
        message: "Ocorreu um erro ao tentar renomear a figurinha. Verifique os detalhes."
      };
      return _0x1fb34b;
    }
  }
}, {
  'name': "sticker",
  'aliases': ['s', 'st', "stk", 'f', "fstiker", "fsticker"],
  'category': "stickers",
  'description': "Cria figurinhas a partir de imagens ou vídeos",
  'longDescription': "Cria figurinhas a partir de imagens, vídeos ou gifs. Use os comandos s, st, stk, sticker para criar figurinhas normais, ou f, fstiker, fsticker para um formato diferente.",
  'usage': "sticker (marque uma imagem ou vídeo)",
  'example': "sticker",
  'menu': "media",
  'menuSection': "Figurinhas",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x342a62,
    info: _0x3b3f73,
    command: _0x5f2263,
    prefix: _0x235138,
    reply: _0x5bde82,
    Res_Aguarde: _0x1c61c9,
    DLT_FL: _0x5ddcf5,
    getFileBuffer: _0x2673d8,
    sendImageAsSticker: _0x55c420,
    sendVideoAsSticker: _0x4fa052,
    sendImageAsSticker2: _0xbc0f3f,
    sendVideoAsSticker2: _0x3140ff,
    from: _0x32336,
    FigPack: _0x5157f7,
    FigAuthor: _0x527ff6,
    hasAnyImage: _0x11a0db,
    hasAnyVideo: _0x243bdf,
    allImageMessage: _0x5c43c0,
    allVideoMessage: _0x8146e4
  }) => {
    try {
      const _0x47d73e = ['f', "fstiker", "fsticker"].includes(_0x5f2263);
      if (_0x11a0db) {
        try {
          _0x5bde82(_0x1c61c9);
          let _0x2fb8d2 = await _0x2673d8(_0x5c43c0, "image");
          let _0x5de963;
          if (_0x47d73e) {
            const _0x389906 = {
              packname: _0x5157f7,
              author: _0x527ff6
            };
            _0x5de963 = await _0x55c420(_0x342a62, _0x32336, _0x2fb8d2, _0x3b3f73, _0x389906);
          } else {
            const _0x4b7f66 = {
              packname: _0x5157f7,
              author: _0x527ff6
            };
            _0x5de963 = await _0xbc0f3f(_0x342a62, _0x32336, _0x2fb8d2, _0x3b3f73, _0x4b7f66);
          }
          await _0x5ddcf5(_0x5de963);
          return true;
        } catch (_0x28e886) {
          console.error("[STICKER ERROR] Erro ao processar imagem: " + _0x28e886.message);
          _0x5bde82("Erro ao processar imagem: " + _0x28e886.message);
          return false;
        }
      } else {
        if (_0x243bdf) {
          try {
            if (!_0x47d73e && _0x8146e4.seconds && _0x8146e4.seconds >= 11) {
              _0x5bde82("Vídeo deve ter no máximo 10 segundos para criar um sticker.");
              return false;
            }
            _0x5bde82(_0x1c61c9);
            let _0x24a0af = await _0x2673d8(_0x8146e4, "video");
            let _0x150a76;
            if (_0x47d73e) {
              const _0xfaa116 = {
                packname: _0x5157f7,
                author: _0x527ff6
              };
              _0x150a76 = await _0x4fa052(_0x342a62, _0x32336, _0x24a0af, _0x3b3f73, _0xfaa116);
            } else {
              const _0x3a03fe = {
                packname: _0x5157f7,
                author: _0x527ff6
              };
              _0x150a76 = await _0x3140ff(_0x342a62, _0x32336, _0x24a0af, _0x3b3f73, _0x3a03fe);
            }
            await _0x5ddcf5(_0x150a76);
            return true;
          } catch (_0x4405fe) {
            console.error("[STICKER ERROR] Erro ao processar vídeo: " + _0x4405fe.message);
            _0x5bde82("Erro ao processar vídeo: " + _0x4405fe.message);
            return false;
          }
        } else {
          _0x5bde82("Marque uma imagem, vídeo (até 10 segundos) ou visualização única para fazer figurinha com o comando " + _0x235138 + _0x5f2263);
          return false;
        }
      }
    } catch (_0x1a836a) {
      console.error("[STICKER ERROR] Erro geral: " + _0x1a836a.message);
      _0x5bde82("Ocorreu um erro inesperado: " + _0x1a836a.message);
      return false;
    }
  }
}, {
  'name': "rvisu",
  'aliases': ["rvvisu", "rvvisuunica", "revelarvisu", "revelarvisuunica"],
  'category': "midia",
  'description': "Revela o conteúdo de uma visualização única",
  'longDescription': "Permite visualizar novamente mensagens de visualização única (view once).",
  'usage': "rvisu [responda a uma visualização única]",
  'example': "rvisu",
  'menu': "midia",
  'menuSection': "Visualização",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x58727e,
    info: _0x2a7ecb,
    from: _0x1d6906,
    Os_Returns: _0x5d3347,
    getFileBuffer: _0x598c18,
    reply: _0x43295f
  }) => {
    if (_0x5d3347(false, true, false)["true"]) {
      return _0x43295f(_0x5d3347(false, true, false).txt);
    }
    var _0x27e81c = _0x2a7ecb?.["message"]?.["extendedTextMessage"]?.["contextInfo"]?.["quotedMessage"];
    var _0x1a0913 = _0x27e81c?.["viewOnceMessageV2"]?.["message"]?.["imageMessage"] || _0x27e81c?.["viewOnceMessageV2"]?.["message"]?.["videoMessage"] || _0x27e81c?.["viewOnceMessageV2"]?.["message"]?.["audioMessage"];
    if (!_0x1a0913) {
      _0x1a0913 = _0x27e81c?.["imageMessage"] || _0x27e81c?.["videoMessage"] || _0x27e81c?.["audioMessage"];
      if (_0x1a0913 && !_0x1a0913.viewOnce) {
        const _0x436e7b = {
          success: false,
          message: "Esta mensagem não é uma visualização única."
        };
        return _0x436e7b;
      }
    }
    const _0x548931 = {
      success: false,
      message: "Você deve marcar uma visualização única, para eu revelar."
    };
    if (!_0x1a0913) {
      return _0x548931;
    }
    bla = await _0x598c18(_0x1a0913, _0x1a0913.mimetype.split('/')[0]);
    _0x58727e.sendMessage(_0x1d6906, {
      [_0x1a0913.mimetype.split('/')[0]]: bla,
      'mimetype': _0x1a0913.mimetype,
      'caption': _0x1a0913?.["caption"] ? "Revelando visualização única.\n\nLegenda: " + _0x1a0913.caption : "Revelando a visualização única."
    });
    return true;
  }
}, {
  'name': "toimg",
  'aliases': [],
  'category': "converter",
  'description': "Converte sticker para imagem",
  'longDescription': "Transforma um sticker estático em uma imagem normal.",
  'usage': "toimg [responda a um sticker]",
  'example': "toimg",
  'menu': "converter",
  'menuSection': "Mídia",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x4cd746,
    info: _0x435249,
    from: _0x3e9f86,
    isQuotedSticker: _0x1d4708,
    Res_Aguarde: _0xb0f1f6,
    getFileBuffer: _0x43a434,
    reply: _0x1912ea
  }) => {
    const _0x2879a0 = {
      success: false,
      message: "❌ adesivo de resposta um ❌"
    };
    if (!_0x1d4708) {
      return _0x2879a0;
    }
    try {
      _0x1912ea(_0xb0f1f6);
      buff = await _0x43a434(_0x435249.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, "sticker");
      const _0x57515d = {
        image: buff
      };
      const _0x393d11 = {
        quoted: _0x435249
      };
      _0x4cd746.sendMessage(_0x3e9f86, _0x57515d, _0x393d11)["catch"](_0x17e638 => {
        console.log(_0x17e638);
        _0x1912ea("ERRO!!");
        return false;
      });
      return true;
    } catch {
      const _0xdce05c = {
        success: false,
        message: "Erro.."
      };
      return _0xdce05c;
    }
  }
}, {
  'name': "placaloli",
  'aliases': [],
  'category': "placa",
  'description': "Cria placa com personagem de anime",
  'longDescription': "Gera uma imagem de uma personagem de anime segurando uma placa com o texto fornecido.",
  'usage': "placaloli [texto]",
  'example': "placaloli Aleatory",
  'menu': "logos",
  'menuSection': "Plaquinhas",
  'permissions': {},
  'requirements': _0x134440,
  'execute': async ({
    conn: _0xcd4f12,
    info: _0x13007d,
    from: _0x52d2bd,
    q: _0x3fc5d1,
    prefix: _0x12ced2,
    command: _0x1e9c3a,
    fetchJson: _0x46aa80,
    sendStickerFromUrl: _0x56bb9e,
    reply: _0x54cdf4
  }) => {
    if (!_0x3fc5d1.trim()) {
      return _0x54cdf4("Exemplo: " + (_0x12ced2 + _0x1e9c3a) + " Aleatory");
    }
    _0x54cdf4("Aguarde..");
    lod = await _0x46aa80("https://nekobot.xyz/api/imagegen?type=kannagen&text=" + _0x3fc5d1);
    _0x56bb9e(_0x52d2bd, lod.message);
    return true;
  }
}, {
  'name': "angelwing",
  'aliases': ["hackneon", "fpsmascote", "equipemascote", "txtquadrinhos", "ffavatar", "mascotegame", "angelglx", "gizquadro", "wingeffect", "blackpink", "metalgold", "girlmascote", "logogame"],
  'category': "logos",
  'description': "Cria logotipos estilizados",
  'longDescription': "Gera logotipos com diversos efeitos visuais e estilos para jogos e outros usos.",
  'usage': "angelwing [texto]",
  'example': "angelwing bronxys",
  'menu': "logos",
  'menuSection': "Especiais",
  'permissions': {},
  'requirements': _0x1d441a,
  'execute': async ({
    conn: _0x4419eb,
    info: _0x3a92be,
    from: _0x1ae540,
    q: _0x233613,
    command: _0x2eed3b,
    prefix: _0x53c00c,
    acessAPI: _0x371470,
    Res_Aguarde: _0x4dd63c,
    reply: _0x188cf0
  }) => {
    try {
      if (!_0x233613.trim()) {
        return _0x188cf0("Digite algo, Exemplo: " + (_0x53c00c + _0x2eed3b) + " bronxys");
      }
      _0x188cf0(_0x4dd63c);
      ABC = await _0x371470.logos_eph(_0x233613.trim(), _0x2eed3b);
      const _0x373e94 = {
        url: ABC.resultado
      };
      const _0x20ffe4 = {
        image: _0x373e94
      };
      const _0x1f87ac = {
        quoted: _0x3a92be
      };
      _0x4419eb.sendMessage(_0x1ae540, _0x20ffe4, _0x1f87ac)["catch"](() => {
        return _0x188cf0("Erro..");
      });
      return true;
    } catch (_0x26fe27) {
      const _0x1cd6e1 = {
        success: false,
        message: "Erro..."
      };
      return _0x1cd6e1;
    }
  }
}, {
  'name': "fiction",
  'aliases': ["3dstone", "areia", "style", "blood", "pink", "cattxt", "neondevil", "carbon", "metalfire", "thunder", "vidro", "jokerlogo", "transformer", "demonfire", "jeans", "metalblue", "natal", "ossos", "asfalto", "break", "glitch2", "colaq", "neon3", "nuvem", "horror", "matrix", "berry", "luxury", "lava", "thunderv2", "neongreen", "neve", "neon", "neon1", "neon3d", "gelo", "3dgold", "lapis", "toxic", "demongreen", "rainbow", "halloween"],
  'category': "logos",
  'description': "Cria um logo com efeito especial",
  'longDescription': "Cria uma imagem com texto e efeito visual especial usando APIs de geração de logos.",
  'usage': "fiction [texto]",
  'example': "fiction bronxys",
  'menu': "principal",
  'menuSection': "Logos",
  'permissions': {},
  'requirements': _0x327ff0,
  'execute': async ({
    conn: _0x27fe40,
    info: _0xc9f947,
    from: _0x334459,
    q: _0x3b67f4,
    command: _0x1d5b81,
    prefix: _0xa8567f,
    acessAPI: _0x30c5fa,
    Res_Aguarde: _0x674624,
    bufferImg: _0x495292,
    reply: _0x3a881b
  }) => {
    try {
      if (!_0x3b67f4.trim()) {
        return _0x3a881b("Digite algo, Exemplo: " + (_0xa8567f + _0x1d5b81) + " bronxys");
      }
      _0x3a881b(_0x674624);
      ABC = await _0x30c5fa.logos(_0x3b67f4.trim(), _0x1d5b81);
      _0x495292(ABC.resultado);
      return true;
    } catch (_0x587724) {
      const _0x5c4761 = {
        success: false,
        message: "Erro..."
      };
      return _0x5c4761;
    }
  }
}, {
  'name': "shadow",
  'aliases': ["metalgold", "cup", "txtborboleta", "cemiterio", "efeitoneon", "harryp", "lobometal", "neon2", "madeira", "lovemsg3", "coffecup", "coffecup2", "florwooden", "narutologo", "fire", "romantic", "smoke", "papel", "lovemsg", "lovemsg2"],
  'category': "logos",
  'description': "Cria um logo com efeito especial alternativo",
  'longDescription': "Cria uma imagem com texto e efeito visual especial usando APIs de geração de logos com efeitos alternativos.",
  'usage': "shadow [texto]",
  'example': "shadow bronxys",
  'menu': "principal",
  'menuSection': "Logos",
  'permissions': {},
  'requirements': _0x14e4b0,
  'execute': async ({
    conn: _0x53cfe0,
    info: _0x55feeb,
    from: _0x1529b7,
    q: _0x478ade,
    command: _0x53eecb,
    prefix: _0x481c3c,
    acessAPI: _0x5c3b9f,
    Res_Aguarde: _0x129326,
    reply: _0x27252a
  }) => {
    try {
      if (!_0x478ade.trim()) {
        return _0x27252a("Digite algo, Exemplo: " + (_0x481c3c + _0x53eecb) + " bronxys");
      }
      _0x27252a(_0x129326);
      ABC = await _0x5c3b9f.logos_pht(_0x478ade.trim(), _0x53eecb);
      const _0x5add3a = {
        url: ABC.resultado.imageUrl
      };
      const _0x3e38b6 = {
        image: _0x5add3a
      };
      const _0x2f5874 = {
        quoted: _0x55feeb
      };
      _0x53cfe0.sendMessage(_0x1529b7, _0x3e38b6, _0x2f5874)["catch"](_0x355aae => {
        return _0x27252a("Erro..");
      });
      return true;
    } catch (_0x21fb02) {
      const _0x1366d2 = {
        success: false,
        message: "Erro..."
      };
      return _0x1366d2;
    }
  }
}, {
  'name': "metadinha",
  'aliases': [],
  'category': "imagens",
  'description': "Envia um par de imagens para metadinha",
  'longDescription': "Envia duas imagens relacionadas que formam um par para usar como foto de perfil combinada entre casais ou amigos.",
  'usage': "metadinha",
  'example': "metadinha",
  'menu': "principal",
  'menuSection': "Imagens",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x383579,
    from: _0x2a1457,
    acessAPI: _0x50566c,
    reply: _0x963bf4
  }) => {
    try {
      ABC = await _0x50566c.metadinha();
      const _0x4299d5 = {
        url: ABC.link1
      };
      const _0x4991f1 = {
        image: _0x4299d5
      };
      _0x383579.sendMessage(_0x2a1457, _0x4991f1)["catch"](() => {
        return _0x963bf4("Erro..");
      });
      const _0x22f5ff = {
        url: ABC.link2
      };
      const _0x117660 = {
        image: _0x22f5ff
      };
      _0x383579.sendMessage(_0x2a1457, _0x117660)["catch"](() => {
        return _0x963bf4("Erro..");
      });
      return true;
    } catch (_0x21afad) {
      const _0x449bc8 = {
        success: false,
        message: "Erro.."
      };
      return _0x449bc8;
    }
  }
}, {
  'name': "substituir",
  'aliases': [],
  'category': "dono",
  'description': "Substitui um arquivo do sistema",
  'longDescription': "Permite substituir arquivos do sistema do bot. Comando exclusivo para o dono do bot.",
  'usage': "substituir [caminho/arquivo]",
  'example': "substituir dados/NomeDoArquivo.txt",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x2a23ee,
  'requirements': _0x5adaa7,
  'execute': async ({
    conn: _0x43577c,
    info: _0x1b01fa,
    from: _0x1a1575,
    q: _0x2b4147,
    command: _0x262ab2,
    prefix: _0x2577bb,
    isMedia: _0xd16c8d,
    getFileBuffer: _0x2a2f72,
    getExtension: _0x28387f,
    isQuotedDocument: _0x300dab,
    getRandom: _0x4ffa7b,
    fs: _0x2f24f9,
    reply: _0x4c36a8,
    path: _0x11626c
  }) => {
    if (_0xd16c8d && !_0x1b01fa.message.videoMessage || _0x300dab) {
      media = _0x300dab ? _0x1b01fa.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : _0x1b01fa.message.documentMessage;
      rane = _0x4ffa7b('.' + (await _0x28387f(media.mimetype)));
      doc = await _0x2a2f72(media, "document");
      try {
        const _0x47ef2c = _0x11626c.join(__dirname, "../../");
        const _0x7a3db3 = _0x11626c.join(_0x47ef2c, _0x2b4147.replace(/^\.\//, ''));
        if (_0x2f24f9.existsSync(_0x7a3db3)) {
          const _0x543ebb = {
            flag: 'w'
          };
          _0x2f24f9.writeFileSync(_0x7a3db3, doc, _0x543ebb);
          const _0x1e1674 = {
            text: "Arquivo substituído com sucesso.."
          };
          const _0x577780 = {
            quoted: _0x1b01fa
          };
          _0x43577c.sendMessage(_0x1a1575, _0x1e1674, _0x577780);
        } else {
          _0x4c36a8("Erro ao substituir o arquivo. O arquivo não existe.");
        }
      } catch (_0x3e35ed) {
        _0x4c36a8("Erro ao manipular o arquivo: " + _0x3e35ed.message);
        return false;
      }
      setTimeout(() => {
        process.exit();
      }, 1000);
      return true;
    } else {
      const _0x2f2d9e = {
        success: false,
        message: "Marque o documento ou arquivo.."
      };
      return _0x2f2d9e;
    }
  }
}, {
  'name': "adicionar",
  'aliases': [],
  'category': "dono",
  'description': "Adiciona um novo arquivo ao sistema",
  'longDescription': "Permite adicionar novos arquivos ao sistema do bot. Comando exclusivo para o dono do bot.",
  'usage': "adicionar [caminho/arquivo]",
  'example': "adicionar dados/NomeDoArquivo.txt",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x295f16,
  'requirements': _0x55d6bf,
  'execute': async ({
    conn: _0x559895,
    info: _0x69db4f,
    from: _0x33d592,
    q: _0x3216d3,
    command: _0x14ba45,
    prefix: _0x22e3e0,
    isMedia: _0x457e0e,
    getFileBuffer: _0x13a428,
    getExtension: _0x2c3838,
    isQuotedDocument: _0x2b951e,
    getRandom: _0x36bd84,
    fs: _0x3169a1,
    reply: _0x541fee,
    path: _0x26e9d3
  }) => {
    if (_0x457e0e && !_0x69db4f.message.videoMessage || _0x2b951e) {
      media = _0x2b951e ? _0x69db4f.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : _0x69db4f.message.documentMessage;
      rane = _0x36bd84('.' + (await _0x2c3838(media.mimetype)));
      doc = await _0x13a428(media, "document");
      try {
        const _0x464f82 = _0x26e9d3.join(__dirname, "../../");
        const _0x128739 = _0x26e9d3.join(_0x464f82, _0x3216d3.replace(/^\.\//, ''));
        if (_0x3169a1.existsSync(_0x128739)) {
          _0x541fee("Erro ao adicionar o arquivo. O arquivo já existe.");
          return false;
        } else {
          const _0x6ea0c5 = _0x26e9d3.dirname(_0x128739);
          if (!_0x3169a1.existsSync(_0x6ea0c5)) {
            const _0x1f2eaf = {
              recursive: true
            };
            _0x3169a1.mkdirSync(_0x6ea0c5, _0x1f2eaf);
          }
          const _0x289518 = {
            flag: 'wx'
          };
          _0x3169a1.writeFileSync(_0x128739, doc, _0x289518);
          const _0x1f75b3 = {
            text: "Arquivo adicionado com sucesso.."
          };
          const _0x2139a3 = {
            quoted: _0x69db4f
          };
          _0x559895.sendMessage(_0x33d592, _0x1f75b3, _0x2139a3);
        }
      } catch (_0x3593a2) {
        _0x541fee("Erro ao manipular o arquivo: " + _0x3593a2.message);
        return false;
      }
      setTimeout(() => {
        process.exit();
      }, 1000);
      return true;
    } else {
      const _0x5d8fdc = {
        success: false,
        message: "Marque o documento ou arquivo.."
      };
      return _0x5d8fdc;
    }
  }
}, {
  'name': "index-bot",
  'aliases': [],
  'category': "dono",
  'description': "Atualiza o arquivo principal do bot",
  'longDescription': "Substitui o arquivo index.js do bot para atualização. Comando exclusivo para o dono do bot.",
  'usage': "index-bot",
  'example': "index-bot",
  'menu': "dono",
  'menuSection': "Sistema",
  'permissions': _0x4e3b12,
  'requirements': {},
  'execute': async ({
    conn: _0x359569,
    info: _0xf6a58f,
    from: _0x5aeea8,
    isMedia: _0x844802,
    getFileBuffer: _0x453dff,
    getExtension: _0x3ef2d7,
    getRandom: _0x3e9191,
    fs: _0x4191b5,
    reply: _0x5cdb14,
    isQuotedDocument: _0x4c40de,
    path: _0x3b7083
  }) => {
    if (_0x844802 && !_0xf6a58f.message.videoMessage || _0x4c40de) {
      media = _0x4c40de ? _0xf6a58f.message.extendedTextMessage.contextInfo.quotedMessage.documentMessage : _0xf6a58f.message.documentMessage;
      rane = _0x3e9191('.' + (await _0x3ef2d7(media.mimetype)));
      doc = await _0x453dff(media, "document");
      try {
        const _0x34a875 = _0x3b7083.join(__dirname, "../../index.js");
        _0x4191b5.writeFileSync(_0x34a875, doc);
        const _0x2c0c15 = {
          text: "Atualizado Com Sucesso.."
        };
        const _0x541aba = {
          quoted: _0xf6a58f
        };
        _0x359569.sendMessage(_0x5aeea8, _0x2c0c15, _0x541aba);
      } catch (_0xb20209) {
        _0x5cdb14("Erro ao atualizar index.js: " + _0xb20209.message);
        return false;
      }
      setTimeout(() => {
        process.exit();
      }, 1000);
      return true;
    } else {
      const _0x5cccf2 = {
        success: false,
        message: "Marque o documento ou o arquivo que deseja enviar pra determinar pasta ou substituir.."
      };
      return _0x5cccf2;
    }
  }
}, {
  'name': "attp",
  'aliases': ["attp2"],
  'category': "sticker",
  'description': "Cria sticker de texto animado",
  'longDescription': "Cria um sticker com texto animado colorido ou com efeitos.",
  'usage': "attp [texto]",
  'example': "attp bronxys",
  'menu': "sticker",
  'menuSection': "Stickers",
  'permissions': {},
  'requirements': _0x268366,
  'execute': async ({
    conn: _0x3a7621,
    info: _0x415889,
    from: _0x4cf161,
    q: _0x3b6ff2,
    command: _0x30a124,
    prefix: _0x396a51,
    acessAPI: _0x5eed31,
    Res_Aguarde: _0x849316,
    reply: _0x1c2a96
  }) => {
    try {
      if (!_0x3b6ff2.trim()) {
        return _0x1c2a96("Exemplo: " + (_0x396a51 + _0x30a124) + " bronxys");
      }
      _0x1c2a96(_0x849316);
      const _0x2e8bc9 = {
        quoted: _0x415889
      };
      _0x3a7621.sendMessage(_0x4cf161, {
        'sticker': {
          'url': _0x5eed31.attp(_0x3b6ff2.trim(), _0x30a124)
        }
      }, _0x2e8bc9)["catch"](_0xa509a2 => {
        return _0x1c2a96("Erro..");
      });
      return true;
    } catch (_0x16380a) {
      const _0x4323a7 = {
        success: false,
        message: "Erro.."
      };
      return _0x4323a7;
    }
  }
}, {
  'name': "gerarnick",
  'aliases': ["fazernick", "nick"],
  'category': "ferramentas",
  'description': "Gera nicks personalizados com letras modificadas",
  'longDescription': "Cria várias versões do seu nick com letras estilizadas e formatos diferentes.",
  'usage': "gerarnick [nome]",
  'example': "gerarnick bronxys",
  'menu': "principal",
  'menuSection': "Ferramentas",
  'permissions': {},
  'requirements': _0x22a1f4,
  'execute': async ({
    q: _0x21b35d,
    acessAPI: _0x4c6e17,
    ANT_LTR_MD_EMJ: _0x573645,
    prefix: _0x5d8962,
    command: _0x4cd292,
    reply: _0x15bc54
  }) => {
    try {
      if (_0x573645(_0x21b35d)) {
        return _0x15bc54("Não pode letras modificadas nem emoji..");
      }
      if (!_0x21b35d.trim()) {
        return _0x15bc54("Escreveva um nome para eu enviar ele com letras modificadas, Exemplo: " + (_0x5d8962 + _0x4cd292) + " bronxys");
      }
      ABC = await _0x4c6e17.gerarnick(_0x21b35d.trim());
      AB = "Lista com base no Nick informado, para encontrar melhor fonte para utilizar:\n\n";
      for (i of ABC) {
        AB += i + "\n\n";
      }
      _0x15bc54(AB);
      return true;
    } catch (_0x416d28) {
      return {
        'success': false,
        'message': "Erro.. " + _0x416d28
      };
    }
  }
}, {
  'name': "chance",
  'aliases': [],
  'category': "brincadeira",
  'description': "Calcula a chance de algo acontecer",
  'longDescription': "Calcula aleatoriamente a chance de algo acontecer com base na pergunta feita pelo usuário.",
  'usage': "chance [algo]",
  'example': "chance do luuck ser gay",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x1e9608,
  'requirements': _0x1b4c33,
  'execute': async ({
    conn: _0x96f9ca,
    info: _0x57e3a9,
    from: _0x2ada84,
    body: _0x4fbb6b,
    args: _0x5b92af,
    prefix: _0x3ff95f,
    mention: _0xcb733f,
    reply: _0x32cb12
  }) => {
    const _0x3c5e33 = {
      text: "Você precisa digitar da forma correta\nExemplo: " + _0x3ff95f + "chance do luuck ser gay"
    };
    const _0x17d27f = {
      quoted: _0x57e3a9
    };
    if (_0x5b92af.length < 1) {
      return _0x96f9ca.sendMessage(_0x2ada84, _0x3c5e33, _0x17d27f);
    }
    random = '' + Math.floor(Math.random() * 100);
    hasil = "A chance " + _0x4fbb6b.slice(8) + "\n\né de... " + random + '%';
    _0xcb733f(hasil);
    return true;
  }
}, {
  'name': "sorte",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mostra a sua sorte de hoje",
  'longDescription': "Calcula aleatoriamente a sua sorte de hoje em uma porcentagem de 50% a 100%.",
  'usage': "sorte",
  'example': "sorte",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x4c10c2,
  'requirements': {},
  'execute': async ({
    Res_SoGrupo: _0x32f428,
    isGroup: _0x1b33cd,
    mention: _0x464f83,
    reply: _0x515cf9
  }) => {
    _0x464f83("A sua sorte de agora é de... " + (Math.floor(Math.random() * 50) + 50) + "% 🍀");
    return true;
  }
}, {
  'name': "nazista",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mostra o quanto você é nazista",
  'longDescription': "Calcula aleatoriamente o seu nível de nazismo em uma porcentagem de 0 a 110%.",
  'usage': "nazista",
  'example': "nazista",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x300263,
  'requirements': {},
  'execute': async ({
    conn: _0x183c94,
    info: _0x59d239,
    from: _0x2cbce4,
    sender_ou_n: _0x25d232,
    imgnazista: _0x4c6ebc,
    reply: _0x38da7
  }) => {
    _0x183c94.sendMessage(_0x2cbce4, {
      'text': "❰ Pesquisando a sua ficha de nazista : @" + _0x25d232.split('@')[0] + " aguarde... ❱",
      'mentions': [_0x25d232]
    });
    setTimeout(async () => {
      random = '' + Math.floor(Math.random() * 110);
      const _0x4acbea = {
        url: _0x4c6ebc
      };
      const _0x194866 = {
        quoted: _0x59d239
      };
      _0x183c94.sendMessage(_0x2cbce4, {
        'image': _0x4acbea,
        'caption': "O quanto você é nazista? \n\n「 @" + _0x25d232.split('@')[0] + " 」Você é: ❰ " + random + "% ❱nazista 卐",
        'mentions': [_0x25d232]
      }, _0x194866);
    }, 7000);
    return true;
  }
}, {
  'name': "golpe",
  'aliases': ["golpista"],
  'category': "brincadeira",
  'description': "Mostra o quanto você é golpista",
  'longDescription': "Calcula aleatoriamente o seu nível de golpista em uma porcentagem de 0 a 110%.",
  'usage': "golpe",
  'example': "golpe",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0xb11a5a,
  'requirements': {},
  'execute': async ({
    conn: _0x4f7e60,
    info: _0x1ca2cd,
    from: _0x18708f,
    sender_ou_n: _0xa07347,
    rnkgolpista: _0x5dda1c,
    reply: _0x25d547
  }) => {
    _0x4f7e60.sendMessage(_0x18708f, {
      'text': "❰ Pesquisando a sua ficha de golpista : @" + _0xa07347.split('@')[0] + " aguarde... ❱",
      'mentions': [_0xa07347]
    });
    setTimeout(async () => {
      const _0xd90385 = {
        url: _0x5dda1c
      };
      const _0x533009 = {
        quoted: _0x1ca2cd
      };
      _0x4f7e60.sendMessage(_0x18708f, {
        'image': _0xd90385,
        'caption': "O quanto você é Golpista? \n\n「 @" + _0xa07347.split('@')[0] + " 」Você é: ❰ " + Math.floor(Math.random() * 110) + "% ❱Golpista 😈",
        'mentions': [_0xa07347]
      }, _0x533009);
    }, 7000);
    return true;
  }
}, {
  'name': "gay",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mostra o quanto você é gay",
  'longDescription': "Calcula aleatoriamente o seu nível de homossexualidade em uma porcentagem de 0 a 110% e dá um comentário baseado no resultado.",
  'usage': "gay",
  'example': "gay",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x32d2bd,
  'requirements': {},
  'execute': async ({
    conn: _0x414d5b,
    info: _0x470a61,
    from: _0x6e94fb,
    sender_ou_n: _0xfbbae8,
    imggay: _0x187249,
    reply: _0x22839f
  }) => {
    _0x414d5b.sendMessage(_0x6e94fb, {
      'text': "❰ Pesquisando a sua ficha de gay : @" + _0xfbbae8.split('@')[0] + " aguarde... ❱",
      'mentions': [_0xfbbae8]
    });
    const _0x2e1a4b = {
      '20': "hmm... você é hetero😔",
      '30': "+/- boiola"
    };
    _0x2e1a4b['40'] = "tenho minha desconfiança...😑";
    _0x2e1a4b['50'] = "você é ou não?🧐";
    _0x2e1a4b['51'] = "você é né?😏";
    _0x2e1a4b["110"] = "você é gay🙈";
    setTimeout(() => {
      const _0x391820 = Math.floor(Math.random() * 111);
      let _0x2cb763 = '';
      const _0x58852b = Object.keys(_0x2e1a4b).map(Number).sort((_0x40eec7, _0x565f99) => _0x40eec7 - _0x565f99);
      for (const _0x3721f8 of _0x58852b) {
        if (_0x391820 <= _0x3721f8) {
          _0x2cb763 = _0x2e1a4b[_0x3721f8];
          break;
        }
      }
      if (!_0x2cb763) {
        _0x2cb763 = _0x2e1a4b[110];
      }
      const _0x4622e0 = {
        url: _0x187249
      };
      const _0x3348bb = {
        quoted: _0x470a61
      };
      _0x414d5b.sendMessage(_0x6e94fb, {
        'image': _0x4622e0,
        'caption': "O quanto você é gay? \n\n 「 @" + _0xfbbae8.split('@')[0] + " 」Você é: ❰ " + _0x391820 + "% ❱ gay 🏳️‍🌈\n\n" + _0x2cb763,
        'mentions': [_0xfbbae8]
      }, _0x3348bb);
    }, 7000);
    return true;
  }
}, {
  'name': "feio",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mostra o quanto você é feio",
  'longDescription': "Calcula aleatoriamente o seu nível de feiura em uma porcentagem de 0 a 110% e dá um comentário baseado no resultado.",
  'usage': "feio",
  'example': "feio",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x547a01,
  'requirements': {},
  'execute': async ({
    conn: _0x541ade,
    info: _0x49f6eb,
    from: _0x316b3a,
    sender_ou_n: _0x31f0e2,
    imgfeio: _0x3920d0,
    reply: _0x435a20
  }) => {
    _0x541ade.sendMessage(_0x316b3a, {
      'text': "❰ Pesquisando a sua ficha de feio : @" + _0x31f0e2.split('@')[0] + " aguarde... ❱",
      'mentions': [_0x31f0e2]
    });
    const _0x5979a2 = {
      '20': "É não é feio",
      '30': "+/- feio"
    };
    _0x5979a2['33'] = "Da pra pegar umas(ns) novinha(o) ainda";
    _0x5979a2['35'] = "É fein, mas tem baum coração";
    _0x5979a2['37'] = "Feio e preguiçoso(a), vai se arrumar praga feia";
    _0x5979a2['40'] = "FeiN, mas não existe gente feia, existe gente que não conhece os produtos jequity";
    _0x5979a2['42'] = "Nada que uma maquiagem e se arrumar, que não resolva 🥴";
    _0x5979a2['45'] = "Feio mas nada que um saco na cabeça não resolva né!?";
    _0x5979a2['47'] = "Feio mas tem lábia pra pegar várias novinha";
    _0x5979a2['50'] = "você é Feio, mas não se encherga 🧐";
    _0x5979a2["110"] = "você é Feio demais 🙈";
    setTimeout(() => {
      const _0x143732 = Math.floor(Math.random() * 111);
      let _0x3dc67e = '';
      const _0x591467 = Object.keys(_0x5979a2).map(Number).sort((_0x2b0c7b, _0x20d444) => _0x2b0c7b - _0x20d444);
      for (const _0x3da5db of _0x591467) {
        if (_0x143732 <= _0x3da5db) {
          _0x3dc67e = _0x5979a2[_0x3da5db];
          break;
        }
      }
      if (!_0x3dc67e) {
        _0x3dc67e = _0x5979a2[110];
      }
      const _0x28eb79 = {
        url: _0x3920d0
      };
      const _0x4f78b8 = {
        quoted: _0x49f6eb
      };
      _0x541ade.sendMessage(_0x316b3a, {
        'image': _0x28eb79,
        'caption': "O quanto você é feio? \n\n 「 @" + _0x31f0e2.split('@')[0] + " 」Você é: ❰ " + _0x143732 + "% ❱ feio 🙉\n\n" + _0x3dc67e,
        'mentions': [_0x31f0e2]
      }, _0x4f78b8);
    }, 7000);
    return true;
  }
}, {
  'name': "corno",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mostra o quanto você é corno",
  'longDescription': "Calcula aleatoriamente o seu nível de corno em uma porcentagem de 0 a 110%.",
  'usage': "corno",
  'example': "corno",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x554110,
  'requirements': {},
  'execute': async ({
    conn: _0x3d64a5,
    info: _0x49ec5c,
    from: _0x58ccbc,
    sender_ou_n: _0x8834e8,
    imgcorno: _0x4f8fa7,
    reply: _0x3b5241
  }) => {
    _0x3d64a5.sendMessage(_0x58ccbc, {
      'text': "❰ Pesquisando a ficha de corno : @" + _0x8834e8.split('@')[0] + ", aguarde... ❱",
      'mentions': [_0x8834e8]
    });
    setTimeout(() => {
      const _0x151cf0 = Math.floor(Math.random() * 111);
      const _0x3a260c = {
        url: _0x4f8fa7
      };
      const _0x194f19 = {
        quoted: _0x49ec5c
      };
      _0x3d64a5.sendMessage(_0x58ccbc, {
        'image': _0x3a260c,
        'caption': "O quanto você é corno? \n\n「 @" + _0x8834e8.split('@')[0] + " 」Você é: ❰ " + _0x151cf0 + "% ❱ corno 🐃",
        'mentions': [_0x8834e8]
      }, _0x194f19);
    }, 7000);
    return true;
  }
}, {
  'name': "vesgo",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mostra o quanto você é vesgo",
  'longDescription': "Calcula aleatoriamente o seu nível de vesguice em uma porcentagem de 0 a 110%.",
  'usage': "vesgo",
  'example': "vesgo",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x2ecce2,
  'requirements': {},
  'execute': async ({
    conn: _0x3c45b6,
    info: _0x2ba486,
    from: _0x529034,
    sender_ou_n: _0x5c8fb5,
    imgvesgo: _0x45ae5a,
    reply: _0x1ef184
  }) => {
    _0x3c45b6.sendMessage(_0x529034, {
      'text': "❰ Pesquisando a ficha de vesgo : @" + _0x5c8fb5.split('@')[0] + ", aguarde... ❱",
      'mentions': [_0x5c8fb5]
    });
    setTimeout(() => {
      const _0x43e645 = Math.floor(Math.random() * 111);
      const _0x237d4c = {
        url: _0x45ae5a
      };
      const _0x4801a5 = {
        quoted: _0x2ba486
      };
      _0x3c45b6.sendMessage(_0x529034, {
        'image': _0x237d4c,
        'caption': "O quanto você é vesgo? \n\n「 @" + _0x5c8fb5.split('@')[0] + " 」Você é: ❰ " + _0x43e645 + "% ❱ Vesgo 🙄😆",
        'mentions': [_0x5c8fb5]
      }, _0x4801a5);
    }, 7000);
    return true;
  }
}, {
  'name': "bebado",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mostra o quanto você é bêbado",
  'longDescription': "Calcula aleatoriamente o seu nível de embriaguez em uma porcentagem de 0 a 110%.",
  'usage': "bebado",
  'example': "bebado",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x7be714,
  'requirements': {},
  'execute': async ({
    conn: _0x24b490,
    info: _0x58f289,
    from: _0x407e95,
    sender_ou_n: _0x2602de,
    imgbebado: _0x5addc4,
    reply: _0x5d820b
  }) => {
    _0x24b490.sendMessage(_0x407e95, {
      'text': "❰ Pesquisando a ficha de bebado : @" + _0x2602de.split('@')[0] + ", aguarde... ❱",
      'mentions': [_0x2602de]
    });
    setTimeout(() => {
      const _0x3b4129 = Math.floor(Math.random() * 111);
      const _0x45d8ca = {
        url: _0x5addc4
      };
      const _0x5ba7e1 = {
        quoted: _0x58f289
      };
      _0x24b490.sendMessage(_0x407e95, {
        'image': _0x45d8ca,
        'caption': "O quanto você é bebado? \n\n「 @" + _0x2602de.split('@')[0] + " 」Você é: ❰ " + _0x3b4129 + "% ❱ Bêbado 🤢🥵🥴",
        'mentions': [_0x2602de]
      }, _0x5ba7e1);
    }, 7000);
    return true;
  }
}, {
  'name': "gado",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mostra o quanto você é gado",
  'longDescription': "Calcula aleatoriamente o seu nível de gado em uma porcentagem de 0 a 110%.",
  'usage': "gado",
  'example': "gado",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x18c85b,
  'requirements': {},
  'execute': async ({
    conn: _0x11435c,
    info: _0x4d618b,
    from: _0x572b4a,
    sender_ou_n: _0xba5625,
    imggado: _0x2cbb47,
    reply: _0x281d56
  }) => {
    _0x11435c.sendMessage(_0x572b4a, {
      'text': "❰ Pesquisando a ficha de gado : @" + _0xba5625.split('@')[0] + ", aguarde... ❱",
      'mentions': [_0xba5625]
    });
    setTimeout(() => {
      const _0x163ae2 = Math.floor(Math.random() * 111);
      const _0x55b24a = {
        url: _0x2cbb47
      };
      const _0x195ca8 = {
        quoted: _0x4d618b
      };
      _0x11435c.sendMessage(_0x572b4a, {
        'image': _0x55b24a,
        'caption': "O quanto você é gado? \n\n「 @" + _0xba5625.split('@')[0] + " 」Você é: ❰ " + _0x163ae2 + "% ❱ gado 🐂",
        'mentions': [_0xba5625]
      }, _0x195ca8);
    }, 7000);
    return true;
  }
}, {
  'name': "gostoso",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mostra o quanto você é gostoso",
  'longDescription': "Calcula aleatoriamente o seu nível de gostosura (masculino) em uma porcentagem de 0 a 110%.",
  'usage': "gostoso",
  'example': "gostoso",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x903234,
  'requirements': {},
  'execute': async ({
    conn: _0x41bd61,
    info: _0x2b0627,
    from: _0x178d40,
    sender_ou_n: _0x6e502e,
    imggostoso: _0x5e6585,
    reply: _0x15ab8a
  }) => {
    _0x41bd61.sendMessage(_0x178d40, {
      'text': "❰ Pesquisando a sua ficha de gostoso : @" + _0x6e502e.split('@')[0] + " aguarde... ❱",
      'mentions': [_0x6e502e]
    });
    setTimeout(() => {
      const _0x297cb4 = Math.floor(Math.random() * 111);
      const _0x5d2ac9 = {
        url: _0x5e6585
      };
      const _0x3b15f0 = {
        quoted: _0x2b0627
      };
      _0x41bd61.sendMessage(_0x178d40, {
        'image': _0x5d2ac9,
        'caption': "O quanto você é gostoso? 😏\n\n「 @" + _0x6e502e.split('@')[0] + " 」Você é: ❰ " + _0x297cb4 + "% ❱ gostoso 😝",
        'gifPlayback': true,
        'mentions': [_0x6e502e]
      }, _0x3b15f0);
    }, 7000);
    return true;
  }
}, {
  'name': "gostosa",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mostra o quanto você é gostosa",
  'longDescription': "Calcula aleatoriamente o seu nível de gostosura (feminino) em uma porcentagem de 0 a 110%.",
  'usage': "gostosa",
  'example': "gostosa",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x35dda7,
  'requirements': {},
  'execute': async ({
    conn: _0x46d156,
    info: _0x40664b,
    from: _0x5982f0,
    sender_ou_n: _0x579434,
    imggostosa: _0x6d5219,
    reply: _0x5c94d4
  }) => {
    _0x46d156.sendMessage(_0x5982f0, {
      'text': "❰ Pesquisando a sua ficha de gostosa : @" + _0x579434.split('@')[0] + " aguarde... ❱",
      'mentions': [_0x579434]
    });
    setTimeout(() => {
      const _0xd29f3b = Math.floor(Math.random() * 111);
      const _0x43b0b9 = {
        url: _0x6d5219
      };
      const _0x33b18a = {
        quoted: _0x40664b
      };
      _0x46d156.sendMessage(_0x5982f0, {
        'image': _0x43b0b9,
        'caption': "O quanto você é gostosa? 😏\n\n「 @" + _0x579434.split('@')[0] + " 」Você é: ❰ " + _0xd29f3b + "% ❱ gostosa 😳",
        'mentions': [_0x579434]
      }, _0x33b18a);
    }, 7000);
    return true;
  }
}, {
  'name': "matar",
  'aliases': ["mata"],
  'category': "brincadeira",
  'description': "Mata um membro do grupo (brincadeira)",
  'longDescription': "Simula matar um membro do grupo como forma de brincadeira, enviando um GIF com a menção do usuário.",
  'usage': "matar @usuário",
  'example': "matar @membro",
  'menu': "jogos",
  'menuSection': "Interação",
  'permissions': _0x59d105,
  'requirements': {},
  'execute': async ({
    conn: _0x1972a6,
    info: _0x17409b,
    from: _0x2c2f05,
    menc_os2: _0x123656,
    menc_jid2: _0xdd5457,
    matarcmd: _0x2c6da5,
    reply: _0x5e9a8b
  }) => {
    if (!_0x123656 || _0xdd5457[1]) {
      return _0x5e9a8b("Marque o alvo que você quer matar, a mensagem ou o @");
    }
    const _0x16b1db = {
      url: _0x2c6da5
    };
    const _0x31d924 = {
      quoted: _0x17409b
    };
    _0x1972a6.sendMessage(_0x2c2f05, {
      'video': _0x16b1db,
      'gifPlayback': true,
      'caption': "Você Acabou de matar o(a) @" + _0x123656.split('@')[0] + " 😈👹",
      'mentions': [_0x123656]
    }, _0x31d924);
    return true;
  }
}, {
  'name': "beijo",
  'aliases': [],
  'category': "brincadeira",
  'description': "Dá um beijo em um membro do grupo (brincadeira)",
  'longDescription': "Simula dar um beijo em um membro do grupo como forma de brincadeira, enviando um GIF aleatório com a menção do usuário.",
  'usage': "beijo @usuário",
  'example': "beijo @membro",
  'menu': "jogos",
  'menuSection': "Interação",
  'permissions': _0x24e15d,
  'requirements': {},
  'execute': async ({
    conn: _0x1ec549,
    info: _0x252f3e,
    from: _0x1abae3,
    menc_os2: _0x2f1873,
    menc_jid2: _0x247e8b,
    beijocmd: _0x3f528c,
    reply: _0x380530
  }) => {
    if (!_0x2f1873) {
      return _0x380530("Marque a pessoa que você quer beijar, a mensagem ou o @");
    }
    let _0x3b84d7 = _0x3f528c[Math.floor(Math.random() * _0x3f528c.length)];
    const _0x25a54a = {
      url: _0x3b84d7
    };
    const _0xe0e74b = {
      quoted: _0x252f3e
    };
    _0x1ec549.sendMessage(_0x1abae3, {
      'video': _0x25a54a,
      'gifPlayback': true,
      'caption': "Você deu um beijo gostoso na(o) @" + _0x2f1873.split('@')[0] + " 😁👉👈❤",
      'mentions': [_0x2f1873]
    }, _0xe0e74b);
    return true;
  }
}, {
  'name': "tapa",
  'aliases': [],
  'category': "brincadeira",
  'description': "Dá um tapa em um membro do grupo (brincadeira)",
  'longDescription': "Simula dar um tapa em um membro do grupo como forma de brincadeira, enviando um GIF com a menção do usuário.",
  'usage': "tapa @usuário",
  'example': "tapa @membro",
  'menu': "jogos",
  'menuSection': "Interação",
  'permissions': _0x4179ae,
  'requirements': {},
  'execute': async ({
    conn: _0x3b880a,
    info: _0x2f0725,
    from: _0x199cc5,
    menc_os2: _0x117a91,
    menc_jid2: _0x30325c,
    tapacmd: _0x368b23,
    reply: _0x4fa7a9
  }) => {
    if (!_0x117a91 || _0x30325c[1]) {
      return _0x4fa7a9("Marque o alvo que você quer dar um tapa, a mensagem ou o @");
    }
    const _0x158e73 = {
      url: _0x368b23
    };
    const _0x25e7aa = {
      quoted: _0x2f0725
    };
    _0x3b880a.sendMessage(_0x199cc5, {
      'video': _0x158e73,
      'gifPlayback': true,
      'caption': "Você Acabou de dar um tapa em @" + _0x117a91.split('@')[0] + " 🔥",
      'mentions': [_0x117a91]
    }, _0x25e7aa);
    return true;
  }
}, {
  'name': "chute",
  'aliases': ["chutar"],
  'category': "brincadeira",
  'description': "Dá um chute em um membro do grupo (brincadeira)",
  'longDescription': "Simula dar um chute em um membro do grupo como forma de brincadeira, enviando um GIF com a menção do usuário.",
  'usage': "chute @usuário",
  'example': "chute @membro",
  'menu': "jogos",
  'menuSection': "Interação",
  'permissions': _0x3b7e5b,
  'requirements': {},
  'execute': async ({
    conn: _0x4e78fb,
    info: _0x2e9618,
    from: _0x49c996,
    menc_os2: _0x42836f,
    menc_jid2: _0x394a6e,
    chutecmd: _0x455703,
    reply: _0x4ebd32
  }) => {
    if (!_0x42836f || _0x394a6e[1]) {
      return _0x4ebd32("Marque o alvo que você quer dar um chute, a mensagem ou o @");
    }
    const _0x5c451c = {
      url: _0x455703
    };
    const _0x9afee3 = {
      quoted: _0x2e9618
    };
    _0x4e78fb.sendMessage(_0x49c996, {
      'video': _0x5c451c,
      'gifPlayback': true,
      'caption': "Você Acabou de dar um chute em @" + _0x42836f.split('@')[0] + " 🤡",
      'mentions': [_0x42836f]
    }, _0x9afee3);
    return true;
  }
}, {
  'name': "dogolpe",
  'aliases': [],
  'category': "brincadeira",
  'description': "Mede o quanto alguém é golpista",
  'longDescription': "Calcula aleatoriamente o quanto um usuário mencionado é golpista em uma porcentagem de 0 a 100%.",
  'usage': "dogolpe @usuário",
  'example': "dogolpe @membro",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x185061,
  'requirements': {},
  'execute': async ({
    conn: _0x2d04e7,
    info: _0x5458be,
    from: _0x1504e2,
    menc_os2: _0x2ba60d,
    menc_jid2: _0x58147a,
    reply: _0x4aa664
  }) => {
    if (!_0x2ba60d || _0x58147a[1]) {
      return _0x4aa664("Marque a mensagem com o comando ou marque o @ do usuário..");
    }
    random = '' + Math.floor(Math.random() * 100);
    _0x2d04e7.sendMessage(_0x1504e2, {
      'text': "*GOLPISTA ENCONTRADO👉🏻*\n\n*GOLPISTA* : *@" + _0x2ba60d.split('@')[0] + "*\n*PORCENTAGEM DO GOLPE* : " + random + "%😂\n\nEle(a) gosta de ferir sentimentos 😢",
      'mentions': [_0x2ba60d]
    });
    return true;
  }
}, {
  'name': "casal",
  'aliases': ["shippo", "shipo"],
  'category': "brincadeira",
  'description': "Forma um casal aleatório no grupo",
  'longDescription': "Seleciona dois membros do grupo aleatoriamente (ou os mencionados) e cria um \"casal\", calculando uma porcentagem de compatibilidade.",
  'usage': "casal",
  'example': "casal @membro1 @membro2",
  'menu': "jogos",
  'menuSection': "Brincadeiras",
  'permissions': _0x5c10eb,
  'requirements': {},
  'execute': async ({
    conn: _0x13d6a7,
    info: _0x67f0c0,
    from: _0x3f6707,
    menc_prt: _0x438e7b,
    menc_jid2: _0x1fd7eb,
    groupMembers: _0x558502,
    TEXTOS_GERAL: _0x1fcd2e,
    NomeDoBot: _0x315b45,
    reply: _0x2cce93
  }) => {
    const _0x4fc2ae = {
      oOTtm: function (_0x3a8cce, _0x1f3cf6) {
        return _0x3a8cce > _0x1f3cf6;
      }
    };
    _0x4fc2ae.GcpXN = function (_0x40fd8f, _0x20083b) {
      return _0x40fd8f * _0x20083b;
    };
    _0x4fc2ae.Glqgx = function (_0x4b48dc, _0x19d27a) {
      return _0x4b48dc && _0x19d27a;
    };
    _0x4fc2ae.sTSmH = function (_0x3c5848, _0x57bbe6) {
      return _0x3c5848 * _0x57bbe6;
    };
    _0x4fc2ae.bQliZ = function (_0xc94ce9, _0x3d0c15) {
      return _0xc94ce9 == _0x3d0c15;
    };
    _0x4fc2ae.azzjj = "#porcentagem#";
    _0x4fc2ae.beAVl = function (_0x47fd55, _0x22dea2) {
      return _0x47fd55 + _0x22dea2;
    };
    let _0x4d106a = [];
    rn = _0x438e7b ? _0x438e7b : _0x1fd7eb?.["length"] > 1 ? _0x1fd7eb[0] : _0x558502[Math.floor(_0x4fc2ae.GcpXN(Math.random(), _0x558502.length))].id;
    rn2 = _0x4fc2ae.Glqgx(_0x438e7b, !_0x1fd7eb) ? _0x558502[Math.floor(_0x4fc2ae.sTSmH(Math.random(), _0x558502.length))].id : _0x4fc2ae.bQliZ(_0x1fd7eb?.["length"], 1) ? _0x1fd7eb[0] : _0x1fd7eb?.["length"] > 1 ? _0x1fd7eb[1] : _0x558502[Math.floor(_0x4fc2ae.sTSmH(Math.random(), _0x558502.length))].id;
    var _0x40e8ac = _0x1fcd2e.TEXTO_COMANDO_CASAL.replaceAll(_0x4fc2ae.azzjj, _0x4fc2ae.beAVl(Math.floor(_0x4fc2ae.sTSmH(Math.random(), 100)), '%')) + "\n\n☈ 💑 @" + rn?.["split"]('@')[0] + "\nﮩ٨ـﮩﮩ٨ـ♡ﮩ٨ـﮩﮩ٨ـ\n☈ 💑 @" + rn2?.["split"]('@')[0] + "\n\nBot: " + _0x315b45;
    _0x4d106a.push(rn);
    _0x4d106a.push(rn2);
    const _0xd9f271 = {
      url: _0x1fcd2e.LINK_COMANDO_CASAL
    };
    const _0x5df8db = {
      image: _0xd9f271,
      caption: _0x40e8ac,
      mentions: _0x4d106a
    };
    _0x13d6a7.sendMessage(_0x3f6707, _0x5df8db);
    return true;
  }
}, {
  'name': "ultimosativos",
  'aliases': ["ativos", "ativosagora"],
  'category': "grupo",
  'description': "Mostra os membros ativos na última hora",
  'longDescription': "Exibe uma lista dos usuários que estiveram ativos no grupo durante a última hora, ordenados por tempo de atividade.",
  'usage': "ultimosativos",
  'example': "ultimosativos",
  'menu': ["principal", "grupo"],
  'menuSection': "Estatísticas",
  'permissions': _0x1d9c72,
  'requirements': {},
  'execute': async ({
    conn: _0x53804a,
    info: _0x50d32b,
    from: _0x5b856f,
    Res_SoGrupo: _0x4dae42,
    Res_SoAdm: _0x5d6ca9,
    isGroup: _0x3e4e8f,
    isGroupAdmins: _0x5db11a,
    prefix: _0x114a7c,
    countMessage: _0x1474d2,
    reply: _0xb82dd5
  }) => {
    if (!_0x3e4e8f) {
      return _0xb82dd5(_0x4dae42);
    }
    if (!_0x5db11a) {
      return _0xb82dd5(_0x5d6ca9);
    }
    try {
      const _0x57e897 = _0x1474d2.find(_0x190b2a => _0x190b2a.groupId === _0x5b856f);
      if (!_0x57e897) {
        const _0x277360 = {
          success: false,
          message: "❌ Nenhum dado de contador encontrado para este grupo."
        };
        return _0x277360;
      }
      const _0x1de0a9 = JSON.parse(_0x57e897.numbers || '[]');
      if (_0x1de0a9.length === 0) {
        const _0x311205 = {
          success: false,
          message: "❌ Não há usuários registrados no contador deste grupo."
        };
        return _0x311205;
      }
      const _0x2264db = Date.now() - 3600000;
      const _0x5afee5 = _0x1de0a9.filter(_0x2deed8 => _0x2deed8.lastActivity && _0x2deed8.lastActivity > _0x2264db);
      _0x5afee5.sort((_0x6edbb1, _0x4a8c17) => _0x4a8c17.lastActivity - _0x6edbb1.lastActivity);
      if (_0x5afee5.length === 0) {
        const _0x2f477d = {
          success: false,
          message: "📊 *USUÁRIOS ATIVOS NA ÚLTIMA HORA*\n\nNenhum usuário esteve ativo na última hora neste grupo."
        };
        return _0x2f477d;
      }
      let _0x5cd013 = "📊 *USUÁRIOS ATIVOS NA ÚLTIMA HORA*\n\n";
      _0x5cd013 += "*Total de ativos:* " + _0x5afee5.length + " de " + _0x1de0a9.length + " membros\n\n";
      const _0x539cc7 = [];
      for (const _0x1ce0cf of _0x5afee5) {
        const _0x384a38 = _0x1ce0cf.id.split('@')[0];
        _0x539cc7.push(_0x1ce0cf.id);
        const _0x361e6b = Math.floor((Date.now() - _0x1ce0cf.lastActivity) / 60000);
        let _0x41c2ae;
        if (_0x361e6b < 1) {
          _0x41c2ae = "agora mesmo";
        } else if (_0x361e6b === 1) {
          _0x41c2ae = "1 minuto atrás";
        } else {
          _0x41c2ae = _0x361e6b + " minutos atrás";
        }
        const _0x798619 = _0x1ce0cf.nick || "Sem nome";
        _0x5cd013 += "👤 @" + _0x384a38 + "\n";
        _0x5cd013 += "Nome: " + _0x798619 + "\n";
        _0x5cd013 += "Última atividade: " + _0x41c2ae + "\n\n";
      }
      _0x5cd013 += "💡 *Dica:* Use " + _0x114a7c + "contadordados para ver todos os usuários do grupo.";
      const _0x1e0fa5 = {
        text: _0x5cd013,
        mentions: _0x539cc7
      };
      await _0x53804a.sendMessage(_0x5b856f, _0x1e0fa5);
      return true;
    } catch (_0x38ac20) {
      console.error("Erro ao obter usuários ativos:", _0x38ac20);
      const _0x43a144 = {
        success: false,
        message: "❌ Erro ao processar dados de usuários ativos: " + _0x38ac20.message
      };
      return _0x43a144;
    }
  }
}, {
  'name': "rankativos",
  'aliases': ["rankativo"],
  'category': "grupo",
  'description': "Mostra ranking dos membros mais ativos do grupo",
  'longDescription': "Exibe um ranking dos usuários mais ativos no grupo, considerando todos os tipos de interação (mensagens, comandos, mídias).",
  'usage': "rankativos [quantidade]",
  'example': "rankativos 10",
  'menu': ["principal", "grupo"],
  'menuSection': "Estatísticas",
  'permissions': _0x20928e,
  'requirements': {},
  'execute': async ({
    from: _0x11991b,
    q: _0x101b60,
    isGroup: _0x51aeec,
    Res_SoGrupo: _0x42a58a,
    LIMPARDOCNT_QUEMJASAIU: _0x7740cb,
    countMessage: _0x1ae2e9,
    mentions: _0x3a5155
  }) => {
    await _0x7740cb();
    try {
      const _0x395dce = _0x1ae2e9.find(_0x36eedf => _0x36eedf.groupId === _0x11991b);
      const _0xb059fb = {
        success: false,
        message: "Não há dados de mensagens para este grupo."
      };
      if (!_0x395dce) {
        return _0xb059fb;
      }
      const _0xadc9c0 = _0x44ec3d => {
        if (Array.isArray(_0x44ec3d)) {
          return _0x44ec3d;
        }
        if (typeof _0x44ec3d === "string") {
          return JSON.parse(_0x44ec3d);
        }
        if (_0x44ec3d && typeof _0x44ec3d === "object") {
          return Object.values(_0x44ec3d);
        }
        return [];
      };
      let _0x2d2e91 = _0xadc9c0(_0x395dce.numbers).filter(Boolean);
      const _0xffdac9 = {
        success: false,
        message: "Não há dados de atividade para exibir neste grupo."
      };
      if (!_0x2d2e91.length) {
        return _0xffdac9;
      }
      _0x2d2e91 = _0x2d2e91.map(_0x21d907 => ({
        ..._0x21d907,
        'total': (_0x21d907.messages || 0) + (_0x21d907.cmd_messages || 0) + (_0x21d907.figus || 0) + (_0x21d907.imagens || 0) + (_0x21d907.videos || 0) + (_0x21d907.audios || 0)
      })).filter(_0x78c28 => _0x78c28.id && _0x78c28.total > 0).sort((_0x2afa0a, _0x4082d8) => _0x4082d8.total - _0x2afa0a.total);
      const _0x4a9687 = {
        success: false,
        message: "Não há membros ativos para exibir no ranking."
      };
      if (!_0x2d2e91.length) {
        return _0x4a9687;
      }
      const _0x5d654b = Math.min(Math.max(parseInt(_0x101b60) || 5, 1), Math.min(_0x2d2e91.length, 20));
      const _0x1b8233 = _0x2d2e91.slice(0, _0x5d654b).map((_0x8b0542, _0x4239d9) => {
        const _0x21996a = _0x4239d9 + 1;
        return "\n╭────────────⊷\n│" + (['🥇', '🥈', '🥉'][_0x21996a - 1] || '🏅') + " " + _0x21996a + "º : @" + _0x8b0542.id.split('@')[0] + "\n├────────────⊷\n│ 📊 *Total de atividade:* " + _0x8b0542.total + "\n│ 📩 *Mensagens de texto:* " + (_0x8b0542.messages || 0) + "\n│ ⚙️ *Comandos:* " + (_0x8b0542.cmd_messages || 0) + "\n│ 🎨 *Figurinhas:* " + (_0x8b0542.figus || 0) + "\n│ 🖼️ *Imagens:* " + (_0x8b0542.imagens || 0) + "\n│ 🎬 *Vídeos:* " + (_0x8b0542.videos || 0) + "\n│ 🎵 *Áudios:* " + (_0x8b0542.audios || 0) + "\n│ 📱 *Dispositivo:* " + (_0x8b0542.aparelho || "Desconhecido") + "\n╰────────────⊷";
      }).join("\n");
      const _0x41c5f7 = "\n└──────────────⊷\n𖣘⃟ Consulta realizada com sucesso!\n📊 Total de membros ativos: " + _0x2d2e91.length;
      await _0x3a5155("┌───────────────⊷\n│ 𖣘⃟ RANK DOS MAIS ATIVOS 𖣘⃟\n│ ⋆ Do grupo ⋆\n└───────────────⊷\n" + _0x1b8233 + _0x41c5f7, _0x2d2e91.slice(0, _0x5d654b).map(_0x35a0a7 => _0x35a0a7.id), true);
      const _0x5ecf26 = {
        success: true
      };
      return _0x5ecf26;
    } catch (_0x535d66) {
      console.error("Erro ao processar ranking:", _0x535d66);
      const _0xe9fa87 = {
        success: false,
        message: "❌ Erro ao processar ranking: " + _0x535d66.message
      };
      return _0xe9fa87;
    }
  }
}, {
  'name': "rankativosg",
  'aliases': [],
  'category': "grupo",
  'description': "Mostra ranking dos membros mais ativos em todos os grupos",
  'longDescription': "Exibe um ranking consolidado dos usuários mais ativos em todos os grupos onde o bot está presente.",
  'usage': "rankativosg",
  'example': "rankativosg",
  'menu': ["principal", "grupo"],
  'menuSection': "Estatísticas",
  'permissions': _0x4236ad,
  'requirements': {},
  'execute': async ({
    from: _0x100d6e,
    isGroup: _0x27f184,
    isLevelingOn: _0x21cc6c,
    Res_SoGrupo: _0x531993,
    LIMPARDOCNT_QUEMJASAIU: _0x585d2e,
    countMessage: _0x2c8078,
    XPManager: _0x224649,
    mentions: _0x7c1c09
  }) => {
    const _0x3e7c43 = {
      success: false,
      message: _0x531993
    };
    if (!_0x27f184) {
      return _0x3e7c43;
    }
    await _0x585d2e();
    try {
      let _0x3b1ab1 = {};
      for (let _0x2ba154 of _0x2c8078) {
        try {
          let _0x27c226 = JSON.parse(_0x2ba154.numbers);
          if (!Array.isArray(_0x27c226)) {
            continue;
          }
          for (let _0x1eaadf of _0x27c226) {
            if (!_0x3b1ab1[_0x1eaadf.id]) {
              _0x3b1ab1[_0x1eaadf.id] = {
                'id': _0x1eaadf.id,
                'messages': 0x0,
                'cmd_messages': 0x0,
                'figus': 0x0,
                'imagens': 0x0,
                'videos': 0x0,
                'audios': 0x0,
                'aparelho': _0x1eaadf.aparelho || "Desconhecido"
              };
            }
            _0x3b1ab1[_0x1eaadf.id].messages += _0x1eaadf.messages || 0;
            _0x3b1ab1[_0x1eaadf.id].cmd_messages += _0x1eaadf.cmd_messages || 0;
            _0x3b1ab1[_0x1eaadf.id].figus += _0x1eaadf.figus || 0;
            _0x3b1ab1[_0x1eaadf.id].imagens += _0x1eaadf.imagens || 0;
            _0x3b1ab1[_0x1eaadf.id].videos += _0x1eaadf.videos || 0;
            _0x3b1ab1[_0x1eaadf.id].audios += _0x1eaadf.audios || 0;
          }
        } catch (_0x54f318) {
          console.error("Erro ao processar grupo:", _0x54f318);
          continue;
        }
      }
      let _0x360ebe = Object.values(_0x3b1ab1);
      _0x360ebe.forEach(_0x45b54e => {
        _0x45b54e.total = _0x45b54e.messages + _0x45b54e.cmd_messages + _0x45b54e.figus + _0x45b54e.imagens + _0x45b54e.videos + _0x45b54e.audios;
      });
      _0x360ebe.sort((_0x41309b, _0x10d61b) => _0x10d61b.total - _0x41309b.total);
      _0x360ebe = _0x360ebe.slice(0, 10);
      let _0x11c3ff = "┌───────────────⊷\n│ 𖣘⃟ RANK DOS MAIS ATIVOS 𖣘⃟\n│ ⋆ Em todos os grupos ⋆\n└───────────────⊷\n";
      for (let _0x51ee58 = 0; _0x51ee58 < _0x360ebe.length; _0x51ee58++) {
        const _0xaaa94a = _0x360ebe[_0x51ee58];
        let _0x5add65 = null;
        if (_0x21cc6c) {
          const _0x1f1993 = await _0x224649.getOrCreateUser(_0x100d6e, _0xaaa94a.id);
          if (_0x1f1993) {
            try {
              _0x5add65 = await _0x224649.getPatente(_0x1f1993.level || 1, _0x100d6e);
            } catch (_0x150b9a) {
              console.error("Erro ao buscar patente:", _0x150b9a);
            }
          }
        }
        _0x11c3ff += "\n╭──────────\n│" + (_0x51ee58 + 1) + "º : @" + _0xaaa94a.id.split('@')[0] + "\n├──────────\n";
        _0x11c3ff += "│ 📊 Total de atividade: " + _0xaaa94a.total + "\n";
        _0x11c3ff += "│ 📩 Mensagens: " + _0xaaa94a.messages + "\n";
        _0x11c3ff += "│ ⚙️ Comandos: " + _0xaaa94a.cmd_messages + "\n";
        _0x11c3ff += "│ 🎨 Figurinhas: " + _0xaaa94a.figus + "\n";
        _0x11c3ff += "│ 🖼️ Imagens: " + _0xaaa94a.imagens + "\n";
        _0x11c3ff += "│ 🎬 Vídeos: " + _0xaaa94a.videos + "\n";
        _0x11c3ff += "│ 🎵 Áudios: " + _0xaaa94a.audios + "\n";
        _0x11c3ff += "│ 📱 Dispositivo: " + _0xaaa94a.aparelho;
        if (_0x5add65) {
          _0x11c3ff += "\n│ 🎖️ Patente: " + _0x5add65;
        }
        _0x11c3ff += "\n╰──────────";
      }
      _0x11c3ff += "\n└──────────────⊷\n𖣘⃟ Consulta realizada com sucesso!";
      await _0x7c1c09(_0x11c3ff, _0x360ebe.map(_0x79f3de => _0x79f3de.id), true);
      return true;
    } catch (_0x4e4cf6) {
      console.error("Erro ao processar ranking global:", _0x4e4cf6);
      const _0x54e492 = {
        success: false,
        message: "❌ Erro ao processar ranking global: " + _0x4e4cf6.message
      };
      return _0x54e492;
    }
  }
}, {
  'name': "rankfigurinhas",
  'aliases': [],
  'category': "grupo",
  'description': "Mostra ranking dos usuários que mais enviaram figurinhas",
  'longDescription': "Exibe um ranking dos usuários que mais enviaram figurinhas no grupo atual.",
  'usage': "rankfigurinhas [quantidade]",
  'example': "rankfigurinhas 10",
  'menu': ["principal", "grupo"],
  'menuSection': "Estatísticas",
  'permissions': _0x1d79c3,
  'requirements': {},
  'execute': async ({
    from: _0x525f81,
    q: _0x2afcef,
    isGroup: _0x4f6fc4,
    isLevelingOn: _0x3c5d46,
    IS_sistemGold: _0x3dc244,
    EmojiBot: _0x12352f,
    Res_SoGrupo: _0xce0143,
    countMessage: _0x206aec,
    XPManager: _0x46b6e8,
    GoldDB: _0x172d64,
    mentions: _0x33b0dd
  }) => {
    const _0xdbb752 = {
      success: false,
      message: _0xce0143
    };
    if (!_0x4f6fc4) {
      return _0xdbb752;
    }
    try {
      let _0x4eacbc = _0x206aec.find(_0x360452 => _0x360452.groupId === _0x525f81);
      const _0x1f8e68 = {
        success: false,
        message: "Não há dados de mensagens para este grupo."
      };
      if (!_0x4eacbc) {
        return _0x1f8e68;
      }
      let _0x54ab1e;
      try {
        _0x54ab1e = JSON.parse(_0x4eacbc.numbers);
        if (!Array.isArray(_0x54ab1e)) {
          _0x54ab1e = [];
        }
      } catch (_0x35cd77) {
        console.error("Erro ao processar dados:", _0x35cd77);
        _0x54ab1e = [];
      }
      _0x54ab1e.sort((_0x328c77, _0x3b9696) => (_0x3b9696.figus || 0) - (_0x328c77.figus || 0));
      let _0x559ba6 = _0x2afcef ? parseInt(_0x2afcef) : 5;
      _0x54ab1e = _0x54ab1e.slice(0, _0x559ba6);
      let _0x8c63c8;
      if (_0x3dc244) {
        _0x8c63c8 = await _0x172d64.getGroupData(_0x525f81);
      }
      const _0x42c923 = _0x8c63c8 ? JSON.parse(_0x8c63c8.usuarios) : [];
      let _0x1d4a94 = "╔┉✼┉═༺◈✼" + _0x12352f + "✼◈༻═┉✼┉╗\n║RANK DAS FIGURINHAS DO GRUPO\n╚┉✼┉═༺◈✼" + _0x12352f + "✼◈༻═┉✼┉╝\n";
      for (let _0x4d0a58 = 0; _0x4d0a58 < _0x54ab1e.length; _0x4d0a58++) {
        const _0x4ef0b3 = _0x54ab1e[_0x4d0a58];
        let _0x236278 = null;
        if (_0x3c5d46) {
          const _0x569222 = await _0x46b6e8.getOrCreateUser(_0x525f81, _0x4ef0b3.id);
          if (_0x569222) {
            try {
              _0x236278 = await _0x46b6e8.getPatente(_0x569222.level || 1, _0x525f81);
            } catch (_0x3d1f34) {
              console.error("Erro ao buscar patente:", _0x3d1f34);
            }
          }
        }
        const _0x20a420 = _0x3dc244 ? _0x42c923.find(_0x2fccba => _0x2fccba.id === _0x4ef0b3.id)?.["gold"] || 0 : null;
        _0x1d4a94 += "\n╔┉┉┉┉┉┉┉┉┉┉┉┉┉┉╗\n║ " + (_0x4d0a58 + 1) + "º : @" + _0x4ef0b3.id.split('@')[0] + "\n╚┉┉┉┉┉┉┉┉┉┉┉┉┉┉╝\n║ " + _0x12352f + " Figurinhas: " + (_0x4ef0b3.figus || 0) + "\n║ " + _0x12352f + " Mensagens: " + (_0x4ef0b3.messages || 0) + "\n║ " + _0x12352f + " Comandos dados: " + (_0x4ef0b3.cmd_messages || 0) + (_0x236278 ? "\n║ " + _0x12352f + " Patente: " + _0x236278 : '') + "\n║ " + _0x12352f + " Conectado em: " + (_0x4ef0b3.aparelho || "Desconhecido") + (_0x3dc244 ? "\n║ " + _0x12352f + " Gold: " + _0x20a420 : '') + "\n╚┉┉┉┉┉┉┉┉┉┉┉┉┉┉╝";
      }
      await _0x33b0dd(_0x1d4a94, _0x54ab1e.map(_0x5cf230 => _0x5cf230.id), true);
      return true;
    } catch (_0x15c3a0) {
      console.error("Erro ao processar ranking de figurinhas:", _0x15c3a0);
      const _0x3c9863 = {
        success: false,
        message: "❌ Erro ao processar ranking de figurinhas: " + _0x15c3a0.message
      };
      return _0x3c9863;
    }
  }
}, {
  'name': "checkativo",
  'aliases': ["check", "atividade", "verificarativo"],
  'category': "grupo",
  'description': "Verifica a atividade de um membro no grupo",
  'longDescription': "Mostra informações detalhadas sobre a atividade de um membro no grupo, incluindo número de mensagens, comandos, mídias enviadas e mais.",
  'usage': "checkativo [@usuario]",
  'example': "checkativo @user123",
  'menu': ["principal", "grupo"],
  'menuSection': "Estatísticas",
  'permissions': _0x3552ae,
  'requirements': {},
  'execute': async ({
    from: _0x3a9d20,
    sender: _0x4050dc,
    menc_os2: _0x2597ab,
    isGroup: _0x47ddec,
    isLevelingOn: _0x250f52,
    IS_sistemGold: _0x2b1232,
    EmojiBot: _0xbdd489,
    LIMPARDOCNT_QUEMJASAIU: _0x5e59c7,
    countMessage: _0x4f6b3d,
    XPManager: _0x52bdd7,
    GoldDB: _0x4eaf99,
    mentions: _0x559bc6,
    contadorMsg: _0x2e0b43
  }) => {
    await _0x5e59c7();
    const _0x47552f = await _0x2e0b43();
    try {
      let _0x41f575 = _0x47552f.find(_0x9982f3 => _0x9982f3.groupId === _0x3a9d20);
      const _0x570156 = {
        success: false,
        message: "Não há dados de mensagens para este grupo."
      };
      if (!_0x41f575) {
        return _0x570156;
      }
      let _0x12dfb9 = _0x2597ab || _0x4050dc;
      let _0x38977f;
      try {
        _0x38977f = JSON.parse(_0x41f575.numbers);
        if (!Array.isArray(_0x38977f)) {
          _0x38977f = [];
        }
      } catch (_0x4df217) {
        console.error("Erro ao parsear dados de membros:", _0x4df217);
        _0x38977f = [];
      }
      let _0x2af9f5 = _0x38977f.find(_0x3b0439 => _0x3b0439.id === _0x12dfb9);
      let _0x4f505a = 0;
      if (_0x2b1232) {
        try {
          const _0x34bf9f = await _0x4eaf99.getGroupData(_0x3a9d20);
          if (_0x34bf9f?.["usuarios"]) {
            const _0x34f3d8 = Array.isArray(_0x34bf9f.usuarios) ? _0x34bf9f.usuarios : JSON.parse(_0x34bf9f.usuarios || '[]');
            _0x4f505a = _0x34f3d8.find(_0x5d5e2d => _0x5d5e2d.id === _0x12dfb9)?.["gold"] || 0;
          }
        } catch (_0x3fc670) {
          console.error("Erro ao buscar dados de gold:", _0x3fc670);
        }
      }
      let _0x3b57dc = "╔┉✼┉═༺◈✼" + _0xbdd489 + "✼◈༻═┉✼┉╗\n║CONSULTA DE ATIVIDADE\n╚┉✼┉═༺◈✼" + _0xbdd489 + "✼◈༻═┉✼┉╝";
      if (_0x2af9f5) {
        let _0x467dd3 = null;
        if (_0x250f52) {
          const _0x4a56b0 = await _0x52bdd7.getOrCreateUser(_0x3a9d20, _0x12dfb9);
          if (_0x4a56b0) {
            try {
              _0x467dd3 = await _0x52bdd7.getPatente(_0x4a56b0.level || 1, _0x3a9d20);
            } catch (_0x535f96) {
              console.error("Erro ao buscar patente:", _0x535f96);
            }
          }
        }
        _0x3b57dc += "\n╔┉┉┉┉┉┉┉┉┉┉┉┉┉┉╗\n║@" + _0x2af9f5.id.split('@')[0] + "\n╚┉┉┉┉┉┉┉┉┉┉┉┉┉┉╝\n";
        _0x3b57dc += "║ " + _0xbdd489 + " Mensagens: " + (_0x2af9f5.messages || 0) + "\n";
        _0x3b57dc += "║ " + _0xbdd489 + " Comandos dados: " + (_0x2af9f5.cmd_messages || 0) + "\n";
        if (_0x467dd3) {
          _0x3b57dc += "║ " + _0xbdd489 + " Patente: " + _0x467dd3 + "\n";
        }
        _0x3b57dc += "║ " + _0xbdd489 + " Conectado em: " + (_0x2af9f5.aparelho || "Desconhecido") + "\n";
        _0x3b57dc += "║ " + _0xbdd489 + " Figurinhas enviadas: " + (_0x2af9f5.figus || 0) + "\n";
        _0x3b57dc += "║ " + _0xbdd489 + " Imagens enviadas: " + (_0x2af9f5.imagens || 0) + "\n";
        _0x3b57dc += "║ " + _0xbdd489 + " Vídeos enviados: " + (_0x2af9f5.videos || 0) + "\n";
        _0x3b57dc += "║ " + _0xbdd489 + " Áudios enviados: " + (_0x2af9f5.audios || 0) + "\n";
        if (_0x2b1232) {
          _0x3b57dc += "║ " + _0xbdd489 + " Gold: " + _0x4f505a + "\n";
        }
        _0x3b57dc += "╚┉┉┉┉┉┉┉┉┉┉┉┉┉┉╝";
      } else {
        _0x3b57dc += "\n╔┉┉┉┉┉┉┉┉┉┉┉┉┉┉╗\n║ @" + _0x12dfb9.split('@')[0] + "\n╚┉┉┉┉┉┉┉┉┉┉┉┉┉┉╝\n";
        _0x3b57dc += "║ " + _0xbdd489 + " Mensagens: 0\n";
        _0x3b57dc += "║ " + _0xbdd489 + " Comandos dados: 0\n";
        _0x3b57dc += "║ " + _0xbdd489 + " Figurinhas: 0\n";
        _0x3b57dc += "║ " + _0xbdd489 + " Imagens: 0\n";
        _0x3b57dc += "║ " + _0xbdd489 + " Vídeos: 0\n";
        _0x3b57dc += "║ " + _0xbdd489 + " Áudios: 0\n";
        _0x3b57dc += "╚┉┉┉┉┉┉┉┉┉┉┉┉┉┉╝";
      }
      await _0x559bc6(_0x3b57dc, [_0x12dfb9], true);
      return true;
    } catch (_0x534bb9) {
      console.error("Erro ao verificar atividade:", _0x534bb9);
      const _0x238e52 = {
        success: false,
        message: "❌ Erro ao verificar atividade: " + _0x534bb9.message
      };
      return _0x238e52;
    }
  }
}, {
  'name': ["rankgay", "rankgado", "rankcorno", "rankgostoso", "rankgostosa", "rankkenga", "rankhetero", "ranknazista", "rankgolpe", "rankotaku", "rankpau"],
  'aliases': ["rankgays", "rankgados", "rankcornos", "rankgostosos", "rankgostosas", "rankkengas", "rankheteros", "ranknazistas", "rankgolpista", "rankgolpistas", "rankotakus"],
  'category': "jogos",
  'description': "Mostra rankings diversos do grupo",
  'longDescription': "Cria rankings aleatórios dos membros do grupo sem repetir usuários",
  'usage': "rankgay | rankgado | rankcorno | etc...",
  'example': "rankgay",
  'menu': "jogos",
  'menuSection': "Diversão",
  'permissions': _0x42fc9,
  'requirements': {},
  'execute': async ({
    command: _0x345b2e,
    groupMembers: _0x59460a,
    groupName: _0x168ec1,
    Res_SoGrupo: _0x8ac86,
    Res_SoModoBN: _0x59a56c,
    isModobn: _0x4c7198,
    isGroup: _0x37db4e,
    mencionarIMG: _0x5c1ee7,
    rnkgay: _0x1685b2,
    rnkgado: _0x2049b1,
    rnkcorno: _0x447d7a,
    rnkgostoso: _0x427223,
    rnkgostosa: _0x4ad6af,
    rnkhetero: _0x4bd836,
    rnknazista: _0x1f2046,
    rnkgolpista: _0xf2170e,
    rnkotaku: _0x5b5a8e,
    rnkpau: _0x27dbf8
  }) => {
    const _0x9880ab = {
      commands: ["rankgay", "rankgays"],
      title: "🤖RANK DOS 5 MAIS GAYS DO GRUPO",
      emoji: "🏳‍🌈",
      image: _0x1685b2,
      showGroupName: true
    };
    const _0x441cc7 = {
      commands: ["rankgado", "rankgados"],
      title: "RANK DOS 5 MAIS GADO DO GRUPO",
      emoji: "🐂🐃",
      image: _0x2049b1,
      showGroupName: false
    };
    const _0x36d80e = {
      commands: ["rankcorno", "rankcornos"],
      title: "RANK DOS 5 MAIS CORNO DO GRUPO",
      emoji: '🐂',
      image: _0x447d7a,
      showGroupName: false
    };
    const _0x2c8a0c = {
      commands: ["rankgostoso", "rankgostosos"],
      "title": "RANK DOS 5 MAIS GOSTOSOS DO GRUPO",
      "emoji": "😏🔥",
      "image": _0x427223,
      showGroupName: false
    };
    const _0x4151de = {
      commands: ["rankgostosa", "rankgostosas"],
      title: "RANK DAS 5 MAIS GOSTOSAS DO GRUPO",
      emoji: "😏🔥",
      image: _0x4ad6af,
      showGroupName: false
    };
    const _0x509670 = {
      commands: ["rankkenga", "rankkengas"],
      "title": "RANK DAS 5 MAIS KENGAS DO GRUPO",
      "emoji": "👱‍♀️🔥",
      "image": _0x4ad6af,
      showGroupName: false
    };
    const _0x1b4b5e = {
      commands: ["rankhetero", "rankheteros"],
      title: "🗿RANK DOS 5 MAIS HETEROS DO GRUPO",
      emoji: '🗿',
      image: _0x4bd836,
      showGroupName: true
    };
    const _0x18976b = {
      commands: ["ranknazista", "ranknazistas"],
      title: "💂‍♂RANK DOS 5 MAIS NAZISTAS DO GRUPO",
      emoji: "卐🤡",
      image: _0x1f2046,
      showGroupName: false
    };
    const _0x334570 = {
      commands: ["rankgolpe", "rankgolpista", "rankgolpistas"],
      title: "🦹‍♂️ RANK DOS 5 MAIS GOLPISTA DO GRUPO",
      emoji: '😈',
      image: _0xf2170e,
      showGroupName: false
    };
    const _0x356393 = {
      commands: ["rankotaku", "rankotakus"],
      title: "㊙ RANK DOS 5 MAIS OTAKU DO GRUPO",
      emoji: "( ˶•̀ _•́ ˶)",
      image: _0x5b5a8e,
      showGroupName: false
    };
    const _0x2cbaf3 = {
      commands: ["rankpau"],
      title: "RANK DOS 5 PAU MAIOR DO GRUPO",
      emoji: '📏',
      image: _0x27dbf8,
      showGroupName: false,
      type: "description",
      descriptions: ["Pequeno pra cact, se mata maluco 🥴", "Pequenininho chega ser até fofo 🥺", "Menor que meu dedo mindinho pequeno demais 😑", "Até que dá sentir, tá na média 😌", "Grandinho 🥵", "Grande até", "Gigantesco igual meu braço 😖", "Enorme quase chega no útero 🤧", "Grandão demais em, e uii 🤯", "Vara de pegar manga, grande demais, como sai na rua assim??", "Que grandão em, nasceu metade animal 😳"]
    };
    const _0x136139 = {
      gay: _0x9880ab,
      gado: _0x441cc7,
      corno: _0x36d80e,
      gostoso: _0x2c8a0c,
      gostosa: _0x4151de,
      kenga: _0x509670,
      hetero: _0x1b4b5e
    };
    _0x136139.nazista = _0x18976b;
    _0x136139.golpe = _0x334570;
    _0x136139.otaku = _0x356393;
    _0x136139.pau = _0x2cbaf3;
    function _0x3e5397(_0x31a711, _0x5c7af7 = 5) {
      const _0x1fb328 = [..._0x31a711].sort(() => 0.5 - Math.random());
      return _0x1fb328.slice(0, Math.min(_0x5c7af7, _0x31a711.length));
    }
    let _0x47d1f5 = null;
    for (const [_0xa1d388, _0x3284ba] of Object.entries(_0x136139)) {
      if (_0x3284ba.commands.includes(_0x345b2e)) {
        _0x47d1f5 = _0x3284ba;
        break;
      }
    }
    const _0x1e30fb = {
      success: false,
      message: "Comando de ranking não reconhecido"
    };
    if (!_0x47d1f5) {
      return _0x1e30fb;
    }
    const _0x4658bb = _0x3e5397(_0x59460a, 5);
    if (_0x4658bb.length === 0) {
      return {
        'success': false,
        'message': "Não há membros suficientes no grupo para criar o ranking"
      };
    }
    let _0x2d1047 = _0x47d1f5.showGroupName && _0x168ec1 ? '*' + _0x47d1f5.title + " [ " + _0x168ec1 + " ]" + _0x47d1f5.emoji + "*\n\n" : '*' + _0x47d1f5.title + " " + _0x47d1f5.emoji + "*\n\n";
    _0x4658bb.forEach((_0x41766c, _0x40a4ce) => {
      const _0x1404b1 = typeof _0x41766c === "string" ? _0x41766c.split('@')[0] : _0x41766c.id.split('@')[0];
      if (_0x47d1f5.type === "description" && _0x47d1f5.descriptions) {
        const _0x2977b3 = _0x47d1f5.descriptions[Math.floor(Math.random() * _0x47d1f5.descriptions.length)];
        _0x2d1047 += _0x2977b3 + " _- @" + _0x1404b1 + "\n\n";
      } else {
        const _0x35bb3e = Math.floor(Math.random() * 100);
        _0x2d1047 += _0x35bb3e + "% @" + _0x1404b1 + "\n\n";
      }
    });
    _0x5c1ee7(_0x2d1047, _0x47d1f5.image);
    return true;
  }
}, {
  'name': "jogodavelha",
  'aliases': ['jv', "tictactoe", "velha"],
  'category': "jogos",
  'description': "Inicia uma partida de jogo da velha",
  'longDescription': "Inicia uma partida de jogo da velha entre dois membros do grupo com opção de apostar gold",
  'usage': "jogodavelha @usuario [gold]",
  'example': "jogodavelha @usuario 100",
  'menu': "jogos",
  'menuSection': "Diversão",
  'permissions': _0x5950f5,
  'requirements': {},
  'execute': async ({
    conn: _0x229268,
    info: _0x530077,
    from: _0x4b35ff,
    sender: _0xd85cb1,
    sender2: _0x59b767,
    prefix: _0x2766ee,
    command: _0x1c311c,
    q: _0x422d2e,
    args: _0x51f2b8,
    menc_os2: _0x100d32,
    isGroup: _0x30dbe0,
    Res_SoGrupo: _0x1ce8b9,
    Res_SoModoBN: _0x1d1477,
    isModobn: _0x135545,
    BANCOP: _0x174548,
    mentions: _0x54bcab,
    mention: _0x1afb70,
    reply: _0x417605,
    botNumber: _0x369227,
    goldSystem: _0x58382c,
    configsGold: _0x2cc7c,
    gamesSystem: _0x4356c2
  }) => {
    const _0x38187d = _0x2cc7c?.["emojis"]?.["gold"] || '🪙';
    if (!_0x100d32) {
      const _0x7140bb = {
        success: false,
        message: "⚔️ *𝐉𝐎𝐆𝐎 𝐃𝐀 𝐕𝐄𝐋𝐇𝐀* ⚔️\n\n𝐏𝐚𝐫𝐚 𝐢𝐧𝐢𝐜𝐢𝐚𝐫 𝐮𝐦𝐚 𝐩𝐚𝐫𝐭𝐢𝐝𝐚, 𝐦𝐚𝐫𝐪𝐮𝐞 𝐮𝐦 𝐮𝐬𝐮á𝐫𝐢𝐨:\n\n" + _0x2766ee + _0x1c311c + " @usuário [gold]\n\n💡 *Exemplo:* " + _0x2766ee + _0x1c311c + " @usuário 100"
      };
      return _0x7140bb;
    }
    const _0x5d67b8 = _0x4356c2.getRegisteredGame("jogo_da_velha");
    if (!_0x5d67b8) {
      const _0x54f5f4 = {
        success: false,
        message: "❌ Sistema de jogo da velha não disponível"
      };
      return _0x54f5f4;
    }
    const _0x1228a2 = _0x4356c2.getGame("jogo_da_velha", _0x4b35ff, _0xd85cb1);
    if (_0x1228a2 && _0x1228a2.data.gameActive) {
      const _0x4bce2a = _0x1228a2.data;
      if (!_0x4bce2a.accepted) {
        const _0xf4b337 = "╔━━━━━━━━━━━━━━━━━━╗\n┃🎮 𝐉𝐎𝐆𝐎 𝐃𝐀 𝐕𝐄𝐋𝐇𝐀 🎮┃\n╠━━━━━━━━━━━━━━━━━━╣\n┃ ⏳ 𝐀𝐆𝐔𝐀𝐑𝐃𝐀𝐍𝐃𝐎 ⏳ ┃\n╚━━━━━━━━━━━━━━━━━━╝\n\n@" + _0x4bce2a.player1.split('@')[0] + " está aguardando @" + _0x4bce2a.player2.split('@')[0] + " aceitar o desafio!\n\n💬 Digite *S* para aceitar ou *N* para recusar\n" + (_0x4bce2a.aposta > 0 ? "💰 *Aposta:* " + _0x4bce2a.aposta * 2 + " " + _0x38187d + " para o vencedor" : '');
        _0x1afb70(_0xf4b337);
        return true;
      } else {
        const _0x5a5e54 = _0x5d67b8.renderBoard(_0x4bce2a);
        _0x1afb70(_0x5a5e54);
        return true;
      }
    }
    let _0x171d57;
    if (typeof _0x100d32 === "string") {
      _0x171d57 = _0x100d32;
    } else {
      if (Array.isArray(_0x100d32) && _0x100d32.length > 0) {
        _0x171d57 = _0x100d32[0];
      } else {
        const _0x17b712 = {
          success: false,
          message: "⚔️ *𝐄𝐑𝐑𝐎* ⚔️\n\n𝐍ã𝐨 𝐟𝐨𝐢 𝐩𝐨𝐬𝐬í𝐯𝐞𝐥 𝐢𝐝𝐞𝐧𝐭𝐢𝐟𝐢𝐜𝐚𝐫 𝐨 𝐮𝐬𝐮á𝐫𝐢𝐨 𝐦𝐚𝐫𝐜𝐚𝐝𝐨."
        };
        return _0x17b712;
      }
    }
    if (_0x171d57 === _0xd85cb1) {
      const _0x421d68 = {
        success: false,
        message: "⚔️ *𝐀𝐓𝐄𝐍ÇÃ𝐎* ⚔️\n\n𝐕𝐨𝐜ê 𝐧ã𝐨 𝐩𝐨𝐝𝐞 𝐝𝐞𝐬𝐚𝐟𝐢𝐚𝐫 𝐚 𝐬𝐢 𝐦𝐞𝐬𝐦𝐨!"
      };
      return _0x421d68;
    }
    const _0x22c940 = _0x369227.split('@')[0];
    if (_0x171d57.split('@')[0] === _0x22c940) {
      const _0x12ed5a = {
        success: false,
        message: "⚔️ *𝐀𝐓𝐄𝐍ÇÃ𝐎* ⚔️\n\n𝐕𝐨𝐜ê 𝐧ã𝐨 𝐩𝐨𝐝𝐞 𝐦𝐞 𝐝𝐞𝐬𝐚𝐟𝐢𝐚𝐫!"
      };
      return _0x12ed5a;
    }
    let _0x5687e1 = 0;
    if (_0x51f2b8[1] && !isNaN(_0x51f2b8[1])) {
      _0x5687e1 = parseInt(_0x51f2b8[1]);
      if (_0x5687e1 < 0) {
        const _0x3c8144 = {
          success: false,
          message: "❌ *Erro:* O valor da aposta deve ser positivo"
        };
        return _0x3c8144;
      }
      if (_0x5687e1 > 0 && _0x58382c) {
        const _0x3b017a = _0x58382c.getBalance(_0x4b35ff, _0xd85cb1);
        const _0x4de3ba = _0x58382c.getBalance(_0x4b35ff, _0x171d57);
        if (_0x3b017a < _0x5687e1) {
          const _0x31c619 = {
            success: false,
            message: "❌ *Saldo insuficiente*\n\nVocê precisa de " + _0x5687e1 + " " + _0x38187d + " mas tem apenas " + _0x3b017a + " " + _0x38187d
          };
          return _0x31c619;
        }
        if (_0x4de3ba < _0x5687e1) {
          return {
            'success': false,
            'message': "❌ *Saldo insuficiente*\n\n@" + _0x171d57.split('@')[0] + " precisa de " + _0x5687e1 + " " + _0x38187d + " mas tem apenas " + _0x4de3ba + " " + _0x38187d
          };
        }
        _0x58382c.removeGold(_0x4b35ff, _0xd85cb1, _0x5687e1);
        _0x58382c.removeGold(_0x4b35ff, _0x171d57, _0x5687e1);
      }
    }
    const _0xfef338 = {
      from: _0x4b35ff,
      goldSystem: _0x58382c,
      configsGold: _0x2cc7c,
      conn: _0x229268,
      info: _0x530077
    };
    const _0x479bda = await _0x5d67b8.createGame(_0xfef338, _0xd85cb1, _0x171d57, _0x5687e1);
    if (!_0x479bda.success) {
      if (_0x5687e1 > 0 && _0x58382c) {
        _0x58382c.addGold(_0x4b35ff, _0xd85cb1, _0x5687e1);
        _0x58382c.addGold(_0x4b35ff, _0x171d57, _0x5687e1);
      }
      return _0x479bda;
    }
    const _0x118ff4 = "╔━━━━━━━━━━━━━━━━━━╗\n┃🎮 𝐉𝐎𝐆𝐎 𝐃𝐀 𝐕𝐄𝐋𝐇𝐀 🎮┃\n╠━━━━━━━━━━━━━━━━━━╣\n┃ ⚔️ 𝐃𝐄𝐒𝐀𝐅𝐈𝐎 𝐄𝐍𝐕𝐈𝐀𝐃𝐎 ⚔️ ┃\n╚━━━━━━━━━━━━━━━━━━╝\n\n@" + _0x59b767 + " está te desafiando para uma partida de jogo da velha!\n\n@" + _0x171d57.split('@')[0] + ", digite *S* para aceitar ou *N* para recusar.\n\n" + (_0x5687e1 > 0 ? "💰 *Aposta:* " + _0x5687e1 * 2 + " " + _0x38187d + " para o vencedor" : "🎮 *Jogo sem apostas*") + "\n\n" + '⏳' + " O desafio expira em 2 minutos.";
    const _0x5bb572 = [_0xd85cb1, _0x171d57];
    try {
      const _0xa57241 = {
        text: _0x118ff4,
        mentions: _0x5bb572
      };
      const _0x13825e = {
        quoted: _0x530077
      };
      const {
        key: _0x2b1340
      } = await _0x229268.sendMessage(_0x4b35ff, _0xa57241, _0x13825e);
      if (_0x2b1340) {
        console.log("[VELHA DEBUG] Salvando messageKey inicial: " + JSON.stringify(_0x2b1340));
        const _0x20279e = _0x4356c2.getGame("jogo_da_velha", _0x4b35ff, _0xd85cb1);
        if (_0x20279e && _0x20279e.data) {
          _0x20279e.data.messageKey = _0x2b1340;
          _0x4356c2.updateGame("jogo_da_velha", _0x4b35ff, _0xd85cb1, _0x20279e.data);
          console.log("[VELHA DEBUG] MessageKey salva no banco de dados");
        }
      }
    } catch (_0x3d8760) {
      console.error("❌ Erro ao enviar mensagem inicial:", _0x3d8760);
      _0x54bcab(_0x118ff4, _0x5bb572, true);
    }
    return true;
  }
}, {
  'name': 'rv',
  'aliases': ["resetarvelha", "resetavelha", "resetarv", "resetav", "resetvelha"],
  'category': "jogos",
  'description': "Reseta o jogo da velha",
  'longDescription': "Reseta a partida de jogo da velha em andamento no grupo",
  'usage': 'rv',
  'example': 'rv',
  'menu': "jogos",
  'menuSection': "Diversão",
  'permissions': _0x4e1d8c,
  'requirements': {},
  'execute': async ({
    reply: _0x58df37,
    sender: _0x2f2bce,
    from: _0x1ae387,
    prefix: _0x351303,
    isGroupAdmins: _0x2b1454,
    BANCOP: _0x570d08,
    gamesSystem: _0x40ea21,
    goldSystem: _0x58dad6
  }) => {
    const _0x562b5c = _0x40ea21.getGame("jogo_da_velha", _0x1ae387, _0x2f2bce);
    if (!_0x562b5c || !_0x562b5c.data.gameActive) {
      _0x58df37("⚠️ *𝐀𝐓𝐄𝐍ÇÃ𝐎* ⚠️\n\n𝐍ã𝐨 𝐡á 𝐧𝐞𝐧𝐡𝐮𝐦𝐚 𝐩𝐚𝐫𝐭𝐢𝐝𝐚 𝐞𝐦 𝐚𝐧𝐝𝐚𝐦𝐞𝐧𝐭𝐨 𝐧𝐞𝐬𝐭𝐞 𝐠𝐫𝐮𝐩𝐨.");
      const _0x5c3aa7 = {
        success: false
      };
      return _0x5c3aa7;
    }
    const _0x4beb9c = _0x562b5c.data;
    const _0x1303ee = _0x2f2bce.split('@')[0];
    if (_0x1303ee !== _0x4beb9c.player1.split('@')[0] && _0x1303ee !== _0x4beb9c.player2.split('@')[0] && !_0x2b1454) {
      _0x58df37("⚠️ *𝐀𝐂𝐄𝐒𝐒𝐎 𝐍𝐄𝐆𝐀𝐃𝐎* ⚠️\n\n𝐀𝐩𝐞𝐧𝐚𝐬 𝐨𝐬 𝐣𝐨𝐠𝐚𝐝𝐨𝐫𝐞𝐬 𝐝𝐚 𝐩𝐚𝐫𝐭𝐢𝐝𝐚 𝐨𝐮 𝐚𝐝𝐦𝐢𝐧𝐢𝐬𝐭𝐫𝐚𝐝𝐨𝐫𝐞𝐬 𝐩𝐨𝐝𝐞𝐦 𝐫𝐞𝐢𝐧𝐢𝐜𝐢𝐚𝐫 𝐨 𝐣𝐨𝐠𝐨.");
      const _0x4c7d2a = {
        success: false
      };
      return _0x4c7d2a;
    }
    if (_0x4beb9c.aposta > 0 && _0x58dad6) {
      _0x58dad6.addGold(_0x1ae387, _0x4beb9c.player1, _0x4beb9c.aposta);
      _0x58dad6.addGold(_0x1ae387, _0x4beb9c.player2, _0x4beb9c.aposta);
      console.log("[VELHA DEBUG] Gold devolvido por reset: " + _0x4beb9c.aposta + " para ambos");
    }
    const _0x4d863a = _0x40ea21.deleteGame("jogo_da_velha", _0x1ae387, _0x4beb9c.player1);
    if (_0x4d863a) {
      _0x58df37("╔━━━━━━━━━━━━━━━━━━╗\n┃🎮 𝐉𝐎𝐆𝐎 𝐃𝐀 𝐕𝐄𝐋𝐇𝐀 🎮┃\n╠━━━━━━━━━━━━━━━━━━╣\n┃ 🔄 𝐏𝐀𝐑𝐓𝐈𝐃𝐀 𝐑𝐄𝐒𝐄𝐓𝐀𝐃𝐀 🔄 ┃\n╚━━━━━━━━━━━━━━━━━━╝\n\n✅ 𝐎 𝐣𝐨𝐠𝐨 𝐝𝐚 𝐯𝐞𝐥𝐡𝐚 𝐟𝐨𝐢 𝐫𝐞𝐢𝐧𝐢𝐜𝐢𝐚𝐝𝐨 𝐜𝐨𝐦 𝐬𝐮𝐜𝐞𝐬𝐬𝐨!" + (_0x4beb9c.aposta > 0 ? "\n💰 *Gold devolvido* para ambos os jogadores." : ''));
      const _0x3fb915 = {
        success: true
      };
      return _0x3fb915;
    } else {
      _0x58df37("❌ *𝐄𝐑𝐑𝐎* ❌\n\n𝐎𝐜𝐨𝐫𝐫𝐞𝐮 𝐮𝐦 𝐞𝐫𝐫𝐨 𝐚𝐨 𝐫𝐞𝐢𝐧𝐢𝐜𝐢𝐚𝐫 𝐨 𝐣𝐨𝐠𝐨.");
      const _0x5f03a5 = {
        success: false
      };
      return _0x5f03a5;
    }
  }
}, {
  'name': "ppt2",
  'aliases': ["jokenpo2"],
  'category': "jogos",
  'description': "Jogo Pedra, Papel e Tesoura",
  'longDescription': "Desafie o bot para uma partida de Pedra, Papel e Tesoura com estatísticas e recompensas!",
  'usage': "ppt2 [pedra|papel|tesoura]",
  'example': "ppt2 pedra",
  'menu': "jogos",
  'menuSection': "Diversão",
  'permissions': _0x523304,
  'requirements': {},
  'execute': async ({
    conn: _0x2231f8,
    from: _0x3e52a9,
    sender: _0x2530d9,
    NomeDoBot: _0x5a1030,
    prefix: _0x396896,
    args: _0xb14866,
    q: _0x3f5032,
    pushname: _0x3bb3ea,
    isModobn: _0x2bdf83,
    reply: _0x24ee1d,
    BANCOP: _0x4d6abe,
    dataGp: _0xc2cd23,
    isGroup: _0x2aa562,
    levelSystem: _0x594d0c,
    GoldSystem: _0x42dfe3
  }) => {
    let _0x1cca86 = false;
    let _0x399cf4 = false;
    if (_0x2aa562 && _0xc2cd23?.[0]?.["sistemgold"]) {
      _0x1cca86 = true;
    } else {
      if (_0xb14866[0]?.["toLowerCase"]() === "gold") {
        return _0x24ee1d("Este comando só pode ser utilizado quando o sistema gold está ativado.\nPeça para um administrador ativar com " + _0x396896 + "sistemgold on");
      }
    }
    try {
      _0x594d0c.init(_0x4d6abe);
      _0x399cf4 = await _0x594d0c.isLevelingEnabled(_0x3e52a9);
    } catch (_0x3cc354) {
      console.log("Sistema de level não disponível:", _0x3cc354);
    }
    const _0x5b42c8 = {
      emoji: '👊',
      vence: "tesoura",
      perde: "papel"
    };
    const _0x9a9b64 = {
      emoji: "🖐️",
      vence: "pedra",
      perde: "tesoura"
    };
    const _0x291f9d = {
      emoji: '✌️',
      vence: "papel",
      perde: "pedra"
    };
    const _0x415d6c = {
      pedra: _0x5b42c8,
      papel: _0x9a9b64,
      tesoura: _0x291f9d
    };
    const _0x59e770 = {
      pedra: "pedra",
      pedras: "pedra"
    };
    _0x59e770.rock = "pedra";
    _0x59e770['👊'] = "pedra";
    _0x59e770['✊'] = "pedra";
    _0x59e770.papel = "papel";
    _0x59e770.paper = "papel";
    _0x59e770["🖐️"] = "papel";
    _0x59e770['🖐'] = "papel";
    _0x59e770['✋'] = "papel";
    _0x59e770.tesoura = "tesoura";
    _0x59e770.scissors = "tesoura";
    _0x59e770['✌️'] = "tesoura";
    _0x59e770['✌'] = "tesoura";
    const _0x422431 = _0x1064e9 => {
      try {
        _0x4d6abe.exec("CREATE TABLE IF NOT EXISTS ppt_daily_limits (user_id TEXT, date TEXT, reward_count INTEGER DEFAULT 0, PRIMARY KEY (user_id, date))");
        const _0x45fade = new Date().toISOString().split('T')[0];
        const _0x79a973 = _0x4d6abe.prepare("SELECT reward_count FROM ppt_daily_limits WHERE user_id = ? AND date = ?").get(_0x1064e9, _0x45fade);
        if (!_0x79a973) {
          _0x4d6abe.prepare("INSERT INTO ppt_daily_limits (user_id, date, reward_count) VALUES (?, ?, 0)").run(_0x1064e9, _0x45fade);
          const _0x5ad15d = {
            count: 0x0,
            limitReached: false
          };
          return _0x5ad15d;
        }
        return {
          'count': _0x79a973.reward_count,
          'limitReached': _0x79a973.reward_count >= 10
        };
      } catch (_0x1e5630) {
        console.error("Erro ao verificar limite de recompensas:", _0x1e5630);
        const _0x30ba0c = {
          count: 0x0,
          limitReached: false
        };
        return _0x30ba0c;
      }
    };
    const _0x5b1e8e = _0x9c771b => {
      try {
        const _0xb3fa51 = new Date().toISOString().split('T')[0];
        _0x4d6abe.prepare("UPDATE ppt_daily_limits SET reward_count = reward_count + 1 WHERE user_id = ? AND date = ?").run(_0x9c771b, _0xb3fa51);
        return true;
      } catch (_0x2719dd) {
        console.error("Erro ao incrementar contagem de recompensas:", _0x2719dd);
        return false;
      }
    };
    const _0x4198c5 = _0x6f737b => {
      try {
        _0x4d6abe.exec("CREATE TABLE IF NOT EXISTS ppt_stats (user_id TEXT PRIMARY KEY, vitorias INTEGER DEFAULT 0, derrotas INTEGER DEFAULT 0, empates INTEGER DEFAULT 0, ultima_jogada TEXT, streak_atual INTEGER DEFAULT 0, maior_streak INTEGER DEFAULT 0, timestamp INTEGER DEFAULT 0)");
        const _0x1eb3a3 = _0x4d6abe.prepare("SELECT * FROM ppt_stats WHERE user_id = ?").get(_0x6f737b);
        if (_0x1eb3a3) {
          return _0x1eb3a3;
        }
        _0x4d6abe.prepare("INSERT INTO ppt_stats (user_id, vitorias, derrotas, empates, ultima_jogada, streak_atual, maior_streak, timestamp) VALUES (?, 0, 0, 0, NULL, 0, 0, ?)").run(_0x6f737b, Math.floor(Date.now() / 1000));
        const _0x5ef54f = {
          user_id: _0x6f737b,
          vitorias: 0x0,
          derrotas: 0x0,
          empates: 0x0,
          ultima_jogada: null,
          streak_atual: 0x0,
          maior_streak: 0x0
        };
        return _0x5ef54f;
      } catch (_0x2a3a1c) {
        console.error("Erro em getStats:", _0x2a3a1c);
        const _0x434834 = {
          vitorias: 0x0,
          derrotas: 0x0,
          empates: 0x0,
          streak_atual: 0x0,
          maior_streak: 0x0
        };
        return _0x434834;
      }
    };
    const _0xb413b5 = (_0x13bc7e, _0x50c57d, _0x51f9a3) => {
      try {
        const _0x5c3ccd = _0x4198c5(_0x13bc7e);
        if (_0x50c57d === "vitoria") {
          _0x5c3ccd.vitorias++;
          _0x5c3ccd.streak_atual++;
          if (_0x5c3ccd.streak_atual > _0x5c3ccd.maior_streak) {
            _0x5c3ccd.maior_streak = _0x5c3ccd.streak_atual;
          }
        } else if (_0x50c57d === "derrota") {
          _0x5c3ccd.derrotas++;
          _0x5c3ccd.streak_atual = 0;
        } else {
          _0x5c3ccd.empates++;
        }
        _0x4d6abe.prepare("UPDATE ppt_stats SET vitorias = ?, derrotas = ?, empates = ?, ultima_jogada = ?, streak_atual = ?, maior_streak = ?, timestamp = ? WHERE user_id = ?").run(_0x5c3ccd.vitorias, _0x5c3ccd.derrotas, _0x5c3ccd.empates, _0x51f9a3, _0x5c3ccd.streak_atual, _0x5c3ccd.maior_streak, Math.floor(Date.now() / 1000), _0x13bc7e);
        return _0x5c3ccd;
      } catch (_0x367180) {
        console.error("Erro em updateStats:", _0x367180);
        return null;
      }
    };
    const _0x164a70 = async (_0x12bd26, _0x1c5d9e) => {
      const _0x5569b3 = {
        xp: 0x0,
        gold: 0x0
      };
      if (_0x1c5d9e !== "vitoria") {
        return _0x5569b3;
      }
      const _0x358d29 = _0x422431(_0x12bd26);
      if (_0x358d29.limitReached) {
        return {
          'xp': 0x0,
          'gold': 0x0,
          'limitReached': true,
          'count': _0x358d29.count
        };
      }
      const _0x49d132 = {
        xp: 0x0,
        gold: 0x0,
        limitReached: false,
        count: _0x358d29.count
      };
      try {
        if (_0x399cf4) {
          _0x594d0c.init(_0x4d6abe);
          await _0x594d0c.addXPToUser(_0x3e52a9, _0x12bd26, 10);
          _0x49d132.xp = 10;
        }
        if (_0x1cca86) {
          goldSystem.addGold(_0x3e52a9, _0x12bd26, 5);
          _0x49d132.gold = 5;
        }
        if (false || false) {
          _0x5b1e8e(_0x12bd26);
          _0x49d132.count++;
        }
      } catch (_0x4d6d1a) {
        console.log("Erro ao adicionar recompensas:", _0x4d6d1a);
      }
      return _0x49d132;
    };
    if (!_0xb14866[0]) {
      const _0x2bd77a = _0x4198c5(_0x2530d9);
      const _0x453415 = _0x2bd77a.vitorias + _0x2bd77a.derrotas + _0x2bd77a.empates;
      const _0x30c3ea = _0x422431(_0x2530d9);
      return _0x24ee1d("╭「 🎮 PEDRA PAPEL TESOURA 🎮 」╮\n│\n│ Olá, " + (_0x3bb3ea || "jogador") + "! \n│ Escolha sua jogada:\n│ \n│ " + _0x396896 + "ppt pedra " + _0x415d6c.pedra.emoji + "\n│ " + _0x396896 + "ppt papel " + _0x415d6c.papel.emoji + "\n│ " + _0x396896 + "ppt tesoura " + _0x415d6c.tesoura.emoji + "\n│\n│ Suas estatísticas:\n│ 🏆 Vitórias: " + _0x2bd77a.vitorias + "\n│ 🥈 Derrotas: " + _0x2bd77a.derrotas + "\n│ 🔄 Empates: " + _0x2bd77a.empates + "\n│ 📊 Total: " + _0x453415 + " partidas\n│ 🔥 Sequência: " + _0x2bd77a.streak_atual + "\n│ 🎁 Recompensas hoje: " + _0x30c3ea.count + "/10\n│\n╰━━━━━━━━━━━━━━━━━━━━━━╯");
    }
    let _0x5272d4 = _0x59e770[_0x3f5032.toLowerCase().trim().split(" ")[0]] || _0x3f5032.toLowerCase().trim().split(" ")[0];
    if (!_0x415d6c[_0x5272d4]) {
      return _0x24ee1d("❌ Escolha inválida! Use " + _0x396896 + "ppt pedra, " + _0x396896 + "ppt papel ou " + _0x396896 + "ppt tesoura");
    }
    const _0x1f016e = Object.keys(_0x415d6c)[Math.floor(Math.random() * 3)];
    let _0x51c10e;
    if (_0x5272d4 === _0x1f016e) {
      _0x51c10e = "empate";
    } else {
      if (_0x415d6c[_0x5272d4].vence === _0x1f016e) {
        _0x51c10e = "vitoria";
      } else {
        _0x51c10e = "derrota";
      }
    }
    const _0x22e6bf = _0xb413b5(_0x2530d9, _0x51c10e, _0x5272d4);
    const _0x9a0503 = await _0x164a70(_0x2530d9, _0x51c10e);
    let _0x5d3af4;
    let _0x547732;
    if (_0x51c10e === "vitoria") {
      _0x5d3af4 = '🏆';
      _0x547732 = "🎉 Você VENCEU! 🎉";
    } else if (_0x51c10e === "derrota") {
      _0x5d3af4 = '😢';
      _0x547732 = "💔 Você PERDEU! 💔";
    } else {
      _0x5d3af4 = '🔄';
      _0x547732 = "🤝 EMPATE! 🤝";
    }
    const _0x5e06bf = '[' + '🟢'.repeat(Math.min(_0x22e6bf.vitorias, 10)) + '⚪'.repeat(10 - Math.min(_0x22e6bf.vitorias, 10)) + ']';
    const _0x67ea4a = [];
    if (_0x9a0503.xp > 0) {
      _0x67ea4a.push(" +" + _0x9a0503.xp + " XP");
    }
    if (_0x9a0503.gold > 0) {
      _0x67ea4a.push(" +" + _0x9a0503.gold + " Gold");
    }
    let _0x19b544 = "╭━━「 🎲 RESULTADO 🎲 」━━╮\n│\n│ " + _0x5d3af4 + " " + _0x547732 + " " + _0x5d3af4 + "\n│\n│ 👤 Você: " + _0x415d6c[_0x5272d4].emoji + " " + _0x5272d4.toUpperCase() + "\n│ 🤖 Bot: " + _0x415d6c[_0x1f016e].emoji + " " + _0x1f016e.toUpperCase() + "\n│";
    if (_0x51c10e === "vitoria") {
      if (_0x9a0503.limitReached) {
        _0x19b544 += "\n│ ⚠️ Limite diário de recompensas atingido (10/10)!\n";
      } else if (_0x67ea4a.length > 0) {
        _0x19b544 += "\n│ ✨ Recompensas (" + _0x9a0503.count + "/10 hoje):\n";
        _0x67ea4a.forEach(_0x17c0ad => _0x19b544 += "│ " + _0x17c0ad + "\n");
      }
    }
    _0x19b544 += "│\n│ 📊 Progresso: " + _0x5e06bf + "\n│ 📈 Sequência: " + _0x22e6bf.streak_atual + " vitória" + (_0x22e6bf.streak_atual !== 1 ? 's' : '') + "\n│ 🔢 Placar: " + _0x22e6bf.vitorias + 'V/' + _0x22e6bf.derrotas + 'D/' + _0x22e6bf.empates + "E\n│\n╰━━━━━━━━━━━━━━━━━━━╯\n\n🔄 Use " + _0x396896 + "ppt novamente para jogar!";
    _0x24ee1d(_0x19b544);
    return true;
  }
}, {
  'name': "bot",
  'aliases': [],
  'category': "diversao",
  'description': "Envia um áudio engraçado",
  'longDescription': "Envia um áudio de \"Quem é viado?\" como resposta à mensagem",
  'usage': "bot",
  'example': "bot",
  'menu': "diversao",
  'menuSection': "Áudios",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x258421,
    info: _0x441255,
    from: _0x5b2154,
    path: _0x1c7ee4
  }) => {
    const _0x664f8c = _0x1c7ee4.join(__dirname, "../../dados/midias/audios/qviado.mp3");
    const _0x197338 = {
      url: _0x664f8c
    };
    const _0x2c7319 = {
      audio: _0x197338,
      mimetype: "audio/mpeg",
      ptt: true
    };
    const _0x3e1701 = {
      quoted: _0x441255
    };
    await _0x258421.sendMessage(_0x5b2154, _0x2c7319, _0x3e1701);
    return true;
  }
}, {
  'name': "videocontrario",
  'aliases': ["reversevid"],
  'category': "converter",
  'description': "Inverte o vídeo",
  'longDescription': "Inverte a reprodução de um vídeo, fazendo-o rodar de trás para frente",
  'usage': "videocontrario [marcar vídeo]",
  'example': "videocontrario",
  'menu': "converter",
  'menuSection': "Vídeo",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x5e3638,
      info: _0x6b4b72,
      isQuotedVideo: _0x39fe5e,
      q: _0x13d746
    }) => {
      if (!(_0x5e3638 && _0x6b4b72.message.videoMessage || !isQuotedImage) && !_0x13d746.length <= 1) {
        const _0x21ee0e = {
          success: false,
          message: "Marque um vídeo.."
        };
        return _0x21ee0e;
      }
      const _0x5cb82e = {
        success: true
      };
      return _0x5cb82e;
    }
  },
  'execute': async ({
    conn: _0x303e93,
    info: _0x16ee49,
    from: _0x57ba87,
    Res_Aguarde: _0x592010,
    isMedia: _0x527740,
    isQuotedVideo: _0x120c00,
    reply: _0x21d40b,
    getRandom: _0x438ac5,
    getExtension: _0x5abcd5,
    getFileBuffer: _0x202994,
    fs: _0x4c5958,
    exec: _0x3c8c1e,
    DLT_FL: _0x26774d
  }) => {
    _0x21d40b(_0x592010);
    encmedia = _0x120c00 ? _0x16ee49.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : _0x16ee49.message.videoMessage;
    rane = _0x438ac5('.' + (await _0x5abcd5(encmedia.mimetype)));
    buffimg = await _0x202994(encmedia, "video");
    _0x4c5958.writeFileSync(rane, buffimg);
    media = rane;
    ran = _0x438ac5(".mp4");
    _0x3c8c1e("ffmpeg -i " + media + " -vf reverse -af areverse " + ran, _0x813af3 => {
      _0x26774d(media);
      if (_0x813af3) {
        return _0x21d40b("Err: " + _0x813af3);
      }
      buffer453 = _0x4c5958.readFileSync(ran);
      const _0x4aa607 = {
        video: buffer453,
        mimetype: "video/mp4"
      };
      const _0x51eae9 = {
        quoted: _0x16ee49
      };
      _0x303e93.sendMessage(_0x57ba87, _0x4aa607, _0x51eae9);
      _0x26774d(ran);
    });
    return true;
  }
}, {
  'name': "videolento",
  'aliases': ["slowvid"],
  'category': "converter",
  'description': "Deixa o vídeo em câmera lenta",
  'longDescription': "Reduz a velocidade de reprodução do vídeo, criando um efeito de câmera lenta",
  'usage': "videolento [marcar vídeo]",
  'example': "videolento",
  'menu': "converter",
  'menuSection': "Vídeo",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x85d304,
      info: _0x3fd8a8,
      isQuotedVideo: _0x577be2,
      q: _0x26ac26
    }) => {
      const _0x584fd1 = {
        aRYAY: function (_0x3672de, _0x30d8d4) {
          return _0x3672de <= _0x30d8d4;
        }
      };
      _0x584fd1.ITIdX = "Marque um vídeo..";
      if (!(_0x85d304 && _0x3fd8a8.message.videoMessage || !isQuotedImage) && !_0x26ac26.length <= 1) {
        const _0x5280e2 = {
          success: false,
          message: _0x584fd1.ITIdX
        };
        return _0x5280e2;
      }
      const _0x4a5346 = {
        success: true
      };
      return _0x4a5346;
    }
  },
  'execute': async ({
    conn: _0x1dc1b3,
    info: _0x1fa419,
    from: _0x1e531d,
    Res_Aguarde: _0x4e5aed,
    isMedia: _0x521da0,
    isQuotedVideo: _0x4163db,
    reply: _0x258d8c,
    getRandom: _0x1bc652,
    getExtension: _0x1306f2,
    getFileBuffer: _0x5caf8a,
    fs: _0x3cdec4,
    exec: _0x886135,
    DLT_FL: _0x1cd44a
  }) => {
    _0x258d8c(_0x4e5aed);
    encmedia = _0x4163db ? _0x1fa419.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : _0x1fa419.message.videoMessage;
    rane = _0x1bc652('.' + (await _0x1306f2(encmedia.mimetype)));
    buffimg = await _0x5caf8a(encmedia, "video");
    _0x3cdec4.writeFileSync(rane, buffimg);
    media = rane;
    ran = _0x1bc652(".mp4");
    _0x886135("ffmpeg -i " + media + " -filter_complex \"[0:v]setpts=2*PTS[v];[0:a]atempo=0.5[a]\" -map \"[v]\" -map \"[a]\" " + ran, _0x345398 => {
      _0x1cd44a(media);
      if (_0x345398) {
        return _0x258d8c("Err: " + _0x345398);
      }
      buffer453 = _0x3cdec4.readFileSync(ran);
      const _0x2cffe0 = {
        video: buffer453,
        mimetype: "video/mp4"
      };
      const _0x468f14 = {
        quoted: _0x1fa419
      };
      _0x1dc1b3.sendMessage(_0x1e531d, _0x2cffe0, _0x468f14);
      _0x1cd44a(ran);
    });
    return true;
  }
}, {
  'name': "videorapido",
  'aliases': ["fastvid"],
  'category': "converter",
  'description': "Acelera o vídeo",
  'longDescription': "Aumenta a velocidade de reprodução do vídeo, criando um efeito de aceleração",
  'usage': "videorapido [marcar vídeo]",
  'example': "videorapido",
  'menu': "converter",
  'menuSection': "Vídeo",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x25af08,
      info: _0x2f233b,
      isQuotedVideo: _0x5ead2d,
      q: _0x348b00
    }) => {
      const _0x118233 = {
        qRSkI: function (_0x5612ea, _0x5fbb37) {
          return _0x5612ea <= _0x5fbb37;
        }
      };
      _0x118233.KMOdc = "Marque o vídeo..";
      if (!(_0x25af08 && _0x2f233b.message.videoMessage || !isQuotedImage) && !_0x348b00.length <= 1) {
        const _0x16a628 = {
          success: false,
          message: _0x118233.KMOdc
        };
        return _0x16a628;
      }
      const _0x2957ee = {
        success: true
      };
      return _0x2957ee;
    }
  },
  'execute': async ({
    conn: _0x19eb89,
    info: _0x161fc3,
    from: _0x1f6578,
    Res_Aguarde: _0x2a15fa,
    isMedia: _0x379b4e,
    isQuotedVideo: _0x392f35,
    reply: _0x27fcaa,
    getRandom: _0x2825f7,
    getExtension: _0x407fce,
    getFileBuffer: _0x4cfb81,
    fs: _0x54a45b,
    exec: _0x5174bf,
    DLT_FL: _0x25262c
  }) => {
    _0x27fcaa(_0x2a15fa);
    encmedia = _0x392f35 ? _0x161fc3.message.extendedTextMessage.contextInfo.quotedMessage.videoMessage : _0x161fc3.message.videoMessage;
    rane = _0x2825f7('.' + (await _0x407fce(encmedia.mimetype)));
    buffimg = await _0x4cfb81(encmedia, "video");
    _0x54a45b.writeFileSync(rane, buffimg);
    media = rane;
    ran = _0x2825f7(".mp4");
    _0x5174bf("ffmpeg -i " + media + " -filter_complex \"[0:v]setpts=0.5*PTS[v];[0:a]atempo=2[a]\" -map \"[v]\" -map \"[a]\" " + ran, _0x316c95 => {
      _0x25262c(media);
      if (_0x316c95) {
        return _0x27fcaa("Err: " + _0x316c95);
      }
      buffer453 = _0x54a45b.readFileSync(ran);
      const _0x57aa38 = {
        video: buffer453,
        mimetype: "video/mp4"
      };
      const _0x17e938 = {
        quoted: _0x161fc3
      };
      _0x19eb89.sendMessage(_0x1f6578, _0x57aa38, _0x17e938);
      _0x25262c(ran);
    });
    return true;
  }
}, {
  'name': "audiocontrario",
  'aliases': ["audioreverse"],
  'category': "converter",
  'description': "Inverte o áudio",
  'longDescription': "Inverte a reprodução de um áudio, fazendo-o tocar de trás para frente",
  'usage': "audiocontrario [marcar áudio]",
  'example': "audiocontrario",
  'menu': "converter",
  'menuSection': "Áudio",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x1a6ae3,
      info: _0x507f2d,
      isQuotedAudio: _0x3ab251
    }) => {
      if (!(_0x1a6ae3 && !_0x507f2d.message.imageMessage && !_0x507f2d.message.videoMessage || _0x3ab251)) {
        const _0x2be365 = {
          success: false,
          message: "Marque um audio.."
        };
        return _0x2be365;
      }
      const _0x115040 = {
        success: true
      };
      return _0x115040;
    }
  },
  'execute': async ({
    conn: _0x419c8b,
    info: _0x70208d,
    from: _0x56ae84,
    Res_Aguarde: _0x20c758,
    isMedia: _0x35a030,
    isQuotedAudio: _0x365de5,
    reply: _0x2a224b,
    getRandom: _0x59e8c7,
    getExtension: _0xb2bca1,
    getFileBuffer: _0x4bfb7b,
    fs: _0x88bddd,
    exec: _0x4e881d,
    DLT_FL: _0x1ccc3b
  }) => {
    _0x2a224b(_0x20c758);
    encmedia = _0x365de5 ? _0x70208d.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x70208d.message.audioMessage;
    rane = _0x59e8c7('.' + (await _0xb2bca1(encmedia.mimetype)));
    buffimg = await _0x4bfb7b(encmedia, "audio");
    _0x88bddd.writeFileSync(rane, buffimg);
    media = rane;
    ran = _0x59e8c7(".mp3");
    _0x4e881d("ffmpeg -i " + media + " -vf reverse -af areverse " + ran, _0x4219fa => {
      _0x1ccc3b(media);
      if (_0x4219fa) {
        return _0x2a224b("Err: " + _0x4219fa);
      }
      buffer453 = _0x88bddd.readFileSync(ran);
      const _0x9c07b3 = {
        audio: buffer453,
        mimetype: "audio/mpeg"
      };
      const _0x164b7d = {
        quoted: _0x70208d
      };
      _0x419c8b.sendMessage(_0x56ae84, _0x9c07b3, _0x164b7d);
      _0x1ccc3b(ran);
    });
    return true;
  }
}, {
  'name': "transcrever",
  'aliases': [],
  'category': "util",
  'description': "Transcreve áudio para texto",
  'longDescription': "Converte áudio ou vídeo em texto usando reconhecimento de fala",
  'usage': "transcrever [marcar áudio/vídeo]",
  'example': "transcrever",
  'menu': "util",
  'menuSection': "Ferramentas",
  'permissions': {},
  'requirements': {},
  'execute': async ({
    conn: _0x346858,
    info: _0x17380b,
    from: _0x3a752a,
    Res_Aguarde: _0x4ecdec,
    isMedia: _0x1090ab,
    isQuotedVideo: _0x5b108d,
    isQuotedAudio: _0x2eb7f9,
    reply: _0x494ff0,
    getFileBuffer: _0x3b1260,
    acessAPI: _0x13a0b8,
    FormData: _0x4b1666
  }) => {
    _0x494ff0(_0x4ecdec);
    muk = _0x5b108d ? JSON.parse(JSON.stringify(_0x17380b).replace("quotedM", 'm')).message.extendedTextMessage.contextInfo.message.videoMessage : _0x2eb7f9 ? JSON.parse(JSON.stringify(_0x17380b).replace("quotedM", 'm'))?.["message"]?.["extendedTextMessage"]?.["contextInfo"]?.["message"]?.["audioMessage"] || _0x17380b?.["message"]?.["extendedTextMessage"]?.["contextInfo"]?.["quotedMessage"]?.["viewOnceMessageV2Extension"]?.["message"]?.["audioMessage"] : _0x17380b.message.audioMessage;
    let _0x58f347 = await _0x3b1260(muk, _0x2eb7f9 ? "audio" : "video");
    let _0x34e4b7 = Buffer.from(_0x58f347, "base64");
    let _0x2fb972 = new _0x4b1666();
    _0x2fb972.append("file", _0x34e4b7, {
      'filename': _0x2eb7f9 ? "audiofile" : "videofile",
      'contentType': muk.mimetype
    });
    try {
      const _0x473364 = await fetch(_0x13a0b8.transcrever(), {
        'method': "POST",
        'body': _0x2fb972
      });
      const _0x291c33 = await _0x473364.json();
      _0x494ff0(_0x291c33.texto);
      return true;
    } catch (_0x5df695) {
      const _0x36e93b = {
        success: false,
        message: "Sinto muito, alguns formatos de áudio/vídeo, eu não consigo transcrever, em caso de dúvidas, tente novamente..."
      };
      return _0x36e93b;
    }
  }
}, {
  'name': "bs64",
  'aliases': [],
  'category': "dev",
  'description': "Converte áudio para Base64",
  'longDescription': "Exibe a representação em Base64 de um arquivo de áudio para fins de depuração",
  'usage': "bs64 [marcar áudio]",
  'example': "bs64",
  'menu': "dev",
  'menuSection': "Debug",
  'permissions': _0x1aa5d4,
  'requirements': {
    'customRequirement': ({
      isMedia: _0x5442a3,
      info: _0x4d9367,
      isQuotedAudio: _0x58fa0b
    }) => {
      if (!(_0x5442a3 && !_0x4d9367.message.imageMessage && !_0x4d9367.message.videoMessage || _0x58fa0b)) {
        const _0x4b86ea = {
          success: false,
          message: "Marque o áudio..."
        };
        return _0x4b86ea;
      }
      const _0x483a92 = {
        success: true
      };
      return _0x483a92;
    }
  },
  'execute': async ({
    info: _0x40e131,
    isQuotedAudio: _0x1590db,
    getRandom: _0x335638,
    getExtension: _0x4dcf72,
    getFileBuffer: _0x5d9d04
  }) => {
    muk = _0x1590db ? _0x40e131.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x40e131.message.audioMessage;
    rane = _0x335638('.' + (await _0x4dcf72(muk.mimetype)));
    buffimg = await _0x5d9d04(muk, "audio");
    console.log(JSON.stringify(buffimg, null, 2));
    return true;
  }
}, {
  'name': "grave2",
  'aliases': [],
  'category': "converter",
  'description': "Grave profundo",
  'longDescription': "Aplica efeito grave mais intenso ao áudio selecionado",
  'usage': "grave2 [marcar áudio]",
  'example': "grave2",
  'menu': "converter",
  'menuSection': "Áudio",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x34eb1c,
      info: _0x8d12a6,
      isQuotedAudio: _0xe63f13
    }) => {
      if (!(_0x34eb1c && !_0x8d12a6.message.imageMessage && !_0x8d12a6.message.videoMessage || _0xe63f13)) {
        const _0x287770 = {
          success: false,
          message: "Marque o áudio.."
        };
        return _0x287770;
      }
      const _0x2f6d60 = {
        success: true
      };
      return _0x2f6d60;
    }
  },
  'execute': async ({
    conn: _0x1192c0,
    info: _0x1b21af,
    from: _0x2d4dea,
    Res_Aguarde: _0x260b55,
    isMedia: _0x5d7f10,
    isQuotedAudio: _0x2a8d75,
    reply: _0x2cead0,
    getRandom: _0x33de84,
    getExtension: _0x578ab8,
    getFileBuffer: _0x66cfc0,
    fs: _0x13315c,
    exec: _0xce8472,
    DLT_FL: _0x529b3b
  }) => {
    _0x2cead0(_0x260b55);
    muk = _0x2a8d75 ? _0x1b21af.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x1b21af.message.audioMessage;
    rane = _0x33de84('.' + (await _0x578ab8(muk.mimetype)));
    buffimg = await _0x66cfc0(muk, "audio");
    _0x13315c.writeFileSync(rane, buffimg);
    gem = rane;
    ran = _0x33de84(".mp3");
    _0xce8472("ffmpeg -i " + gem + " -filter:a \"atempo=1.6,asetrate=22100\" " + ran, (_0x4f89c8, _0xdd2e95, _0x3d28a5) => {
      _0x529b3b(gem);
      if (_0x4f89c8) {
        return _0x2cead0("Erro!");
      }
      hah = _0x13315c.readFileSync(ran);
      const _0x23b044 = {
        audio: hah,
        mimetype: "audio/mpeg",
        ptt: true
      };
      const _0x57112a = {
        quoted: _0x1b21af
      };
      _0x1192c0.sendMessage(_0x2d4dea, _0x23b044, _0x57112a);
      _0x529b3b(ran);
    });
    return true;
  }
}, {
  'name': "grave",
  'aliases': [],
  'category': "converter",
  'description': "Adiciona efeito grave ao áudio",
  'longDescription': "Aplica efeito grave simples ao áudio selecionado",
  'usage': "grave [marcar áudio]",
  'example': "grave",
  'menu': "converter",
  'menuSection': "Áudio",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x205511,
      info: _0x4d17d1,
      isQuotedAudio: _0x26a5f8
    }) => {
      if (!(_0x205511 && !_0x4d17d1.message.imageMessage && !_0x4d17d1.message.videoMessage || _0x26a5f8)) {
        const _0x709c28 = {
          success: false,
          message: "Marque o áudio.."
        };
        return _0x709c28;
      }
      const _0x5d8caf = {
        success: true
      };
      return _0x5d8caf;
    }
  },
  'execute': async ({
    conn: _0x48f965,
    info: _0x43f04a,
    from: _0x566f8b,
    Res_Aguarde: _0x47a90a,
    isMedia: _0x4f0411,
    isQuotedAudio: _0x2c37a8,
    reply: _0x25a477,
    getRandom: _0x40baf9,
    getExtension: _0x51dc3c,
    getFileBuffer: _0x90d69f,
    fs: _0x1f51be,
    exec: _0x4da7b0,
    DLT_FL: _0x3d8a4f
  }) => {
    _0x25a477(_0x47a90a);
    muk = _0x2c37a8 ? _0x43f04a.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x43f04a.message.audioMessage;
    rane = _0x40baf9('.' + (await _0x51dc3c(muk.mimetype)));
    buffimg = await _0x90d69f(muk, "audio");
    _0x1f51be.writeFileSync(rane, buffimg);
    gem = rane;
    ran = _0x40baf9(".mp3");
    _0x4da7b0("ffmpeg -i " + gem + " -filter:a \"atempo=0.9,asetrate=44100\" " + ran, (_0x1edce4, _0x54ef0d, _0x10786f) => {
      _0x3d8a4f(gem);
      if (_0x1edce4) {
        return _0x25a477("Erro!");
      }
      hah = _0x1f51be.readFileSync(ran);
      const _0x3f663a = {
        audio: hah,
        mimetype: "audio/mpeg",
        ptt: true
      };
      const _0x2af0d6 = {
        quoted: _0x43f04a
      };
      _0x48f965.sendMessage(_0x566f8b, _0x3f663a, _0x2af0d6);
      _0x3d8a4f(ran);
    });
    return true;
  }
}, {
  'name': "adolesc",
  'aliases': ["vozmenino"],
  'category': "converter",
  'description': "Voz de adolescente",
  'longDescription': "Aplica efeito de voz de adolescente/menino ao áudio selecionado",
  'usage': "adolesc [marcar áudio]",
  'example': "adolesc",
  'menu': "converter",
  'menuSection': "Áudio",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x48bb1f,
      info: _0x3a2d4d,
      isQuotedAudio: _0x1e731b
    }) => {
      if (!(_0x48bb1f && !_0x3a2d4d.message.imageMessage && !_0x3a2d4d.message.videoMessage || _0x1e731b)) {
        const _0x573028 = {
          success: false,
          message: "Marque o áudio.."
        };
        return _0x573028;
      }
      const _0x3643a2 = {
        success: true
      };
      return _0x3643a2;
    }
  },
  'execute': async ({
    conn: _0x517731,
    info: _0x55102b,
    from: _0xcfe543,
    Res_Aguarde: _0x5b7c3a,
    isMedia: _0x28688c,
    isQuotedAudio: _0x5a81e1,
    reply: _0x66e35d,
    getRandom: _0x766d9d,
    getExtension: _0x158d7b,
    getFileBuffer: _0xc75e7e,
    fs: _0x56880e,
    exec: _0x2d37ab,
    DLT_FL: _0x5f0284
  }) => {
    _0x66e35d(_0x5b7c3a);
    muk = _0x5a81e1 ? _0x55102b.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x55102b.message.audioMessage;
    rane = _0x766d9d('.' + (await _0x158d7b(muk.mimetype)));
    buffimg = await _0xc75e7e(muk, "audio");
    _0x56880e.writeFileSync(rane, buffimg);
    gem = rane;
    ran = _0x766d9d(".mp3");
    _0x2d37ab("ffmpeg -i " + gem + " -filter:a atempo=1.06,asetrate=44100*1.25 " + ran, (_0x3dbfb7, _0x27a956, _0x5c5279) => {
      _0x5f0284(gem);
      if (_0x3dbfb7) {
        return _0x66e35d("Erro!");
      }
      hah = _0x56880e.readFileSync(ran);
      const _0x3b1a7e = {
        audio: hah,
        mimetype: "audio/mpeg",
        ptt: true
      };
      const _0x551408 = {
        quoted: _0x55102b
      };
      _0x517731.sendMessage(_0xcfe543, _0x3b1a7e, _0x551408);
      _0x5f0284(ran);
    });
    return true;
  }
}, {
  'name': "tomp3",
  'aliases': [],
  'category': "converter",
  'description': "Converte vídeo para MP3",
  'longDescription': "Transforma um vídeo em arquivo de áudio MP3",
  'usage': "tomp3 [marcar vídeo]",
  'example': "tomp3",
  'menu': "converter",
  'menuSection': "Mídia",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x11c3d1,
      info: _0xc2ef43,
      isQuotedVideo: _0x22fbab
    }) => {
      if (!(_0x11c3d1 && !_0xc2ef43.message.imageMessage || _0x22fbab)) {
        const _0x26c281 = {
          success: false,
          message: "Marque o vídeo para transformar em áudio por favor.."
        };
        return _0x26c281;
      }
      const _0x44c09b = {
        success: true
      };
      return _0x44c09b;
    }
  },
  'execute': async ({
    conn: _0x4bda7a,
    info: _0x2b66ee,
    from: _0x3f61b9,
    Res_Aguarde: _0x40c71c,
    isMedia: _0x4bd2b8,
    isQuotedVideo: _0x5989e0,
    quotedVideo: _0x5e7738,
    reply: _0x2585ce,
    getRandom: _0x1dedb9,
    getExtension: _0x360e44,
    getFileBuffer: _0x5f5b65,
    isQuotedImage: _0x546a8f,
    fs: _0x26fb13,
    exec: _0x2982d2,
    DLT_FL: _0x16b650
  }) => {
    post = _0x546a8f ? JSON.parse(JSON.stringify(_0x2b66ee).replace("quotedM", 'm')).message.extendedTextMessage.contextInfo.message.imageMessage : _0x2b66ee.message.videoMessage;
    _0x2585ce(_0x40c71c);
    encmedia = _0x5e7738;
    rane = _0x1dedb9('.' + (await _0x360e44(encmedia.mimetype)));
    buffimg = await _0x5f5b65(encmedia, "video");
    _0x26fb13.writeFileSync(rane, buffimg);
    media = rane;
    ran = _0x1dedb9(".mp4");
    _0x2982d2("ffmpeg -i " + media + " " + ran, _0x214ad1 => {
      _0x16b650(media);
      if (_0x214ad1) {
        return _0x2585ce("❌ Falha ao converter vídeo para mp3 ❌");
      }
      buffer = _0x26fb13.readFileSync(ran);
      const _0x284f7a = {
        audio: buffer,
        mimetype: "audio/mpeg"
      };
      const _0x447dbe = {
        quoted: _0x2b66ee
      };
      _0x4bda7a.sendMessage(_0x3f61b9, _0x284f7a, _0x447dbe);
      _0x16b650(ran);
    });
    return true;
  }
}, {
  'name': "bass3",
  'aliases': [],
  'category': "converter",
  'description': "Efeito bass nível 3",
  'longDescription': "Aplica efeito bass mais intenso ao áudio selecionado",
  'usage': "bass3 [marcar áudio]",
  'example': "bass3",
  'menu': "converter",
  'menuSection': "Áudio",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x45f92d,
      info: _0x18f6f4,
      isQuotedAudio: _0x303479
    }) => {
      if (!(_0x45f92d && !_0x18f6f4.message.imageMessage && !_0x18f6f4.message.videoMessage || _0x303479)) {
        const _0x55cb3d = {
          success: false,
          message: "Marque o áudio.."
        };
        return _0x55cb3d;
      }
      const _0x2f7c9f = {
        success: true
      };
      return _0x2f7c9f;
    }
  },
  'execute': async ({
    conn: _0x33c1a2,
    info: _0x1bcd80,
    from: _0x2a00cf,
    Res_Aguarde: _0x1e7127,
    isMedia: _0x2437e2,
    isQuotedAudio: _0x214e0b,
    reply: _0x278187,
    getRandom: _0xeb4061,
    getExtension: _0x1b97ed,
    getFileBuffer: _0x58b9b0,
    fs: _0x131886,
    exec: _0xabdc99,
    DLT_FL: _0x33d486
  }) => {
    _0x278187(_0x1e7127);
    muk = _0x214e0b ? _0x1bcd80.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x1bcd80.message.audioMessage;
    rane = _0xeb4061('.' + (await _0x1b97ed(muk.mimetype)));
    buffimg = await _0x58b9b0(muk, "audio");
    _0x131886.writeFileSync(rane, buffimg);
    gem = rane;
    ran = _0xeb4061(".mp3");
    _0xabdc99("ffmpeg -i " + gem + " -af equalizer=f=20:width_type=o:width=2:g=15 " + ran, (_0x397cec, _0x54b7a6, _0x15f91d) => {
      _0x33d486(gem);
      if (_0x397cec) {
        return _0x278187("Erro!");
      }
      hah = _0x131886.readFileSync(ran);
      const _0x10f699 = {
        audio: hah,
        mimetype: "audio/mpeg",
        ptt: true
      };
      const _0x182077 = {
        quoted: _0x1bcd80
      };
      _0x33c1a2.sendMessage(_0x2a00cf, _0x10f699, _0x182077);
      _0x33d486(ran);
    });
    return true;
  }
}, {
  'name': "bass",
  'aliases': [],
  'category': "converter",
  'description': "Efeito bass",
  'longDescription': "Aplica efeito bass simples ao áudio selecionado",
  'usage': "bass [marcar áudio]",
  'example': "bass",
  'menu': "converter",
  'menuSection': "Áudio",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x40e0fb,
      info: _0x55957c,
      isQuotedAudio: _0x2b592c
    }) => {
      if (!(_0x40e0fb && !_0x55957c.message.imageMessage && !_0x55957c.message.videoMessage || _0x2b592c)) {
        const _0x18e5ba = {
          success: false,
          message: "Marque o áudio.."
        };
        return _0x18e5ba;
      }
      const _0x382079 = {
        success: true
      };
      return _0x382079;
    }
  },
  'execute': async ({
    conn: _0x35f734,
    info: _0x18f7c2,
    from: _0x33636f,
    Res_Aguarde: _0x9a7c8d,
    isMedia: _0x49bee,
    isQuotedAudio: _0x41aa5a,
    reply: _0x4e5cfa,
    getRandom: _0x13b2a7,
    getExtension: _0x2b8aed,
    getFileBuffer: _0x398e34,
    fs: _0x4eccfd,
    exec: _0x5c5c76,
    DLT_FL: _0x3c7f52
  }) => {
    _0x4e5cfa(_0x9a7c8d);
    muk = _0x41aa5a ? _0x18f7c2.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x18f7c2.message.audioMessage;
    rane = _0x13b2a7('.' + (await _0x2b8aed(muk.mimetype)));
    buffimg = await _0x398e34(muk, "audio");
    _0x4eccfd.writeFileSync(rane, buffimg);
    gem = rane;
    ran = _0x13b2a7(".mp3");
    _0x5c5c76("ffmpeg -i " + gem + " -af equalizer=f=20:width_type=o:width=2:g=15 " + ran, (_0x2118d0, _0x320b19, _0x198846) => {
      _0x3c7f52(gem);
      if (_0x2118d0) {
        return _0x4e5cfa("Erro!");
      }
      hah = _0x4eccfd.readFileSync(ran);
      const _0x47ce35 = {
        audio: hah,
        mimetype: "audio/mpeg",
        ptt: true
      };
      const _0x1cf105 = {
        quoted: _0x18f7c2
      };
      _0x35f734.sendMessage(_0x33636f, _0x47ce35, _0x1cf105);
      _0x3c7f52(ran);
    });
    return true;
  }
}, {
  'name': "bass2",
  'aliases': [],
  'category': "converter",
  'description': "Efeito bass nível 2",
  'longDescription': "Aplica efeito bass médio ao áudio selecionado",
  'usage': "bass2 [marcar áudio]",
  'example': "bass2",
  'menu': "converter",
  'menuSection': "Áudio",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x51dd08,
      info: _0x465158,
      isQuotedAudio: _0xa31279
    }) => {
      if (!(_0x51dd08 && !_0x465158.message.imageMessage && !_0x465158.message.videoMessage || _0xa31279)) {
        const _0x4cece4 = {
          success: false,
          message: "Marque o áudio.."
        };
        return _0x4cece4;
      }
      const _0x3b1816 = {
        success: true
      };
      return _0x3b1816;
    }
  },
  'execute': async ({
    conn: _0x303d9d,
    info: _0x4d5ee2,
    from: _0x214e1a,
    Res_Aguarde: _0x31e447,
    isMedia: _0x52ff04,
    isQuotedAudio: _0x488565,
    reply: _0x5ec4e8,
    getRandom: _0x1c707c,
    getExtension: _0x835ac2,
    getFileBuffer: _0x2e8fe1,
    fs: _0x1709aa,
    exec: _0x5ea2c5,
    DLT_FL: _0xd1015a
  }) => {
    _0x5ec4e8(_0x31e447);
    muk = _0x488565 ? _0x4d5ee2.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x4d5ee2.message.audioMessage;
    rane = _0x1c707c('.' + (await _0x835ac2(muk.mimetype)));
    buffimg = await _0x2e8fe1(muk, "audio");
    _0x1709aa.writeFileSync(rane, buffimg);
    gem = rane;
    ran = _0x1c707c(".mp3");
    _0x5ea2c5("ffmpeg -i " + gem + " -af equalizer=f=94:width_type=o:width=2:g=30 " + ran, (_0x5dff87, _0x20315e, _0xc45928) => {
      _0xd1015a(gem);
      if (_0x5dff87) {
        return _0x5ec4e8("Erro!");
      }
      hah = _0x1709aa.readFileSync(ran);
      const _0x4afd2b = {
        audio: hah,
        mimetype: "audio/mpeg",
        ptt: true
      };
      const _0x5ad265 = {
        quoted: _0x4d5ee2
      };
      _0x303d9d.sendMessage(_0x214e1a, _0x4afd2b, _0x5ad265);
      _0xd1015a(ran);
    });
    return true;
  }
}, {
  'name': "estourar",
  'aliases': [],
  'category': "converter",
  'description': "Efeito áudio estourado",
  'longDescription': "Aplica efeito de áudio estourado/saturado ao áudio selecionado",
  'usage': "estourar [marcar áudio]",
  'example': "estourar",
  'menu': "converter",
  'menuSection': "Áudio",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x3ee341,
      info: _0x1f0fb0,
      isQuotedAudio: _0x178bec
    }) => {
      if (!(_0x3ee341 && !_0x1f0fb0.message.imageMessage && !_0x1f0fb0.message.videoMessage || _0x178bec)) {
        const _0x4a317f = {
          success: false,
          message: "Marque o áudio.."
        };
        return _0x4a317f;
      }
      const _0x5131b8 = {
        success: true
      };
      return _0x5131b8;
    }
  },
  'execute': async ({
    conn: _0x431cff,
    info: _0xd5f733,
    from: _0x514eeb,
    Res_Aguarde: _0x1698c9,
    isMedia: _0x4e1082,
    isQuotedAudio: _0x18e109,
    reply: _0x2c89e2,
    getRandom: _0x20cf20,
    getExtension: _0x522df5,
    getFileBuffer: _0x5a9411,
    fs: _0x4dcbe8,
    exec: _0xb7f8c8,
    DLT_FL: _0x5ae64d
  }) => {
    _0x2c89e2(_0x1698c9);
    muk = _0x18e109 ? _0xd5f733.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0xd5f733.message.audioMessage;
    rane = _0x20cf20('.' + (await _0x522df5(muk.mimetype)));
    buffimg = await _0x5a9411(muk, "audio");
    _0x4dcbe8.writeFileSync(rane, buffimg);
    gem = rane;
    ran = _0x20cf20(".mp3");
    _0xb7f8c8("ffmpeg -i " + gem + " -af equalizer=f=90:width_type=o:width=2:g=30 " + ran, (_0x38ecfa, _0x3e6b62, _0x17d088) => {
      _0x5ae64d(gem);
      if (_0x38ecfa) {
        return _0x2c89e2("Erro!");
      }
      hah = _0x4dcbe8.readFileSync(ran);
      const _0x3f424b = {
        audio: hah,
        mimetype: "audio/mpeg",
        ptt: true
      };
      const _0x176b88 = {
        quoted: _0xd5f733
      };
      _0x431cff.sendMessage(_0x514eeb, _0x3f424b, _0x176b88);
      _0x5ae64d(ran);
    });
    return true;
  }
}, {
  'name': "fast",
  'aliases': ["audiorapido"],
  'category': "converter",
  'description': "Aumenta a velocidade do áudio",
  'longDescription': "Converte um áudio para uma versão mais rápida",
  'usage': "fast [marcar áudio]",
  'example': "fast",
  'menu': "converter",
  'menuSection': "Áudio",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x5b23a8,
      info: _0xb0bd40,
      isQuotedAudio: _0x26ecf3
    }) => {
      if (!(_0x5b23a8 && !_0xb0bd40.message.imageMessage && !_0xb0bd40.message.videoMessage || _0x26ecf3)) {
        const _0x556771 = {
          success: false,
          message: "Marque o áudio..."
        };
        return _0x556771;
      }
      const _0x3fa0bd = {
        success: true
      };
      return _0x3fa0bd;
    }
  },
  'execute': async ({
    conn: _0x37948d,
    info: _0x1dd064,
    from: _0x3d8bad,
    Res_Aguarde: _0x52dbff,
    isMedia: _0x3993f8,
    isQuotedAudio: _0x408534,
    reply: _0x407c19,
    getRandom: _0x5d029b,
    getExtension: _0x257180,
    getFileBuffer: _0x59ad75,
    fs: _0x55066f,
    exec: _0x274520,
    DLT_FL: _0x20f81a
  }) => {
    _0x407c19(_0x52dbff);
    muk = _0x408534 ? _0x1dd064.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x1dd064.message.audioMessage;
    rane = _0x5d029b('.' + (await _0x257180(muk.mimetype)));
    buffimg = await _0x59ad75(muk, "audio");
    _0x55066f.writeFileSync(rane, buffimg);
    gem = rane;
    ran = _0x5d029b(".mp3");
    _0x274520("ffmpeg -i " + gem + " -filter:a \"atempo=0.9,asetrate=95100\" " + ran, (_0x1a36cc, _0x2027e0, _0xd183d3) => {
      _0x20f81a(gem);
      if (_0x1a36cc) {
        return _0x407c19("Erro");
      }
      hah = _0x55066f.readFileSync(ran);
      const _0x40e76e = {
        audio: hah,
        mimetype: "audio/mpeg",
        ptt: true
      };
      const _0x502852 = {
        quoted: _0x1dd064
      };
      _0x37948d.sendMessage(_0x3d8bad, _0x40e76e, _0x502852);
      _0x20f81a(ran);
    });
    return true;
  }
}, {
  'name': "esquilo",
  'aliases': [],
  'category': "converter",
  'description': "Efeito de esquilo no áudio",
  'longDescription': "Aplica efeito de voz de esquilo no áudio selecionado",
  'usage': "esquilo [marcar áudio]",
  'example': "esquilo",
  'menu': "converter",
  'menuSection': "Áudio",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x365769,
      info: _0x2e70bd,
      isQuotedAudio: _0x567da7
    }) => {
      if (!(_0x365769 && !_0x2e70bd.message.imageMessage && !_0x2e70bd.message.videoMessage || _0x567da7)) {
        const _0x4ac996 = {
          success: false,
          message: "Marque o áudio..."
        };
        return _0x4ac996;
      }
      const _0x108d1d = {
        success: true
      };
      return _0x108d1d;
    }
  },
  'execute': async ({
    conn: _0x4d4b70,
    info: _0x19f916,
    from: _0x23ef9e,
    Res_Aguarde: _0x1e30c1,
    isMedia: _0xccb1f,
    isQuotedAudio: _0x1c3729,
    reply: _0x22545d,
    getRandom: _0x1c5ecc,
    getExtension: _0x5dbc21,
    getFileBuffer: _0xf95003,
    fs: _0x3e9267,
    exec: _0x22f3cb,
    DLT_FL: _0x43b93c
  }) => {
    _0x22545d(_0x1e30c1);
    muk = _0x1c3729 ? _0x19f916.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x19f916.message.audioMessage;
    rane = _0x1c5ecc('.' + (await _0x5dbc21(muk.mimetype)));
    buffimg = await _0xf95003(muk, "audio");
    _0x3e9267.writeFileSync(rane, buffimg);
    gem = rane;
    ran = _0x1c5ecc(".mp3");
    _0x22f3cb("ffmpeg -i " + gem + " -filter:a \"atempo=0.7,asetrate=65100\" " + ran, (_0x20d448, _0x4c4592, _0xfbd024) => {
      _0x43b93c(gem);
      if (_0x20d448) {
        return _0x22545d("Erro!");
      }
      hah = _0x3e9267.readFileSync(ran);
      const _0x247a46 = {
        audio: hah,
        mimetype: "audio/mpeg",
        ptt: true
      };
      const _0x3722cd = {
        quoted: _0x19f916
      };
      _0x4d4b70.sendMessage(_0x23ef9e, _0x247a46, _0x3722cd);
      _0x43b93c(ran);
    });
    return true;
  }
}, {
  'name': "slow",
  'aliases': ["audiolento"],
  'category': "converter",
  'description': "Diminui a velocidade do áudio",
  'longDescription': "Converte um áudio para uma versão mais lenta",
  'usage': "slow [marcar áudio]",
  'example': "slow",
  'menu': "converter",
  'menuSection': "Áudio",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isMedia: _0x18598b,
      info: _0x3cc17c,
      isQuotedAudio: _0x2b5174
    }) => {
      if (!(_0x18598b && !_0x3cc17c.message.imageMessage && !_0x3cc17c.message.videoMessage || _0x2b5174)) {
        const _0x31ebe6 = {
          success: false,
          message: "Marque o áudio.."
        };
        return _0x31ebe6;
      }
      const _0x1960f0 = {
        success: true
      };
      return _0x1960f0;
    }
  },
  'execute': async ({
    conn: _0x577870,
    info: _0x3c650a,
    from: _0x20232d,
    Res_Aguarde: _0x41dcff,
    isMedia: _0x38cdab,
    isQuotedAudio: _0xd6377,
    reply: _0x117d48,
    getRandom: _0x3e97b4,
    getExtension: _0x101d82,
    getFileBuffer: _0x47a366,
    fs: _0x454fe2,
    exec: _0x41cb5a,
    DLT_FL: _0x5a2fe9
  }) => {
    _0x117d48(_0x41dcff);
    muk = _0xd6377 ? _0x3c650a.message.extendedTextMessage.contextInfo.quotedMessage.audioMessage : _0x3c650a.message.audioMessage;
    rane = _0x3e97b4('.' + (await _0x101d82(muk.mimetype)));
    buffimg = await _0x47a366(muk, "audio");
    _0x454fe2.writeFileSync(rane, buffimg);
    gem = rane;
    ran = _0x3e97b4(".mp3");
    _0x41cb5a("ffmpeg -i " + gem + " -filter:a \"atempo=0.9,asetrate=44100\" " + ran, (_0x4e362c, _0x2879c7, _0x3793d1) => {
      _0x5a2fe9(gem);
      if (_0x4e362c) {
        return _0x117d48("Erro!");
      }
      hah = _0x454fe2.readFileSync(ran);
      const _0x5c9458 = {
        audio: hah,
        mimetype: "audio/mpeg",
        ptt: true
      };
      const _0x2c073c = {
        quoted: _0x3c650a
      };
      _0x577870.sendMessage(_0x20232d, _0x5c9458, _0x2c073c);
      _0x5a2fe9(ran);
    });
    return true;
  }
}, {
  'name': "togif",
  'aliases': [],
  'category': "converter",
  'description': "Converte figurinha para GIF",
  'longDescription': "Transforma uma figurinha animada em formato GIF",
  'usage': "togif [marcar figurinha]",
  'example': "togif",
  'menu': "converter",
  'menuSection': "Stickers",
  'permissions': {},
  'execute': async ({
    conn: _0x27ddd0,
    info: _0x5cedbe,
    from: _0x171608,
    reply: _0x4a638d,
    getFileBuffer: _0x35423b,
    webp_mp4: _0xc787d5,
    DLT_FL: _0x3266be,
    quotedSticker: _0x2accac,
    isQuotedSticker: _0x427a4b
  }) => {
    try {
      if (!_0x427a4b || !_0x2accac) {
        return {
          'success': false,
          'message': "*[ ❗ ] Marque uma figurinha animada para converter!*"
        };
      }
      _0x4a638d("*「 ❗ 」 Aguarde, convertendo a figu em gif...*");
      const _0x121b6c = await _0x35423b(_0x2accac, "sticker");
      const _0x47d9cc = {
        success: false,
        message: "*[ ❗ ] Erro ao obter o buffer da figurinha!*"
      };
      if (!_0x121b6c) {
        return _0x47d9cc;
      }
      const _0x1d3b70 = await _0xc787d5(_0x121b6c);
      if (!_0x1d3b70) {
        _0x3266be(_0x121b6c);
        const _0x1444d8 = {
          success: false,
          message: "*[ ❗ ] Erro ao converter a figurinha!*"
        };
        return _0x1444d8;
      }
      const _0xfe82b0 = {
        url: _0x1d3b70
      };
      const _0x27c393 = {
        video: _0xfe82b0,
        gifPlayback: true,
        fileName: "sticker.gif",
        caption: "*✅ Figurinha convertida para GIF!*"
      };
      const _0x53ecac = {
        quoted: _0x5cedbe
      };
      await _0x27ddd0.sendMessage(_0x171608, _0x27c393, _0x53ecac);
      _0x3266be(_0x121b6c);
      const _0x3f86b3 = {
        success: true
      };
      return _0x3f86b3;
    } catch (_0x2de7c9) {
      console.log("Erro no comando togif:", _0x2de7c9);
      const _0x2d3386 = {
        success: false,
        message: "*[ ❗ ] Erro interno ao converter a figurinha!*"
      };
      return _0x2d3386;
    }
  }
}, {
  'name': "tomp4",
  'aliases': ["tovideo"],
  'category': "converter",
  'description': "Converte figurinha para vídeo",
  'longDescription': "Transforma uma figurinha animada em formato de vídeo MP4",
  'usage': "tomp4 [marcar figurinha]",
  'example': "tomp4",
  'menu': "converter",
  'menuSection': "Stickers",
  'permissions': {},
  'requirements': {
    'customRequirement': ({
      isQuotedSticker: _0x24232b
    }) => {
      if (!_0x24232b) {
        const _0x14a3ab = {
          success: false,
          message: "*[ ❗ ] Marque uma figurinha animada!*"
        };
        return _0x14a3ab;
      }
      const _0x1614ac = {
        success: true
      };
      return _0x1614ac;
    }
  },
  'execute': async ({
    conn: _0x282a8a,
    info: _0x204880,
    from: _0x4c1798,
    reply: _0x40ac53,
    getFileBuffer: _0x4a17c2,
    webp_mp4: _0x5510b5
  }) => {
    try {
      _0x40ac53("*「 ❗ 」 Aguarde, convertendo para vídeo...*");
      const _0x5c9834 = await _0x4a17c2(_0x204880.message.extendedTextMessage.contextInfo.quotedMessage.stickerMessage, "sticker");
      const _0x90b036 = await _0x5510b5(_0x5c9834);
      const _0x184a63 = {
        url: _0x90b036
      };
      const _0x1901b2 = {
        video: _0x184a63,
        caption: "✅ Convertido com sucesso!"
      };
      const _0x1cb834 = {
        quoted: _0x204880
      };
      await _0x282a8a.sendMessage(_0x4c1798, _0x1901b2, _0x1cb834);
      return true;
    } catch (_0x3640cb) {
      console.error(_0x3640cb);
      const _0x2ff935 = {
        success: false,
        message: "❌ Erro ao converter! Certifique-se que é uma figurinha animada."
      };
      return _0x2ff935;
    }
  }
}, {
  'name': "legenda",
  'aliases': [],
  'category': "converter",
  'description': "Adiciona legenda na imagem",
  'longDescription': "Adiciona texto na parte superior e inferior de uma imagem no estilo meme.",
  'usage': "legenda texto1/texto2",
  'example': "legenda Sad/Demais",
  'menu': "edits",
  'menuSection': "Imagens",
  'permissions': {},
  'requirements': {
    'needArgs': true,
    'minArgs': 0x1,
    'argsError': "Exemplo: !legenda Sad/Demais",
    'customRequirement': ({
      q: _0x27806a,
      isMedia: _0x2b6efe,
      info: _0x195e09,
      isQuotedImage: _0x1ec0e0
    }) => {
      if (!_0x27806a.includes('/')) {
        const _0x6a5ace = {
          success: false,
          message: "Cade a / mano?\nExemplo: !legenda Sad/Demais"
        };
        return _0x6a5ace;
      }
      if (!(_0x2b6efe && !_0x195e09.message.videoMessage || _0x1ec0e0)) {
        const _0x24627d = {
          success: false,
          message: "Marque uma imagem...!"
        };
        return _0x24627d;
      }
      const _0x208188 = {
        success: true
      };
      return _0x208188;
    }
  },
  'execute': async ({
    conn: _0x1dbc6d,
    info: _0x373452,
    from: _0x250312,
    q: _0xc596ea,
    reply: _0x5c1ad3,
    isMedia: _0x21b483,
    isQuotedImage: _0x398c8c,
    getFileBuffer: _0x5b2aff,
    upload: _0x184cc6,
    acessAPI: _0x2b06ee
  }) => {
    try {
      var [_0x417f2a, _0x63bed7] = _0xc596ea.split('/');
      boij = _0x398c8c ? JSON.parse(JSON.stringify(_0x373452).replace("quotedM", 'm')).message.extendedTextMessage.contextInfo.message.imageMessage : _0x373452.message.imageMessage;
      owgi = await _0x5b2aff(boij, "image");
      res = await _0x184cc6(owgi);
      const _0xe1ff9b = {
        quoted: _0x373452
      };
      await _0x1dbc6d.sendMessage(_0x250312, {
        'image': {
          'url': _0x2b06ee.legenda(res.data.view_url, _0x417f2a, _0x63bed7)
        }
      }, _0xe1ff9b)["catch"](_0x4f3a09 => {
        return _0x5c1ad3("Erro..");
      });
      return true;
    } catch (_0x180abf) {
      const _0x3812ad = {
        success: false,
        message: "ERROR!!"
      };
      return _0x3812ad;
    }
  }
}, {
  'name': "convite",
  'aliases': [],
  'category': "grupo",
  'description': "Envia convite para o dono do bot",
  'longDescription': "Envia um convite de grupo para que o dono do bot possa aceitar ou recusar.",
  'usage': "convite [link do grupo]",
  'example': "convite https://chat.whatsapp.com/abcdefg",
  'menu': "grupo",
  'menuSection': "Convites",
  'permissions': {},
  'requirements': {
    'needArgs': true,
    'minArgs': 0x1,
    'argsError': "Cadê o link do grupo que você deseja que eu entre?",
    'customRequirement': ({
      budy: _0x408579
    }) => {
      const _0x3db254 = {
        zEOEP: "chat.whatsapp.com"
      };
      _0x3db254.MgMYY = "Cadê o link do grupo que você deseja que eu entre?";
      if (!_0x408579.includes("chat.whatsapp.com")) {
        const _0x283855 = {
          success: false,
          message: _0x3db254.MgMYY
        };
        return _0x283855;
      }
      const _0x5dfd36 = {
        success: true
      };
      return _0x5dfd36;
    }
  },
  'execute': async ({
    conn: _0x3c13b1,
    from: _0x288c1d,
    sender: _0x6327f9,
    args: _0x52ef62,
    prefix: _0x4f3e66,
    reply: _0x40eb9a,
    sleep: _0x31e25a
  }) => {
    cnvt = _0x52ef62.join(" ");
    _0x40eb9a("O convite para o bot entrar em seu grupo, foi enviado, espere o dono aceitar..");
    await _0x31e25a(1000);
    _0x40eb9a("Use " + _0x4f3e66 + "entrar " + cnvt + " ou " + _0x4f3e66 + "recusar " + _0x6327f9 + ", alguem enviou convite para entrar no grupo dele.");
    return true;
  }
}, {
  'name': "recusar",
  'aliases': [],
  'category': "dono",
  'description': "Recusa convite de grupo",
  'longDescription': "Permite que o dono do bot recuse um convite para entrar em um grupo.",
  'usage': "recusar @usuario",
  'example': "recusar @usuario",
  'menu': "dono",
  'menuSection': "Convites",
  'permissions': _0x1e25d6,
  'requirements': _0x4f06d9,
  'execute': async ({
    conn: _0x9064a2,
    q: _0x418227,
    Res_SoDono: _0x17100b,
    SoDono: _0x445392
  }) => {
    const _0x987028 = {
      success: false,
      message: _0x17100b
    };
    if (!_0x445392) {
      return _0x987028;
    }
    const _0x2346f2 = {
      text: "Olá Amigo(a), sinto muito dizer, mas seu convite foi recusado 🥺"
    };
    await _0x9064a2.sendMessage(_0x418227, _0x2346f2);
    return true;
  }
}, {
  'name': "entrar",
  'aliases': ["join"],
  'category': "dono",
  'description': "Aceita convite para entrar em grupo",
  'longDescription': "Permite que o dono do bot aceite um convite para entrar em um grupo através do link.",
  'usage': "entrar [link]",
  'example': "entrar https://chat.whatsapp.com/abcdefg",
  'menu': "dono",
  'menuSection': "Convites",
  'permissions': _0x2f01e2,
  'requirements': _0x428e6c,
  'execute': async ({
    conn: _0x348876,
    q: _0x50915e,
    Res_SoDono: _0xa56653,
    SoDono: _0x4004ae,
    reply: _0x513c34
  }) => {
    const _0x17d4d1 = {
      success: false,
      message: _0xa56653
    };
    if (!_0x4004ae) {
      return _0x17d4d1;
    }
    var _0x22a2ed = _0x50915e.trim();
    const _0x43b98a = {
      success: false,
      message: "Insira um link de convite ao lado do comando."
    };
    if (!_0x22a2ed) {
      return _0x43b98a;
    }
    if (_0x22a2ed.includes("chat.whatsapp.com/")) {
      link = _0x22a2ed.split("app.com/")[1];
      try {
        await _0x348876.groupAcceptInvite('' + link);
        return true;
      } catch (_0x38aea9) {
        if (String(_0x38aea9).includes("resource-limit")) {
          const _0x2c2d8a = {
            success: false,
            message: "O grupo já está com o alcance de 257 membros."
          };
          return _0x2c2d8a;
        }
        if (String(_0x38aea9).includes("not-authorized")) {
          const _0x212a41 = {
            success: false,
            message: "Não foi possível entrar no grupo.\nMotivo: Banimento."
          };
          return _0x212a41;
        }
        const _0x3d1dca = {
          success: false,
          message: "Erro ao entrar no grupo."
        };
        return _0x3d1dca;
      }
    } else {
      const _0x46a3e3 = {
        success: false,
        message: "Ops, verifique o link que você inseriu."
      };
      return _0x46a3e3;
    }
  }
}];
module.exports = commands;
